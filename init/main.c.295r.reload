
;; Function fork (fork, funcdef_no=1, decl_uid=1105, cgraph_uid=2, symbol_order=1)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=20, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =a  (1) 0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 5:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 19:  (0) =rm  (1) 0 {*negsi_1}
      Creating newreg=92 from oldreg=88, assigning class GENERAL_REGS to r92
   19: {r92:SI=-r92:SI;clobber flags:CC;}
      REG_DEAD r88:SI
      REG_UNUSED flags:CC
      REG_EQUAL -[frame:SI-0x4]
    Inserting insn reload before:
   37: r92:SI=r88:SI
    Inserting insn reload after:
   38: r83:SI=r92:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2 3
EBB 4
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 30: point = 0, n_alt = -1
   Insn 29: point = 0, n_alt = -2
   Insn 25: point = 1, n_alt = -2
  BB 3
   Insn 32: point = 4, n_alt = -1
   Insn 13: point = 4, n_alt = 0
  BB 4
   Insn 22: point = 5, n_alt = 0
   Insn 21: point = 6, n_alt = 1
   Insn 20: point = 7, n_alt = 0
   Insn 38: point = 9, n_alt = -2
	Hard reg 2 is preferable by r92 with profit 1000
   Insn 19: point = 11, n_alt = 0
   Insn 37: point = 12, n_alt = -2
	Hard reg 2 is preferable by r92 with profit 1000
	Hard reg 0 is preferable by r92 with profit 1000
   Insn 18: point = 14, n_alt = 0
  BB 2
   Insn 11: point = 16, n_alt = -1
   Insn 10: point = 16, n_alt = 1
   Insn 5: point = 16, n_alt = 1
   Insn 7: point = 17, n_alt = 0
   Insn 34: point = 18, n_alt = -2
   Insn 6: point = 20, n_alt = 0
   Insn 35: point = 21, n_alt = 0
 r82: [8..21]
 r83: [6..9]
 r84: [2..5]
 r85: [0..1]
 r86: [16..18]
 r87: [19..20]
 r88: [13..14]
 r89: [6..7]
 r92: [10..12]
Compressing live ranges: from 22 to 16 - 72%
Ranges after the compression:
 r82: [6..15]
 r83: [4..7]
 r84: [2..3]
 r85: [0..1]
 r86: [12..13]
 r87: [14..15]
 r88: [10..11]
 r89: [4..5]
 r92: [8..9]

********** Assignment #1: **********

	 Assigning to 92 (cl=GENERAL_REGS, orig=88, freq=3000, tfirst=92, tfreq=3000)...
	   Assign 0 to reload r92 (freq=3000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=20, prev_offset=20)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=16)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 35
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 13
changing reg in insn 25
changing reg in insn 25
changing reg in insn 29
changing reg in insn 34
changing reg in insn 7
changing reg in insn 7
changing reg in insn 5
changing reg in insn 6
changing reg in insn 34
changing reg in insn 18
changing reg in insn 20
changing reg in insn 21
deleting insn with uid = 34.
deleting insn with uid = 37.
deleting insn with uid = 25.
deleting insn with uid = 29.
starting the processing of deferred insns
ending the processing of deferred insns


fork

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 17 [flags]
;;  ref usage 	r0={8d,7u} r1={2d,1u} r2={2d,1u} r7={1d,9u} r17={4d,1u} r19={1e} 
;;    total ref usage 37{17d,19u,1e} in 15{15 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 35 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 35 3 2 2 (parallel [
            (set (reg:SI 1 dx [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 35 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 2 7 2 (set (reg:SI 0 ax [87])
        (const_int 2 [0x2])) "init/main.c":40:8 75 {*movsi_internal}
     (nil))
(insn 7 6 5 2 (parallel [
            (set (reg:SI 0 ax [orig:86 __res ] [86])
                (asm_operands/v:SI ("int $0x80") ("=a") 0 [
                        (reg:SI 0 ax [orig:86 __res ] [86])
                    ]
                     [
                        (asm_input:SI ("0") init/main.c:40)
                    ]
                     [] init/main.c:40))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":40:8 -1
     (nil))
(insn 5 7 10 2 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [3 __res+0 S4 A32])
        (reg:SI 0 ax [orig:86 __res ] [86])) "init/main.c":40:8 75 {*movsi_internal}
     (nil))
(insn 10 5 11 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 12 [0xc])) [3 __res+0 S4 A32])
            (const_int 0 [0]))) "init/main.c":40:8 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 11 10 12 2 (set (pc)
        (if_then_else (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref 16)
            (pc))) "init/main.c":40:8 806 {*jcc}
     (nil)
 -> 16)
(note 12 11 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 32 3 (set (reg:SI 0 ax [orig:84 _2 ] [84])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [3 __res+0 S4 A32])) "init/main.c":40:8 75 {*movsi_internal}
     (nil))
(jump_insn 32 13 33 3 (set (pc)
        (label_ref 23)) "init/main.c":40:8 807 {jump}
     (nil)
 -> 23)
(barrier 33 32 16)
(code_label 16 33 17 4 2 (nil) [1 uses])
(note 17 16 18 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 4 (set (reg:SI 0 ax [88])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [3 __res+0 S4 A32])) "init/main.c":40:8 75 {*movsi_internal}
     (nil))
(insn 19 18 38 4 (parallel [
            (set (reg:SI 0 ax [88])
                (neg:SI (reg:SI 0 ax [88])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":40:8 575 {*negsi_1}
     (expr_list:REG_EQUAL (neg:SI (mem/c:SI (plus:SI (reg/f:SI 19 frame)
                    (const_int -4 [0xfffffffffffffffc])) [3 __res+0 S4 A32]))
        (nil)))
(insn 38 19 20 4 (set (reg:SI 2 cx [orig:83 _1 ] [83])
        (reg:SI 0 ax [88])) "init/main.c":40:8 75 {*movsi_internal}
     (nil))
(insn 20 38 21 4 (set (reg/f:SI 0 ax [89])
        (mem/u/c:SI (plus:SI (reg:SI 1 dx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("errno") [flags 0x40]  <var_decl 0x7f489bfdcb40 errno>)
                        ] UNSPEC_GOT))) [4  S4 A8])) "init/main.c":40:8 75 {*movsi_internal}
     (nil))
(insn 21 20 22 4 (set (mem/c:SI (reg/f:SI 0 ax [89]) [1 errno+0 S4 A32])
        (reg:SI 2 cx [orig:83 _1 ] [83])) "init/main.c":40:8 75 {*movsi_internal}
     (nil))
(insn 22 21 23 4 (set (reg:SI 0 ax [orig:84 _2 ] [84])
        (const_int -1 [0xffffffffffffffff])) "init/main.c":40:8 75 {*movsi_internal}
     (nil))
(code_label 23 22 24 5 3 (nil) [1 uses])
(note 24 23 30 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 30 24 36 5 (use (reg/i:SI 0 ax)) "init/main.c":40:8 -1
     (nil))
(note 36 30 0 NOTE_INSN_DELETED)

;; Function setup (setup, funcdef_no=2, decl_uid=1593, cgraph_uid=3, symbol_order=2)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=20, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
            2 Small class reload: reject+=3
          alt=0,overall=9,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 8:  (0) =a  (1) 0  (2) b
      Creating newreg=93 from oldreg=83, assigning class BREG to r93
    8: {r87:SI=asm_operands;clobber flags:CC;}
      REG_DEAD r83:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
   38: r93:SI=r83:SI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 20:  (0) =rm  (1) 0 {*negsi_1}
      Creating newreg=94 from oldreg=89, assigning class GENERAL_REGS to r94
   20: {r94:SI=-r94:SI;clobber flags:CC;}
      REG_DEAD r89:SI
      REG_UNUSED flags:CC
      REG_EQUAL -[frame:SI-0x4]
    Inserting insn reload before:
   39: r94:SI=r89:SI
    Inserting insn reload after:
   40: r84:SI=r94:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2 3
EBB 4
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 31: point = 0, n_alt = -1
   Insn 30: point = 0, n_alt = -2
   Insn 26: point = 1, n_alt = -2
  BB 3
   Insn 33: point = 4, n_alt = -1
   Insn 14: point = 4, n_alt = 0
  BB 4
   Insn 23: point = 5, n_alt = 0
   Insn 22: point = 6, n_alt = 1
   Insn 21: point = 7, n_alt = 0
   Insn 40: point = 9, n_alt = -2
	Hard reg 2 is preferable by r94 with profit 1000
   Insn 20: point = 11, n_alt = 0
   Insn 39: point = 12, n_alt = -2
	Hard reg 2 is preferable by r94 with profit 1000
	Hard reg 0 is preferable by r94 with profit 1000
   Insn 19: point = 14, n_alt = 0
  BB 2
   Insn 12: point = 16, n_alt = -1
   Insn 11: point = 16, n_alt = 1
   Insn 6: point = 16, n_alt = 1
   Insn 8: point = 17, n_alt = 0
   Insn 38: point = 19, n_alt = -2
	Hard reg 2 is preferable by r93 with profit 1000
   Insn 35: point = 21, n_alt = -2
   Insn 7: point = 23, n_alt = 0
   Insn 5: point = 24, n_alt = 0
   Insn 36: point = 25, n_alt = 0
 r82: [8..25]
 r83: [20..24]
 r84: [6..9]
 r85: [2..5]
 r86: [0..1]
 r87: [16..21]
 r88: [22..23]
 r89: [13..14]
 r90: [6..7]
 r93: [18..19]
 r94: [10..12]
Compressing live ranges: from 26 to 18 - 69%
Ranges after the compression:
 r82: [6..17]
 r83: [14..17]
 r84: [4..7]
 r85: [2..3]
 r86: [0..1]
 r87: [12..15]
 r88: [16..17]
 r89: [10..11]
 r90: [4..5]
 r93: [12..13]
 r94: [8..9]

********** Assignment #1: **********

	 Assigning to 93 (cl=BREG, orig=83, freq=2000, tfirst=93, tfreq=2000)...
	   Assign 3 to reload r93 (freq=2000)
	 Assigning to 94 (cl=GENERAL_REGS, orig=89, freq=3000, tfirst=94, tfreq=3000)...
	   Assign 0 to reload r94 (freq=3000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=24, prev_offset=20)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=16)
Can eliminate 19 to 6 (offset=-4, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=24, prev_offset=24)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=16)
Can eliminate 19 to 6 (offset=-4, prev_offset=0)
changing reg in insn 36
changing reg in insn 21
changing reg in insn 5
changing reg in insn 22
changing reg in insn 23
changing reg in insn 14
changing reg in insn 26
changing reg in insn 26
changing reg in insn 30
changing reg in insn 35
changing reg in insn 8
changing reg in insn 8
changing reg in insn 6
changing reg in insn 7
changing reg in insn 35
changing reg in insn 19
changing reg in insn 21
changing reg in insn 22
deleting insn with uid = 35.
deleting insn with uid = 39.
deleting insn with uid = 26.
deleting insn with uid = 30.
starting the processing of deferred insns
ending the processing of deferred insns


setup

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 17 [flags]
;;  ref usage 	r0={8d,7u} r1={2d,1u} r2={3d,2u} r3={1d,1u} r7={1d,10u} r17={4d,1u} r19={1e} 
;;    total ref usage 42{19d,22u,1e} in 17{17 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 36 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 36 3 2 2 (parallel [
            (set (reg:SI 1 dx [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 36 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 7 2 (set (reg:SI 2 cx [orig:83 BIOS.0_1 ] [83])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [5 BIOS+0 S4 A32])) "init/main.c":41:8 75 {*movsi_internal}
     (nil))
(insn 7 5 38 2 (set (reg:SI 0 ax [88])
        (const_int 0 [0])) "init/main.c":41:8 75 {*movsi_internal}
     (nil))
(insn 38 7 8 2 (set (reg:SI 3 bx [orig:83 BIOS.0_1 ] [83])
        (reg:SI 2 cx [orig:83 BIOS.0_1 ] [83])) "init/main.c":41:8 75 {*movsi_internal}
     (nil))
(insn 8 38 6 2 (parallel [
            (set (reg:SI 0 ax [orig:87 __res ] [87])
                (asm_operands/v:SI ("int $0x80") ("=a") 0 [
                        (reg:SI 0 ax [orig:87 __res ] [87])
                        (reg:SI 3 bx [orig:83 BIOS.0_1 ] [83])
                    ]
                     [
                        (asm_input:SI ("0") init/main.c:41)
                        (asm_input:SI ("b") init/main.c:41)
                    ]
                     [] init/main.c:41))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":41:8 -1
     (nil))
(insn 6 8 11 2 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [3 __res+0 S4 A32])
        (reg:SI 0 ax [orig:87 __res ] [87])) "init/main.c":41:8 75 {*movsi_internal}
     (nil))
(insn 11 6 12 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 12 [0xc])) [3 __res+0 S4 A32])
            (const_int 0 [0]))) "init/main.c":41:8 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 12 11 13 2 (set (pc)
        (if_then_else (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref 17)
            (pc))) "init/main.c":41:8 806 {*jcc}
     (nil)
 -> 17)
(note 13 12 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 33 3 (set (reg:SI 0 ax [orig:85 _3 ] [85])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [3 __res+0 S4 A32])) "init/main.c":41:8 75 {*movsi_internal}
     (nil))
(jump_insn 33 14 34 3 (set (pc)
        (label_ref 24)) "init/main.c":41:8 807 {jump}
     (nil)
 -> 24)
(barrier 34 33 17)
(code_label 17 34 18 4 5 (nil) [1 uses])
(note 18 17 19 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 19 18 20 4 (set (reg:SI 0 ax [89])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [3 __res+0 S4 A32])) "init/main.c":41:8 75 {*movsi_internal}
     (nil))
(insn 20 19 40 4 (parallel [
            (set (reg:SI 0 ax [89])
                (neg:SI (reg:SI 0 ax [89])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":41:8 575 {*negsi_1}
     (expr_list:REG_EQUAL (neg:SI (mem/c:SI (plus:SI (reg/f:SI 19 frame)
                    (const_int -4 [0xfffffffffffffffc])) [3 __res+0 S4 A32]))
        (nil)))
(insn 40 20 21 4 (set (reg:SI 2 cx [orig:84 _2 ] [84])
        (reg:SI 0 ax [89])) "init/main.c":41:8 75 {*movsi_internal}
     (nil))
(insn 21 40 22 4 (set (reg/f:SI 0 ax [90])
        (mem/u/c:SI (plus:SI (reg:SI 1 dx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("errno") [flags 0x40]  <var_decl 0x7f489bfdcb40 errno>)
                        ] UNSPEC_GOT))) [4  S4 A8])) "init/main.c":41:8 75 {*movsi_internal}
     (nil))
(insn 22 21 23 4 (set (mem/c:SI (reg/f:SI 0 ax [90]) [1 errno+0 S4 A32])
        (reg:SI 2 cx [orig:84 _2 ] [84])) "init/main.c":41:8 75 {*movsi_internal}
     (nil))
(insn 23 22 24 4 (set (reg:SI 0 ax [orig:85 _3 ] [85])
        (const_int -1 [0xffffffffffffffff])) "init/main.c":41:8 75 {*movsi_internal}
     (nil))
(code_label 24 23 25 5 6 (nil) [1 uses])
(note 25 24 31 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 31 25 37 5 (use (reg/i:SI 0 ax)) "init/main.c":41:8 -1
     (nil))
(note 37 31 0 NOTE_INSN_DELETED)

;; Function pause (pause, funcdef_no=3, decl_uid=1143, cgraph_uid=4, symbol_order=3)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=20, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =a  (1) 0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 5:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 19:  (0) =rm  (1) 0 {*negsi_1}
      Creating newreg=92 from oldreg=88, assigning class GENERAL_REGS to r92
   19: {r92:SI=-r92:SI;clobber flags:CC;}
      REG_DEAD r88:SI
      REG_UNUSED flags:CC
      REG_EQUAL -[frame:SI-0x4]
    Inserting insn reload before:
   37: r92:SI=r88:SI
    Inserting insn reload after:
   38: r83:SI=r92:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2 3
EBB 4
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 30: point = 0, n_alt = -1
   Insn 29: point = 0, n_alt = -2
   Insn 25: point = 1, n_alt = -2
  BB 3
   Insn 32: point = 4, n_alt = -1
   Insn 13: point = 4, n_alt = 0
  BB 4
   Insn 22: point = 5, n_alt = 0
   Insn 21: point = 6, n_alt = 1
   Insn 20: point = 7, n_alt = 0
   Insn 38: point = 9, n_alt = -2
	Hard reg 2 is preferable by r92 with profit 1000
   Insn 19: point = 11, n_alt = 0
   Insn 37: point = 12, n_alt = -2
	Hard reg 2 is preferable by r92 with profit 1000
	Hard reg 0 is preferable by r92 with profit 1000
   Insn 18: point = 14, n_alt = 0
  BB 2
   Insn 11: point = 16, n_alt = -1
   Insn 10: point = 16, n_alt = 1
   Insn 5: point = 16, n_alt = 1
   Insn 7: point = 17, n_alt = 0
   Insn 34: point = 18, n_alt = -2
   Insn 6: point = 20, n_alt = 0
   Insn 35: point = 21, n_alt = 0
 r82: [8..21]
 r83: [6..9]
 r84: [2..5]
 r85: [0..1]
 r86: [16..18]
 r87: [19..20]
 r88: [13..14]
 r89: [6..7]
 r92: [10..12]
Compressing live ranges: from 22 to 16 - 72%
Ranges after the compression:
 r82: [6..15]
 r83: [4..7]
 r84: [2..3]
 r85: [0..1]
 r86: [12..13]
 r87: [14..15]
 r88: [10..11]
 r89: [4..5]
 r92: [8..9]

********** Assignment #1: **********

	 Assigning to 92 (cl=GENERAL_REGS, orig=88, freq=3000, tfirst=92, tfreq=3000)...
	   Assign 0 to reload r92 (freq=3000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=20, prev_offset=20)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=16)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 35
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 13
changing reg in insn 25
changing reg in insn 25
changing reg in insn 29
changing reg in insn 34
changing reg in insn 7
changing reg in insn 7
changing reg in insn 5
changing reg in insn 6
changing reg in insn 34
changing reg in insn 18
changing reg in insn 20
changing reg in insn 21
deleting insn with uid = 34.
deleting insn with uid = 37.
deleting insn with uid = 25.
deleting insn with uid = 29.
starting the processing of deferred insns
ending the processing of deferred insns


pause

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 17 [flags]
;;  ref usage 	r0={8d,7u} r1={2d,1u} r2={2d,1u} r7={1d,9u} r17={4d,1u} r19={1e} 
;;    total ref usage 37{17d,19u,1e} in 15{15 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 35 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 35 3 2 2 (parallel [
            (set (reg:SI 1 dx [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 35 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 2 7 2 (set (reg:SI 0 ax [87])
        (const_int 29 [0x1d])) "init/main.c":42:8 75 {*movsi_internal}
     (nil))
(insn 7 6 5 2 (parallel [
            (set (reg:SI 0 ax [orig:86 __res ] [86])
                (asm_operands/v:SI ("int $0x80") ("=a") 0 [
                        (reg:SI 0 ax [orig:86 __res ] [86])
                    ]
                     [
                        (asm_input:SI ("0") init/main.c:42)
                    ]
                     [] init/main.c:42))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":42:8 -1
     (nil))
(insn 5 7 10 2 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [3 __res+0 S4 A32])
        (reg:SI 0 ax [orig:86 __res ] [86])) "init/main.c":42:8 75 {*movsi_internal}
     (nil))
(insn 10 5 11 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 12 [0xc])) [3 __res+0 S4 A32])
            (const_int 0 [0]))) "init/main.c":42:8 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 11 10 12 2 (set (pc)
        (if_then_else (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref 16)
            (pc))) "init/main.c":42:8 806 {*jcc}
     (nil)
 -> 16)
(note 12 11 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 32 3 (set (reg:SI 0 ax [orig:84 _2 ] [84])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [3 __res+0 S4 A32])) "init/main.c":42:8 75 {*movsi_internal}
     (nil))
(jump_insn 32 13 33 3 (set (pc)
        (label_ref 23)) "init/main.c":42:8 807 {jump}
     (nil)
 -> 23)
(barrier 33 32 16)
(code_label 16 33 17 4 8 (nil) [1 uses])
(note 17 16 18 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 4 (set (reg:SI 0 ax [88])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [3 __res+0 S4 A32])) "init/main.c":42:8 75 {*movsi_internal}
     (nil))
(insn 19 18 38 4 (parallel [
            (set (reg:SI 0 ax [88])
                (neg:SI (reg:SI 0 ax [88])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":42:8 575 {*negsi_1}
     (expr_list:REG_EQUAL (neg:SI (mem/c:SI (plus:SI (reg/f:SI 19 frame)
                    (const_int -4 [0xfffffffffffffffc])) [3 __res+0 S4 A32]))
        (nil)))
(insn 38 19 20 4 (set (reg:SI 2 cx [orig:83 _1 ] [83])
        (reg:SI 0 ax [88])) "init/main.c":42:8 75 {*movsi_internal}
     (nil))
(insn 20 38 21 4 (set (reg/f:SI 0 ax [89])
        (mem/u/c:SI (plus:SI (reg:SI 1 dx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("errno") [flags 0x40]  <var_decl 0x7f489bfdcb40 errno>)
                        ] UNSPEC_GOT))) [4  S4 A8])) "init/main.c":42:8 75 {*movsi_internal}
     (nil))
(insn 21 20 22 4 (set (mem/c:SI (reg/f:SI 0 ax [89]) [1 errno+0 S4 A32])
        (reg:SI 2 cx [orig:83 _1 ] [83])) "init/main.c":42:8 75 {*movsi_internal}
     (nil))
(insn 22 21 23 4 (set (reg:SI 0 ax [orig:84 _2 ] [84])
        (const_int -1 [0xffffffffffffffff])) "init/main.c":42:8 75 {*movsi_internal}
     (nil))
(code_label 23 22 24 5 9 (nil) [1 uses])
(note 24 23 30 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 30 24 36 5 (use (reg/i:SI 0 ax)) "init/main.c":42:8 -1
     (nil))
(note 36 30 0 NOTE_INSN_DELETED)

;; Function sync (sync, funcdef_no=4, decl_uid=1180, cgraph_uid=5, symbol_order=4)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=20, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =a  (1) 0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 5:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 19:  (0) =rm  (1) 0 {*negsi_1}
      Creating newreg=92 from oldreg=88, assigning class GENERAL_REGS to r92
   19: {r92:SI=-r92:SI;clobber flags:CC;}
      REG_DEAD r88:SI
      REG_UNUSED flags:CC
      REG_EQUAL -[frame:SI-0x4]
    Inserting insn reload before:
   37: r92:SI=r88:SI
    Inserting insn reload after:
   38: r83:SI=r92:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2 3
EBB 4
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 30: point = 0, n_alt = -1
   Insn 29: point = 0, n_alt = -2
   Insn 25: point = 1, n_alt = -2
  BB 3
   Insn 32: point = 4, n_alt = -1
   Insn 13: point = 4, n_alt = 0
  BB 4
   Insn 22: point = 5, n_alt = 0
   Insn 21: point = 6, n_alt = 1
   Insn 20: point = 7, n_alt = 0
   Insn 38: point = 9, n_alt = -2
	Hard reg 2 is preferable by r92 with profit 1000
   Insn 19: point = 11, n_alt = 0
   Insn 37: point = 12, n_alt = -2
	Hard reg 2 is preferable by r92 with profit 1000
	Hard reg 0 is preferable by r92 with profit 1000
   Insn 18: point = 14, n_alt = 0
  BB 2
   Insn 11: point = 16, n_alt = -1
   Insn 10: point = 16, n_alt = 1
   Insn 5: point = 16, n_alt = 1
   Insn 7: point = 17, n_alt = 0
   Insn 34: point = 18, n_alt = -2
   Insn 6: point = 20, n_alt = 0
   Insn 35: point = 21, n_alt = 0
 r82: [8..21]
 r83: [6..9]
 r84: [2..5]
 r85: [0..1]
 r86: [16..18]
 r87: [19..20]
 r88: [13..14]
 r89: [6..7]
 r92: [10..12]
Compressing live ranges: from 22 to 16 - 72%
Ranges after the compression:
 r82: [6..15]
 r83: [4..7]
 r84: [2..3]
 r85: [0..1]
 r86: [12..13]
 r87: [14..15]
 r88: [10..11]
 r89: [4..5]
 r92: [8..9]

********** Assignment #1: **********

	 Assigning to 92 (cl=GENERAL_REGS, orig=88, freq=3000, tfirst=92, tfreq=3000)...
	   Assign 0 to reload r92 (freq=3000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=20, prev_offset=20)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=16)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 35
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 13
changing reg in insn 25
changing reg in insn 25
changing reg in insn 29
changing reg in insn 34
changing reg in insn 7
changing reg in insn 7
changing reg in insn 5
changing reg in insn 6
changing reg in insn 34
changing reg in insn 18
changing reg in insn 20
changing reg in insn 21
deleting insn with uid = 34.
deleting insn with uid = 37.
deleting insn with uid = 25.
deleting insn with uid = 29.
starting the processing of deferred insns
ending the processing of deferred insns


sync

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 17 [flags]
;;  ref usage 	r0={8d,7u} r1={2d,1u} r2={2d,1u} r7={1d,9u} r17={4d,1u} r19={1e} 
;;    total ref usage 37{17d,19u,1e} in 15{15 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 35 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 35 3 2 2 (parallel [
            (set (reg:SI 1 dx [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 35 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 2 7 2 (set (reg:SI 0 ax [87])
        (const_int 36 [0x24])) "init/main.c":43:8 75 {*movsi_internal}
     (nil))
(insn 7 6 5 2 (parallel [
            (set (reg:SI 0 ax [orig:86 __res ] [86])
                (asm_operands/v:SI ("int $0x80") ("=a") 0 [
                        (reg:SI 0 ax [orig:86 __res ] [86])
                    ]
                     [
                        (asm_input:SI ("0") init/main.c:43)
                    ]
                     [] init/main.c:43))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":43:8 -1
     (nil))
(insn 5 7 10 2 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [3 __res+0 S4 A32])
        (reg:SI 0 ax [orig:86 __res ] [86])) "init/main.c":43:8 75 {*movsi_internal}
     (nil))
(insn 10 5 11 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 12 [0xc])) [3 __res+0 S4 A32])
            (const_int 0 [0]))) "init/main.c":43:8 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 11 10 12 2 (set (pc)
        (if_then_else (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref 16)
            (pc))) "init/main.c":43:8 806 {*jcc}
     (nil)
 -> 16)
(note 12 11 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 32 3 (set (reg:SI 0 ax [orig:84 _2 ] [84])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [3 __res+0 S4 A32])) "init/main.c":43:8 75 {*movsi_internal}
     (nil))
(jump_insn 32 13 33 3 (set (pc)
        (label_ref 23)) "init/main.c":43:8 807 {jump}
     (nil)
 -> 23)
(barrier 33 32 16)
(code_label 16 33 17 4 11 (nil) [1 uses])
(note 17 16 18 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 4 (set (reg:SI 0 ax [88])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [3 __res+0 S4 A32])) "init/main.c":43:8 75 {*movsi_internal}
     (nil))
(insn 19 18 38 4 (parallel [
            (set (reg:SI 0 ax [88])
                (neg:SI (reg:SI 0 ax [88])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":43:8 575 {*negsi_1}
     (expr_list:REG_EQUAL (neg:SI (mem/c:SI (plus:SI (reg/f:SI 19 frame)
                    (const_int -4 [0xfffffffffffffffc])) [3 __res+0 S4 A32]))
        (nil)))
(insn 38 19 20 4 (set (reg:SI 2 cx [orig:83 _1 ] [83])
        (reg:SI 0 ax [88])) "init/main.c":43:8 75 {*movsi_internal}
     (nil))
(insn 20 38 21 4 (set (reg/f:SI 0 ax [89])
        (mem/u/c:SI (plus:SI (reg:SI 1 dx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("errno") [flags 0x40]  <var_decl 0x7f489bfdcb40 errno>)
                        ] UNSPEC_GOT))) [4  S4 A8])) "init/main.c":43:8 75 {*movsi_internal}
     (nil))
(insn 21 20 22 4 (set (mem/c:SI (reg/f:SI 0 ax [89]) [1 errno+0 S4 A32])
        (reg:SI 2 cx [orig:83 _1 ] [83])) "init/main.c":43:8 75 {*movsi_internal}
     (nil))
(insn 22 21 23 4 (set (reg:SI 0 ax [orig:84 _2 ] [84])
        (const_int -1 [0xffffffffffffffff])) "init/main.c":43:8 75 {*movsi_internal}
     (nil))
(code_label 23 22 24 5 12 (nil) [1 uses])
(note 24 23 30 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 30 24 36 5 (use (reg/i:SI 0 ax)) "init/main.c":43:8 -1
     (nil))
(note 36 30 0 NOTE_INSN_DELETED)

;; Function time_init (time_init, funcdef_no=5, decl_uid=1633, cgraph_uid=6, symbol_order=11)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=48, prev_offset=0)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 160:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) a  (1) d
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
            1 Small class reload: reject+=3
          alt=0,overall=9,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 10:  (0) =a  (1) d
      Creating newreg=180 from oldreg=140, assigning class DREG to r180
   10: {r139:QI=asm_operands;clobber flags:CC;}
      REG_DEAD r140:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  162: r180:SI=r140:SI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=7,overall=27,losers=2 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 8:  (0) m  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 11:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) qm {*zero_extendqisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) a  (1) d
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) g {*movsi_internal}
            1 Small class reload: reject+=3
          alt=0,overall=9,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 19:  (0) =a  (1) d
      Creating newreg=181 from oldreg=144, assigning class DREG to r181
   19: {r143:QI=asm_operands;clobber flags:CC;}
      REG_DEAD r144:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  163: r181:SI=r144:SI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=7,overall=27,losers=2 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 17:  (0) m  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 20:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r  (1) qm {*zero_extendqisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) a  (1) d
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =r  (1) g {*movsi_internal}
            1 Small class reload: reject+=3
          alt=0,overall=9,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 28:  (0) =a  (1) d
      Creating newreg=182 from oldreg=148, assigning class DREG to r182
   28: {r147:QI=asm_operands;clobber flags:CC;}
      REG_DEAD r148:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  164: r182:SI=r148:SI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=7,overall=27,losers=2 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 26:  (0) m  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 29:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r  (1) qm {*zero_extendqisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 31:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) a  (1) d
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r  (1) g {*movsi_internal}
            1 Small class reload: reject+=3
          alt=0,overall=9,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 37:  (0) =a  (1) d
      Creating newreg=183 from oldreg=152, assigning class DREG to r183
   37: {r151:QI=asm_operands;clobber flags:CC;}
      REG_DEAD r152:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  165: r183:SI=r152:SI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=7,overall=27,losers=2 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 35:  (0) m  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 38:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =r  (1) qm {*zero_extendqisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 40:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) a  (1) d
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =r  (1) g {*movsi_internal}
            1 Small class reload: reject+=3
          alt=0,overall=9,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 46:  (0) =a  (1) d
      Creating newreg=184 from oldreg=156, assigning class DREG to r184
   46: {r155:QI=asm_operands;clobber flags:CC;}
      REG_DEAD r156:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  166: r184:SI=r156:SI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=7,overall=27,losers=2 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 44:  (0) m  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 47:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =r  (1) qm {*zero_extendqisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 49:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) a  (1) d
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =r  (1) g {*movsi_internal}
            1 Small class reload: reject+=3
          alt=0,overall=9,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 55:  (0) =a  (1) d
      Creating newreg=185 from oldreg=160, assigning class DREG to r185
   55: {r159:QI=asm_operands;clobber flags:CC;}
      REG_DEAD r160:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  167: r185:SI=r160:SI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=7,overall=27,losers=2 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 53:  (0) m  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 56:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) =r  (1) qm {*zero_extendqisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 58:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) a  (1) d
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =r  (1) g {*movsi_internal}
            1 Small class reload: reject+=3
          alt=0,overall=9,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 65:  (0) =a  (1) d
      Creating newreg=186 from oldreg=164, assigning class DREG to r186
   65: {r163:QI=asm_operands;clobber flags:CC;}
      REG_DEAD r164:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  168: r186:SI=r164:SI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=7,overall=27,losers=2 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 63:  (0) m  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 66:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            alt=2: Bad operand -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 73:  (0) =rm  (1) %0  (2) re {*andsi_1}
      Creating newreg=187 from oldreg=91, assigning class GENERAL_REGS to r187
   73: {r187:SI=r187:SI&0xf;clobber flags:CC;}
      REG_DEAD r91:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  169: r187:SI=r91:SI
    Inserting insn reload after:
  170: r92:SI=r187:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 75:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
      Creating newreg=188 from oldreg=93, assigning class GENERAL_REGS to r188
   75: {r188:SI=r188:SI>>0x4;clobber flags:CC;}
      REG_DEAD r93:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  171: r188:SI=r93:SI
    Inserting insn reload after:
  172: r94:SI=r188:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 82
	 Choosing alt 0 in insn 82:  (0) =rm  (1) %0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 83:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            alt=2: Bad operand -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 85:  (0) =rm  (1) %0  (2) re {*andsi_1}
      Creating newreg=189 from oldreg=97, assigning class GENERAL_REGS to r189
   85: {r189:SI=r189:SI&0xf;clobber flags:CC;}
      REG_DEAD r97:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  173: r189:SI=r97:SI
    Inserting insn reload after:
  174: r98:SI=r189:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 87:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
      Creating newreg=190 from oldreg=99, assigning class GENERAL_REGS to r190
   87: {r190:SI=r190:SI>>0x4;clobber flags:CC;}
      REG_DEAD r99:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  175: r190:SI=r99:SI
    Inserting insn reload after:
  176: r100:SI=r190:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 94
	 Choosing alt 0 in insn 94:  (0) =rm  (1) %0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 95:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            alt=2: Bad operand -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 97:  (0) =rm  (1) %0  (2) re {*andsi_1}
      Creating newreg=191 from oldreg=103, assigning class GENERAL_REGS to r191
   97: {r191:SI=r191:SI&0xf;clobber flags:CC;}
      REG_DEAD r103:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  177: r191:SI=r103:SI
    Inserting insn reload after:
  178: r104:SI=r191:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 99:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
      Creating newreg=192 from oldreg=105, assigning class GENERAL_REGS to r192
   99: {r192:SI=r192:SI>>0x4;clobber flags:CC;}
      REG_DEAD r105:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  179: r192:SI=r105:SI
    Inserting insn reload after:
  180: r106:SI=r192:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 106
	 Choosing alt 0 in insn 106:  (0) =rm  (1) %0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 107:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            alt=2: Bad operand -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 109:  (0) =rm  (1) %0  (2) re {*andsi_1}
      Creating newreg=193 from oldreg=109, assigning class GENERAL_REGS to r193
  109: {r193:SI=r193:SI&0xf;clobber flags:CC;}
      REG_DEAD r109:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  181: r193:SI=r109:SI
    Inserting insn reload after:
  182: r110:SI=r193:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 111:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
      Creating newreg=194 from oldreg=111, assigning class GENERAL_REGS to r194
  111: {r194:SI=r194:SI>>0x4;clobber flags:CC;}
      REG_DEAD r111:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  183: r194:SI=r111:SI
    Inserting insn reload after:
  184: r112:SI=r194:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 114:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 115:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 118
	 Choosing alt 0 in insn 118:  (0) =rm  (1) %0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 119:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 120:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            alt=2: Bad operand -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 121:  (0) =rm  (1) %0  (2) re {*andsi_1}
      Creating newreg=195 from oldreg=115, assigning class GENERAL_REGS to r195
  121: {r195:SI=r195:SI&0xf;clobber flags:CC;}
      REG_DEAD r115:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  185: r195:SI=r115:SI
    Inserting insn reload after:
  186: r116:SI=r195:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 122:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 123:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
      Creating newreg=196 from oldreg=117, assigning class GENERAL_REGS to r196
  123: {r196:SI=r196:SI>>0x4;clobber flags:CC;}
      REG_DEAD r117:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  187: r196:SI=r117:SI
    Inserting insn reload after:
  188: r118:SI=r196:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 125:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 126:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 127:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 130
	 Choosing alt 0 in insn 130:  (0) =rm  (1) %0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 131:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 132:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            alt=2: Bad operand -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 133:  (0) =rm  (1) %0  (2) re {*andsi_1}
      Creating newreg=197 from oldreg=121, assigning class GENERAL_REGS to r197
  133: {r197:SI=r197:SI&0xf;clobber flags:CC;}
      REG_DEAD r121:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  189: r197:SI=r121:SI
    Inserting insn reload after:
  190: r122:SI=r197:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 134:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 135:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
      Creating newreg=198 from oldreg=123, assigning class GENERAL_REGS to r198
  135: {r198:SI=r198:SI>>0x4;clobber flags:CC;}
      REG_DEAD r123:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  191: r198:SI=r123:SI
    Inserting insn reload after:
  192: r124:SI=r198:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 138:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 139:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 142
	 Choosing alt 0 in insn 142:  (0) =rm  (1) %0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 143:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 144:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 145:  (0) =rm  (1) %0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 146:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 147:  (0) =rm  (1) %0  (2) re {*addsi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=23,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 148:  (0) r  (1) r  (2) le {*addsi_1} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 149:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 151:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 152:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 154:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 155:  (0) m  (1) re {*movsi_internal}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2
EBB 3 4 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 159: point = 0, n_alt = -1
  BB 4
   Insn 155: point = 0, n_alt = 1
   Insn 154: point = 1, n_alt = 0
   Insn 153: point = 3, n_alt = -2
   Insn 152: point = 4, n_alt = 0
   Insn 151: point = 4, n_alt = 0
   Insn 150: point = 4, n_alt = -2
   Insn 149: point = 4, n_alt = 0
   Insn 148: point = 5, n_alt = 3
   Insn 147: point = 6, n_alt = 0
   Insn 146: point = 6, n_alt = 1
   Insn 145: point = 7, n_alt = 0
   Insn 144: point = 9, n_alt = 0
   Insn 143: point = 10, n_alt = 1
   Insn 142: point = 11, n_alt = 0
   Insn 141: point = 13, n_alt = -2
   Insn 140: point = 15, n_alt = -2
   Insn 139: point = 17, n_alt = 0
   Insn 138: point = 19, n_alt = 0
   Insn 137: point = 21, n_alt = 0
   Insn 136: point = 22, n_alt = -2
   Insn 192: point = 23, n_alt = -2
	Hard reg 1 is preferable by r198 with profit 1000
   Insn 135: point = 25, n_alt = 0
   Insn 191: point = 26, n_alt = -2
	Hard reg 1 is preferable by r198 with profit 1000
	Hard reg 0 is preferable by r198 with profit 1000
   Insn 134: point = 28, n_alt = 0
   Insn 190: point = 29, n_alt = -2
	Hard reg 2 is preferable by r197 with profit 1000
   Insn 133: point = 31, n_alt = 0
   Insn 189: point = 32, n_alt = -2
	Hard reg 2 is preferable by r197 with profit 1000
	Hard reg 0 is preferable by r197 with profit 1000
   Insn 132: point = 34, n_alt = 0
   Insn 131: point = 35, n_alt = 1
   Insn 130: point = 36, n_alt = 0
   Insn 129: point = 38, n_alt = -2
   Insn 128: point = 40, n_alt = -2
   Insn 127: point = 42, n_alt = 0
   Insn 126: point = 44, n_alt = 0
   Insn 125: point = 46, n_alt = 0
   Insn 124: point = 47, n_alt = -2
   Insn 188: point = 48, n_alt = -2
	Hard reg 1 is preferable by r196 with profit 1000
   Insn 123: point = 50, n_alt = 0
   Insn 187: point = 51, n_alt = -2
	Hard reg 1 is preferable by r196 with profit 1000
	Hard reg 0 is preferable by r196 with profit 1000
   Insn 122: point = 53, n_alt = 0
   Insn 186: point = 54, n_alt = -2
	Hard reg 2 is preferable by r195 with profit 1000
   Insn 121: point = 56, n_alt = 0
   Insn 185: point = 57, n_alt = -2
	Hard reg 2 is preferable by r195 with profit 1000
	Hard reg 0 is preferable by r195 with profit 1000
   Insn 120: point = 59, n_alt = 0
   Insn 119: point = 60, n_alt = 1
   Insn 118: point = 61, n_alt = 0
   Insn 117: point = 63, n_alt = -2
   Insn 116: point = 65, n_alt = -2
   Insn 115: point = 67, n_alt = 0
   Insn 114: point = 69, n_alt = 0
   Insn 113: point = 71, n_alt = 0
   Insn 112: point = 72, n_alt = -2
   Insn 184: point = 73, n_alt = -2
	Hard reg 1 is preferable by r194 with profit 1000
   Insn 111: point = 75, n_alt = 0
   Insn 183: point = 76, n_alt = -2
	Hard reg 1 is preferable by r194 with profit 1000
	Hard reg 0 is preferable by r194 with profit 1000
   Insn 110: point = 78, n_alt = 0
   Insn 182: point = 79, n_alt = -2
	Hard reg 2 is preferable by r193 with profit 1000
   Insn 109: point = 81, n_alt = 0
   Insn 181: point = 82, n_alt = -2
	Hard reg 2 is preferable by r193 with profit 1000
	Hard reg 0 is preferable by r193 with profit 1000
   Insn 108: point = 84, n_alt = 0
   Insn 107: point = 85, n_alt = 1
   Insn 106: point = 86, n_alt = 0
   Insn 105: point = 88, n_alt = -2
   Insn 104: point = 90, n_alt = -2
   Insn 103: point = 92, n_alt = 0
   Insn 102: point = 94, n_alt = 0
   Insn 101: point = 96, n_alt = 0
   Insn 100: point = 97, n_alt = -2
   Insn 180: point = 98, n_alt = -2
	Hard reg 1 is preferable by r192 with profit 1000
   Insn 99: point = 100, n_alt = 0
   Insn 179: point = 101, n_alt = -2
	Hard reg 1 is preferable by r192 with profit 1000
	Hard reg 0 is preferable by r192 with profit 1000
   Insn 98: point = 103, n_alt = 0
   Insn 178: point = 104, n_alt = -2
	Hard reg 2 is preferable by r191 with profit 1000
   Insn 97: point = 106, n_alt = 0
   Insn 177: point = 107, n_alt = -2
	Hard reg 2 is preferable by r191 with profit 1000
	Hard reg 0 is preferable by r191 with profit 1000
   Insn 96: point = 109, n_alt = 0
   Insn 95: point = 110, n_alt = 1
   Insn 94: point = 111, n_alt = 0
   Insn 93: point = 113, n_alt = -2
   Insn 92: point = 115, n_alt = -2
   Insn 91: point = 117, n_alt = 0
   Insn 90: point = 119, n_alt = 0
   Insn 89: point = 121, n_alt = 0
   Insn 88: point = 122, n_alt = -2
   Insn 176: point = 123, n_alt = -2
	Hard reg 1 is preferable by r190 with profit 1000
   Insn 87: point = 125, n_alt = 0
   Insn 175: point = 126, n_alt = -2
	Hard reg 1 is preferable by r190 with profit 1000
	Hard reg 0 is preferable by r190 with profit 1000
   Insn 86: point = 128, n_alt = 0
   Insn 174: point = 129, n_alt = -2
	Hard reg 2 is preferable by r189 with profit 1000
   Insn 85: point = 131, n_alt = 0
   Insn 173: point = 132, n_alt = -2
	Hard reg 2 is preferable by r189 with profit 1000
	Hard reg 0 is preferable by r189 with profit 1000
   Insn 84: point = 134, n_alt = 0
   Insn 83: point = 135, n_alt = 1
   Insn 82: point = 136, n_alt = 0
   Insn 81: point = 138, n_alt = -2
   Insn 80: point = 140, n_alt = -2
   Insn 79: point = 142, n_alt = 0
   Insn 78: point = 144, n_alt = 0
   Insn 77: point = 146, n_alt = 0
   Insn 76: point = 147, n_alt = -2
   Insn 172: point = 148, n_alt = -2
	Hard reg 1 is preferable by r188 with profit 1000
   Insn 75: point = 150, n_alt = 0
   Insn 171: point = 151, n_alt = -2
	Hard reg 1 is preferable by r188 with profit 1000
	Hard reg 0 is preferable by r188 with profit 1000
   Insn 74: point = 153, n_alt = 0
   Insn 170: point = 154, n_alt = -2
	Hard reg 2 is preferable by r187 with profit 1000
   Insn 73: point = 156, n_alt = 0
   Insn 169: point = 157, n_alt = -2
	Hard reg 2 is preferable by r187 with profit 1000
	Hard reg 0 is preferable by r187 with profit 1000
   Insn 72: point = 159, n_alt = 0
  BB 3
   Insn 70: point = 161, n_alt = -1
   Insn 69: point = 161, n_alt = 0
   Insn 67: point = 162, n_alt = 0
   Insn 66: point = 164, n_alt = 4
   Insn 63: point = 165, n_alt = 8
   Insn 65: point = 166, n_alt = 0
   Insn 168: point = 168, n_alt = -2
	Hard reg 0 is preferable by r186 with profit 1000
   Insn 64: point = 170, n_alt = 0
   Insn 62: point = 171, n_alt = 0
   Insn 61: point = 172, n_alt = 0
   Insn 60: point = 173, n_alt = 0
   Insn 59: point = 174, n_alt = 0
   Insn 58: point = 175, n_alt = 1
   Insn 57: point = 176, n_alt = 0
   Insn 56: point = 178, n_alt = 4
   Insn 53: point = 179, n_alt = 8
   Insn 55: point = 180, n_alt = 0
   Insn 167: point = 182, n_alt = -2
	Hard reg 0 is preferable by r185 with profit 1000
   Insn 54: point = 184, n_alt = 0
   Insn 52: point = 185, n_alt = 0
   Insn 51: point = 186, n_alt = 0
   Insn 50: point = 187, n_alt = 0
   Insn 49: point = 188, n_alt = 1
   Insn 48: point = 189, n_alt = 0
   Insn 47: point = 191, n_alt = 4
   Insn 44: point = 192, n_alt = 8
   Insn 46: point = 193, n_alt = 0
   Insn 166: point = 195, n_alt = -2
	Hard reg 0 is preferable by r184 with profit 1000
   Insn 45: point = 197, n_alt = 0
   Insn 43: point = 198, n_alt = 0
   Insn 42: point = 199, n_alt = 0
   Insn 41: point = 200, n_alt = 0
   Insn 40: point = 201, n_alt = 1
   Insn 39: point = 202, n_alt = 0
   Insn 38: point = 204, n_alt = 4
   Insn 35: point = 205, n_alt = 8
   Insn 37: point = 206, n_alt = 0
   Insn 165: point = 208, n_alt = -2
	Hard reg 0 is preferable by r183 with profit 1000
   Insn 36: point = 210, n_alt = 0
   Insn 34: point = 211, n_alt = 0
   Insn 33: point = 212, n_alt = 0
   Insn 32: point = 213, n_alt = 0
   Insn 31: point = 214, n_alt = 1
   Insn 30: point = 215, n_alt = 0
   Insn 29: point = 217, n_alt = 4
   Insn 26: point = 218, n_alt = 8
   Insn 28: point = 219, n_alt = 0
   Insn 164: point = 221, n_alt = -2
	Hard reg 0 is preferable by r182 with profit 1000
   Insn 27: point = 223, n_alt = 0
   Insn 25: point = 224, n_alt = 0
   Insn 24: point = 225, n_alt = 0
   Insn 23: point = 226, n_alt = 0
   Insn 22: point = 227, n_alt = 1
   Insn 21: point = 228, n_alt = 0
   Insn 20: point = 230, n_alt = 4
   Insn 17: point = 231, n_alt = 8
   Insn 19: point = 232, n_alt = 0
   Insn 163: point = 234, n_alt = -2
	Hard reg 0 is preferable by r181 with profit 1000
   Insn 18: point = 236, n_alt = 0
   Insn 16: point = 237, n_alt = 0
   Insn 15: point = 238, n_alt = 0
   Insn 14: point = 239, n_alt = 0
   Insn 13: point = 240, n_alt = 1
   Insn 12: point = 241, n_alt = 0
   Insn 11: point = 243, n_alt = 4
   Insn 8: point = 244, n_alt = 8
   Insn 10: point = 245, n_alt = 0
   Insn 162: point = 247, n_alt = -2
	Hard reg 0 is preferable by r180 with profit 1000
   Insn 9: point = 249, n_alt = 0
   Insn 7: point = 250, n_alt = 0
   Insn 6: point = 251, n_alt = 0
   Insn 5: point = 252, n_alt = 0
  BB 2
   Insn 160: point = 254, n_alt = 0
 r82: [2..254]
 r83: [240..241]
 r84: [227..228]
 r85: [214..215]
 r86: [201..202]
 r87: [188..189]
 r88: [175..176]
 r89: [161..174]
 r90: [161..162]
 r91: [158..159]
 r92: [137..154]
 r93: [152..153]
 r94: [145..148]
 r95: [137..138]
 r96: [135..136]
 r97: [133..134]
 r98: [112..129]
 r99: [127..128]
 r100: [120..123]
 r101: [112..113]
 r102: [110..111]
 r103: [108..109]
 r104: [87..104]
 r105: [102..103]
 r106: [95..98]
 r107: [87..88]
 r108: [85..86]
 r109: [83..84]
 r110: [62..79]
 r111: [77..78]
 r112: [70..73]
 r113: [62..63]
 r114: [60..61]
 r115: [58..59]
 r116: [37..54]
 r117: [52..53]
 r118: [45..48]
 r119: [37..38]
 r120: [35..36]
 r121: [33..34]
 r122: [12..29]
 r123: [27..28]
 r124: [20..23]
 r125: [12..13]
 r126: [10..11]
 r127: [8..9]
 r128: [6..7]
 r129: [0..3]
 r130: [242..243]
 r131: [229..230]
 r132: [216..217]
 r133: [203..204]
 r134: [190..191]
 r135: [177..178]
 r136: [163..164]
 r137: [250..252]
 r138: [250..251]
 r139: [244..245]
 r140: [248..249]
 r141: [237..239]
 r142: [237..238]
 r143: [231..232]
 r144: [235..236]
 r145: [224..226]
 r146: [224..225]
 r147: [218..219]
 r148: [222..223]
 r149: [211..213]
 r150: [211..212]
 r151: [205..206]
 r152: [209..210]
 r153: [198..200]
 r154: [198..199]
 r155: [192..193]
 r156: [196..197]
 r157: [185..187]
 r158: [185..186]
 r159: [179..180]
 r160: [183..184]
 r161: [171..173]
 r162: [171..172]
 r163: [165..166]
 r164: [169..170]
 r165: [143..147] [139..140]
 r166: [141..142]
 r167: [118..122] [114..115]
 r168: [116..117]
 r169: [93..97] [89..90]
 r170: [91..92]
 r171: [68..72] [64..65]
 r172: [66..67]
 r173: [43..47] [39..40]
 r174: [41..42]
 r175: [18..22] [14..15]
 r176: [16..17]
 r177: [4..5]
 r178: [0..1]
 r180: [246..247]
 r181: [233..234]
 r182: [220..221]
 r183: [207..208]
 r184: [194..195]
 r185: [181..182]
 r186: [167..168]
 r187: [155..157]
 r188: [149..151]
 r189: [130..132]
 r190: [124..126]
 r191: [105..107]
 r192: [99..101]
 r193: [80..82]
 r194: [74..76]
 r195: [55..57]
 r196: [49..51]
 r197: [30..32]
 r198: [24..26]
Compressing live ranges: from 255 to 202 - 79%
Ranges after the compression:
 r82: [2..201]
 r83: [190..191]
 r84: [178..179]
 r85: [166..167]
 r86: [154..155]
 r87: [142..143]
 r88: [130..131]
 r89: [118..129]
 r90: [118..119]
 r91: [116..117]
 r92: [102..113]
 r93: [112..113]
 r94: [108..109]
 r95: [102..103]
 r96: [100..101]
 r97: [98..99]
 r98: [84..95]
 r99: [94..95]
 r100: [90..91]
 r101: [84..85]
 r102: [82..83]
 r103: [80..81]
 r104: [66..77]
 r105: [76..77]
 r106: [72..73]
 r107: [66..67]
 r108: [64..65]
 r109: [62..63]
 r110: [48..59]
 r111: [58..59]
 r112: [54..55]
 r113: [48..49]
 r114: [46..47]
 r115: [44..45]
 r116: [30..41]
 r117: [40..41]
 r118: [36..37]
 r119: [30..31]
 r120: [28..29]
 r121: [26..27]
 r122: [12..23]
 r123: [22..23]
 r124: [18..19]
 r125: [12..13]
 r126: [10..11]
 r127: [8..9]
 r128: [6..7]
 r129: [0..3]
 r130: [192..193]
 r131: [180..181]
 r132: [168..169]
 r133: [156..157]
 r134: [144..145]
 r135: [132..133]
 r136: [120..121]
 r137: [200..201]
 r138: [200..201]
 r139: [194..195]
 r140: [198..199]
 r141: [188..189]
 r142: [188..189]
 r143: [182..183]
 r144: [186..187]
 r145: [176..177]
 r146: [176..177]
 r147: [170..171]
 r148: [174..175]
 r149: [164..165]
 r150: [164..165]
 r151: [158..159]
 r152: [162..163]
 r153: [152..153]
 r154: [152..153]
 r155: [146..147]
 r156: [150..151]
 r157: [140..141]
 r158: [140..141]
 r159: [134..135]
 r160: [138..139]
 r161: [128..129]
 r162: [128..129]
 r163: [122..123]
 r164: [126..127]
 r165: [108..109] [104..105]
 r166: [106..107]
 r167: [90..91] [86..87]
 r168: [88..89]
 r169: [72..73] [68..69]
 r170: [70..71]
 r171: [54..55] [50..51]
 r172: [52..53]
 r173: [36..37] [32..33]
 r174: [34..35]
 r175: [18..19] [14..15]
 r176: [16..17]
 r177: [4..5]
 r178: [0..1]
 r180: [196..197]
 r181: [184..185]
 r182: [172..173]
 r183: [160..161]
 r184: [148..149]
 r185: [136..137]
 r186: [124..125]
 r187: [114..115]
 r188: [110..111]
 r189: [96..97]
 r190: [92..93]
 r191: [78..79]
 r192: [74..75]
 r193: [60..61]
 r194: [56..57]
 r195: [42..43]
 r196: [38..39]
 r197: [24..25]
 r198: [20..21]

********** Assignment #1: **********

	 Assigning to 180 (cl=DREG, orig=140, freq=2000, tfirst=180, tfreq=2000)...
	   Assign 1 to reload r180 (freq=2000)
	 Assigning to 181 (cl=DREG, orig=144, freq=2000, tfirst=181, tfreq=2000)...
	   Assign 1 to reload r181 (freq=2000)
	 Assigning to 182 (cl=DREG, orig=148, freq=2000, tfirst=182, tfreq=2000)...
	   Assign 1 to reload r182 (freq=2000)
	 Assigning to 183 (cl=DREG, orig=152, freq=2000, tfirst=183, tfreq=2000)...
	   Assign 1 to reload r183 (freq=2000)
	 Assigning to 184 (cl=DREG, orig=156, freq=2000, tfirst=184, tfreq=2000)...
	   Assign 1 to reload r184 (freq=2000)
	 Assigning to 185 (cl=DREG, orig=160, freq=2000, tfirst=185, tfreq=2000)...
	   Assign 1 to reload r185 (freq=2000)
	 Assigning to 186 (cl=DREG, orig=164, freq=2000, tfirst=186, tfreq=2000)...
	   Assign 1 to reload r186 (freq=2000)
	 Assigning to 187 (cl=GENERAL_REGS, orig=91, freq=3000, tfirst=187, tfreq=3000)...
	   Assign 0 to reload r187 (freq=3000)
	 Assigning to 188 (cl=GENERAL_REGS, orig=93, freq=3000, tfirst=188, tfreq=3000)...
	   Assign 0 to reload r188 (freq=3000)
	 Assigning to 189 (cl=GENERAL_REGS, orig=97, freq=3000, tfirst=189, tfreq=3000)...
	   Assign 0 to reload r189 (freq=3000)
	 Assigning to 190 (cl=GENERAL_REGS, orig=99, freq=3000, tfirst=190, tfreq=3000)...
	   Assign 0 to reload r190 (freq=3000)
	 Assigning to 191 (cl=GENERAL_REGS, orig=103, freq=3000, tfirst=191, tfreq=3000)...
	   Assign 0 to reload r191 (freq=3000)
	 Assigning to 192 (cl=GENERAL_REGS, orig=105, freq=3000, tfirst=192, tfreq=3000)...
	   Assign 0 to reload r192 (freq=3000)
	 Assigning to 193 (cl=GENERAL_REGS, orig=109, freq=3000, tfirst=193, tfreq=3000)...
	   Assign 0 to reload r193 (freq=3000)
	 Assigning to 194 (cl=GENERAL_REGS, orig=111, freq=3000, tfirst=194, tfreq=3000)...
	   Assign 0 to reload r194 (freq=3000)
	 Assigning to 195 (cl=GENERAL_REGS, orig=115, freq=3000, tfirst=195, tfreq=3000)...
	   Assign 0 to reload r195 (freq=3000)
	 Assigning to 196 (cl=GENERAL_REGS, orig=117, freq=3000, tfirst=196, tfreq=3000)...
	   Assign 0 to reload r196 (freq=3000)
	 Assigning to 197 (cl=GENERAL_REGS, orig=121, freq=3000, tfirst=197, tfreq=3000)...
	   Assign 0 to reload r197 (freq=3000)
	 Assigning to 198 (cl=GENERAL_REGS, orig=123, freq=3000, tfirst=198, tfreq=3000)...
	   Assign 0 to reload r198 (freq=3000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=64, prev_offset=64)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=48, prev_offset=48)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
changing reg in insn 160
changing reg in insn 154
changing reg in insn 150
changing reg in insn 12
changing reg in insn 13
changing reg in insn 21
changing reg in insn 22
changing reg in insn 30
changing reg in insn 31
changing reg in insn 39
changing reg in insn 40
changing reg in insn 48
changing reg in insn 49
changing reg in insn 57
changing reg in insn 58
changing reg in insn 59
changing reg in insn 69
changing reg in insn 67
changing reg in insn 69
changing reg in insn 72
changing reg in insn 74
changing reg in insn 78
changing reg in insn 76
changing reg in insn 78
changing reg in insn 81
changing reg in insn 82
changing reg in insn 83
changing reg in insn 84
changing reg in insn 86
changing reg in insn 90
changing reg in insn 88
changing reg in insn 90
changing reg in insn 93
changing reg in insn 94
changing reg in insn 95
changing reg in insn 96
changing reg in insn 98
changing reg in insn 102
changing reg in insn 100
changing reg in insn 102
changing reg in insn 105
changing reg in insn 106
changing reg in insn 107
changing reg in insn 108
changing reg in insn 110
changing reg in insn 114
changing reg in insn 112
changing reg in insn 114
changing reg in insn 117
changing reg in insn 118
changing reg in insn 119
changing reg in insn 120
changing reg in insn 122
changing reg in insn 126
changing reg in insn 124
changing reg in insn 126
changing reg in insn 129
changing reg in insn 130
changing reg in insn 131
changing reg in insn 132
changing reg in insn 134
changing reg in insn 138
changing reg in insn 136
changing reg in insn 138
changing reg in insn 141
changing reg in insn 142
changing reg in insn 143
changing reg in insn 144
changing reg in insn 145
changing reg in insn 145
changing reg in insn 146
changing reg in insn 153
changing reg in insn 155
changing reg in insn 11
changing reg in insn 12
changing reg in insn 20
changing reg in insn 21
changing reg in insn 29
changing reg in insn 30
changing reg in insn 38
changing reg in insn 39
changing reg in insn 47
changing reg in insn 48
changing reg in insn 56
changing reg in insn 57
changing reg in insn 66
changing reg in insn 67
changing reg in insn 5
changing reg in insn 7
changing reg in insn 6
changing reg in insn 7
changing reg in insn 10
changing reg in insn 8
changing reg in insn 9
changing reg in insn 14
changing reg in insn 16
changing reg in insn 15
changing reg in insn 16
changing reg in insn 19
changing reg in insn 17
changing reg in insn 18
changing reg in insn 23
changing reg in insn 25
changing reg in insn 24
changing reg in insn 25
changing reg in insn 28
changing reg in insn 26
changing reg in insn 27
changing reg in insn 32
changing reg in insn 34
changing reg in insn 33
changing reg in insn 34
changing reg in insn 37
changing reg in insn 35
changing reg in insn 36
changing reg in insn 41
changing reg in insn 43
changing reg in insn 42
changing reg in insn 43
changing reg in insn 46
changing reg in insn 44
changing reg in insn 45
changing reg in insn 50
changing reg in insn 52
changing reg in insn 51
changing reg in insn 52
changing reg in insn 55
changing reg in insn 53
changing reg in insn 54
changing reg in insn 60
changing reg in insn 62
changing reg in insn 61
changing reg in insn 62
changing reg in insn 65
changing reg in insn 63
changing reg in insn 64
changing reg in insn 80
changing reg in insn 78
changing reg in insn 77
changing reg in insn 76
changing reg in insn 81
changing reg in insn 79
changing reg in insn 78
changing reg in insn 77
changing reg in insn 79
changing reg in insn 80
changing reg in insn 92
changing reg in insn 90
changing reg in insn 89
changing reg in insn 88
changing reg in insn 93
changing reg in insn 91
changing reg in insn 90
changing reg in insn 89
changing reg in insn 91
changing reg in insn 92
changing reg in insn 104
changing reg in insn 102
changing reg in insn 101
changing reg in insn 100
changing reg in insn 105
changing reg in insn 103
changing reg in insn 102
changing reg in insn 101
changing reg in insn 103
changing reg in insn 104
changing reg in insn 116
changing reg in insn 114
changing reg in insn 113
changing reg in insn 112
changing reg in insn 117
changing reg in insn 115
changing reg in insn 114
changing reg in insn 113
changing reg in insn 115
changing reg in insn 116
changing reg in insn 128
changing reg in insn 126
changing reg in insn 125
changing reg in insn 124
changing reg in insn 129
changing reg in insn 127
changing reg in insn 126
changing reg in insn 125
changing reg in insn 127
changing reg in insn 128
changing reg in insn 140
changing reg in insn 138
changing reg in insn 137
changing reg in insn 136
changing reg in insn 141
changing reg in insn 139
changing reg in insn 138
changing reg in insn 137
changing reg in insn 139
changing reg in insn 140
changing reg in insn 148
changing reg in insn 149
changing reg in insn 154
changing reg in insn 155
deleting insn with uid = 169.
deleting insn with uid = 171.
deleting insn with uid = 80.
deleting insn with uid = 81.
deleting insn with uid = 173.
deleting insn with uid = 175.
deleting insn with uid = 92.
deleting insn with uid = 93.
deleting insn with uid = 177.
deleting insn with uid = 179.
deleting insn with uid = 104.
deleting insn with uid = 105.
deleting insn with uid = 181.
deleting insn with uid = 183.
deleting insn with uid = 116.
deleting insn with uid = 117.
deleting insn with uid = 185.
deleting insn with uid = 187.
deleting insn with uid = 128.
deleting insn with uid = 129.
deleting insn with uid = 189.
deleting insn with uid = 191.
deleting insn with uid = 140.
deleting insn with uid = 141.
deleting insn with uid = 150.
deleting insn with uid = 153.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 151.


time_init

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 17 [flags]
;;  ref usage 	r0={94d,93u} r1={23d,27u,6e} r2={9d,7u} r3={1d,2u} r7={4d,53u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={57d,1u} r18={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} 
;;    total ref usage 442{253d,183u,6e} in 156{155 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 160 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 160 3 2 2 (parallel [
            (set (reg:SI 3 bx [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 160 68 2 NOTE_INSN_FUNCTION_BEG)
(code_label 68 2 4 3 14 (nil) [1 uses])
(note 4 68 5 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 5 4 6 3 (set (reg:SI 0 ax [137])
        (const_int 128 [0x80])) "init/main.c":94:23 75 {*movsi_internal}
     (nil))
(insn 6 5 7 3 (set (reg:SI 1 dx [138])
        (const_int 112 [0x70])) "init/main.c":94:23 75 {*movsi_internal}
     (nil))
(insn 7 6 9 3 (parallel [
            (asm_operands/v ("outb %%al, %%dx
	jmp 1f
1:	jmp 1f
1:") ("") 0 [
                    (reg:SI 0 ax [137])
                    (reg:SI 1 dx [138])
                ]
                 [
                    (asm_input:SI ("a") init/main.c:94)
                    (asm_input:SI ("d") init/main.c:94)
                ]
                 [] init/main.c:94)
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":94:23 -1
     (nil))
(insn 9 7 162 3 (set (reg:SI 0 ax [140])
        (const_int 113 [0x71])) "init/main.c":94:23 75 {*movsi_internal}
     (nil))
(insn 162 9 10 3 (set (reg:SI 1 dx [140])
        (reg:SI 0 ax [140])) "init/main.c":94:23 75 {*movsi_internal}
     (nil))
(insn 10 162 8 3 (parallel [
            (set (reg:QI 0 ax [orig:139 _v ] [139])
                (asm_operands/v:QI ("inb %%dx, %%al
	jmp 1f
1:	jmp 1f
1:") ("=a") 0 [
                        (reg:SI 1 dx [140])
                    ]
                     [
                        (asm_input:SI ("d") init/main.c:94)
                    ]
                     [] init/main.c:94))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":94:23 -1
     (nil))
(insn 8 10 11 3 (set (mem/c:QI (plus:SI (reg/f:SI 7 sp)
                (const_int 47 [0x2f])) [0 _v+0 S1 A8])
        (reg:QI 0 ax [orig:139 _v ] [139])) "init/main.c":94:23 77 {*movqi_internal}
     (nil))
(insn 11 8 12 3 (set (reg:QI 0 ax [orig:130 _51 ] [130])
        (mem/c:QI (plus:SI (reg/f:SI 7 sp)
                (const_int 47 [0x2f])) [0 _v+0 S1 A8])) "init/main.c":94:23 77 {*movqi_internal}
     (nil))
(insn 12 11 13 3 (set (reg:SI 0 ax [orig:83 _1 ] [83])
        (zero_extend:SI (reg:QI 0 ax [orig:130 _51 ] [130]))) "init/main.c":94:23 143 {*zero_extendqisi2}
     (nil))
(insn 13 12 14 3 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [1 time.tm_sec+0 S4 A32])
        (reg:SI 0 ax [orig:83 _1 ] [83])) "init/main.c":94:21 75 {*movsi_internal}
     (nil))
(insn 14 13 15 3 (set (reg:SI 0 ax [141])
        (const_int 130 [0x82])) "init/main.c":95:23 75 {*movsi_internal}
     (nil))
(insn 15 14 16 3 (set (reg:SI 1 dx [142])
        (const_int 112 [0x70])) "init/main.c":95:23 75 {*movsi_internal}
     (nil))
(insn 16 15 18 3 (parallel [
            (asm_operands/v ("outb %%al, %%dx
	jmp 1f
1:	jmp 1f
1:") ("") 0 [
                    (reg:SI 0 ax [141])
                    (reg:SI 1 dx [142])
                ]
                 [
                    (asm_input:SI ("a") init/main.c:95)
                    (asm_input:SI ("d") init/main.c:95)
                ]
                 [] init/main.c:95)
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":95:23 -1
     (nil))
(insn 18 16 163 3 (set (reg:SI 0 ax [144])
        (const_int 113 [0x71])) "init/main.c":95:23 75 {*movsi_internal}
     (nil))
(insn 163 18 19 3 (set (reg:SI 1 dx [144])
        (reg:SI 0 ax [144])) "init/main.c":95:23 75 {*movsi_internal}
     (nil))
(insn 19 163 17 3 (parallel [
            (set (reg:QI 0 ax [orig:143 _v ] [143])
                (asm_operands/v:QI ("inb %%dx, %%al
	jmp 1f
1:	jmp 1f
1:") ("=a") 0 [
                        (reg:SI 1 dx [144])
                    ]
                     [
                        (asm_input:SI ("d") init/main.c:95)
                    ]
                     [] init/main.c:95))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":95:23 -1
     (nil))
(insn 17 19 20 3 (set (mem/c:QI (plus:SI (reg/f:SI 7 sp)
                (const_int 46 [0x2e])) [0 _v+0 S1 A16])
        (reg:QI 0 ax [orig:143 _v ] [143])) "init/main.c":95:23 77 {*movqi_internal}
     (nil))
(insn 20 17 21 3 (set (reg:QI 0 ax [orig:131 _55 ] [131])
        (mem/c:QI (plus:SI (reg/f:SI 7 sp)
                (const_int 46 [0x2e])) [0 _v+0 S1 A16])) "init/main.c":95:23 77 {*movqi_internal}
     (nil))
(insn 21 20 22 3 (set (reg:SI 0 ax [orig:84 _2 ] [84])
        (zero_extend:SI (reg:QI 0 ax [orig:131 _55 ] [131]))) "init/main.c":95:23 143 {*zero_extendqisi2}
     (nil))
(insn 22 21 23 3 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [1 time.tm_min+0 S4 A32])
        (reg:SI 0 ax [orig:84 _2 ] [84])) "init/main.c":95:21 75 {*movsi_internal}
     (nil))
(insn 23 22 24 3 (set (reg:SI 0 ax [145])
        (const_int 132 [0x84])) "init/main.c":96:24 75 {*movsi_internal}
     (nil))
(insn 24 23 25 3 (set (reg:SI 1 dx [146])
        (const_int 112 [0x70])) "init/main.c":96:24 75 {*movsi_internal}
     (nil))
(insn 25 24 27 3 (parallel [
            (asm_operands/v ("outb %%al, %%dx
	jmp 1f
1:	jmp 1f
1:") ("") 0 [
                    (reg:SI 0 ax [145])
                    (reg:SI 1 dx [146])
                ]
                 [
                    (asm_input:SI ("a") init/main.c:96)
                    (asm_input:SI ("d") init/main.c:96)
                ]
                 [] init/main.c:96)
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":96:24 -1
     (nil))
(insn 27 25 164 3 (set (reg:SI 0 ax [148])
        (const_int 113 [0x71])) "init/main.c":96:24 75 {*movsi_internal}
     (nil))
(insn 164 27 28 3 (set (reg:SI 1 dx [148])
        (reg:SI 0 ax [148])) "init/main.c":96:24 75 {*movsi_internal}
     (nil))
(insn 28 164 26 3 (parallel [
            (set (reg:QI 0 ax [orig:147 _v ] [147])
                (asm_operands/v:QI ("inb %%dx, %%al
	jmp 1f
1:	jmp 1f
1:") ("=a") 0 [
                        (reg:SI 1 dx [148])
                    ]
                     [
                        (asm_input:SI ("d") init/main.c:96)
                    ]
                     [] init/main.c:96))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":96:24 -1
     (nil))
(insn 26 28 29 3 (set (mem/c:QI (plus:SI (reg/f:SI 7 sp)
                (const_int 45 [0x2d])) [0 _v+0 S1 A8])
        (reg:QI 0 ax [orig:147 _v ] [147])) "init/main.c":96:24 77 {*movqi_internal}
     (nil))
(insn 29 26 30 3 (set (reg:QI 0 ax [orig:132 _59 ] [132])
        (mem/c:QI (plus:SI (reg/f:SI 7 sp)
                (const_int 45 [0x2d])) [0 _v+0 S1 A8])) "init/main.c":96:24 77 {*movqi_internal}
     (nil))
(insn 30 29 31 3 (set (reg:SI 0 ax [orig:85 _3 ] [85])
        (zero_extend:SI (reg:QI 0 ax [orig:132 _59 ] [132]))) "init/main.c":96:24 143 {*zero_extendqisi2}
     (nil))
(insn 31 30 32 3 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [1 time.tm_hour+0 S4 A32])
        (reg:SI 0 ax [orig:85 _3 ] [85])) "init/main.c":96:22 75 {*movsi_internal}
     (nil))
(insn 32 31 33 3 (set (reg:SI 0 ax [149])
        (const_int 135 [0x87])) "init/main.c":97:24 75 {*movsi_internal}
     (nil))
(insn 33 32 34 3 (set (reg:SI 1 dx [150])
        (const_int 112 [0x70])) "init/main.c":97:24 75 {*movsi_internal}
     (nil))
(insn 34 33 36 3 (parallel [
            (asm_operands/v ("outb %%al, %%dx
	jmp 1f
1:	jmp 1f
1:") ("") 0 [
                    (reg:SI 0 ax [149])
                    (reg:SI 1 dx [150])
                ]
                 [
                    (asm_input:SI ("a") init/main.c:97)
                    (asm_input:SI ("d") init/main.c:97)
                ]
                 [] init/main.c:97)
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":97:24 -1
     (nil))
(insn 36 34 165 3 (set (reg:SI 0 ax [152])
        (const_int 113 [0x71])) "init/main.c":97:24 75 {*movsi_internal}
     (nil))
(insn 165 36 37 3 (set (reg:SI 1 dx [152])
        (reg:SI 0 ax [152])) "init/main.c":97:24 75 {*movsi_internal}
     (nil))
(insn 37 165 35 3 (parallel [
            (set (reg:QI 0 ax [orig:151 _v ] [151])
                (asm_operands/v:QI ("inb %%dx, %%al
	jmp 1f
1:	jmp 1f
1:") ("=a") 0 [
                        (reg:SI 1 dx [152])
                    ]
                     [
                        (asm_input:SI ("d") init/main.c:97)
                    ]
                     [] init/main.c:97))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":97:24 -1
     (nil))
(insn 35 37 38 3 (set (mem/c:QI (plus:SI (reg/f:SI 7 sp)
                (const_int 44 [0x2c])) [0 _v+0 S1 A32])
        (reg:QI 0 ax [orig:151 _v ] [151])) "init/main.c":97:24 77 {*movqi_internal}
     (nil))
(insn 38 35 39 3 (set (reg:QI 0 ax [orig:133 _63 ] [133])
        (mem/c:QI (plus:SI (reg/f:SI 7 sp)
                (const_int 44 [0x2c])) [0 _v+0 S1 A32])) "init/main.c":97:24 77 {*movqi_internal}
     (nil))
(insn 39 38 40 3 (set (reg:SI 0 ax [orig:86 _4 ] [86])
        (zero_extend:SI (reg:QI 0 ax [orig:133 _63 ] [133]))) "init/main.c":97:24 143 {*zero_extendqisi2}
     (nil))
(insn 40 39 41 3 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [1 time.tm_mday+0 S4 A32])
        (reg:SI 0 ax [orig:86 _4 ] [86])) "init/main.c":97:22 75 {*movsi_internal}
     (nil))
(insn 41 40 42 3 (set (reg:SI 0 ax [153])
        (const_int 136 [0x88])) "init/main.c":98:23 75 {*movsi_internal}
     (nil))
(insn 42 41 43 3 (set (reg:SI 1 dx [154])
        (const_int 112 [0x70])) "init/main.c":98:23 75 {*movsi_internal}
     (nil))
(insn 43 42 45 3 (parallel [
            (asm_operands/v ("outb %%al, %%dx
	jmp 1f
1:	jmp 1f
1:") ("") 0 [
                    (reg:SI 0 ax [153])
                    (reg:SI 1 dx [154])
                ]
                 [
                    (asm_input:SI ("a") init/main.c:98)
                    (asm_input:SI ("d") init/main.c:98)
                ]
                 [] init/main.c:98)
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":98:23 -1
     (nil))
(insn 45 43 166 3 (set (reg:SI 0 ax [156])
        (const_int 113 [0x71])) "init/main.c":98:23 75 {*movsi_internal}
     (nil))
(insn 166 45 46 3 (set (reg:SI 1 dx [156])
        (reg:SI 0 ax [156])) "init/main.c":98:23 75 {*movsi_internal}
     (nil))
(insn 46 166 44 3 (parallel [
            (set (reg:QI 0 ax [orig:155 _v ] [155])
                (asm_operands/v:QI ("inb %%dx, %%al
	jmp 1f
1:	jmp 1f
1:") ("=a") 0 [
                        (reg:SI 1 dx [156])
                    ]
                     [
                        (asm_input:SI ("d") init/main.c:98)
                    ]
                     [] init/main.c:98))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":98:23 -1
     (nil))
(insn 44 46 47 3 (set (mem/c:QI (plus:SI (reg/f:SI 7 sp)
                (const_int 43 [0x2b])) [0 _v+0 S1 A8])
        (reg:QI 0 ax [orig:155 _v ] [155])) "init/main.c":98:23 77 {*movqi_internal}
     (nil))
(insn 47 44 48 3 (set (reg:QI 0 ax [orig:134 _67 ] [134])
        (mem/c:QI (plus:SI (reg/f:SI 7 sp)
                (const_int 43 [0x2b])) [0 _v+0 S1 A8])) "init/main.c":98:23 77 {*movqi_internal}
     (nil))
(insn 48 47 49 3 (set (reg:SI 0 ax [orig:87 _5 ] [87])
        (zero_extend:SI (reg:QI 0 ax [orig:134 _67 ] [134]))) "init/main.c":98:23 143 {*zero_extendqisi2}
     (nil))
(insn 49 48 50 3 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [1 time.tm_mon+0 S4 A32])
        (reg:SI 0 ax [orig:87 _5 ] [87])) "init/main.c":98:21 75 {*movsi_internal}
     (nil))
(insn 50 49 51 3 (set (reg:SI 0 ax [157])
        (const_int 137 [0x89])) "init/main.c":99:24 75 {*movsi_internal}
     (nil))
(insn 51 50 52 3 (set (reg:SI 1 dx [158])
        (const_int 112 [0x70])) "init/main.c":99:24 75 {*movsi_internal}
     (nil))
(insn 52 51 54 3 (parallel [
            (asm_operands/v ("outb %%al, %%dx
	jmp 1f
1:	jmp 1f
1:") ("") 0 [
                    (reg:SI 0 ax [157])
                    (reg:SI 1 dx [158])
                ]
                 [
                    (asm_input:SI ("a") init/main.c:99)
                    (asm_input:SI ("d") init/main.c:99)
                ]
                 [] init/main.c:99)
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":99:24 -1
     (nil))
(insn 54 52 167 3 (set (reg:SI 0 ax [160])
        (const_int 113 [0x71])) "init/main.c":99:24 75 {*movsi_internal}
     (nil))
(insn 167 54 55 3 (set (reg:SI 1 dx [160])
        (reg:SI 0 ax [160])) "init/main.c":99:24 75 {*movsi_internal}
     (nil))
(insn 55 167 53 3 (parallel [
            (set (reg:QI 0 ax [orig:159 _v ] [159])
                (asm_operands/v:QI ("inb %%dx, %%al
	jmp 1f
1:	jmp 1f
1:") ("=a") 0 [
                        (reg:SI 1 dx [160])
                    ]
                     [
                        (asm_input:SI ("d") init/main.c:99)
                    ]
                     [] init/main.c:99))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":99:24 -1
     (nil))
(insn 53 55 56 3 (set (mem/c:QI (plus:SI (reg/f:SI 7 sp)
                (const_int 42 [0x2a])) [0 _v+0 S1 A16])
        (reg:QI 0 ax [orig:159 _v ] [159])) "init/main.c":99:24 77 {*movqi_internal}
     (nil))
(insn 56 53 57 3 (set (reg:QI 0 ax [orig:135 _71 ] [135])
        (mem/c:QI (plus:SI (reg/f:SI 7 sp)
                (const_int 42 [0x2a])) [0 _v+0 S1 A16])) "init/main.c":99:24 77 {*movqi_internal}
     (nil))
(insn 57 56 58 3 (set (reg:SI 0 ax [orig:88 _6 ] [88])
        (zero_extend:SI (reg:QI 0 ax [orig:135 _71 ] [135]))) "init/main.c":99:24 143 {*zero_extendqisi2}
     (nil))
(insn 58 57 59 3 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [1 time.tm_year+0 S4 A32])
        (reg:SI 0 ax [orig:88 _6 ] [88])) "init/main.c":99:22 75 {*movsi_internal}
     (nil))
(insn 59 58 60 3 (set (reg:SI 2 cx [orig:89 _7 ] [89])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [1 time.tm_sec+0 S4 A32])) "init/main.c":100:18 75 {*movsi_internal}
     (nil))
(insn 60 59 61 3 (set (reg:SI 0 ax [161])
        (const_int 128 [0x80])) "init/main.c":100:29 75 {*movsi_internal}
     (nil))
(insn 61 60 62 3 (set (reg:SI 1 dx [162])
        (const_int 112 [0x70])) "init/main.c":100:29 75 {*movsi_internal}
     (nil))
(insn 62 61 64 3 (parallel [
            (asm_operands/v ("outb %%al, %%dx
	jmp 1f
1:	jmp 1f
1:") ("") 0 [
                    (reg:SI 0 ax [161])
                    (reg:SI 1 dx [162])
                ]
                 [
                    (asm_input:SI ("a") init/main.c:100)
                    (asm_input:SI ("d") init/main.c:100)
                ]
                 [] init/main.c:100)
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":100:29 -1
     (nil))
(insn 64 62 168 3 (set (reg:SI 0 ax [164])
        (const_int 113 [0x71])) "init/main.c":100:29 75 {*movsi_internal}
     (nil))
(insn 168 64 65 3 (set (reg:SI 1 dx [164])
        (reg:SI 0 ax [164])) "init/main.c":100:29 75 {*movsi_internal}
     (nil))
(insn 65 168 63 3 (parallel [
            (set (reg:QI 0 ax [orig:163 _v ] [163])
                (asm_operands/v:QI ("inb %%dx, %%al
	jmp 1f
1:	jmp 1f
1:") ("=a") 0 [
                        (reg:SI 1 dx [164])
                    ]
                     [
                        (asm_input:SI ("d") init/main.c:100)
                    ]
                     [] init/main.c:100))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":100:29 -1
     (nil))
(insn 63 65 66 3 (set (mem/c:QI (plus:SI (reg/f:SI 7 sp)
                (const_int 41 [0x29])) [0 _v+0 S1 A8])
        (reg:QI 0 ax [orig:163 _v ] [163])) "init/main.c":100:29 77 {*movqi_internal}
     (nil))
(insn 66 63 67 3 (set (reg:QI 0 ax [orig:136 _75 ] [136])
        (mem/c:QI (plus:SI (reg/f:SI 7 sp)
                (const_int 41 [0x29])) [0 _v+0 S1 A8])) "init/main.c":100:29 77 {*movqi_internal}
     (nil))
(insn 67 66 69 3 (set (reg:SI 0 ax [orig:90 _8 ] [90])
        (zero_extend:SI (reg:QI 0 ax [orig:136 _75 ] [136]))) "init/main.c":100:29 143 {*zero_extendqisi2}
     (nil))
(insn 69 67 70 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 2 cx [orig:89 _7 ] [89])
            (reg:SI 0 ax [orig:90 _8 ] [90]))) "init/main.c":100:26 11 {*cmpsi_1}
     (nil))
(jump_insn 70 69 71 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 68)
            (pc))) "init/main.c":100:26 806 {*jcc}
     (nil)
 -> 68)
(note 71 70 72 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 72 71 73 4 (set (reg:SI 0 ax [orig:91 _9 ] [91])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [1 time.tm_sec+0 S4 A32])) "init/main.c":102:5 75 {*movsi_internal}
     (nil))
(insn 73 72 170 4 (parallel [
            (set (reg:SI 0 ax [orig:91 _9 ] [91])
                (and:SI (reg:SI 0 ax [orig:91 _9 ] [91])
                    (const_int 15 [0xf])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":102:5 490 {*andsi_1}
     (nil))
(insn 170 73 74 4 (set (reg:SI 2 cx [orig:92 _10 ] [92])
        (reg:SI 0 ax [orig:91 _9 ] [91])) "init/main.c":102:5 75 {*movsi_internal}
     (nil))
(insn 74 170 75 4 (set (reg:SI 0 ax [orig:93 _11 ] [93])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [1 time.tm_sec+0 S4 A32])) "init/main.c":102:5 75 {*movsi_internal}
     (nil))
(insn 75 74 172 4 (parallel [
            (set (reg:SI 0 ax [orig:93 _11 ] [93])
                (ashiftrt:SI (reg:SI 0 ax [orig:93 _11 ] [93])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":102:5 702 {*ashrsi3_1}
     (nil))
(insn 172 75 76 4 (set (reg:SI 1 dx [orig:94 _12 ] [94])
        (reg:SI 0 ax [orig:93 _11 ] [93])) "init/main.c":102:5 75 {*movsi_internal}
     (nil))
(insn 76 172 77 4 (set (reg:SI 0 ax [165])
        (reg:SI 1 dx [orig:94 _12 ] [94])) "init/main.c":102:5 75 {*movsi_internal}
     (nil))
(insn 77 76 78 4 (parallel [
            (set (reg:SI 0 ax [165])
                (ashift:SI (reg:SI 0 ax [165])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":102:5 655 {*ashlsi3_1}
     (nil))
(insn 78 77 79 4 (parallel [
            (set (reg:SI 0 ax [165])
                (plus:SI (reg:SI 0 ax [165])
                    (reg:SI 1 dx [orig:94 _12 ] [94])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":102:5 209 {*addsi_1}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 1 dx [orig:94 _12 ] [94])
            (const_int 5 [0x5]))
        (nil)))
(insn 79 78 82 4 (parallel [
            (set (reg:SI 0 ax [166])
                (ashift:SI (reg:SI 0 ax [165])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":102:5 655 {*ashlsi3_1}
     (nil))
(insn 82 79 83 4 (parallel [
            (set (reg:SI 0 ax [orig:96 _14 ] [96])
                (plus:SI (reg:SI 0 ax [orig:95 _13 ] [95])
                    (reg:SI 2 cx [orig:92 _10 ] [92])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":102:5 209 {*addsi_1}
     (nil))
(insn 83 82 84 4 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [1 time.tm_sec+0 S4 A32])
        (reg:SI 0 ax [orig:96 _14 ] [96])) "init/main.c":102:5 75 {*movsi_internal}
     (nil))
(insn 84 83 85 4 (set (reg:SI 0 ax [orig:97 _15 ] [97])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [1 time.tm_min+0 S4 A32])) "init/main.c":103:5 75 {*movsi_internal}
     (nil))
(insn 85 84 174 4 (parallel [
            (set (reg:SI 0 ax [orig:97 _15 ] [97])
                (and:SI (reg:SI 0 ax [orig:97 _15 ] [97])
                    (const_int 15 [0xf])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":103:5 490 {*andsi_1}
     (nil))
(insn 174 85 86 4 (set (reg:SI 2 cx [orig:98 _16 ] [98])
        (reg:SI 0 ax [orig:97 _15 ] [97])) "init/main.c":103:5 75 {*movsi_internal}
     (nil))
(insn 86 174 87 4 (set (reg:SI 0 ax [orig:99 _17 ] [99])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [1 time.tm_min+0 S4 A32])) "init/main.c":103:5 75 {*movsi_internal}
     (nil))
(insn 87 86 176 4 (parallel [
            (set (reg:SI 0 ax [orig:99 _17 ] [99])
                (ashiftrt:SI (reg:SI 0 ax [orig:99 _17 ] [99])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":103:5 702 {*ashrsi3_1}
     (nil))
(insn 176 87 88 4 (set (reg:SI 1 dx [orig:100 _18 ] [100])
        (reg:SI 0 ax [orig:99 _17 ] [99])) "init/main.c":103:5 75 {*movsi_internal}
     (nil))
(insn 88 176 89 4 (set (reg:SI 0 ax [167])
        (reg:SI 1 dx [orig:100 _18 ] [100])) "init/main.c":103:5 75 {*movsi_internal}
     (nil))
(insn 89 88 90 4 (parallel [
            (set (reg:SI 0 ax [167])
                (ashift:SI (reg:SI 0 ax [167])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":103:5 655 {*ashlsi3_1}
     (nil))
(insn 90 89 91 4 (parallel [
            (set (reg:SI 0 ax [167])
                (plus:SI (reg:SI 0 ax [167])
                    (reg:SI 1 dx [orig:100 _18 ] [100])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":103:5 209 {*addsi_1}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 1 dx [orig:100 _18 ] [100])
            (const_int 5 [0x5]))
        (nil)))
(insn 91 90 94 4 (parallel [
            (set (reg:SI 0 ax [168])
                (ashift:SI (reg:SI 0 ax [167])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":103:5 655 {*ashlsi3_1}
     (nil))
(insn 94 91 95 4 (parallel [
            (set (reg:SI 0 ax [orig:102 _20 ] [102])
                (plus:SI (reg:SI 0 ax [orig:101 _19 ] [101])
                    (reg:SI 2 cx [orig:98 _16 ] [98])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":103:5 209 {*addsi_1}
     (nil))
(insn 95 94 96 4 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [1 time.tm_min+0 S4 A32])
        (reg:SI 0 ax [orig:102 _20 ] [102])) "init/main.c":103:5 75 {*movsi_internal}
     (nil))
(insn 96 95 97 4 (set (reg:SI 0 ax [orig:103 _21 ] [103])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [1 time.tm_hour+0 S4 A32])) "init/main.c":104:5 75 {*movsi_internal}
     (nil))
(insn 97 96 178 4 (parallel [
            (set (reg:SI 0 ax [orig:103 _21 ] [103])
                (and:SI (reg:SI 0 ax [orig:103 _21 ] [103])
                    (const_int 15 [0xf])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":104:5 490 {*andsi_1}
     (nil))
(insn 178 97 98 4 (set (reg:SI 2 cx [orig:104 _22 ] [104])
        (reg:SI 0 ax [orig:103 _21 ] [103])) "init/main.c":104:5 75 {*movsi_internal}
     (nil))
(insn 98 178 99 4 (set (reg:SI 0 ax [orig:105 _23 ] [105])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [1 time.tm_hour+0 S4 A32])) "init/main.c":104:5 75 {*movsi_internal}
     (nil))
(insn 99 98 180 4 (parallel [
            (set (reg:SI 0 ax [orig:105 _23 ] [105])
                (ashiftrt:SI (reg:SI 0 ax [orig:105 _23 ] [105])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":104:5 702 {*ashrsi3_1}
     (nil))
(insn 180 99 100 4 (set (reg:SI 1 dx [orig:106 _24 ] [106])
        (reg:SI 0 ax [orig:105 _23 ] [105])) "init/main.c":104:5 75 {*movsi_internal}
     (nil))
(insn 100 180 101 4 (set (reg:SI 0 ax [169])
        (reg:SI 1 dx [orig:106 _24 ] [106])) "init/main.c":104:5 75 {*movsi_internal}
     (nil))
(insn 101 100 102 4 (parallel [
            (set (reg:SI 0 ax [169])
                (ashift:SI (reg:SI 0 ax [169])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":104:5 655 {*ashlsi3_1}
     (nil))
(insn 102 101 103 4 (parallel [
            (set (reg:SI 0 ax [169])
                (plus:SI (reg:SI 0 ax [169])
                    (reg:SI 1 dx [orig:106 _24 ] [106])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":104:5 209 {*addsi_1}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 1 dx [orig:106 _24 ] [106])
            (const_int 5 [0x5]))
        (nil)))
(insn 103 102 106 4 (parallel [
            (set (reg:SI 0 ax [170])
                (ashift:SI (reg:SI 0 ax [169])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":104:5 655 {*ashlsi3_1}
     (nil))
(insn 106 103 107 4 (parallel [
            (set (reg:SI 0 ax [orig:108 _26 ] [108])
                (plus:SI (reg:SI 0 ax [orig:107 _25 ] [107])
                    (reg:SI 2 cx [orig:104 _22 ] [104])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":104:5 209 {*addsi_1}
     (nil))
(insn 107 106 108 4 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [1 time.tm_hour+0 S4 A32])
        (reg:SI 0 ax [orig:108 _26 ] [108])) "init/main.c":104:5 75 {*movsi_internal}
     (nil))
(insn 108 107 109 4 (set (reg:SI 0 ax [orig:109 _27 ] [109])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [1 time.tm_mday+0 S4 A32])) "init/main.c":105:5 75 {*movsi_internal}
     (nil))
(insn 109 108 182 4 (parallel [
            (set (reg:SI 0 ax [orig:109 _27 ] [109])
                (and:SI (reg:SI 0 ax [orig:109 _27 ] [109])
                    (const_int 15 [0xf])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":105:5 490 {*andsi_1}
     (nil))
(insn 182 109 110 4 (set (reg:SI 2 cx [orig:110 _28 ] [110])
        (reg:SI 0 ax [orig:109 _27 ] [109])) "init/main.c":105:5 75 {*movsi_internal}
     (nil))
(insn 110 182 111 4 (set (reg:SI 0 ax [orig:111 _29 ] [111])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [1 time.tm_mday+0 S4 A32])) "init/main.c":105:5 75 {*movsi_internal}
     (nil))
(insn 111 110 184 4 (parallel [
            (set (reg:SI 0 ax [orig:111 _29 ] [111])
                (ashiftrt:SI (reg:SI 0 ax [orig:111 _29 ] [111])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":105:5 702 {*ashrsi3_1}
     (nil))
(insn 184 111 112 4 (set (reg:SI 1 dx [orig:112 _30 ] [112])
        (reg:SI 0 ax [orig:111 _29 ] [111])) "init/main.c":105:5 75 {*movsi_internal}
     (nil))
(insn 112 184 113 4 (set (reg:SI 0 ax [171])
        (reg:SI 1 dx [orig:112 _30 ] [112])) "init/main.c":105:5 75 {*movsi_internal}
     (nil))
(insn 113 112 114 4 (parallel [
            (set (reg:SI 0 ax [171])
                (ashift:SI (reg:SI 0 ax [171])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":105:5 655 {*ashlsi3_1}
     (nil))
(insn 114 113 115 4 (parallel [
            (set (reg:SI 0 ax [171])
                (plus:SI (reg:SI 0 ax [171])
                    (reg:SI 1 dx [orig:112 _30 ] [112])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":105:5 209 {*addsi_1}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 1 dx [orig:112 _30 ] [112])
            (const_int 5 [0x5]))
        (nil)))
(insn 115 114 118 4 (parallel [
            (set (reg:SI 0 ax [172])
                (ashift:SI (reg:SI 0 ax [171])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":105:5 655 {*ashlsi3_1}
     (nil))
(insn 118 115 119 4 (parallel [
            (set (reg:SI 0 ax [orig:114 _32 ] [114])
                (plus:SI (reg:SI 0 ax [orig:113 _31 ] [113])
                    (reg:SI 2 cx [orig:110 _28 ] [110])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":105:5 209 {*addsi_1}
     (nil))
(insn 119 118 120 4 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [1 time.tm_mday+0 S4 A32])
        (reg:SI 0 ax [orig:114 _32 ] [114])) "init/main.c":105:5 75 {*movsi_internal}
     (nil))
(insn 120 119 121 4 (set (reg:SI 0 ax [orig:115 _33 ] [115])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [1 time.tm_mon+0 S4 A32])) "init/main.c":106:5 75 {*movsi_internal}
     (nil))
(insn 121 120 186 4 (parallel [
            (set (reg:SI 0 ax [orig:115 _33 ] [115])
                (and:SI (reg:SI 0 ax [orig:115 _33 ] [115])
                    (const_int 15 [0xf])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":106:5 490 {*andsi_1}
     (nil))
(insn 186 121 122 4 (set (reg:SI 2 cx [orig:116 _34 ] [116])
        (reg:SI 0 ax [orig:115 _33 ] [115])) "init/main.c":106:5 75 {*movsi_internal}
     (nil))
(insn 122 186 123 4 (set (reg:SI 0 ax [orig:117 _35 ] [117])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [1 time.tm_mon+0 S4 A32])) "init/main.c":106:5 75 {*movsi_internal}
     (nil))
(insn 123 122 188 4 (parallel [
            (set (reg:SI 0 ax [orig:117 _35 ] [117])
                (ashiftrt:SI (reg:SI 0 ax [orig:117 _35 ] [117])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":106:5 702 {*ashrsi3_1}
     (nil))
(insn 188 123 124 4 (set (reg:SI 1 dx [orig:118 _36 ] [118])
        (reg:SI 0 ax [orig:117 _35 ] [117])) "init/main.c":106:5 75 {*movsi_internal}
     (nil))
(insn 124 188 125 4 (set (reg:SI 0 ax [173])
        (reg:SI 1 dx [orig:118 _36 ] [118])) "init/main.c":106:5 75 {*movsi_internal}
     (nil))
(insn 125 124 126 4 (parallel [
            (set (reg:SI 0 ax [173])
                (ashift:SI (reg:SI 0 ax [173])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":106:5 655 {*ashlsi3_1}
     (nil))
(insn 126 125 127 4 (parallel [
            (set (reg:SI 0 ax [173])
                (plus:SI (reg:SI 0 ax [173])
                    (reg:SI 1 dx [orig:118 _36 ] [118])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":106:5 209 {*addsi_1}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 1 dx [orig:118 _36 ] [118])
            (const_int 5 [0x5]))
        (nil)))
(insn 127 126 130 4 (parallel [
            (set (reg:SI 0 ax [174])
                (ashift:SI (reg:SI 0 ax [173])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":106:5 655 {*ashlsi3_1}
     (nil))
(insn 130 127 131 4 (parallel [
            (set (reg:SI 0 ax [orig:120 _38 ] [120])
                (plus:SI (reg:SI 0 ax [orig:119 _37 ] [119])
                    (reg:SI 2 cx [orig:116 _34 ] [116])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":106:5 209 {*addsi_1}
     (nil))
(insn 131 130 132 4 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [1 time.tm_mon+0 S4 A32])
        (reg:SI 0 ax [orig:120 _38 ] [120])) "init/main.c":106:5 75 {*movsi_internal}
     (nil))
(insn 132 131 133 4 (set (reg:SI 0 ax [orig:121 _39 ] [121])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [1 time.tm_year+0 S4 A32])) "init/main.c":107:5 75 {*movsi_internal}
     (nil))
(insn 133 132 190 4 (parallel [
            (set (reg:SI 0 ax [orig:121 _39 ] [121])
                (and:SI (reg:SI 0 ax [orig:121 _39 ] [121])
                    (const_int 15 [0xf])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":107:5 490 {*andsi_1}
     (nil))
(insn 190 133 134 4 (set (reg:SI 2 cx [orig:122 _40 ] [122])
        (reg:SI 0 ax [orig:121 _39 ] [121])) "init/main.c":107:5 75 {*movsi_internal}
     (nil))
(insn 134 190 135 4 (set (reg:SI 0 ax [orig:123 _41 ] [123])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [1 time.tm_year+0 S4 A32])) "init/main.c":107:5 75 {*movsi_internal}
     (nil))
(insn 135 134 192 4 (parallel [
            (set (reg:SI 0 ax [orig:123 _41 ] [123])
                (ashiftrt:SI (reg:SI 0 ax [orig:123 _41 ] [123])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":107:5 702 {*ashrsi3_1}
     (nil))
(insn 192 135 136 4 (set (reg:SI 1 dx [orig:124 _42 ] [124])
        (reg:SI 0 ax [orig:123 _41 ] [123])) "init/main.c":107:5 75 {*movsi_internal}
     (nil))
(insn 136 192 137 4 (set (reg:SI 0 ax [175])
        (reg:SI 1 dx [orig:124 _42 ] [124])) "init/main.c":107:5 75 {*movsi_internal}
     (nil))
(insn 137 136 138 4 (parallel [
            (set (reg:SI 0 ax [175])
                (ashift:SI (reg:SI 0 ax [175])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":107:5 655 {*ashlsi3_1}
     (nil))
(insn 138 137 139 4 (parallel [
            (set (reg:SI 0 ax [175])
                (plus:SI (reg:SI 0 ax [175])
                    (reg:SI 1 dx [orig:124 _42 ] [124])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":107:5 209 {*addsi_1}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 1 dx [orig:124 _42 ] [124])
            (const_int 5 [0x5]))
        (nil)))
(insn 139 138 142 4 (parallel [
            (set (reg:SI 0 ax [176])
                (ashift:SI (reg:SI 0 ax [175])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":107:5 655 {*ashlsi3_1}
     (nil))
(insn 142 139 143 4 (parallel [
            (set (reg:SI 0 ax [orig:126 _44 ] [126])
                (plus:SI (reg:SI 0 ax [orig:125 _43 ] [125])
                    (reg:SI 2 cx [orig:122 _40 ] [122])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":107:5 209 {*addsi_1}
     (nil))
(insn 143 142 144 4 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [1 time.tm_year+0 S4 A32])
        (reg:SI 0 ax [orig:126 _44 ] [126])) "init/main.c":107:5 75 {*movsi_internal}
     (nil))
(insn 144 143 145 4 (set (reg:SI 0 ax [orig:127 _45 ] [127])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [1 time.tm_mon+0 S4 A32])) "init/main.c":108:9 75 {*movsi_internal}
     (nil))
(insn 145 144 146 4 (parallel [
            (set (reg:SI 0 ax [orig:128 _46 ] [128])
                (plus:SI (reg:SI 0 ax [orig:127 _45 ] [127])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":108:16 209 {*addsi_1}
     (nil))
(insn 146 145 147 4 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [1 time.tm_mon+0 S4 A32])
        (reg:SI 0 ax [orig:128 _46 ] [128])) "init/main.c":108:16 75 {*movsi_internal}
     (nil))
(insn 147 146 148 4 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":109:20 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 148 147 149 4 (parallel [
            (set (reg:SI 0 ax [177])
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":109:20 209 {*addsi_1}
     (nil))
(insn 149 148 151 4 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [8  S4 A32])
        (reg:SI 0 ax [177])) "init/main.c":109:20 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 151 149 152 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("kernel_mktime") [flags 0x41]  <function_decl 0x7f489ab76f00 kernel_mktime>) [0 kernel_mktime S1 A8])
            (const_int 16 [0x10]))) "init/main.c":109:20 823 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 152 151 154 4 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":109:20 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 154 152 155 4 (set (reg/f:SI 1 dx [178])
        (mem/u/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("startup_time") [flags 0x40]  <var_decl 0x7f489ab40480 startup_time>)
                        ] UNSPEC_GOT))) [4  S4 A8])) "init/main.c":109:18 75 {*movsi_internal}
     (nil))
(insn 155 154 158 4 (set (mem/c:SI (reg/f:SI 1 dx [178]) [3 startup_time+0 S4 A32])
        (reg:SI 0 ax [orig:129 _47 ] [129])) "init/main.c":109:18 75 {*movsi_internal}
     (nil))
(note 158 155 159 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 159 158 161 5 (const_int 0 [0]) "init/main.c":110:1 843 {nop}
     (nil))
(note 161 159 0 NOTE_INSN_DELETED)

;; Function memory_detect (memory_detect, funcdef_no=6, decl_uid=1661, cgraph_uid=7, symbol_order=12)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=4, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 6:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) rm {*zero_extendhisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 9:  (0) =rm  (1) %0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 12:  (0) =rm  (1) %0  (2) re {*andsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 20:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 29:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 40:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 45:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 49:  (0) m  (1) re {*movsi_internal}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2 3
EBB 4 5
EBB 6 7
EBB 8
EBB 9 10

********** Pseudo live ranges #1: **********

  BB 10
   Insn 57: point = 0, n_alt = -1
  BB 9
   Insn 49: point = 0, n_alt = 1
   Insn 48: point = 1, n_alt = 0
  BB 7
   Insn 54: point = 3, n_alt = -1
   Insn 40: point = 3, n_alt = 1
  BB 5
   Insn 52: point = 4, n_alt = -1
   Insn 29: point = 4, n_alt = 1
  BB 8
   Insn 45: point = 5, n_alt = 1
  BB 6
   Insn 38: point = 6, n_alt = -1
   Insn 37: point = 6, n_alt = 0
   Insn 34: point = 7, n_alt = 0
  BB 4
   Insn 27: point = 9, n_alt = -1
   Insn 26: point = 9, n_alt = 0
   Insn 23: point = 10, n_alt = 0
  BB 3
   Insn 20: point = 12, n_alt = 1
  BB 2
   Insn 18: point = 13, n_alt = -1
   Insn 17: point = 13, n_alt = 0
   Insn 14: point = 14, n_alt = 0
   Insn 13: point = 15, n_alt = 1
   Insn 12: point = 16, n_alt = 0
   Insn 11: point = 18, n_alt = 0
   Insn 10: point = 19, n_alt = 1
   Insn 9: point = 20, n_alt = 0
   Insn 8: point = 22, n_alt = 0
   Insn 7: point = 24, n_alt = 0
   Insn 6: point = 26, n_alt = 2
   Insn 5: point = 28, n_alt = 0
   Insn 58: point = 29, n_alt = 0
 r82: [0..29]
 r83: [27..28]
 r84: [25..26]
 r85: [23..24]
 r86: [21..22]
 r87: [19..20]
 r88: [17..18]
 r89: [15..16]
 r90: [13..14]
 r91: [9..10]
 r92: [6..7]
 r93: [0..1]
Compressing live ranges: from 30 to 22 - 73%
Ranges after the compression:
 r82: [0..21]
 r83: [20..21]
 r84: [18..19]
 r85: [16..17]
 r86: [14..15]
 r87: [12..13]
 r88: [10..11]
 r89: [8..9]
 r90: [6..7]
 r91: [4..5]
 r92: [2..3]
 r93: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=4, prev_offset=4)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 58
changing reg in insn 49
changing reg in insn 48
changing reg in insn 45
changing reg in insn 40
changing reg in insn 34
changing reg in insn 29
changing reg in insn 23
changing reg in insn 20
changing reg in insn 14
changing reg in insn 13
changing reg in insn 11
changing reg in insn 10
changing reg in insn 5
changing reg in insn 6
changing reg in insn 6
changing reg in insn 7
changing reg in insn 7
changing reg in insn 8
changing reg in insn 8
changing reg in insn 9
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 17
changing reg in insn 23
changing reg in insn 26
changing reg in insn 34
changing reg in insn 37
changing reg in insn 48
changing reg in insn 49
starting the processing of deferred insns
ending the processing of deferred insns


memory_detect

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 17 [flags]
;;  ref usage 	r0={2d,12u} r1={12d,11u} r2={1d} r7={1d,10u} r17={7d,3u} 
;;    total ref usage 59{23d,36u,0e} in 28{28 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 58 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 58 3 2 2 (parallel [
            (set (reg:SI 0 ax [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 58 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 1 dx [orig:83 _1 ] [83])
        (const_int 589826 [0x90002])) "init/main.c":120:37 75 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (reg:HI 1 dx [orig:84 _2 ] [84])
        (mem:HI (reg/f:SI 1 dx [orig:83 _1 ] [83]) [9 *_1+0 S2 A16])) "init/main.c":120:37 76 {*movhi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:SI 1 dx [orig:85 _3 ] [85])
        (zero_extend:SI (reg:HI 1 dx [orig:84 _2 ] [84]))) "init/main.c":120:37 144 {*zero_extendhisi2}
     (nil))
(insn 8 7 9 2 (parallel [
            (set (reg:SI 1 dx [orig:86 _4 ] [86])
                (ashift:SI (reg:SI 1 dx [orig:85 _3 ] [85])
                    (const_int 10 [0xa])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":120:47 655 {*ashlsi3_1}
     (nil))
(insn 9 8 10 2 (parallel [
            (set (reg:SI 1 dx [orig:87 _5 ] [87])
                (plus:SI (reg:SI 1 dx [orig:86 _4 ] [86])
                    (const_int 1048576 [0x100000])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":120:34 209 {*addsi_1}
     (nil))
(insn 10 9 11 2 (set (mem/c:SI (plus:SI (reg:SI 0 ax [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("memory_end") [flags 0x2]  <var_decl 0x7f489ab40bd0 memory_end>)
                        ] UNSPEC_GOTOFF))) [3 memory_end+0 S4 A32])
        (reg:SI 1 dx [orig:87 _5 ] [87])) "init/main.c":120:16 75 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:SI 1 dx [orig:88 memory_end.1_6 ] [88])
        (mem/c:SI (plus:SI (reg:SI 0 ax [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("memory_end") [flags 0x2]  <var_decl 0x7f489ab40bd0 memory_end>)
                        ] UNSPEC_GOTOFF))) [3 memory_end+0 S4 A32])) "init/main.c":121:16 75 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (parallel [
            (set (reg:SI 1 dx [orig:89 _7 ] [89])
                (and:SI (reg:SI 1 dx [orig:88 memory_end.1_6 ] [88])
                    (const_int -4096 [0xfffffffffffff000])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":121:16 490 {*andsi_1}
     (nil))
(insn 13 12 14 2 (set (mem/c:SI (plus:SI (reg:SI 0 ax [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("memory_end") [flags 0x2]  <var_decl 0x7f489ab40bd0 memory_end>)
                        ] UNSPEC_GOTOFF))) [3 memory_end+0 S4 A32])
        (reg:SI 1 dx [orig:89 _7 ] [89])) "init/main.c":121:16 75 {*movsi_internal}
     (nil))
(insn 14 13 17 2 (set (reg:SI 1 dx [orig:90 memory_end.2_8 ] [90])
        (mem/c:SI (plus:SI (reg:SI 0 ax [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("memory_end") [flags 0x2]  <var_decl 0x7f489ab40bd0 memory_end>)
                        ] UNSPEC_GOTOFF))) [3 memory_end+0 S4 A32])) "init/main.c":124:20 75 {*movsi_internal}
     (nil))
(insn 17 14 18 2 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 1 dx [orig:90 memory_end.2_8 ] [90])
            (const_int 16777216 [0x1000000]))) "init/main.c":124:8 11 {*cmpsi_1}
     (nil))
(jump_insn 18 17 19 2 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 21)
            (pc))) "init/main.c":124:8 806 {*jcc}
     (nil)
 -> 21)
(note 19 18 20 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 21 3 (set (mem/c:SI (plus:SI (reg:SI 0 ax [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("memory_end") [flags 0x2]  <var_decl 0x7f489ab40bd0 memory_end>)
                        ] UNSPEC_GOTOFF))) [3 memory_end+0 S4 A32])
        (const_int 16777216 [0x1000000])) "init/main.c":126:20 75 {*movsi_internal}
     (nil))
(code_label 21 20 22 4 16 (nil) [1 uses])
(note 22 21 23 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 26 4 (set (reg:SI 1 dx [orig:91 memory_end.3_9 ] [91])
        (mem/c:SI (plus:SI (reg:SI 0 ax [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("memory_end") [flags 0x2]  <var_decl 0x7f489ab40bd0 memory_end>)
                        ] UNSPEC_GOTOFF))) [3 memory_end+0 S4 A32])) "init/main.c":128:20 75 {*movsi_internal}
     (nil))
(insn 26 23 27 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 1 dx [orig:91 memory_end.3_9 ] [91])
            (const_int 12582912 [0xc00000]))) "init/main.c":128:8 11 {*cmpsi_1}
     (nil))
(jump_insn 27 26 28 4 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 32)
            (pc))) "init/main.c":128:8 806 {*jcc}
     (nil)
 -> 32)
(note 28 27 29 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 52 5 (set (mem/c:SI (plus:SI (reg:SI 0 ax [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("buffer_memory_end") [flags 0x2]  <var_decl 0x7f489ab40c60 buffer_memory_end>)
                        ] UNSPEC_GOTOFF))) [3 buffer_memory_end+0 S4 A32])
        (const_int 4194304 [0x400000])) "init/main.c":129:27 75 {*movsi_internal}
     (nil))
(jump_insn 52 29 53 5 (set (pc)
        (label_ref 46)) 807 {jump}
     (nil)
 -> 46)
(barrier 53 52 32)
(code_label 32 53 33 6 17 (nil) [1 uses])
(note 33 32 34 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 34 33 37 6 (set (reg:SI 1 dx [orig:92 memory_end.4_10 ] [92])
        (mem/c:SI (plus:SI (reg:SI 0 ax [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("memory_end") [flags 0x2]  <var_decl 0x7f489ab40bd0 memory_end>)
                        ] UNSPEC_GOTOFF))) [3 memory_end+0 S4 A32])) "init/main.c":130:25 75 {*movsi_internal}
     (nil))
(insn 37 34 38 6 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 1 dx [orig:92 memory_end.4_10 ] [92])
            (const_int 6291456 [0x600000]))) "init/main.c":130:13 11 {*cmpsi_1}
     (nil))
(jump_insn 38 37 39 6 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 43)
            (pc))) "init/main.c":130:13 806 {*jcc}
     (nil)
 -> 43)
(note 39 38 40 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 40 39 54 7 (set (mem/c:SI (plus:SI (reg:SI 0 ax [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("buffer_memory_end") [flags 0x2]  <var_decl 0x7f489ab40c60 buffer_memory_end>)
                        ] UNSPEC_GOTOFF))) [3 buffer_memory_end+0 S4 A32])
        (const_int 2097152 [0x200000])) "init/main.c":131:27 75 {*movsi_internal}
     (nil))
(jump_insn 54 40 55 7 (set (pc)
        (label_ref 46)) 807 {jump}
     (nil)
 -> 46)
(barrier 55 54 43)
(code_label 43 55 44 8 19 (nil) [1 uses])
(note 44 43 45 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 45 44 46 8 (set (mem/c:SI (plus:SI (reg:SI 0 ax [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("buffer_memory_end") [flags 0x2]  <var_decl 0x7f489ab40c60 buffer_memory_end>)
                        ] UNSPEC_GOTOFF))) [3 buffer_memory_end+0 S4 A32])
        (const_int 1048576 [0x100000])) "init/main.c":133:27 75 {*movsi_internal}
     (nil))
(code_label 46 45 47 9 18 (nil) [2 uses])
(note 47 46 48 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 48 47 49 9 (set (reg:SI 1 dx [orig:93 buffer_memory_end.5_11 ] [93])
        (mem/c:SI (plus:SI (reg:SI 0 ax [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("buffer_memory_end") [flags 0x2]  <var_decl 0x7f489ab40c60 buffer_memory_end>)
                        ] UNSPEC_GOTOFF))) [3 buffer_memory_end+0 S4 A32])) "init/main.c":135:23 75 {*movsi_internal}
     (nil))
(insn 49 48 56 9 (set (mem/c:SI (plus:SI (reg:SI 0 ax [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("main_memory_start") [flags 0x2]  <var_decl 0x7f489ab40cf0 main_memory_start>)
                        ] UNSPEC_GOTOFF))) [3 main_memory_start+0 S4 A32])
        (reg:SI 1 dx [orig:93 buffer_memory_end.5_11 ] [93])) "init/main.c":135:23 75 {*movsi_internal}
     (nil))
(note 56 49 57 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 57 56 59 10 (const_int 0 [0]) "init/main.c":136:1 843 {nop}
     (nil))
(note 59 57 0 NOTE_INSN_DELETED)

;; Function main (main, funcdef_no=7, decl_uid=1664, cgraph_uid=8, symbol_order=13)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=-8, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 118:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 6:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) rm {*zero_extendhisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 20:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) lBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 30:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 35:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) lBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) lBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) lBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) lBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) lBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) lBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 48:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 52:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) lBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =a  (1) 0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 57:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 62:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 71:  (0) =rm  (1) 0 {*negsi_1}
      Creating newreg=115 from oldreg=107, assigning class GENERAL_REGS to r115
   71: {r115:SI=-r115:SI;clobber flags:CC;}
      REG_DEAD r107:SI
      REG_UNUSED flags:CC
      REG_EQUAL -[frame:SI-0x4]
    Inserting insn reload before:
  120: r115:SI=r107:SI
    Inserting insn reload after:
  121: r91:SI=r115:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 73:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) lBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) =a  (1) 0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 84:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 89:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 97:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 98:  (0) =rm  (1) 0 {*negsi_1}
      Creating newreg=116 from oldreg=111, assigning class GENERAL_REGS to r116
   98: {r116:SI=-r116:SI;clobber flags:CC;}
      REG_DEAD r111:SI
      REG_UNUSED flags:CC
      REG_EQUAL -[frame:SI-0x8]
    Inserting insn reload before:
  122: r116:SI=r111:SI
    Inserting insn reload after:
  123: r93:SI=r116:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 100:  (0) m  (1) re {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2 3
EBB 4
EBB 5 6
EBB 7
EBB 8 9
EBB 10

********** Pseudo live ranges #1: **********

  BB 10
   Insn 114: point = 0, n_alt = -1
  BB 9
   Insn 100: point = 1, n_alt = 1
   Insn 99: point = 2, n_alt = 0
   Insn 123: point = 3, n_alt = -2
	Hard reg 1 is preferable by r116 with profit 1000
   Insn 98: point = 5, n_alt = 0
   Insn 122: point = 6, n_alt = -2
	Hard reg 1 is preferable by r116 with profit 1000
	Hard reg 0 is preferable by r116 with profit 1000
   Insn 97: point = 8, n_alt = 0
  BB 8
   Insn 90: point = 10, n_alt = -1
   Insn 89: point = 10, n_alt = 1
   Insn 84: point = 10, n_alt = 1
   Insn 86: point = 11, n_alt = 0
   Insn 117: point = 12, n_alt = -2
   Insn 85: point = 14, n_alt = 0
  BB 7
  BB 6
   Insn 80: point = 17, n_alt = 0
  BB 5
   Insn 78: point = 18, n_alt = -1
   Insn 77: point = 18, n_alt = 0
  BB 3
   Insn 112: point = 20, n_alt = -1
   Insn 65: point = 20, n_alt = 0
  BB 4
   Insn 74: point = 22, n_alt = 0
   Insn 73: point = 23, n_alt = 1
   Insn 72: point = 24, n_alt = 0
   Insn 121: point = 25, n_alt = -2
	Hard reg 1 is preferable by r115 with profit 1000
   Insn 71: point = 27, n_alt = 0
   Insn 120: point = 28, n_alt = -2
	Hard reg 1 is preferable by r115 with profit 1000
	Hard reg 0 is preferable by r115 with profit 1000
   Insn 70: point = 30, n_alt = 0
  BB 2
   Insn 63: point = 32, n_alt = -1
   Insn 62: point = 32, n_alt = 1
   Insn 57: point = 32, n_alt = 1
   Insn 59: point = 33, n_alt = 0
   Insn 116: point = 34, n_alt = -2
   Insn 58: point = 36, n_alt = 0
   Insn 56: point = 37, n_alt = -1
   Insn 55: point = 37, n_alt = -1
   Insn 54: point = 37, n_alt = 0
   Insn 53: point = 37, n_alt = -2
   Insn 52: point = 37, n_alt = 0
   Insn 51: point = 37, n_alt = 0
   Insn 50: point = 37, n_alt = -2
   Insn 49: point = 37, n_alt = 0
   Insn 48: point = 38, n_alt = 0
   Insn 47: point = 38, n_alt = 0
   Insn 46: point = 39, n_alt = 0
   Insn 45: point = 39, n_alt = -2
   Insn 44: point = 39, n_alt = 0
   Insn 43: point = 39, n_alt = 0
   Insn 42: point = 39, n_alt = -2
   Insn 41: point = 39, n_alt = 0
   Insn 40: point = 39, n_alt = -2
   Insn 39: point = 39, n_alt = 0
   Insn 38: point = 39, n_alt = -2
   Insn 37: point = 39, n_alt = 0
   Insn 36: point = 39, n_alt = -2
   Insn 35: point = 39, n_alt = 0
   Insn 34: point = 39, n_alt = 0
   Insn 33: point = 39, n_alt = -2
   Insn 32: point = 39, n_alt = 0
   Insn 31: point = 40, n_alt = 0
   Insn 30: point = 41, n_alt = 0
   Insn 29: point = 41, n_alt = 0
   Insn 28: point = 42, n_alt = 0
   Insn 27: point = 43, n_alt = 0
   Insn 26: point = 43, n_alt = 1
   Insn 25: point = 44, n_alt = 0
   Insn 24: point = 46, n_alt = 1
   Insn 23: point = 47, n_alt = 0
   Insn 22: point = 48, n_alt = 1
   Insn 21: point = 49, n_alt = 0
   Insn 20: point = 50, n_alt = 1
   Insn 19: point = 51, n_alt = 0
   Insn 18: point = 52, n_alt = 1
   Insn 17: point = 53, n_alt = 0
   Insn 16: point = 54, n_alt = 1
   Insn 15: point = 55, n_alt = 0
   Insn 14: point = 56, n_alt = 1
   Insn 13: point = 57, n_alt = 0
   Insn 12: point = 58, n_alt = 1
   Insn 11: point = 59, n_alt = 0
   Insn 10: point = 60, n_alt = 0
   Insn 9: point = 61, n_alt = 1
   Insn 8: point = 62, n_alt = 0
   Insn 7: point = 63, n_alt = 0
   Insn 6: point = 65, n_alt = 2
   Insn 5: point = 67, n_alt = 0
   Insn 118: point = 68, n_alt = 0
 r82: [0..68]
 r83: [66..67]
 r84: [64..65]
 r85: [61..63]
 r86: [45..60]
 r87: [40..42]
 r88: [39..41]
 r89: [37..38]
 r90: [22..22] [18..20]
 r91: [23..25]
 r93: [1..3]
 r96: [61..62]
 r97: [58..59]
 r98: [56..57]
 r99: [54..55]
 r100: [52..53]
 r101: [50..51]
 r102: [48..49]
 r103: [46..47]
 r104: [43..44]
 r105: [32..34]
 r106: [35..36]
 r107: [29..30]
 r108: [23..24]
 r109: [10..12]
 r110: [13..14]
 r111: [7..8]
 r112: [1..2]
 r115: [26..28]
 r116: [4..6]
Compressing live ranges: from 69 to 49 - 71%
Ranges after the compression:
 r82: [0..48]
 r83: [47..48]
 r84: [45..46]
 r85: [43..44]
 r86: [29..42]
 r87: [25..26]
 r88: [25..26]
 r89: [23..24]
 r90: [10..12]
 r91: [13..14]
 r93: [0..1]
 r96: [43..44]
 r97: [41..42]
 r98: [39..40]
 r99: [37..38]
 r100: [35..36]
 r101: [33..34]
 r102: [31..32]
 r103: [29..30]
 r104: [27..28]
 r105: [19..20]
 r106: [21..22]
 r107: [17..18]
 r108: [13..14]
 r109: [6..7]
 r110: [8..9]
 r111: [4..5]
 r112: [0..1]
 r115: [15..16]
 r116: [2..3]

********** Assignment #1: **********

	 Assigning to 115 (cl=GENERAL_REGS, orig=107, freq=3000, tfirst=115, tfreq=3000)...
	   Assign 0 to reload r115 (freq=3000)
	 Assigning to 116 (cl=GENERAL_REGS, orig=111, freq=3000, tfirst=116, tfreq=3000)...
	   Assign 0 to reload r116 (freq=3000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=8)
Can't eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=-8, prev_offset=-8)
changing reg in insn 118
changing reg in insn 99
changing reg in insn 72
changing reg in insn 53
changing reg in insn 50
changing reg in insn 47
changing reg in insn 45
changing reg in insn 42
changing reg in insn 40
changing reg in insn 38
changing reg in insn 36
changing reg in insn 33
changing reg in insn 29
changing reg in insn 28
changing reg in insn 26
changing reg in insn 24
changing reg in insn 22
changing reg in insn 20
changing reg in insn 18
changing reg in insn 16
changing reg in insn 14
changing reg in insn 12
changing reg in insn 8
changing reg in insn 5
changing reg in insn 6
changing reg in insn 6
changing reg in insn 7
changing reg in insn 7
changing reg in insn 9
changing reg in insn 10
changing reg in insn 25
changing reg in insn 23
changing reg in insn 21
changing reg in insn 19
changing reg in insn 17
changing reg in insn 15
changing reg in insn 13
changing reg in insn 11
changing reg in insn 28
changing reg in insn 31
changing reg in insn 29
changing reg in insn 32
changing reg in insn 47
changing reg in insn 49
changing reg in insn 74
changing reg in insn 65
changing reg in insn 77
changing reg in insn 73
changing reg in insn 100
changing reg in insn 8
changing reg in insn 9
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 23
changing reg in insn 24
changing reg in insn 25
changing reg in insn 26
changing reg in insn 116
changing reg in insn 59
changing reg in insn 59
changing reg in insn 57
changing reg in insn 58
changing reg in insn 116
changing reg in insn 70
changing reg in insn 72
changing reg in insn 73
changing reg in insn 117
changing reg in insn 86
changing reg in insn 86
changing reg in insn 84
changing reg in insn 85
changing reg in insn 117
changing reg in insn 97
changing reg in insn 99
changing reg in insn 100
deleting insn with uid = 33.
deleting insn with uid = 36.
deleting insn with uid = 38.
deleting insn with uid = 40.
deleting insn with uid = 42.
deleting insn with uid = 45.
deleting insn with uid = 50.
deleting insn with uid = 53.
deleting insn with uid = 116.
deleting insn with uid = 120.
deleting insn with uid = 117.
deleting insn with uid = 122.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 27.
verify found no changes in insn with uid = 34.
verify found no changes in insn with uid = 37.
verify found no changes in insn with uid = 39.
verify found no changes in insn with uid = 41.
verify found no changes in insn with uid = 43.
verify found no changes in insn with uid = 44.
verify found no changes in insn with uid = 46.
verify found no changes in insn with uid = 51.
verify found no changes in insn with uid = 54.
verify found no changes in insn with uid = 80.


main

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 19 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={32d,26u} r1={23d,11u} r2={12d} r3={1d,22u} r6={1d,17u} r7={8d,32u} r8={11d} r9={11d} r10={11d} r11={11d} r12={11d} r13={11d} r14={11d} r15={11d} r17={25d,3u} r18={11d} r19={1d,1u,2e} r20={11d} r21={11d} r22={11d} r23={11d} r24={11d} r25={11d} r26={11d} r27={11d} r28={11d} r29={11d} r30={11d} r31={11d} r32={11d} r33={11d} r34={11d} r35={11d} r36={11d} r37={11d} r38={11d} r39={11d} r40={11d} r41={11d} r42={11d} r43={11d} r44={11d} r45={11d} r46={11d} r47={11d} r48={11d} r49={11d} r50={11d} r51={11d} r52={11d} r53={11d} r54={11d} r55={11d} r56={11d} r57={11d} r58={11d} r59={11d} r60={11d} r61={11d} r62={11d} r63={11d} r64={11d} r65={11d} r66={11d} r67={11d} r68={11d} r69={11d} r70={11d} r71={11d} r72={11d} r73={11d} r74={11d} r75={11d} 
;;    total ref usage 932{818d,112u,2e} in 72{61 regular + 11 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 118 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 118 3 2 2 (parallel [
            (set (reg:SI 3 bx [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 118 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 0 ax [orig:83 _1 ] [83])
        (const_int 590332 [0x901fc])) "init/main.c":150:16 75 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (reg:HI 0 ax [orig:84 _2 ] [84])
        (mem:HI (reg/f:SI 0 ax [orig:83 _1 ] [83]) [9 *_1+0 S2 A16])) "init/main.c":150:16 76 {*movhi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:SI 1 dx [orig:85 _3 ] [85])
        (zero_extend:SI (reg:HI 0 ax [orig:84 _2 ] [84]))) "init/main.c":150:16 144 {*zero_extendhisi2}
     (nil))
(insn 8 7 9 2 (set (reg/f:SI 0 ax [96])
        (mem/u/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("ROOT_DEV") [flags 0x40]  <var_decl 0x7f489bfdcc60 ROOT_DEV>)
                        ] UNSPEC_GOT))) [4  S4 A8])) "init/main.c":150:14 75 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (mem/c:SI (reg/f:SI 0 ax [96]) [1 ROOT_DEV+0 S4 A32])
        (reg:SI 1 dx [orig:85 _3 ] [85])) "init/main.c":150:14 75 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (set (reg/f:SI 0 ax [orig:86 _4 ] [86])
        (const_int 589952 [0x90080])) "init/main.c":152:18 75 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:SI 1 dx [97])
        (mem:SI (reg/f:SI 0 ax [orig:86 _4 ] [86]) [2 *_4+0 S4 A8])) "init/main.c":152:16 75 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (set (mem/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("drive_info") [flags 0x2]  <var_decl 0x7f489ab40ab0 drive_info>)
                        ] UNSPEC_GOTOFF))) [2 drive_info+0 S4 A256])
        (reg:SI 1 dx [97])) "init/main.c":152:16 75 {*movsi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:SI 1 dx [98])
        (mem:SI (plus:SI (reg/f:SI 0 ax [orig:86 _4 ] [86])
                (const_int 4 [0x4])) [2 *_4+4 S4 A8])) "init/main.c":152:16 75 {*movsi_internal}
     (nil))
(insn 14 13 15 2 (set (mem/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (plus:SI (unspec:SI [
                                (symbol_ref:SI ("drive_info") [flags 0x2]  <var_decl 0x7f489ab40ab0 drive_info>)
                            ] UNSPEC_GOTOFF)
                        (const_int 4 [0x4])))) [2 drive_info+4 S4 A32])
        (reg:SI 1 dx [98])) "init/main.c":152:16 75 {*movsi_internal}
     (nil))
(insn 15 14 16 2 (set (reg:SI 1 dx [99])
        (mem:SI (plus:SI (reg/f:SI 0 ax [orig:86 _4 ] [86])
                (const_int 8 [0x8])) [2 *_4+8 S4 A8])) "init/main.c":152:16 75 {*movsi_internal}
     (nil))
(insn 16 15 17 2 (set (mem/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (plus:SI (unspec:SI [
                                (symbol_ref:SI ("drive_info") [flags 0x2]  <var_decl 0x7f489ab40ab0 drive_info>)
                            ] UNSPEC_GOTOFF)
                        (const_int 8 [0x8])))) [2 drive_info+8 S4 A64])
        (reg:SI 1 dx [99])) "init/main.c":152:16 75 {*movsi_internal}
     (nil))
(insn 17 16 18 2 (set (reg:SI 1 dx [100])
        (mem:SI (plus:SI (reg/f:SI 0 ax [orig:86 _4 ] [86])
                (const_int 12 [0xc])) [2 *_4+12 S4 A8])) "init/main.c":152:16 75 {*movsi_internal}
     (nil))
(insn 18 17 19 2 (set (mem/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (plus:SI (unspec:SI [
                                (symbol_ref:SI ("drive_info") [flags 0x2]  <var_decl 0x7f489ab40ab0 drive_info>)
                            ] UNSPEC_GOTOFF)
                        (const_int 12 [0xc])))) [2 drive_info+12 S4 A32])
        (reg:SI 1 dx [100])) "init/main.c":152:16 75 {*movsi_internal}
     (nil))
(insn 19 18 20 2 (set (reg:SI 1 dx [101])
        (mem:SI (plus:SI (reg/f:SI 0 ax [orig:86 _4 ] [86])
                (const_int 16 [0x10])) [2 *_4+16 S4 A8])) "init/main.c":152:16 75 {*movsi_internal}
     (nil))
(insn 20 19 21 2 (set (mem/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (plus:SI (unspec:SI [
                                (symbol_ref:SI ("drive_info") [flags 0x2]  <var_decl 0x7f489ab40ab0 drive_info>)
                            ] UNSPEC_GOTOFF)
                        (const_int 16 [0x10])))) [2 drive_info+16 S4 A128])
        (reg:SI 1 dx [101])) "init/main.c":152:16 75 {*movsi_internal}
     (nil))
(insn 21 20 22 2 (set (reg:SI 1 dx [102])
        (mem:SI (plus:SI (reg/f:SI 0 ax [orig:86 _4 ] [86])
                (const_int 20 [0x14])) [2 *_4+20 S4 A8])) "init/main.c":152:16 75 {*movsi_internal}
     (nil))
(insn 22 21 23 2 (set (mem/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (plus:SI (unspec:SI [
                                (symbol_ref:SI ("drive_info") [flags 0x2]  <var_decl 0x7f489ab40ab0 drive_info>)
                            ] UNSPEC_GOTOFF)
                        (const_int 20 [0x14])))) [2 drive_info+20 S4 A32])
        (reg:SI 1 dx [102])) "init/main.c":152:16 75 {*movsi_internal}
     (nil))
(insn 23 22 24 2 (set (reg:SI 1 dx [103])
        (mem:SI (plus:SI (reg/f:SI 0 ax [orig:86 _4 ] [86])
                (const_int 24 [0x18])) [2 *_4+24 S4 A8])) "init/main.c":152:16 75 {*movsi_internal}
     (nil))
(insn 24 23 25 2 (set (mem/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (plus:SI (unspec:SI [
                                (symbol_ref:SI ("drive_info") [flags 0x2]  <var_decl 0x7f489ab40ab0 drive_info>)
                            ] UNSPEC_GOTOFF)
                        (const_int 24 [0x18])))) [2 drive_info+24 S4 A64])
        (reg:SI 1 dx [103])) "init/main.c":152:16 75 {*movsi_internal}
     (nil))
(insn 25 24 26 2 (set (reg:SI 0 ax [104])
        (mem:SI (plus:SI (reg/f:SI 0 ax [orig:86 _4 ] [86])
                (const_int 28 [0x1c])) [2 *_4+28 S4 A8])) "init/main.c":152:16 75 {*movsi_internal}
     (nil))
(insn 26 25 27 2 (set (mem/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (plus:SI (unspec:SI [
                                (symbol_ref:SI ("drive_info") [flags 0x2]  <var_decl 0x7f489ab40ab0 drive_info>)
                            ] UNSPEC_GOTOFF)
                        (const_int 28 [0x1c])))) [2 drive_info+28 S4 A32])
        (reg:SI 0 ax [104])) "init/main.c":152:16 75 {*movsi_internal}
     (nil))
(call_insn 27 26 28 2 (call (mem:QI (symbol_ref:SI ("memory_detect") [flags 0x3]  <function_decl 0x7f489ab7ee00 memory_detect>) [0 memory_detect S1 A8])
        (const_int 0 [0])) "init/main.c":154:5 812 {*call}
     (nil)
    (nil))
(insn 28 27 29 2 (set (reg:SI 1 dx [orig:87 memory_end.6_5 ] [87])
        (mem/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("memory_end") [flags 0x2]  <var_decl 0x7f489ab40bd0 memory_end>)
                        ] UNSPEC_GOTOFF))) [3 memory_end+0 S4 A32])) "init/main.c":158:5 75 {*movsi_internal}
     (nil))
(insn 29 28 30 2 (set (reg:SI 0 ax [orig:88 main_memory_start.7_6 ] [88])
        (mem/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("main_memory_start") [flags 0x2]  <var_decl 0x7f489ab40cf0 main_memory_start>)
                        ] UNSPEC_GOTOFF))) [3 main_memory_start+0 S4 A32])) "init/main.c":158:5 75 {*movsi_internal}
     (nil))
(insn 30 29 31 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":158:5 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 31 30 32 2 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [3  S4 A32])
        (reg:SI 1 dx [orig:87 memory_end.6_5 ] [87])) "init/main.c":158:5 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 32 31 34 2 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [3  S4 A32])
        (reg:SI 0 ax [orig:88 main_memory_start.7_6 ] [88])) "init/main.c":158:5 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 34 32 35 2 (call (mem:QI (symbol_ref:SI ("mem_init") [flags 0x41]  <function_decl 0x7f489ab76a00 mem_init>) [0 mem_init S1 A8])
        (const_int 16 [0x10])) "init/main.c":158:5 812 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 35 34 37 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":158:5 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(call_insn 37 35 39 2 (call (mem:QI (symbol_ref:SI ("trap_init") [flags 0x41]  <function_decl 0x7f489ab5d000 trap_init>) [0 trap_init S1 A8])
        (const_int 0 [0])) "init/main.c":159:5 812 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(call_insn 39 37 41 2 (call (mem:QI (symbol_ref:SI ("blk_dev_init") [flags 0x41]  <function_decl 0x7f489ab76b00 blk_dev_init>) [0 blk_dev_init S1 A8])
        (const_int 0 [0])) "init/main.c":160:5 812 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(call_insn 41 39 43 2 (call (mem:QI (symbol_ref:SI ("chr_dev_init") [flags 0x41]  <function_decl 0x7f489ab76c00 chr_dev_init>) [0 chr_dev_init S1 A8])
        (const_int 0 [0])) "init/main.c":161:5 812 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(call_insn 43 41 44 2 (call (mem:QI (symbol_ref:SI ("tty_init") [flags 0x41]  <function_decl 0x7f489ab5dd00 tty_init>) [0 tty_init S1 A8])
        (const_int 0 [0])) "init/main.c":162:5 812 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(call_insn 44 43 46 2 (call (mem:QI (symbol_ref:SI ("time_init") [flags 0x3]  <function_decl 0x7f489ab76100 time_init>) [0 time_init S1 A8])
        (const_int 0 [0])) "init/main.c":163:5 812 {*call}
     (nil)
    (nil))
(call_insn 46 44 47 2 (call (mem:QI (symbol_ref:SI ("sched_init") [flags 0x41]  <function_decl 0x7f489ab5d100 sched_init>) [0 sched_init S1 A8])
        (const_int 0 [0])) "init/main.c":164:5 812 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 47 46 48 2 (set (reg:SI 0 ax [orig:89 buffer_memory_end.8_7 ] [89])
        (mem/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("buffer_memory_end") [flags 0x2]  <var_decl 0x7f489ab40c60 buffer_memory_end>)
                        ] UNSPEC_GOTOFF))) [3 buffer_memory_end+0 S4 A32])) "init/main.c":165:5 75 {*movsi_internal}
     (nil))
(insn 48 47 49 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":165:5 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 49 48 51 2 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [3  S4 A32])
        (reg:SI 0 ax [orig:89 buffer_memory_end.8_7 ] [89])) "init/main.c":165:5 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 51 49 52 2 (call (mem:QI (symbol_ref:SI ("buffer_init") [flags 0x41]  <function_decl 0x7f489ab17a00 buffer_init>) [0 buffer_init S1 A8])
        (const_int 16 [0x10])) "init/main.c":165:5 812 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 52 51 54 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":165:5 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(call_insn 54 52 55 2 (call (mem:QI (symbol_ref:SI ("hd_init") [flags 0x41]  <function_decl 0x7f489ab76d00 hd_init>) [0 hd_init S1 A8])
        (const_int 0 [0])) "init/main.c":167:5 812 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 55 54 56 2 (parallel [
            (asm_operands/v ("sti") ("") 0 []
                 []
                 [] init/main.c:172)
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":172:5 -1
     (nil))
(insn 56 55 58 2 (parallel [
            (asm_operands/v ("movl %%esp, %%eax
	pushl $0x17
	pushl %%eax
	pushfl
	pushl $0x0f
	pushl $1f
	iret
1:	movl $0x17, %%eax
	movw %%ax, %%ds
	movw %%ax, %%es
	movw %%ax, %%fs
	movw %%ax, %%gs
	") ("") 0 []
                 []
                 [] init/main.c:181)
            (clobber (reg:SI 0 ax))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":181:5 -1
     (nil))
(insn 58 56 59 2 (set (reg:SI 0 ax [106])
        (const_int 2 [0x2])) "init/main.c":40:8 75 {*movsi_internal}
     (nil))
(insn 59 58 57 2 (parallel [
            (set (reg:SI 0 ax [orig:105 __res ] [105])
                (asm_operands/v:SI ("int $0x80") ("=a") 0 [
                        (reg:SI 0 ax [orig:105 __res ] [105])
                    ]
                     [
                        (asm_input:SI ("0") init/main.c:40)
                    ]
                     [] init/main.c:40))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":40:8 -1
     (nil))
(insn 57 59 62 2 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [3 __res+0 S4 A32])
        (reg:SI 0 ax [orig:105 __res ] [105])) "init/main.c":40:8 75 {*movsi_internal}
     (nil))
(insn 62 57 63 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [3 __res+0 S4 A32])
            (const_int 0 [0]))) "init/main.c":40:8 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 63 62 64 2 (set (pc)
        (if_then_else (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref 68)
            (pc))) "init/main.c":40:8 806 {*jcc}
     (nil)
 -> 68)
(note 64 63 65 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 65 64 112 3 (set (reg:SI 0 ax [orig:90 D.1753 ] [90])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [3 __res+0 S4 A32])) "init/main.c":40:8 75 {*movsi_internal}
     (nil))
(jump_insn 112 65 113 3 (set (pc)
        (label_ref 75)) "init/main.c":40:8 807 {jump}
     (nil)
 -> 75)
(barrier 113 112 68)
(code_label 68 113 69 4 21 (nil) [1 uses])
(note 69 68 70 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 70 69 71 4 (set (reg:SI 0 ax [107])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [3 __res+0 S4 A32])) "init/main.c":40:8 75 {*movsi_internal}
     (nil))
(insn 71 70 121 4 (parallel [
            (set (reg:SI 0 ax [107])
                (neg:SI (reg:SI 0 ax [107])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":40:8 575 {*negsi_1}
     (expr_list:REG_EQUAL (neg:SI (mem/c:SI (plus:SI (reg/f:SI 19 frame)
                    (const_int -4 [0xfffffffffffffffc])) [3 __res+0 S4 A32]))
        (nil)))
(insn 121 71 72 4 (set (reg:SI 1 dx [orig:91 _26 ] [91])
        (reg:SI 0 ax [107])) "init/main.c":40:8 75 {*movsi_internal}
     (nil))
(insn 72 121 73 4 (set (reg/f:SI 0 ax [108])
        (mem/u/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("errno") [flags 0x40]  <var_decl 0x7f489bfdcb40 errno>)
                        ] UNSPEC_GOT))) [4  S4 A8])) "init/main.c":40:8 75 {*movsi_internal}
     (nil))
(insn 73 72 74 4 (set (mem/c:SI (reg/f:SI 0 ax [108]) [1 errno+0 S4 A32])
        (reg:SI 1 dx [orig:91 _26 ] [91])) "init/main.c":40:8 75 {*movsi_internal}
     (nil))
(insn 74 73 75 4 (set (reg:SI 0 ax [orig:90 D.1753 ] [90])
        (const_int -1 [0xffffffffffffffff])) "init/main.c":40:8 75 {*movsi_internal}
     (nil))
(code_label 75 74 76 5 22 (nil) [1 uses])
(note 76 75 77 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 77 76 78 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:90 D.1753 ] [90])
            (const_int 0 [0]))) "init/main.c":184:8 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 78 77 79 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 81)
            (pc))) "init/main.c":184:8 806 {*jcc}
     (nil)
 -> 81)
(note 79 78 80 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(call_insn 80 79 81 6 (call (mem:QI (symbol_ref:SI ("init") [flags 0x3]  <function_decl 0x7f489ab76800 init>) [0 init S1 A8])
        (const_int 0 [0])) "init/main.c":185:9 812 {*call}
     (nil)
    (nil))
(code_label 81 80 82 7 23 (nil) [1 uses])
(note 82 81 104 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(code_label 104 82 83 8 26 (nil) [1 uses])
(note 83 104 85 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 85 83 86 8 (set (reg:SI 0 ax [110])
        (const_int 29 [0x1d])) "init/main.c":42:8 75 {*movsi_internal}
     (nil))
(insn 86 85 84 8 (parallel [
            (set (reg:SI 0 ax [orig:109 __res ] [109])
                (asm_operands/v:SI ("int $0x80") ("=a") 0 [
                        (reg:SI 0 ax [orig:109 __res ] [109])
                    ]
                     [
                        (asm_input:SI ("0") init/main.c:42)
                    ]
                     [] init/main.c:42))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":42:8 -1
     (nil))
(insn 84 86 89 8 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 __res+0 S4 A32])
        (reg:SI 0 ax [orig:109 __res ] [109])) "init/main.c":42:8 75 {*movsi_internal}
     (nil))
(insn 89 84 90 8 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [3 __res+0 S4 A32])
            (const_int 0 [0]))) "init/main.c":42:8 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 90 89 96 8 (set (pc)
        (if_then_else (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 102)
            (pc))) "init/main.c":42:8 806 {*jcc}
     (nil)
 -> 102)
(note 96 90 97 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 97 96 98 9 (set (reg:SI 0 ax [111])
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 __res+0 S4 A32])) "init/main.c":42:8 75 {*movsi_internal}
     (nil))
(insn 98 97 123 9 (parallel [
            (set (reg:SI 0 ax [111])
                (neg:SI (reg:SI 0 ax [111])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":42:8 575 {*negsi_1}
     (expr_list:REG_EQUAL (neg:SI (mem/c:SI (plus:SI (reg/f:SI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [3 __res+0 S4 A32]))
        (nil)))
(insn 123 98 99 9 (set (reg:SI 1 dx [orig:93 _31 ] [93])
        (reg:SI 0 ax [111])) "init/main.c":42:8 75 {*movsi_internal}
     (nil))
(insn 99 123 100 9 (set (reg/f:SI 0 ax [112])
        (mem/u/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("errno") [flags 0x40]  <var_decl 0x7f489bfdcb40 errno>)
                        ] UNSPEC_GOT))) [4  S4 A8])) "init/main.c":42:8 75 {*movsi_internal}
     (nil))
(insn 100 99 102 9 (set (mem/c:SI (reg/f:SI 0 ax [112]) [1 errno+0 S4 A32])
        (reg:SI 1 dx [orig:93 _31 ] [93])) "init/main.c":42:8 75 {*movsi_internal}
     (nil))
(code_label 102 100 103 10 25 (nil) [1 uses])
(note 103 102 114 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(jump_insn 114 103 115 10 (set (pc)
        (label_ref 104)) "init/main.c":195:9 807 {jump}
     (nil)
 -> 104)
(barrier 115 114 119)
(note 119 115 0 NOTE_INSN_DELETED)

;; Function printf (printf, funcdef_no=8, decl_uid=1670, cgraph_uid=9, symbol_order=14)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r {*set_got}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=23,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 5:  (0) r  (1) r  (2) le {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 8:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-4)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) Ts {*leasi} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 15:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 18:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-4)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) Ts {*leasi} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 25:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 34: point = 0, n_alt = -1
   Insn 33: point = 0, n_alt = -2
   Insn 29: point = 1, n_alt = -2
   Insn 26: point = 3, n_alt = 0
   Insn 25: point = 4, n_alt = 0
   Insn 24: point = 4, n_alt = 0
   Insn 23: point = 4, n_alt = -2
   Insn 22: point = 5, n_alt = 0
   Insn 21: point = 5, n_alt = 0
   Insn 20: point = 6, n_alt = 0
   Insn 19: point = 7, n_alt = 0
   Insn 18: point = 7, n_alt = 0
   Insn 17: point = 7, n_alt = 1
   Insn 16: point = 8, n_alt = -2
   Insn 15: point = 9, n_alt = 0
   Insn 14: point = 9, n_alt = 0
   Insn 13: point = 9, n_alt = -2
   Insn 12: point = 9, n_alt = 0
   Insn 11: point = 10, n_alt = 0
   Insn 10: point = 11, n_alt = 0
   Insn 9: point = 12, n_alt = 0
   Insn 8: point = 12, n_alt = 0
   Insn 7: point = 12, n_alt = 0
   Insn 6: point = 13, n_alt = 1
   Insn 5: point = 14, n_alt = 3
   Insn 36: point = 15, n_alt = 0
 r82: [4..15]
 r83: [11..12]
 r84: [2..3]
 r85: [0..1]
 r86: [13..14]
 r87: [9..10]
 r88: [7..8]
 r89: [5..6]
Compressing live ranges: from 16 to 14 - 87%
Ranges after the compression:
 r82: [4..13]
 r83: [10..11]
 r84: [2..3]
 r85: [0..1]
 r86: [12..13]
 r87: [8..9]
 r88: [6..7]
 r89: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=32)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=16)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
changing reg in insn 36
changing reg in insn 23
changing reg in insn 20
changing reg in insn 13
changing reg in insn 11
changing reg in insn 7
changing reg in insn 10
changing reg in insn 26
changing reg in insn 29
changing reg in insn 29
changing reg in insn 33
changing reg in insn 5
changing reg in insn 6
changing reg in insn 11
changing reg in insn 12
changing reg in insn 16
changing reg in insn 17
changing reg in insn 20
changing reg in insn 21
deleting insn with uid = 13.
deleting insn with uid = 16.
deleting insn with uid = 23.
deleting insn with uid = 29.
deleting insn with uid = 33.
starting the processing of deferred insns
ending the processing of deferred insns


printf

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0 [ax] 3 [bx] 7 [sp] 17 [flags]
;;  ref usage 	r0={8d,7u} r1={3d} r2={3d} r3={1d,4u} r7={11d,25u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={8d} r18={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} 
;;    total ref usage 200{164d,36u,0e} in 21{19 regular + 2 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 36 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 36 3 2 2 (parallel [
            (set (reg:SI 3 bx [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 36 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (parallel [
            (set (reg:SI 0 ax [86])
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 36 [0x24])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":203:5 209 {*addsi_1}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [6 args+0 S4 A32])
        (reg:SI 0 ax [86])) "init/main.c":203:5 75 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (reg/f:SI 0 ax [orig:83 fmt.9_1 ] [83])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 32 [0x20])) [6 fmt+0 S4 A32])) "init/main.c":204:28 75 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":204:28 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 4 [0x4])
        (nil)))
(insn 9 8 10 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [6  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [6 args+0 S4 A32])) "init/main.c":204:28 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 10 9 11 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [6  S4 A32])
        (reg/f:SI 0 ax [orig:83 fmt.9_1 ] [83])) "init/main.c":204:28 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 11 10 12 2 (set (reg/f:SI 0 ax [87])
        (plus:SI (reg:SI 3 bx [82])
            (const:SI (unspec:SI [
                        (symbol_ref:SI ("printbuf") [flags 0x2]  <var_decl 0x7f489ab40a20 printbuf>)
                    ] UNSPEC_GOTOFF)))) "init/main.c":204:28 205 {*leasi}
     (expr_list:REG_EQUAL (symbol_ref:SI ("printbuf") [flags 0x2]  <var_decl 0x7f489ab40a20 printbuf>)
        (nil)))
(insn 12 11 14 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [6  S4 A32])
        (reg/f:SI 0 ax [87])) "init/main.c":204:28 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 14 12 15 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("vsprintf") [flags 0x41]  <function_decl 0x7f489ab76900 vsprintf>) [0 vsprintf S1 A8])
            (const_int 16 [0x10]))) "init/main.c":204:28 823 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 15 14 17 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":204:28 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 17 15 18 2 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [1 i+0 S4 A32])
        (reg:SI 0 ax [88])) "init/main.c":204:28 75 {*movsi_internal}
     (nil))
(insn 18 17 19 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":204:5 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 4 [0x4])
        (nil)))
(insn 19 18 20 2 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [1  S4 A32])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [1 i+0 S4 A32])) "init/main.c":204:5 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 20 19 21 2 (set (reg/f:SI 0 ax [89])
        (plus:SI (reg:SI 3 bx [82])
            (const:SI (unspec:SI [
                        (symbol_ref:SI ("printbuf") [flags 0x2]  <var_decl 0x7f489ab40a20 printbuf>)
                    ] UNSPEC_GOTOFF)))) "init/main.c":204:5 205 {*leasi}
     (expr_list:REG_EQUAL (symbol_ref:SI ("printbuf") [flags 0x2]  <var_decl 0x7f489ab40a20 printbuf>)
        (nil)))
(insn 21 20 22 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [6  S4 A32])
        (reg/f:SI 0 ax [89])) "init/main.c":204:5 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 22 21 24 2 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [1  S4 A32])
        (const_int 1 [0x1])) "init/main.c":204:5 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 24 22 25 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("write") [flags 0x41]  <function_decl 0x7f489ab13200 write>) [0 write S1 A8])
            (const_int 16 [0x10]))) "init/main.c":204:5 823 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 25 24 26 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":204:5 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 26 25 34 2 (set (reg:SI 0 ax [orig:84 _7 ] [84])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [1 i+0 S4 A32])) "init/main.c":206:12 75 {*movsi_internal}
     (nil))
(insn 34 26 37 2 (use (reg/i:SI 0 ax)) "init/main.c":207:1 -1
     (nil))
(note 37 34 0 NOTE_INSN_DELETED)

;; Function init (init, funcdef_no=9, decl_uid=1613, cgraph_uid=10, symbol_order=19)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 277:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) Ts {*leasi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =<  (1) ri*m {*pushsi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (1) lBwBz {*call_value} (sp_off=-4)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 8:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-4)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 9:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-4)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) Ts {*leasi} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 16:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 17:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 21:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 22:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 26:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 29:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
      Creating newreg=125 from oldreg=83, assigning class GENERAL_REGS to r125
   29: {r125:SI=r125:SI<<0xa;clobber flags:CC;}
      REG_DEAD r83:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  279: r125:SI=r83:SI
    Inserting insn reload after:
  280: r84:SI=r125:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 32:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-4)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =r  (1) Ts {*leasi} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 38:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =rm  (1) 0  (2) re {*subsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 42:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =r  (1) Ts {*leasi} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 47:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =a  (1) 0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 48:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 53:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 62:  (0) =rm  (1) 0 {*negsi_1}
      Creating newreg=126 from oldreg=106, assigning class GENERAL_REGS to r126
   62: {r126:SI=-r126:SI;clobber flags:CC;}
      REG_DEAD r106:SI
      REG_UNUSED flags:CC
      REG_EQUAL -[frame:SI-0x8]
    Inserting insn reload before:
  281: r126:SI=r106:SI
    Inserting insn reload after:
  282: r95:SI=r126:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 64:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 68:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 69:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 72:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 76:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 77:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-4)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) =r  (1) Ts {*leasi} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 84:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 89:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 93:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 96:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 97:  (0) =r  (1) Ts {*leasi} (sp_off=-4)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-4)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (0) =r  (1) Ts {*leasi} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) =r  (1) Ts {*leasi} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 105:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 106:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 109:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 110:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 115:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 119:  (0) =rm  (1) %0  (2) re {*addsi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=23,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 120:  (0) r  (1) r  (2) le {*addsi_1} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 121:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 123:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 124:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 127:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 133:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 134:  (0) =a  (1) 0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 132:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 137:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 140:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 145:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 146:  (0) =rm  (1) 0 {*negsi_1}
      Creating newreg=127 from oldreg=115, assigning class GENERAL_REGS to r127
  146: {r127:SI=-r127:SI;clobber flags:CC;}
      REG_DEAD r115:SI
      REG_UNUSED flags:CC
      REG_EQUAL -[frame:SI-0xc]
    Inserting insn reload before:
  283: r127:SI=r115:SI
    Inserting insn reload after:
  284: r97:SI=r127:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 147:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 148:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 149:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 152:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 155:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 158:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 159:  (0) =r  (1) Ts {*leasi} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 160:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 161:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 162:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 167:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 170:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 171:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 173:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 174:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 175:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 176:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 178:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 179:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 180:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 181:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 183:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 184:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 186:  (1) lBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 187:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 188:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-4)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 189:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 190:  (0) =r  (1) Ts {*leasi} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 191:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 193:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 194:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 195:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 196:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 198:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 199:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 200:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 201:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 203:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 204:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 205:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 206:  (0) =r  (1) Ts {*leasi} (sp_off=-4)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 207:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-4)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 208:  (0) =r  (1) Ts {*leasi} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 209:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 210:  (0) =r  (1) Ts {*leasi} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 211:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 213:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 214:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 216:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 217:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 219:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 220:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 224:  (0) =rm  (1) %0  (2) re {*addsi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=23,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 225:  (0) r  (1) r  (2) le {*addsi_1} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 226:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 228:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 229:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 231:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 243:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 244:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 245:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-4)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 246:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 247:  (0) =r  (1) Ts {*leasi} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 248:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 249:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 250:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 251:  (1) lBwBz {*call_value}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2 3
EBB 4
EBB 5 6 7
EBB 8
EBB 9 10 25
EBB 11
EBB 12
EBB 13 14
EBB 15
EBB 16 17
EBB 18 19
EBB 20
EBB 21 22
EBB 26
EBB 23
EBB 24

********** Pseudo live ranges #1: **********

  BB 24
   Insn 268: point = 0, n_alt = -1
  BB 17
   Insn 263: point = 1, n_alt = -1
   Insn 162: point = 1, n_alt = 0
   Insn 161: point = 1, n_alt = 0
   Insn 160: point = 1, n_alt = 0
   Insn 159: point = 2, n_alt = 0
   Insn 158: point = 3, n_alt = 0
  BB 23
   Insn 251: point = 4, n_alt = 0
   Insn 250: point = 4, n_alt = 0
   Insn 249: point = 4, n_alt = 0
   Insn 248: point = 4, n_alt = 0
   Insn 247: point = 5, n_alt = 0
   Insn 246: point = 6, n_alt = 0
   Insn 245: point = 6, n_alt = 0
   Insn 244: point = 7, n_alt = 0
   Insn 243: point = 7, n_alt = 0
  BB 26
   Insn 274: point = 9, n_alt = -1
  BB 21
   Insn 232: point = 10, n_alt = -1
   Insn 231: point = 10, n_alt = 0
   Insn 230: point = 11, n_alt = -2
   Insn 229: point = 12, n_alt = 0
   Insn 228: point = 12, n_alt = 0
   Insn 227: point = 12, n_alt = -2
   Insn 226: point = 12, n_alt = 0
   Insn 225: point = 13, n_alt = 3
   Insn 224: point = 14, n_alt = 0
  BB 22
   Insn 266: point = 15, n_alt = -1
  BB 20
  BB 19
   Insn 220: point = 17, n_alt = 0
   Insn 219: point = 17, n_alt = 0
   Insn 218: point = 17, n_alt = -2
   Insn 217: point = 17, n_alt = 0
   Insn 216: point = 18, n_alt = 0
   Insn 215: point = 18, n_alt = -2
   Insn 214: point = 19, n_alt = 0
   Insn 213: point = 19, n_alt = 0
   Insn 212: point = 19, n_alt = -2
   Insn 211: point = 19, n_alt = 0
   Insn 210: point = 20, n_alt = 0
   Insn 209: point = 21, n_alt = 0
   Insn 208: point = 22, n_alt = 0
   Insn 207: point = 23, n_alt = 0
   Insn 206: point = 24, n_alt = 0
   Insn 205: point = 25, n_alt = 0
   Insn 204: point = 25, n_alt = 0
   Insn 203: point = 25, n_alt = 0
   Insn 202: point = 25, n_alt = -2
   Insn 201: point = 25, n_alt = 0
   Insn 200: point = 25, n_alt = 0
   Insn 199: point = 25, n_alt = 0
   Insn 198: point = 25, n_alt = 0
   Insn 197: point = 25, n_alt = -2
   Insn 196: point = 25, n_alt = 0
   Insn 195: point = 25, n_alt = 0
   Insn 194: point = 25, n_alt = 0
   Insn 193: point = 25, n_alt = 0
   Insn 192: point = 25, n_alt = -2
   Insn 191: point = 25, n_alt = 0
   Insn 190: point = 26, n_alt = 0
   Insn 189: point = 27, n_alt = 0
   Insn 188: point = 27, n_alt = 0
   Insn 187: point = 27, n_alt = 0
   Insn 186: point = 27, n_alt = 0
   Insn 185: point = 27, n_alt = -2
   Insn 184: point = 27, n_alt = 0
   Insn 183: point = 27, n_alt = 0
   Insn 182: point = 27, n_alt = -2
   Insn 181: point = 27, n_alt = 0
   Insn 180: point = 27, n_alt = 0
   Insn 179: point = 27, n_alt = 0
   Insn 178: point = 27, n_alt = 0
   Insn 177: point = 27, n_alt = -2
   Insn 176: point = 27, n_alt = 0
   Insn 175: point = 27, n_alt = 0
   Insn 174: point = 27, n_alt = 0
   Insn 173: point = 27, n_alt = 0
   Insn 172: point = 27, n_alt = -2
   Insn 171: point = 27, n_alt = 0
   Insn 170: point = 27, n_alt = 0
  BB 18
   Insn 168: point = 28, n_alt = -1
   Insn 167: point = 28, n_alt = 1
  BB 16
   Insn 156: point = 29, n_alt = -1
   Insn 155: point = 29, n_alt = 1
   Insn 152: point = 29, n_alt = 1
  BB 14
   Insn 261: point = 31, n_alt = -1
   Insn 140: point = 31, n_alt = 0
  BB 15
   Insn 149: point = 33, n_alt = 0
   Insn 148: point = 34, n_alt = 1
   Insn 147: point = 35, n_alt = 0
   Insn 284: point = 36, n_alt = -2
	Hard reg 1 is preferable by r127 with profit 1000
   Insn 146: point = 38, n_alt = 0
   Insn 283: point = 39, n_alt = -2
	Hard reg 1 is preferable by r127 with profit 1000
	Hard reg 0 is preferable by r127 with profit 1000
   Insn 145: point = 41, n_alt = 0
  BB 13
   Insn 138: point = 43, n_alt = -1
   Insn 137: point = 43, n_alt = 1
   Insn 132: point = 43, n_alt = 1
   Insn 134: point = 44, n_alt = 0
   Insn 276: point = 45, n_alt = -2
   Insn 133: point = 47, n_alt = 0
  BB 12
  BB 11
   Insn 128: point = 50, n_alt = -1
   Insn 127: point = 50, n_alt = 0
   Insn 125: point = 51, n_alt = -2
   Insn 124: point = 52, n_alt = 0
   Insn 123: point = 52, n_alt = 0
   Insn 122: point = 52, n_alt = -2
   Insn 121: point = 52, n_alt = 0
   Insn 120: point = 53, n_alt = 3
   Insn 119: point = 54, n_alt = 0
  BB 25
   Insn 271: point = 55, n_alt = -1
  BB 10
  BB 9
   Insn 116: point = 57, n_alt = -1
   Insn 115: point = 57, n_alt = 1
  BB 8
   Insn 110: point = 58, n_alt = 0
   Insn 109: point = 58, n_alt = 0
   Insn 108: point = 58, n_alt = -2
   Insn 107: point = 58, n_alt = 0
   Insn 106: point = 58, n_alt = 0
   Insn 105: point = 58, n_alt = 0
   Insn 104: point = 58, n_alt = 0
   Insn 103: point = 58, n_alt = -2
   Insn 102: point = 58, n_alt = 0
   Insn 101: point = 59, n_alt = 0
   Insn 100: point = 60, n_alt = 0
   Insn 99: point = 61, n_alt = 0
   Insn 98: point = 62, n_alt = 0
   Insn 97: point = 63, n_alt = 0
   Insn 96: point = 64, n_alt = 0
  BB 7
   Insn 93: point = 65, n_alt = 0
   Insn 92: point = 65, n_alt = 0
   Insn 91: point = 65, n_alt = -2
   Insn 90: point = 65, n_alt = 0
   Insn 89: point = 65, n_alt = 0
  BB 6
   Insn 87: point = 66, n_alt = -1
   Insn 86: point = 66, n_alt = 0
   Insn 85: point = 67, n_alt = -2
   Insn 84: point = 68, n_alt = 0
   Insn 83: point = 68, n_alt = 0
   Insn 82: point = 68, n_alt = -2
   Insn 81: point = 68, n_alt = 0
   Insn 80: point = 69, n_alt = 0
   Insn 79: point = 70, n_alt = 0
   Insn 78: point = 70, n_alt = 0
   Insn 77: point = 70, n_alt = 0
   Insn 76: point = 70, n_alt = 0
   Insn 75: point = 70, n_alt = 0
   Insn 74: point = 70, n_alt = -2
   Insn 73: point = 70, n_alt = 0
   Insn 72: point = 70, n_alt = 0
  BB 5
   Insn 70: point = 71, n_alt = -1
   Insn 69: point = 71, n_alt = 1
   Insn 68: point = 71, n_alt = 1
  BB 3
   Insn 259: point = 73, n_alt = -1
   Insn 56: point = 73, n_alt = 0
  BB 4
   Insn 65: point = 75, n_alt = 0
   Insn 64: point = 76, n_alt = 1
   Insn 63: point = 77, n_alt = 0
   Insn 282: point = 78, n_alt = -2
	Hard reg 1 is preferable by r126 with profit 1000
   Insn 62: point = 80, n_alt = 0
   Insn 281: point = 81, n_alt = -2
	Hard reg 1 is preferable by r126 with profit 1000
	Hard reg 0 is preferable by r126 with profit 1000
   Insn 61: point = 83, n_alt = 0
  BB 2
   Insn 54: point = 85, n_alt = -1
   Insn 53: point = 85, n_alt = 1
   Insn 48: point = 85, n_alt = 1
   Insn 50: point = 86, n_alt = 0
   Insn 275: point = 87, n_alt = -2
   Insn 49: point = 89, n_alt = 0
   Insn 47: point = 90, n_alt = 0
   Insn 46: point = 90, n_alt = 0
   Insn 45: point = 90, n_alt = 0
   Insn 44: point = 91, n_alt = 0
   Insn 43: point = 92, n_alt = 0
   Insn 42: point = 93, n_alt = 0
   Insn 41: point = 93, n_alt = 0
   Insn 40: point = 95, n_alt = 0
   Insn 39: point = 96, n_alt = 0
   Insn 38: point = 97, n_alt = 0
   Insn 37: point = 97, n_alt = 0
   Insn 36: point = 97, n_alt = 0
   Insn 35: point = 98, n_alt = 0
   Insn 34: point = 99, n_alt = 0
   Insn 33: point = 100, n_alt = 0
   Insn 32: point = 101, n_alt = 0
   Insn 31: point = 101, n_alt = 0
   Insn 30: point = 103, n_alt = 0
   Insn 280: point = 104, n_alt = -2
	Hard reg 1 is preferable by r125 with profit 1000
   Insn 29: point = 106, n_alt = 0
   Insn 279: point = 107, n_alt = -2
	Hard reg 1 is preferable by r125 with profit 1000
	Hard reg 0 is preferable by r125 with profit 1000
   Insn 28: point = 109, n_alt = 0
   Insn 27: point = 111, n_alt = 0
   Insn 26: point = 112, n_alt = 0
   Insn 25: point = 112, n_alt = 0
   Insn 24: point = 112, n_alt = -2
   Insn 23: point = 112, n_alt = 0
   Insn 22: point = 112, n_alt = 0
   Insn 21: point = 112, n_alt = 0
   Insn 20: point = 112, n_alt = 0
   Insn 19: point = 112, n_alt = -2
   Insn 18: point = 112, n_alt = 0
   Insn 17: point = 112, n_alt = 0
   Insn 16: point = 112, n_alt = 0
   Insn 15: point = 112, n_alt = 0
   Insn 14: point = 112, n_alt = -2
   Insn 13: point = 112, n_alt = 0
   Insn 12: point = 113, n_alt = 0
   Insn 11: point = 114, n_alt = 0
   Insn 10: point = 114, n_alt = 0
   Insn 9: point = 114, n_alt = 0
   Insn 8: point = 114, n_alt = 0
   Insn 7: point = 114, n_alt = 0
   Insn 6: point = 114, n_alt = 0
   Insn 5: point = 115, n_alt = 0
   Insn 277: point = 116, n_alt = 0
 r82: [0..116]
 r83: [108..109]
 r84: [100..104]
 r85: [99..101]
 r86: [94..96]
 r87: [94..95]
 r88: [92..93]
 r89: [66..67]
 r90: [50..51]
 r91: [17..18]
 r92: [10..11]
 r93: [6..7]
 r94: [75..75] [71..73]
 r95: [76..78]
 r96: [33..33] [29..31]
 r97: [34..36]
 r98: [114..115]
 r99: [112..113]
 r100: [110..111]
 r101: [102..103]
 r102: [97..98]
 r103: [90..91]
 r104: [85..87]
 r105: [88..89]
 r106: [82..83]
 r107: [76..77]
 r108: [68..69]
 r109: [62..63]
 r110: [60..61]
 r111: [58..59]
 r112: [52..53]
 r113: [43..45]
 r114: [46..47]
 r115: [40..41]
 r116: [34..35]
 r117: [1..2]
 r118: [25..26]
 r119: [23..24]
 r120: [21..22]
 r121: [19..20]
 r122: [12..13]
 r123: [4..5]
 r125: [105..107]
 r126: [79..81]
 r127: [37..39]
Compressing live ranges: from 117 to 82 - 70%
Ranges after the compression:
 r82: [0..81]
 r83: [74..75]
 r84: [68..71]
 r85: [68..69]
 r86: [64..65]
 r87: [64..65]
 r88: [62..63]
 r89: [43..44]
 r90: [33..34]
 r91: [10..11]
 r92: [6..7]
 r93: [4..5]
 r94: [47..49]
 r95: [50..51]
 r96: [20..22]
 r97: [23..24]
 r98: [80..81]
 r99: [78..79]
 r100: [76..77]
 r101: [70..71]
 r102: [66..67]
 r103: [60..61]
 r104: [56..57]
 r105: [58..59]
 r106: [54..55]
 r107: [50..51]
 r108: [45..46]
 r109: [41..42]
 r110: [39..40]
 r111: [37..38]
 r112: [35..36]
 r113: [29..30]
 r114: [31..32]
 r115: [27..28]
 r116: [23..24]
 r117: [0..1]
 r118: [18..19]
 r119: [16..17]
 r120: [14..15]
 r121: [12..13]
 r122: [8..9]
 r123: [2..3]
 r125: [72..73]
 r126: [52..53]
 r127: [25..26]

********** Assignment #1: **********

	 Assigning to 125 (cl=GENERAL_REGS, orig=83, freq=3000, tfirst=125, tfreq=3000)...
	   Assign 0 to reload r125 (freq=3000)
	 Assigning to 126 (cl=GENERAL_REGS, orig=106, freq=3000, tfirst=126, tfreq=3000)...
	   Assign 0 to reload r126 (freq=3000)
	 Assigning to 127 (cl=GENERAL_REGS, orig=115, freq=3000, tfirst=127, tfreq=3000)...
	   Assign 0 to reload r127 (freq=3000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=32)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=16)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
changing reg in insn 277
changing reg in insn 247
changing reg in insn 227
changing reg in insn 218
changing reg in insn 212
changing reg in insn 210
changing reg in insn 208
changing reg in insn 206
changing reg in insn 202
changing reg in insn 197
changing reg in insn 192
changing reg in insn 190
changing reg in insn 185
changing reg in insn 182
changing reg in insn 177
changing reg in insn 172
changing reg in insn 159
changing reg in insn 147
changing reg in insn 122
changing reg in insn 108
changing reg in insn 103
changing reg in insn 101
changing reg in insn 99
changing reg in insn 97
changing reg in insn 91
changing reg in insn 82
changing reg in insn 80
changing reg in insn 74
changing reg in insn 63
changing reg in insn 44
changing reg in insn 40
changing reg in insn 39
changing reg in insn 35
changing reg in insn 30
changing reg in insn 27
changing reg in insn 24
changing reg in insn 19
changing reg in insn 14
changing reg in insn 12
changing reg in insn 5
changing reg in insn 28
changing reg in insn 33
changing reg in insn 31
changing reg in insn 34
changing reg in insn 39
changing reg in insn 41
changing reg in insn 40
changing reg in insn 41
changing reg in insn 41
changing reg in insn 43
changing reg in insn 85
changing reg in insn 86
changing reg in insn 125
changing reg in insn 127
changing reg in insn 215
changing reg in insn 217
changing reg in insn 230
changing reg in insn 231
changing reg in insn 243
changing reg in insn 245
changing reg in insn 65
changing reg in insn 56
changing reg in insn 68
changing reg in insn 64
changing reg in insn 149
changing reg in insn 140
changing reg in insn 152
changing reg in insn 148
changing reg in insn 5
changing reg in insn 6
changing reg in insn 12
changing reg in insn 13
changing reg in insn 27
changing reg in insn 28
changing reg in insn 30
changing reg in insn 31
changing reg in insn 35
changing reg in insn 36
changing reg in insn 44
changing reg in insn 45
changing reg in insn 275
changing reg in insn 50
changing reg in insn 50
changing reg in insn 48
changing reg in insn 49
changing reg in insn 275
changing reg in insn 61
changing reg in insn 63
changing reg in insn 64
changing reg in insn 80
changing reg in insn 81
changing reg in insn 97
changing reg in insn 98
changing reg in insn 99
changing reg in insn 100
changing reg in insn 101
changing reg in insn 102
changing reg in insn 120
changing reg in insn 121
changing reg in insn 276
changing reg in insn 134
changing reg in insn 134
changing reg in insn 132
changing reg in insn 133
changing reg in insn 276
changing reg in insn 145
changing reg in insn 147
changing reg in insn 148
changing reg in insn 159
changing reg in insn 160
changing reg in insn 190
changing reg in insn 191
changing reg in insn 206
changing reg in insn 207
changing reg in insn 208
changing reg in insn 209
changing reg in insn 210
changing reg in insn 211
changing reg in insn 225
changing reg in insn 226
changing reg in insn 247
changing reg in insn 248
deleting insn with uid = 14.
deleting insn with uid = 19.
deleting insn with uid = 24.
deleting insn with uid = 279.
deleting insn with uid = 275.
deleting insn with uid = 281.
deleting insn with uid = 74.
deleting insn with uid = 82.
deleting insn with uid = 85.
deleting insn with uid = 91.
deleting insn with uid = 103.
deleting insn with uid = 108.
deleting insn with uid = 122.
deleting insn with uid = 125.
deleting insn with uid = 276.
deleting insn with uid = 283.
deleting insn with uid = 172.
deleting insn with uid = 177.
deleting insn with uid = 182.
deleting insn with uid = 185.
deleting insn with uid = 192.
deleting insn with uid = 197.
deleting insn with uid = 202.
deleting insn with uid = 212.
deleting insn with uid = 215.
deleting insn with uid = 218.
deleting insn with uid = 227.
deleting insn with uid = 230.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 7.
verify found no changes in insn with uid = 15.
verify found no changes in insn with uid = 20.
verify found no changes in insn with uid = 25.
verify found no changes in insn with uid = 37.
verify found no changes in insn with uid = 46.
verify found no changes in insn with uid = 75.
verify found no changes in insn with uid = 83.
verify found no changes in insn with uid = 92.
verify found no changes in insn with uid = 104.
verify found no changes in insn with uid = 109.
verify found no changes in insn with uid = 123.
verify found no changes in insn with uid = 161.
verify found no changes in insn with uid = 173.
verify found no changes in insn with uid = 178.
verify found no changes in insn with uid = 183.
verify found no changes in insn with uid = 186.
verify found no changes in insn with uid = 193.
verify found no changes in insn with uid = 198.
verify found no changes in insn with uid = 203.
verify found no changes in insn with uid = 213.
verify found no changes in insn with uid = 219.
verify found no changes in insn with uid = 228.
verify found no changes in insn with uid = 249.
verify found no changes in insn with uid = 251.


init

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 17 [flags]
;;  ref usage 	r0={64d,40u} r1={30d,4u} r2={26d} r3={1d,39u} r7={84d,199u} r8={25d} r9={25d} r10={25d} r11={25d} r12={25d} r13={25d} r14={25d} r15={25d} r17={88d,9u} r18={25d} r19={2e} r20={25d} r21={25d} r22={25d} r23={25d} r24={25d} r25={25d} r26={25d} r27={25d} r28={25d} r29={25d} r30={25d} r31={25d} r32={25d} r33={25d} r34={25d} r35={25d} r36={25d} r37={25d} r38={25d} r39={25d} r40={25d} r41={25d} r42={25d} r43={25d} r44={25d} r45={25d} r46={25d} r47={25d} r48={25d} r49={25d} r50={25d} r51={25d} r52={25d} r53={25d} r54={25d} r55={25d} r56={25d} r57={25d} r58={25d} r59={25d} r60={25d} r61={25d} r62={25d} r63={25d} r64={25d} r65={25d} r66={25d} r67={25d} r68={25d} r69={25d} r70={25d} r71={25d} r72={25d} r73={25d} r74={25d} r75={25d} 
;;    total ref usage 2211{1918d,291u,2e} in 182{157 regular + 25 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 277 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 277 3 2 2 (parallel [
            (set (reg:SI 3 bx [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 277 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 0 ax [98])
        (plus:SI (reg:SI 3 bx [82])
            (const:SI (unspec:SI [
                        (symbol_ref:SI ("drive_info") [flags 0x2]  <var_decl 0x7f489ab40ab0 drive_info>)
                    ] UNSPEC_GOTOFF)))) "init/main.c":219:5 205 {*leasi}
     (expr_list:REG_EQUAL (symbol_ref:SI ("drive_info") [flags 0x2]  <var_decl 0x7f489ab40ab0 drive_info>)
        (nil)))
(insn 6 5 7 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [11  S4 A32])
        (reg/f:SI 0 ax [98])) "init/main.c":219:5 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 4 [0x4])
        (nil)))
(call_insn 7 6 8 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("setup") [flags 0x3]  <function_decl 0x7f489ab5df00 setup>) [0 setup S1 A8])
            (const_int 4 [0x4]))) "init/main.c":219:5 823 {*call_value}
     (nil)
    (nil))
(insn 8 7 9 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":219:5 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 9 8 10 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":220:11 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 4 [0x4])
        (nil)))
(insn 10 9 11 2 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [1  S4 A32])
        (const_int 0 [0])) "init/main.c":220:11 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 11 10 12 2 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [1  S4 A32])
        (const_int 2 [0x2])) "init/main.c":220:11 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 12 11 13 2 (set (reg/f:SI 0 ax [99])
        (plus:SI (reg:SI 3 bx [82])
            (const:SI (unspec:SI [
                        (symbol_ref/f:SI ("*.LC5") [flags 0x2]  <var_decl 0x7f489abd36c0 *.LC5>)
                    ] UNSPEC_GOTOFF)))) "init/main.c":220:11 205 {*leasi}
     (expr_list:REG_EQUAL (symbol_ref/f:SI ("*.LC5") [flags 0x2]  <var_decl 0x7f489abd36c0 *.LC5>)
        (nil)))
(insn 13 12 15 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [6  S4 A32])
        (reg/f:SI 0 ax [99])) "init/main.c":220:11 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 15 13 16 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("open") [flags 0x41]  <function_decl 0x7f489ab0e800 open>) [0 open S1 A8])
            (const_int 16 [0x10]))) "init/main.c":220:11 823 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 16 15 17 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":220:11 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 17 16 18 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":221:11 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 18 17 20 2 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [1  S4 A32])
        (const_int 0 [0])) "init/main.c":221:11 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 20 18 21 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("dup") [flags 0x41]  <function_decl 0x7f489ab0b200 dup>) [0 dup S1 A8])
            (const_int 16 [0x10]))) "init/main.c":221:11 823 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 21 20 22 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":221:11 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 22 21 23 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":222:11 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 23 22 25 2 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [1  S4 A32])
        (const_int 0 [0])) "init/main.c":222:11 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 25 23 26 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("dup") [flags 0x41]  <function_decl 0x7f489ab0b200 dup>) [0 dup S1 A8])
            (const_int 16 [0x10]))) "init/main.c":222:11 823 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 26 25 27 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":222:11 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 27 26 28 2 (set (reg/f:SI 0 ax [100])
        (mem/u/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("nr_buffers") [flags 0x40]  <var_decl 0x7f489bfdcea0 nr_buffers>)
                        ] UNSPEC_GOT))) [4  S4 A8])) "init/main.c":223:5 75 {*movsi_internal}
     (nil))
(insn 28 27 29 2 (set (reg:SI 0 ax [orig:83 nr_buffers.10_1 ] [83])
        (mem/c:SI (reg/f:SI 0 ax [100]) [1 nr_buffers+0 S4 A32])) "init/main.c":223:5 75 {*movsi_internal}
     (nil))
(insn 29 28 280 2 (parallel [
            (set (reg:SI 0 ax [orig:83 nr_buffers.10_1 ] [83])
                (ashift:SI (reg:SI 0 ax [orig:83 nr_buffers.10_1 ] [83])
                    (const_int 10 [0xa])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":223:5 655 {*ashlsi3_1}
     (nil))
(insn 280 29 30 2 (set (reg:SI 1 dx [orig:84 _2 ] [84])
        (reg:SI 0 ax [orig:83 nr_buffers.10_1 ] [83])) "init/main.c":223:5 75 {*movsi_internal}
     (nil))
(insn 30 280 31 2 (set (reg/f:SI 0 ax [101])
        (mem/u/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("nr_buffers") [flags 0x40]  <var_decl 0x7f489bfdcea0 nr_buffers>)
                        ] UNSPEC_GOT))) [4  S4 A8])) "init/main.c":223:5 75 {*movsi_internal}
     (nil))
(insn 31 30 32 2 (set (reg:SI 0 ax [orig:85 nr_buffers.11_3 ] [85])
        (mem/c:SI (reg/f:SI 0 ax [101]) [1 nr_buffers+0 S4 A32])) "init/main.c":223:5 75 {*movsi_internal}
     (nil))
(insn 32 31 33 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":223:5 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 4 [0x4])
        (nil)))
(insn 33 32 34 2 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [1  S4 A32])
        (reg:SI 1 dx [orig:84 _2 ] [84])) "init/main.c":223:5 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 34 33 35 2 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [1  S4 A32])
        (reg:SI 0 ax [orig:85 nr_buffers.11_3 ] [85])) "init/main.c":223:5 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 35 34 36 2 (set (reg/f:SI 0 ax [102])
        (plus:SI (reg:SI 3 bx [82])
            (const:SI (unspec:SI [
                        (symbol_ref/f:SI ("*.LC6") [flags 0x2]  <var_decl 0x7f489abd3750 *.LC6>)
                    ] UNSPEC_GOTOFF)))) "init/main.c":223:5 205 {*leasi}
     (expr_list:REG_EQUAL (symbol_ref/f:SI ("*.LC6") [flags 0x2]  <var_decl 0x7f489abd3750 *.LC6>)
        (nil)))
(insn 36 35 37 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [6  S4 A32])
        (reg/f:SI 0 ax [102])) "init/main.c":223:5 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 37 36 38 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("printf") [flags 0x3]  <function_decl 0x7f489ab86300 printf>) [0 printf S1 A8])
            (const_int 16 [0x10]))) "init/main.c":223:5 823 {*call_value}
     (nil)
    (nil))
(insn 38 37 39 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":223:5 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 39 38 40 2 (set (reg:SI 0 ax [orig:86 memory_end.12_4 ] [86])
        (mem/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("memory_end") [flags 0x2]  <var_decl 0x7f489ab40bd0 memory_end>)
                        ] UNSPEC_GOTOFF))) [3 memory_end+0 S4 A32])) "init/main.c":225:5 75 {*movsi_internal}
     (nil))
(insn 40 39 41 2 (set (reg:SI 1 dx [orig:87 main_memory_start.13_5 ] [87])
        (mem/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("main_memory_start") [flags 0x2]  <var_decl 0x7f489ab40cf0 main_memory_start>)
                        ] UNSPEC_GOTOFF))) [3 main_memory_start+0 S4 A32])) "init/main.c":225:5 75 {*movsi_internal}
     (nil))
(insn 41 40 42 2 (parallel [
            (set (reg:SI 0 ax [orig:88 _6 ] [88])
                (minus:SI (reg:SI 0 ax [orig:86 memory_end.12_4 ] [86])
                    (reg:SI 1 dx [orig:87 main_memory_start.13_5 ] [87])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":225:5 282 {*subsi_1}
     (nil))
(insn 42 41 43 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":225:5 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 43 42 44 2 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [3  S4 A32])
        (reg:SI 0 ax [orig:88 _6 ] [88])) "init/main.c":225:5 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 44 43 45 2 (set (reg/f:SI 0 ax [103])
        (plus:SI (reg:SI 3 bx [82])
            (const:SI (unspec:SI [
                        (symbol_ref/f:SI ("*.LC7") [flags 0x2]  <var_decl 0x7f489abd37e0 *.LC7>)
                    ] UNSPEC_GOTOFF)))) "init/main.c":225:5 205 {*leasi}
     (expr_list:REG_EQUAL (symbol_ref/f:SI ("*.LC7") [flags 0x2]  <var_decl 0x7f489abd37e0 *.LC7>)
        (nil)))
(insn 45 44 46 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [6  S4 A32])
        (reg/f:SI 0 ax [103])) "init/main.c":225:5 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 46 45 47 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("printf") [flags 0x3]  <function_decl 0x7f489ab86300 printf>) [0 printf S1 A8])
            (const_int 16 [0x10]))) "init/main.c":225:5 823 {*call_value}
     (nil)
    (nil))
(insn 47 46 49 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":225:5 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 49 47 50 2 (set (reg:SI 0 ax [105])
        (const_int 2 [0x2])) "init/main.c":40:8 75 {*movsi_internal}
     (nil))
(insn 50 49 48 2 (parallel [
            (set (reg:SI 0 ax [orig:104 __res ] [104])
                (asm_operands/v:SI ("int $0x80") ("=a") 0 [
                        (reg:SI 0 ax [orig:104 __res ] [104])
                    ]
                     [
                        (asm_input:SI ("0") init/main.c:40)
                    ]
                     [] init/main.c:40))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":40:8 -1
     (nil))
(insn 48 50 53 2 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [3 __res+0 S4 A32])
        (reg:SI 0 ax [orig:104 __res ] [104])) "init/main.c":40:8 75 {*movsi_internal}
     (nil))
(insn 53 48 54 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 8 [0x8])) [3 __res+0 S4 A32])
            (const_int 0 [0]))) "init/main.c":40:8 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 54 53 55 2 (set (pc)
        (if_then_else (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref 59)
            (pc))) "init/main.c":40:8 806 {*jcc}
     (nil)
 -> 59)
(note 55 54 56 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 56 55 259 3 (set (reg:SI 0 ax [orig:94 D.1745 ] [94])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [3 __res+0 S4 A32])) "init/main.c":40:8 75 {*movsi_internal}
     (nil))
(jump_insn 259 56 260 3 (set (pc)
        (label_ref 66)) "init/main.c":40:8 807 {jump}
     (nil)
 -> 66)
(barrier 260 259 59)
(code_label 59 260 60 4 30 (nil) [1 uses])
(note 60 59 61 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 61 60 62 4 (set (reg:SI 0 ax [106])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [3 __res+0 S4 A32])) "init/main.c":40:8 75 {*movsi_internal}
     (nil))
(insn 62 61 282 4 (parallel [
            (set (reg:SI 0 ax [106])
                (neg:SI (reg:SI 0 ax [106])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":40:8 575 {*negsi_1}
     (expr_list:REG_EQUAL (neg:SI (mem/c:SI (plus:SI (reg/f:SI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [3 __res+0 S4 A32]))
        (nil)))
(insn 282 62 63 4 (set (reg:SI 1 dx [orig:95 _48 ] [95])
        (reg:SI 0 ax [106])) "init/main.c":40:8 75 {*movsi_internal}
     (nil))
(insn 63 282 64 4 (set (reg/f:SI 0 ax [107])
        (mem/u/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("errno") [flags 0x40]  <var_decl 0x7f489bfdcb40 errno>)
                        ] UNSPEC_GOT))) [4  S4 A8])) "init/main.c":40:8 75 {*movsi_internal}
     (nil))
(insn 64 63 65 4 (set (mem/c:SI (reg/f:SI 0 ax [107]) [1 errno+0 S4 A32])
        (reg:SI 1 dx [orig:95 _48 ] [95])) "init/main.c":40:8 75 {*movsi_internal}
     (nil))
(insn 65 64 66 4 (set (reg:SI 0 ax [orig:94 D.1745 ] [94])
        (const_int -1 [0xffffffffffffffff])) "init/main.c":40:8 75 {*movsi_internal}
     (nil))
(code_label 66 65 67 5 31 (nil) [1 uses])
(note 67 66 68 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 68 67 69 5 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [1 pid+0 S4 A32])
        (reg:SI 0 ax [orig:94 D.1745 ] [94])) "init/main.c":229:17 75 {*movsi_internal}
     (nil))
(insn 69 68 70 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 12 [0xc])) [1 pid+0 S4 A32])
            (const_int 0 [0]))) "init/main.c":229:8 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 70 69 71 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 111)
            (pc))) "init/main.c":229:8 806 {*jcc}
     (nil)
 -> 111)
(note 71 70 72 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 72 71 73 6 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":230:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 73 72 75 6 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [1  S4 A32])
        (const_int 0 [0])) "init/main.c":230:9 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 75 73 76 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("close") [flags 0x41]  <function_decl 0x7f489ab0b000 close>) [0 close S1 A8])
            (const_int 16 [0x10]))) "init/main.c":230:9 823 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 76 75 77 6 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":230:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 77 76 78 6 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":231:13 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 4 [0x4])
        (nil)))
(insn 78 77 79 6 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [1  S4 A32])
        (const_int 0 [0])) "init/main.c":231:13 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 79 78 80 6 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [1  S4 A32])
        (const_int 0 [0])) "init/main.c":231:13 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 80 79 81 6 (set (reg/f:SI 0 ax [108])
        (plus:SI (reg:SI 3 bx [82])
            (const:SI (unspec:SI [
                        (symbol_ref/f:SI ("*.LC8") [flags 0x2]  <var_decl 0x7f489abd3900 *.LC8>)
                    ] UNSPEC_GOTOFF)))) "init/main.c":231:13 205 {*leasi}
     (expr_list:REG_EQUAL (symbol_ref/f:SI ("*.LC8") [flags 0x2]  <var_decl 0x7f489abd3900 *.LC8>)
        (nil)))
(insn 81 80 83 6 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [6  S4 A32])
        (reg/f:SI 0 ax [108])) "init/main.c":231:13 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 83 81 84 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("open") [flags 0x41]  <function_decl 0x7f489ab0e800 open>) [0 open S1 A8])
            (const_int 16 [0x10]))) "init/main.c":231:13 823 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 84 83 86 6 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":231:13 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 86 84 87 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:89 _7 ] [89])
            (const_int 0 [0]))) "init/main.c":231:12 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 87 86 88 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 94)
            (pc))) "init/main.c":231:12 806 {*jcc}
     (nil)
 -> 94)
(note 88 87 89 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 89 88 90 7 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":232:13 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 90 89 92 7 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [1  S4 A32])
        (const_int 1 [0x1])) "init/main.c":232:13 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 92 90 93 7 (call (mem:QI (symbol_ref:SI ("_exit") [flags 0x41]  <function_decl 0x7f489ab0b900 _exit>) [0 _exit S1 A8])
        (const_int 16 [0x10])) "init/main.c":232:13 812 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 93 92 94 7 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":232:13 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(code_label 94 93 95 8 33 (nil) [1 uses])
(note 95 94 96 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 96 95 97 8 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":233:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 4 [0x4])
        (nil)))
(insn 97 96 98 8 (set (reg/f:SI 0 ax [109])
        (plus:SI (reg:SI 3 bx [82])
            (const:SI (unspec:SI [
                        (symbol_ref:SI ("envp_rc") [flags 0x2]  <var_decl 0x7f489ab7fb40 envp_rc>)
                    ] UNSPEC_GOTOFF)))) "init/main.c":233:9 205 {*leasi}
     (expr_list:REG_EQUAL (symbol_ref:SI ("envp_rc") [flags 0x2]  <var_decl 0x7f489ab7fb40 envp_rc>)
        (nil)))
(insn 98 97 99 8 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [12  S4 A32])
        (reg/f:SI 0 ax [109])) "init/main.c":233:9 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 99 98 100 8 (set (reg/f:SI 0 ax [110])
        (plus:SI (reg:SI 3 bx [82])
            (const:SI (unspec:SI [
                        (symbol_ref:SI ("argv_rc") [flags 0x2]  <var_decl 0x7f489ab7fab0 argv_rc>)
                    ] UNSPEC_GOTOFF)))) "init/main.c":233:9 205 {*leasi}
     (expr_list:REG_EQUAL (symbol_ref:SI ("argv_rc") [flags 0x2]  <var_decl 0x7f489ab7fab0 argv_rc>)
        (nil)))
(insn 100 99 101 8 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [12  S4 A32])
        (reg/f:SI 0 ax [110])) "init/main.c":233:9 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 101 100 102 8 (set (reg/f:SI 0 ax [111])
        (plus:SI (reg:SI 3 bx [82])
            (const:SI (unspec:SI [
                        (symbol_ref/f:SI ("*.LC1") [flags 0x2]  <var_decl 0x7f489abd33f0 *.LC1>)
                    ] UNSPEC_GOTOFF)))) "init/main.c":233:9 205 {*leasi}
     (expr_list:REG_EQUAL (symbol_ref/f:SI ("*.LC1") [flags 0x2]  <var_decl 0x7f489abd33f0 *.LC1>)
        (nil)))
(insn 102 101 104 8 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [6  S4 A32])
        (reg/f:SI 0 ax [111])) "init/main.c":233:9 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 104 102 105 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("execve") [flags 0x41]  <function_decl 0x7f489ab0b300 execve>) [0 execve S1 A8])
            (const_int 16 [0x10]))) "init/main.c":233:9 823 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 105 104 106 8 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":233:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 106 105 107 8 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":234:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 107 106 109 8 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [1  S4 A32])
        (const_int 2 [0x2])) "init/main.c":234:9 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 109 107 110 8 (call (mem:QI (symbol_ref:SI ("_exit") [flags 0x41]  <function_decl 0x7f489ab0b900 _exit>) [0 _exit S1 A8])
        (const_int 16 [0x10])) "init/main.c":234:9 812 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 110 109 111 8 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":234:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(code_label 111 110 112 9 32 (nil) [1 uses])
(note 112 111 115 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 115 112 116 9 (set (reg:CCNO 17 flags)
        (compare:CCNO (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 12 [0xc])) [1 pid+0 S4 A32])
            (const_int 0 [0]))) "init/main.c":236:8 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 116 115 117 9 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 129)
            (pc))) "init/main.c":236:8 806 {*jcc}
     (nil)
 -> 129)
(note 117 116 270 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(note 270 117 271 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 271 270 126 25 (const_int 0 [0]) "init/main.c":237:15 843 {nop}
     (nil))
(code_label 126 271 118 11 35 (nil) [1 uses])
(note 118 126 119 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 119 118 120 11 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":237:23 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 120 119 121 11 (parallel [
            (set (reg:SI 0 ax [112])
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":237:23 209 {*addsi_1}
     (nil))
(insn 121 120 123 11 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [13  S4 A32])
        (reg:SI 0 ax [112])) "init/main.c":237:23 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 123 121 124 11 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("wait") [flags 0x41]  <function_decl 0x7f489ab13f00 wait>) [0 wait S1 A8])
            (const_int 16 [0x10]))) "init/main.c":237:23 823 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 124 123 127 11 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":237:23 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 127 124 128 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 12 [0xc])) [1 pid+0 S4 A32])
            (reg:SI 0 ax [orig:90 _8 ] [90]))) "init/main.c":237:20 11 {*cmpsi_1}
     (nil))
(jump_insn 128 127 129 11 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 126)
            (pc))) "init/main.c":237:20 806 {*jcc}
     (nil)
 -> 126)
(code_label 129 128 130 12 34 (nil) [1 uses])
(note 130 129 254 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(code_label 254 130 131 13 44 (nil) [1 uses])
(note 131 254 133 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 133 131 134 13 (set (reg:SI 0 ax [114])
        (const_int 2 [0x2])) "init/main.c":40:8 75 {*movsi_internal}
     (nil))
(insn 134 133 132 13 (parallel [
            (set (reg:SI 0 ax [orig:113 __res ] [113])
                (asm_operands/v:SI ("int $0x80") ("=a") 0 [
                        (reg:SI 0 ax [orig:113 __res ] [113])
                    ]
                     [
                        (asm_input:SI ("0") init/main.c:40)
                    ]
                     [] init/main.c:40))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":40:8 -1
     (nil))
(insn 132 134 137 13 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [3 __res+0 S4 A32])
        (reg:SI 0 ax [orig:113 __res ] [113])) "init/main.c":40:8 75 {*movsi_internal}
     (nil))
(insn 137 132 138 13 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 4 [0x4])) [3 __res+0 S4 A32])
            (const_int 0 [0]))) "init/main.c":40:8 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 138 137 139 13 (set (pc)
        (if_then_else (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref 143)
            (pc))) "init/main.c":40:8 806 {*jcc}
     (nil)
 -> 143)
(note 139 138 140 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 140 139 261 14 (set (reg:SI 0 ax [orig:96 D.1749 ] [96])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [3 __res+0 S4 A32])) "init/main.c":40:8 75 {*movsi_internal}
     (nil))
(jump_insn 261 140 262 14 (set (pc)
        (label_ref 150)) "init/main.c":40:8 807 {jump}
     (nil)
 -> 150)
(barrier 262 261 143)
(code_label 143 262 144 15 36 (nil) [1 uses])
(note 144 143 145 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 145 144 146 15 (set (reg:SI 0 ax [115])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [3 __res+0 S4 A32])) "init/main.c":40:8 75 {*movsi_internal}
     (nil))
(insn 146 145 284 15 (parallel [
            (set (reg:SI 0 ax [115])
                (neg:SI (reg:SI 0 ax [115])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":40:8 575 {*negsi_1}
     (expr_list:REG_EQUAL (neg:SI (mem/c:SI (plus:SI (reg/f:SI 19 frame)
                    (const_int -12 [0xfffffffffffffff4])) [3 __res+0 S4 A32]))
        (nil)))
(insn 284 146 147 15 (set (reg:SI 1 dx [orig:97 _53 ] [97])
        (reg:SI 0 ax [115])) "init/main.c":40:8 75 {*movsi_internal}
     (nil))
(insn 147 284 148 15 (set (reg/f:SI 0 ax [116])
        (mem/u/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("errno") [flags 0x40]  <var_decl 0x7f489bfdcb40 errno>)
                        ] UNSPEC_GOT))) [4  S4 A8])) "init/main.c":40:8 75 {*movsi_internal}
     (nil))
(insn 148 147 149 15 (set (mem/c:SI (reg/f:SI 0 ax [116]) [1 errno+0 S4 A32])
        (reg:SI 1 dx [orig:97 _53 ] [97])) "init/main.c":40:8 75 {*movsi_internal}
     (nil))
(insn 149 148 150 15 (set (reg:SI 0 ax [orig:96 D.1749 ] [96])
        (const_int -1 [0xffffffffffffffff])) "init/main.c":40:8 75 {*movsi_internal}
     (nil))
(code_label 150 149 151 16 37 (nil) [1 uses])
(note 151 150 152 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 152 151 155 16 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [1 pid+0 S4 A32])
        (reg:SI 0 ax [orig:96 D.1749 ] [96])) "init/main.c":240:20 75 {*movsi_internal}
     (nil))
(insn 155 152 156 16 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 12 [0xc])) [1 pid+0 S4 A32])
            (const_int 0 [0]))) "init/main.c":240:12 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 156 155 157 16 (set (pc)
        (if_then_else (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref 165)
            (pc))) "init/main.c":240:12 806 {*jcc}
     (nil)
 -> 165)
(note 157 156 158 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 158 157 159 17 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":241:13 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 159 158 160 17 (set (reg/f:SI 0 ax [117])
        (plus:SI (reg:SI 3 bx [82])
            (const:SI (unspec:SI [
                        (symbol_ref/f:SI ("*.LC9") [flags 0x2]  <var_decl 0x7f489abd3a20 *.LC9>)
                    ] UNSPEC_GOTOFF)))) "init/main.c":241:13 205 {*leasi}
     (expr_list:REG_EQUAL (symbol_ref/f:SI ("*.LC9") [flags 0x2]  <var_decl 0x7f489abd3a20 *.LC9>)
        (nil)))
(insn 160 159 161 17 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [6  S4 A32])
        (reg/f:SI 0 ax [117])) "init/main.c":241:13 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 161 160 162 17 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("printf") [flags 0x3]  <function_decl 0x7f489ab86300 printf>) [0 printf S1 A8])
            (const_int 16 [0x10]))) "init/main.c":241:13 823 {*call_value}
     (nil)
    (nil))
(insn 162 161 263 17 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":241:13 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(jump_insn 263 162 264 17 (set (pc)
        (label_ref 252)) "init/main.c":242:13 807 {jump}
     (nil)
 -> 252)
(barrier 264 263 165)
(code_label 165 264 166 18 38 (nil) [1 uses])
(note 166 165 167 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 167 166 168 18 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 12 [0xc])) [1 pid+0 S4 A32])
            (const_int 0 [0]))) "init/main.c":244:12 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 168 167 169 18 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 221)
            (pc))) "init/main.c":244:12 806 {*jcc}
     (nil)
 -> 221)
(note 169 168 170 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 170 169 171 19 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":245:13 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 171 170 173 19 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [1  S4 A32])
        (const_int 0 [0])) "init/main.c":245:13 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 173 171 174 19 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("close") [flags 0x41]  <function_decl 0x7f489ab0b000 close>) [0 close S1 A8])
            (const_int 16 [0x10]))) "init/main.c":245:13 823 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 174 173 175 19 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":245:13 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 175 174 176 19 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":246:13 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 176 175 178 19 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [1  S4 A32])
        (const_int 1 [0x1])) "init/main.c":246:13 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 178 176 179 19 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("close") [flags 0x41]  <function_decl 0x7f489ab0b000 close>) [0 close S1 A8])
            (const_int 16 [0x10]))) "init/main.c":246:13 823 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 179 178 180 19 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":246:13 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 180 179 181 19 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":247:13 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 181 180 183 19 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [1  S4 A32])
        (const_int 2 [0x2])) "init/main.c":247:13 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 183 181 184 19 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("close") [flags 0x41]  <function_decl 0x7f489ab0b000 close>) [0 close S1 A8])
            (const_int 16 [0x10]))) "init/main.c":247:13 823 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 184 183 186 19 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":247:13 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(call_insn 186 184 187 19 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("setsid") [flags 0x41]  <function_decl 0x7f489ab17200 setsid>) [0 setsid S1 A8])
            (const_int 0 [0]))) "init/main.c":248:13 823 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 187 186 188 19 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":249:20 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 4 [0x4])
        (nil)))
(insn 188 187 189 19 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [1  S4 A32])
        (const_int 0 [0])) "init/main.c":249:20 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 189 188 190 19 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [1  S4 A32])
        (const_int 2 [0x2])) "init/main.c":249:20 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 190 189 191 19 (set (reg/f:SI 0 ax [118])
        (plus:SI (reg:SI 3 bx [82])
            (const:SI (unspec:SI [
                        (symbol_ref/f:SI ("*.LC5") [flags 0x2]  <var_decl 0x7f489abd36c0 *.LC5>)
                    ] UNSPEC_GOTOFF)))) "init/main.c":249:20 205 {*leasi}
     (expr_list:REG_EQUAL (symbol_ref/f:SI ("*.LC5") [flags 0x2]  <var_decl 0x7f489abd36c0 *.LC5>)
        (nil)))
(insn 191 190 193 19 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [6  S4 A32])
        (reg/f:SI 0 ax [118])) "init/main.c":249:20 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 193 191 194 19 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("open") [flags 0x41]  <function_decl 0x7f489ab0e800 open>) [0 open S1 A8])
            (const_int 16 [0x10]))) "init/main.c":249:20 823 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 194 193 195 19 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":249:20 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 195 194 196 19 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":250:20 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 196 195 198 19 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [1  S4 A32])
        (const_int 0 [0])) "init/main.c":250:20 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 198 196 199 19 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("dup") [flags 0x41]  <function_decl 0x7f489ab0b200 dup>) [0 dup S1 A8])
            (const_int 16 [0x10]))) "init/main.c":250:20 823 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 199 198 200 19 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":250:20 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 200 199 201 19 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":251:20 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 201 200 203 19 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [1  S4 A32])
        (const_int 0 [0])) "init/main.c":251:20 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 203 201 204 19 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("dup") [flags 0x41]  <function_decl 0x7f489ab0b200 dup>) [0 dup S1 A8])
            (const_int 16 [0x10]))) "init/main.c":251:20 823 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 204 203 205 19 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":251:20 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 205 204 206 19 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":252:13 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 4 [0x4])
        (nil)))
(insn 206 205 207 19 (set (reg/f:SI 0 ax [119])
        (plus:SI (reg:SI 3 bx [82])
            (const:SI (unspec:SI [
                        (symbol_ref:SI ("envp") [flags 0x2]  <var_decl 0x7f489ab7fc60 envp>)
                    ] UNSPEC_GOTOFF)))) "init/main.c":252:13 205 {*leasi}
     (expr_list:REG_EQUAL (symbol_ref:SI ("envp") [flags 0x2]  <var_decl 0x7f489ab7fc60 envp>)
        (nil)))
(insn 207 206 208 19 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [12  S4 A32])
        (reg/f:SI 0 ax [119])) "init/main.c":252:13 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 208 207 209 19 (set (reg/f:SI 0 ax [120])
        (plus:SI (reg:SI 3 bx [82])
            (const:SI (unspec:SI [
                        (symbol_ref:SI ("argv") [flags 0x2]  <var_decl 0x7f489ab7fbd0 argv>)
                    ] UNSPEC_GOTOFF)))) "init/main.c":252:13 205 {*leasi}
     (expr_list:REG_EQUAL (symbol_ref:SI ("argv") [flags 0x2]  <var_decl 0x7f489ab7fbd0 argv>)
        (nil)))
(insn 209 208 210 19 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [12  S4 A32])
        (reg/f:SI 0 ax [120])) "init/main.c":252:13 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 210 209 211 19 (set (reg/f:SI 0 ax [121])
        (plus:SI (reg:SI 3 bx [82])
            (const:SI (unspec:SI [
                        (symbol_ref/f:SI ("*.LC1") [flags 0x2]  <var_decl 0x7f489abd33f0 *.LC1>)
                    ] UNSPEC_GOTOFF)))) "init/main.c":252:13 205 {*leasi}
     (expr_list:REG_EQUAL (symbol_ref/f:SI ("*.LC1") [flags 0x2]  <var_decl 0x7f489abd33f0 *.LC1>)
        (nil)))
(insn 211 210 213 19 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [6  S4 A32])
        (reg/f:SI 0 ax [121])) "init/main.c":252:13 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 213 211 214 19 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("execve") [flags 0x41]  <function_decl 0x7f489ab0b300 execve>) [0 execve S1 A8])
            (const_int 16 [0x10]))) "init/main.c":252:13 823 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 214 213 216 19 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":252:13 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 216 214 217 19 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":252:13 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 217 216 219 19 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [1  S4 A32])
        (reg:SI 0 ax [orig:91 _9 ] [91])) "init/main.c":252:13 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 219 217 220 19 (call (mem:QI (symbol_ref:SI ("_exit") [flags 0x41]  <function_decl 0x7f489ab0b900 _exit>) [0 _exit S1 A8])
        (const_int 16 [0x10])) "init/main.c":252:13 812 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 220 219 221 19 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":252:13 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(code_label 221 220 222 20 40 (nil) [1 uses])
(note 222 221 238 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(code_label 238 222 223 21 43 (nil) [1 uses])
(note 223 238 224 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 224 223 225 21 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":255:24 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 225 224 226 21 (parallel [
            (set (reg:SI 0 ax [122])
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":255:24 209 {*addsi_1}
     (nil))
(insn 226 225 228 21 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [13  S4 A32])
        (reg:SI 0 ax [122])) "init/main.c":255:24 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 228 226 229 21 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("wait") [flags 0x41]  <function_decl 0x7f489ab13f00 wait>) [0 wait S1 A8])
            (const_int 16 [0x10]))) "init/main.c":255:24 823 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 229 228 231 21 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":255:24 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 231 229 232 21 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 12 [0xc])) [1 pid+0 S4 A32])
            (reg:SI 0 ax [orig:92 _10 ] [92]))) "init/main.c":255:16 11 {*cmpsi_1}
     (nil))
(jump_insn 232 231 237 21 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 273)
            (pc))) "init/main.c":255:16 806 {*jcc}
     (nil)
 -> 273)
(note 237 232 266 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(jump_insn 266 237 267 22 (set (pc)
        (label_ref 238)) "init/main.c":255:16 807 {jump}
     (nil)
 -> 238)
(barrier 267 266 273)
(code_label 273 267 272 26 46 (nil) [1 uses])
(note 272 273 274 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 274 272 265 26 (const_int 0 [0]) "init/main.c":256:17 843 {nop}
     (nil))
(code_label 265 274 242 23 45 (nil) [0 uses])
(note 242 265 243 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 243 242 244 23 (set (reg:SI 0 ax [orig:93 i.14_11 ] [93])
        (mem/c:SI (reg/f:SI 7 sp) [1 i+0 S4 A32])) "init/main.c":257:9 75 {*movsi_internal}
     (nil))
(insn 244 243 245 23 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":257:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 4 [0x4])
        (nil)))
(insn 245 244 246 23 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [1  S4 A32])
        (reg:SI 0 ax [orig:93 i.14_11 ] [93])) "init/main.c":257:9 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 246 245 247 23 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [1  S4 A32])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [1 pid+0 S4 A32])) "init/main.c":257:9 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 247 246 248 23 (set (reg/f:SI 0 ax [123])
        (plus:SI (reg:SI 3 bx [82])
            (const:SI (unspec:SI [
                        (symbol_ref/f:SI ("*.LC10") [flags 0x2]  <var_decl 0x7f489abd3ab0 *.LC10>)
                    ] UNSPEC_GOTOFF)))) "init/main.c":257:9 205 {*leasi}
     (expr_list:REG_EQUAL (symbol_ref/f:SI ("*.LC10") [flags 0x2]  <var_decl 0x7f489abd3ab0 *.LC10>)
        (nil)))
(insn 248 247 249 23 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [6  S4 A32])
        (reg/f:SI 0 ax [123])) "init/main.c":257:9 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 249 248 250 23 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("printf") [flags 0x3]  <function_decl 0x7f489ab86300 printf>) [0 printf S1 A8])
            (const_int 16 [0x10]))) "init/main.c":257:9 823 {*call_value}
     (nil)
    (nil))
(insn 250 249 251 23 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "init/main.c":257:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(call_insn 251 250 252 23 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("sync") [flags 0x3]  <function_decl 0x7f489ab13500 sync>) [0 sync S1 A8])
            (const_int 0 [0]))) "init/main.c":258:9 823 {*call_value}
     (nil)
    (nil))
(code_label 252 251 253 24 39 (nil) [1 uses])
(note 253 252 268 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(jump_insn 268 253 269 24 (set (pc)
        (label_ref 254)) "init/main.c":240:12 807 {jump}
     (nil)
 -> 254)
(barrier 269 268 278)
(note 278 269 0 NOTE_INSN_DELETED)
