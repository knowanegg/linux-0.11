
;; Function get_fs_byte (get_fs_byte, funcdef_no=0, decl_uid=1184, cgraph_uid=1, symbol_order=0)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-4, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) m
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 16: point = 0, n_alt = -1
   Insn 15: point = 0, n_alt = -2
   Insn 11: point = 1, n_alt = -2
   Insn 8: point = 3, n_alt = -2
   Insn 5: point = 5, n_alt = -2
   Insn 7: point = 7, n_alt = 0
   Insn 6: point = 9, n_alt = 0
   Insn 18: point = 10, n_alt = 0
 r82: [10..10]
 r83: [4..5]
 r84: [2..3]
 r85: [0..1]
 r86: [6..7]
 r87: [8..9]
Compressing live ranges: from 11 to 11 - 100%
Ranges after the compression:
 r82: [10..10]
 r83: [4..5]
 r84: [2..3]
 r85: [0..1]
 r86: [6..7]
 r87: [8..9]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=8)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-4, prev_offset=0)
changing reg in insn 18
changing reg in insn 5
changing reg in insn 8
changing reg in insn 8
changing reg in insn 11
changing reg in insn 11
changing reg in insn 15
changing reg in insn 7
changing reg in insn 5
changing reg in insn 6
changing reg in insn 7
deleting insn with uid = 11.
deleting insn with uid = 15.
starting the processing of deferred insns
ending the processing of deferred insns


get_fs_byte

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0 [ax] 3 [bx] 17 [flags]
;;  ref usage 	r0={5d,4u} r1={1d} r2={1d} r3={1d,1u} r7={1d,3u} r17={2d} 
;;    total ref usage 19{11d,8u,0e} in 6{6 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 18 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 18 3 2 2 (parallel [
            (set (reg:SI 0 ax [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 18 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 2 7 2 (set (reg/f:SI 0 ax [87])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [2 addr+0 S4 A32])) "include/asm/segment.h":8:5 75 {*movsi_internal}
     (nil))
(insn 7 6 5 2 (parallel [
            (set (reg:QI 0 ax [orig:86 _v ] [86])
                (asm_operands:QI ("movb %%fs:%1, %0") ("=r") 0 [
                        (mem:QI (reg/f:SI 0 ax [87]) [0 *addr_2(D)+0 S1 A8])
                    ]
                     [
                        (asm_input:QI ("m") include/asm/segment.h:8)
                    ]
                     [] include/asm/segment.h:8))
            (clobber (reg:CC 17 flags))
        ]) "include/asm/segment.h":8:5 -1
     (nil))
(insn 5 7 8 2 (set (reg/v:QI 3 bx [orig:83 _v ] [83])
        (reg:QI 0 ax [orig:86 _v ] [86])) "include/asm/segment.h":8:5 77 {*movqi_internal}
     (nil))
(insn 8 5 16 2 (set (reg:QI 0 ax [orig:84 _4 ] [84])
        (reg/v:QI 3 bx [orig:83 _v ] [83])) "include/asm/segment.h":9:12 77 {*movqi_internal}
     (nil))
(insn 16 8 19 2 (use (reg/i:QI 0 ax)) "include/asm/segment.h":10:1 -1
     (nil))
(note 19 16 0 NOTE_INSN_DELETED)

;; Function put_fs_byte (put_fs_byte, funcdef_no=1, decl_uid=1189, cgraph_uid=2, symbol_order=1)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=4, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 2:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 3:  (0) =Q  (1) Q {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=7,overall=27,losers=2 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 4:  (0) m  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 8:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) r  (1) m
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2 3

********** Pseudo live ranges #1: **********

  BB 3
   Insn 14: point = 0, n_alt = -1
  BB 2
   Insn 10: point = 0, n_alt = 0
   Insn 9: point = 1, n_alt = 0
   Insn 8: point = 2, n_alt = 4
   Insn 4: point = 3, n_alt = 8
   Insn 3: point = 4, n_alt = 0
   Insn 2: point = 6, n_alt = 0
   Insn 15: point = 7, n_alt = 0
 r82: [7..7]
 r83: [5..6]
 r84: [3..4]
 r85: [0..2]
 r86: [0..1]
Compressing live ranges: from 8 to 7 - 87%
Ranges after the compression:
 r82: [6..6]
 r83: [4..5]
 r84: [2..3]
 r85: [0..1]
 r86: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=8)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=4, prev_offset=4)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 15
changing reg in insn 2
changing reg in insn 3
changing reg in insn 4
changing reg in insn 8
changing reg in insn 10
changing reg in insn 9
changing reg in insn 10
deleting insn with uid = 3.
starting the processing of deferred insns
ending the processing of deferred insns


put_fs_byte

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 17 [flags]
;;  ref usage 	r0={4d,2u} r1={2d,1u} r2={1d} r7={1d,7u} r17={2d} 
;;    total ref usage 20{10d,10u,0e} in 7{7 regular + 0 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
(note 6 1 15 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 15 6 2 2 (parallel [
            (set (reg:SI 0 ax [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(insn 2 15 4 2 (set (reg:SI 0 ax [83])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 val+0 S4 A32])) "include/asm/segment.h":13:1 75 {*movsi_internal}
     (nil))
(insn 4 2 5 2 (set (mem/c:QI (reg/f:SI 7 sp) [0 val+0 S1 A32])
        (reg:QI 0 ax [84])) "include/asm/segment.h":13:1 77 {*movqi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:QI 0 ax [85])
        (mem/c:QI (reg/f:SI 7 sp) [0 val+0 S1 A32])) "include/asm/segment.h":14:5 77 {*movqi_internal}
     (nil))
(insn 9 8 10 2 (set (reg/f:SI 1 dx [86])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [2 addr+0 S4 A32])) "include/asm/segment.h":14:5 75 {*movsi_internal}
     (nil))
(insn 10 9 13 2 (parallel [
            (asm_operands/v ("movb %0, %%fs:%1") ("") 0 [
                    (reg:QI 0 ax [85])
                    (mem:QI (reg/f:SI 1 dx [86]) [0 *addr_3(D)+0 S1 A8])
                ]
                 [
                    (asm_input:QI ("r") include/asm/segment.h:14)
                    (asm_input:QI ("m") include/asm/segment.h:14)
                ]
                 [] include/asm/segment.h:14)
            (clobber (reg:CC 17 flags))
        ]) "include/asm/segment.h":14:5 -1
     (nil))
(note 13 10 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 16 3 (const_int 0 [0]) "include/asm/segment.h":15:1 843 {nop}
     (nil))
(note 16 14 0 NOTE_INSN_DELETED)

;; Function block_read (block_read, funcdef_no=7, decl_uid=1215, cgraph_uid=8, symbol_order=7)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=32, prev_offset=0)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 138:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 12:  (0) =rm  (1) %0  (2) re {*andsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r  (1) g {*movsi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) r  (1) 0  (2) m {*subsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 23:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 25:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 29:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 33:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 35:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 36:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-20)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-24)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-28)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (1) lBwBz {*call_value} (sp_off=-32)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 44:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-32)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 46:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 47:  (0) ?mr {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 50:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 65:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 69:  (0) r  (1) r  (2) le {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 70:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 76:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=12,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 78:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) =rm  (1) 0  (2) re {*subsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=21,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 85:  (0) r  (1) r  (2) le {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 86:  (0) m  (1) re {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=21,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 88:  (0) r  (1) r  (2) le {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 89:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 91:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 95:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=21,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 99:  (0) r  (1) r  (2) le {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 100:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 107:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 111:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 117:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 120:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2
EBB 3 4
EBB 5 6 7
EBB 8
EBB 9
EBB 10
EBB 11 12
EBB 13 14
EBB 15

********** Pseudo live ranges #1: **********

  BB 15
   Insn 128: point = 0, n_alt = -1
   Insn 127: point = 0, n_alt = -2
   Insn 123: point = 1, n_alt = -2
  BB 8
   Insn 134: point = 4, n_alt = -1
   Insn 58: point = 4, n_alt = 0
  BB 14
   Insn 120: point = 5, n_alt = 0
  BB 7
   Insn 132: point = 6, n_alt = -1
   Insn 53: point = 6, n_alt = 0
  BB 6
   Insn 51: point = 7, n_alt = -1
   Insn 50: point = 7, n_alt = 1
  BB 5
   Insn 48: point = 7, n_alt = -1
   Insn 47: point = 7, n_alt = 1
   Insn 46: point = 7, n_alt = 1
   Insn 45: point = 8, n_alt = -2
   Insn 44: point = 9, n_alt = 0
   Insn 43: point = 9, n_alt = 0
   Insn 42: point = 9, n_alt = -2
   Insn 41: point = 9, n_alt = 0
   Insn 40: point = 9, n_alt = 0
   Insn 39: point = 9, n_alt = 0
   Insn 38: point = 10, n_alt = 0
   Insn 37: point = 11, n_alt = 0
   Insn 36: point = 11, n_alt = 0
   Insn 35: point = 11, n_alt = 0
   Insn 34: point = 13, n_alt = 0
   Insn 33: point = 14, n_alt = 3
   Insn 32: point = 16, n_alt = 0
  BB 4
   Insn 29: point = 18, n_alt = 1
   Insn 28: point = 19, n_alt = 0
  BB 3
   Insn 26: point = 21, n_alt = -1
   Insn 25: point = 21, n_alt = 1
   Insn 24: point = 22, n_alt = 0
   Insn 23: point = 23, n_alt = 1
   Insn 22: point = 24, n_alt = 1
   Insn 21: point = 26, n_alt = 0
  BB 13
   Insn 118: point = 28, n_alt = -1
   Insn 117: point = 28, n_alt = 1
  BB 2
   Insn 130: point = 29, n_alt = -1
   Insn 14: point = 29, n_alt = 1
   Insn 13: point = 29, n_alt = 1
   Insn 12: point = 30, n_alt = 0
   Insn 11: point = 32, n_alt = -2
   Insn 10: point = 34, n_alt = 0
   Insn 9: point = 36, n_alt = 0
   Insn 8: point = 37, n_alt = 1
   Insn 7: point = 38, n_alt = 0
   Insn 6: point = 40, n_alt = 0
   Insn 5: point = 42, n_alt = 0
   Insn 138: point = 43, n_alt = 0
  BB 12
   Insn 111: point = 44, n_alt = 0
   Insn 110: point = 44, n_alt = 0
   Insn 109: point = 44, n_alt = -2
   Insn 108: point = 44, n_alt = 0
   Insn 107: point = 44, n_alt = 0
  BB 11
   Insn 105: point = 45, n_alt = -1
   Insn 104: point = 45, n_alt = 0
   Insn 100: point = 46, n_alt = 1
   Insn 99: point = 47, n_alt = 3
   Insn 98: point = 48, n_alt = 0
  BB 9
   Insn 136: point = 50, n_alt = -1
   Insn 80: point = 50, n_alt = 0
   Insn 79: point = 51, n_alt = 0
   Insn 78: point = 52, n_alt = 0
   Insn 77: point = 53, n_alt = 0
   Insn 76: point = 54, n_alt = 1
   Insn 75: point = 55, n_alt = 0
   Insn 74: point = 56, n_alt = 0
   Insn 73: point = 58, n_alt = 0
   Insn 72: point = 59, n_alt = 0
   Insn 71: point = 61, n_alt = 0
   Insn 70: point = 62, n_alt = 1
   Insn 69: point = 62, n_alt = 3
   Insn 68: point = 64, n_alt = 0
   Insn 67: point = 65, n_alt = 0
   Insn 66: point = 67, n_alt = 0
   Insn 65: point = 68, n_alt = 0
  BB 10
   Insn 95: point = 69, n_alt = 0
   Insn 94: point = 69, n_alt = 0
   Insn 93: point = 69, n_alt = 0
   Insn 92: point = 70, n_alt = 0
   Insn 91: point = 71, n_alt = 0
   Insn 90: point = 71, n_alt = 0
   Insn 89: point = 73, n_alt = 4
   Insn 88: point = 75, n_alt = 3
   Insn 87: point = 76, n_alt = -2
   Insn 86: point = 78, n_alt = 1
   Insn 85: point = 79, n_alt = 3
   Insn 84: point = 80, n_alt = 0
 r82: [7..81]
 r83: [39..40]
 r84: [37..38]
 r85: [33..34]
 r86: [31..32]
 r87: [10..14]
 r88: [9..11]
 r89: [63..65]
 r90: [63..64]
 r91: [57..59]
 r92: [57..58]
 r93: [54..56]
 r94: [70..80]
 r95: [74..76]
 r96: [72..73]
 r97: [69..71]
 r98: [45..48]
 r99: [77..81] [69..75] [45..62]
 r100: [2..6]
 r101: [0..1]
 r102: [41..42]
 r103: [35..36]
 r104: [29..30]
 r107: [23..24]
 r108: [25..26]
 r109: [21..22]
 r110: [18..19]
 r111: [15..16]
 r112: [12..13]
 r113: [7..8]
 r114: [66..67]
 r115: [60..61]
 r116: [54..55]
 r117: [52..53]
 r118: [50..51]
 r119: [78..79]
 r120: [46..47]
Compressing live ranges: from 82 to 58 - 70%
Ranges after the compression:
 r82: [4..57]
 r83: [30..31]
 r84: [28..29]
 r85: [24..25]
 r86: [22..23]
 r87: [6..9]
 r88: [6..7]
 r89: [46..47]
 r90: [46..47]
 r91: [42..43]
 r92: [42..43]
 r93: [40..41]
 r94: [50..57]
 r95: [54..55]
 r96: [52..53]
 r97: [50..51]
 r98: [34..35]
 r99: [50..57] [34..45]
 r100: [2..3]
 r101: [0..1]
 r102: [32..33]
 r103: [26..27]
 r104: [20..21]
 r107: [16..17]
 r108: [18..19]
 r109: [14..15]
 r110: [12..13]
 r111: [10..11]
 r112: [8..9]
 r113: [4..5]
 r114: [48..49]
 r115: [44..45]
 r116: [40..41]
 r117: [38..39]
 r118: [36..37]
 r119: [56..57]
 r120: [34..35]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=48, prev_offset=48)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=32, prev_offset=32)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
changing reg in insn 138
changing reg in insn 109
changing reg in insn 42
changing reg in insn 6
changing reg in insn 7
changing reg in insn 7
changing reg in insn 8
changing reg in insn 10
changing reg in insn 11
changing reg in insn 11
changing reg in insn 12
changing reg in insn 33
changing reg in insn 38
changing reg in insn 35
changing reg in insn 39
changing reg in insn 67
changing reg in insn 69
changing reg in insn 68
changing reg in insn 69
changing reg in insn 72
changing reg in insn 74
changing reg in insn 73
changing reg in insn 74
changing reg in insn 74
changing reg in insn 76
changing reg in insn 84
changing reg in insn 92
changing reg in insn 85
changing reg in insn 87
changing reg in insn 89
changing reg in insn 88
changing reg in insn 89
changing reg in insn 90
changing reg in insn 90
changing reg in insn 93
changing reg in insn 98
changing reg in insn 104
changing reg in insn 99
changing reg in insn 88
changing reg in insn 69
changing reg in insn 87
changing reg in insn 120
changing reg in insn 58
changing reg in insn 53
changing reg in insn 123
changing reg in insn 123
changing reg in insn 127
changing reg in insn 5
changing reg in insn 6
changing reg in insn 9
changing reg in insn 10
changing reg in insn 12
changing reg in insn 13
changing reg in insn 22
changing reg in insn 23
changing reg in insn 21
changing reg in insn 22
changing reg in insn 24
changing reg in insn 25
changing reg in insn 28
changing reg in insn 29
changing reg in insn 32
changing reg in insn 33
changing reg in insn 34
changing reg in insn 35
changing reg in insn 45
changing reg in insn 46
changing reg in insn 66
changing reg in insn 67
changing reg in insn 71
changing reg in insn 72
changing reg in insn 75
changing reg in insn 76
changing reg in insn 77
changing reg in insn 78
changing reg in insn 79
changing reg in insn 80
changing reg in insn 85
changing reg in insn 86
changing reg in insn 99
changing reg in insn 100
deleting insn with uid = 11.
deleting insn with uid = 45.
deleting insn with uid = 123.
deleting insn with uid = 127.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 43.
verify found no changes in insn with uid = 94.
verify found no changes in insn with uid = 110.


block_read

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 17 [flags]
;;  ref usage 	r0={29d,27u} r1={13d,10u} r2={4d} r3={4d,3u} r4={1d,2u} r7={15d,78u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={28d,5u} r18={3d} r19={2e} r20={3d} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} 
;;    total ref usage 416{289d,125u,2e} in 84{81 regular + 3 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 138 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 138 3 2 2 (parallel [
            (set (reg:SI 4 si [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 138 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 0 ax [102])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 52 [0x34])) [5 pos+0 S4 A32])) "fs/block_dev.c":15:17 75 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (reg:SI 0 ax [orig:83 _1 ] [83])
        (mem:SI (reg/f:SI 0 ax [102]) [1 *pos_32(D)+0 S4 A32])) "fs/block_dev.c":15:17 75 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (parallel [
            (set (reg:SI 0 ax [orig:84 _2 ] [84])
                (lshiftrt:SI (reg:SI 0 ax [orig:83 _1 ] [83])
                    (const_int 10 [0xa])))
            (clobber (reg:CC 17 flags))
        ]) "fs/block_dev.c":15:22 701 {*lshrsi3_1}
     (nil))
(insn 8 7 9 2 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [3 block+0 S4 A32])
        (reg:SI 0 ax [orig:84 _2 ] [84])) "fs/block_dev.c":15:9 75 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (reg/f:SI 0 ax [103])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 52 [0x34])) [5 pos+0 S4 A32])) "fs/block_dev.c":16:18 75 {*movsi_internal}
     (nil))
(insn 10 9 12 2 (set (reg:SI 0 ax [orig:85 _3 ] [85])
        (mem:SI (reg/f:SI 0 ax [103]) [1 *pos_32(D)+0 S4 A32])) "fs/block_dev.c":16:18 75 {*movsi_internal}
     (nil))
(insn 12 10 13 2 (parallel [
            (set (reg:SI 0 ax [104])
                (and:SI (reg:SI 0 ax [orig:86 _4 ] [86])
                    (const_int 1023 [0x3ff])))
            (clobber (reg:CC 17 flags))
        ]) "fs/block_dev.c":16:9 490 {*andsi_1}
     (nil))
(insn 13 12 14 2 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [3 offset+0 S4 A32])
        (reg:SI 0 ax [104])) "fs/block_dev.c":16:9 75 {*movsi_internal}
     (nil))
(insn 14 13 130 2 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [3 read+0 S4 A32])
        (const_int 0 [0])) "fs/block_dev.c":18:9 75 {*movsi_internal}
     (nil))
(jump_insn 130 14 131 2 (set (pc)
        (label_ref 112)) "fs/block_dev.c":22:11 807 {jump}
     (nil)
 -> 112)
(barrier 131 130 114)
(code_label 114 131 17 3 13 (nil) [1 uses])
(note 17 114 21 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 21 17 22 3 (set (reg:SI 0 ax [108])
        (const_int 1024 [0x400])) "fs/block_dev.c":23:15 75 {*movsi_internal}
     (nil))
(insn 22 21 23 3 (parallel [
            (set (reg:SI 0 ax [107])
                (minus:SI (reg:SI 0 ax [108])
                    (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 24 [0x18])) [3 offset+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) "fs/block_dev.c":23:15 282 {*subsi_1}
     (nil))
(insn 23 22 24 3 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [3 chars+0 S4 A32])
        (reg:SI 0 ax [107])) "fs/block_dev.c":23:15 75 {*movsi_internal}
     (nil))
(insn 24 23 25 3 (set (reg:SI 0 ax [109])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [3 chars+0 S4 A32])) "fs/block_dev.c":24:12 75 {*movsi_internal}
     (nil))
(insn 25 24 26 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [109])
            (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 60 [0x3c])) [3 count+0 S4 A32]))) "fs/block_dev.c":24:12 11 {*cmpsi_1}
     (nil))
(jump_insn 26 25 27 3 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 30)
            (pc))) "fs/block_dev.c":24:12 806 {*jcc}
     (nil)
 -> 30)
(note 27 26 28 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 29 4 (set (reg:SI 0 ax [110])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 60 [0x3c])) [3 count+0 S4 A32])) "fs/block_dev.c":25:19 75 {*movsi_internal}
     (nil))
(insn 29 28 30 4 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [3 chars+0 S4 A32])
        (reg:SI 0 ax [110])) "fs/block_dev.c":25:19 75 {*movsi_internal}
     (nil))
(code_label 30 29 31 5 6 (nil) [1 uses])
(note 31 30 32 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 32 31 33 5 (set (reg:SI 0 ax [111])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [3 block+0 S4 A32])) "fs/block_dev.c":26:20 75 {*movsi_internal}
     (nil))
(insn 33 32 34 5 (parallel [
            (set (reg:SI 1 dx [orig:87 _5 ] [87])
                (plus:SI (reg:SI 0 ax [111])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "fs/block_dev.c":26:20 209 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:SI (reg/f:SI 19 frame)
                    (const_int -4 [0xfffffffffffffffc])) [3 block+0 S4 A32])
            (const_int 2 [0x2]))
        (nil)))
(insn 34 33 35 5 (set (reg:SI 0 ax [112])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [3 block+0 S4 A32])) "fs/block_dev.c":26:20 75 {*movsi_internal}
     (nil))
(insn 35 34 36 5 (parallel [
            (set (reg:SI 0 ax [orig:88 _6 ] [88])
                (plus:SI (reg:SI 0 ax [112])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "fs/block_dev.c":26:20 209 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:SI (reg/f:SI 19 frame)
                    (const_int -4 [0xfffffffffffffffc])) [3 block+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 36 35 37 5 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "fs/block_dev.c":26:20 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 37 36 38 5 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [3  S4 A32])
        (const_int -1 [0xffffffffffffffff])) "fs/block_dev.c":26:20 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(insn 38 37 39 5 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [3  S4 A32])
        (reg:SI 1 dx [orig:87 _5 ] [87])) "fs/block_dev.c":26:20 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 20 [0x14])
        (nil)))
(insn 39 38 40 5 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [3  S4 A32])
        (reg:SI 0 ax [orig:88 _6 ] [88])) "fs/block_dev.c":26:20 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 24 [0x18])
        (nil)))
(insn 40 39 41 5 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [3  S4 A32])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 52 [0x34])) [3 block+0 S4 A32])) "fs/block_dev.c":26:20 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 28 [0x1c])
        (nil)))
(insn 41 40 42 5 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [3  S4 A32])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 76 [0x4c])) [3 dev+0 S4 A32])) "fs/block_dev.c":26:20 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 32 [0x20])
        (nil)))
(insn 42 41 43 5 (set (reg:SI 3 bx)
        (reg:SI 4 si [82])) "fs/block_dev.c":26:20 75 {*movsi_internal}
     (nil))
(call_insn 43 42 44 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("breada") [flags 0x41]  <function_decl 0x77329dd0e600 breada>) [0 breada S1 A8])
            (const_int 32 [0x20]))) "fs/block_dev.c":26:20 823 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 44 43 46 5 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) "fs/block_dev.c":26:20 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 46 44 47 5 (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [4 bh+0 S4 A32])
        (reg:SI 0 ax [113])) "fs/block_dev.c":26:20 75 {*movsi_internal}
     (nil))
(insn 47 46 48 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 12 [0xc])) [4 bh+0 S4 A32])
            (const_int 0 [0]))) "fs/block_dev.c":26:12 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 48 47 49 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 63)
            (pc))) "fs/block_dev.c":26:12 806 {*jcc}
     (nil)
 -> 63)
(note 49 48 50 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 50 49 51 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])) [3 read+0 S4 A32])
            (const_int 0 [0]))) "fs/block_dev.c":27:32 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 51 50 52 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 56)
            (pc))) "fs/block_dev.c":27:32 806 {*jcc}
     (nil)
 -> 56)
(note 52 51 53 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 53 52 132 7 (set (reg:SI 0 ax [orig:100 iftmp.0_27 ] [100])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [3 read+0 S4 A32])) "fs/block_dev.c":27:32 75 {*movsi_internal}
     (nil))
(jump_insn 132 53 133 7 (set (pc)
        (label_ref 121)) "fs/block_dev.c":27:32 807 {jump}
     (nil)
 -> 121)
(barrier 133 132 56)
(code_label 56 133 57 8 8 (nil) [1 uses])
(note 57 56 58 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 58 57 134 8 (set (reg:SI 0 ax [orig:100 iftmp.0_27 ] [100])
        (const_int -5 [0xfffffffffffffffb])) "fs/block_dev.c":27:32 75 {*movsi_internal}
     (nil))
(jump_insn 134 58 135 8 (set (pc)
        (label_ref 121)) "fs/block_dev.c":27:32 807 {jump}
     (nil)
 -> 121)
(barrier 135 134 63)
(code_label 63 135 64 9 7 (nil) [1 uses])
(note 64 63 65 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 65 64 66 9 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 28 [0x1c])) [3 block+0 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 28 [0x1c])) [3 block+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "fs/block_dev.c":28:14 209 {*addsi_1}
     (nil))
(insn 66 65 67 9 (set (reg/f:SI 0 ax [114])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [4 bh+0 S4 A32])) "fs/block_dev.c":29:24 75 {*movsi_internal}
     (nil))
(insn 67 66 68 9 (set (reg/f:SI 1 dx [orig:89 _7 ] [89])
        (mem/f:SI (reg/f:SI 0 ax [114]) [2 bh_43->b_data+0 S4 A32])) "fs/block_dev.c":29:24 75 {*movsi_internal}
     (nil))
(insn 68 67 69 9 (set (reg:SI 0 ax [orig:90 offset.1_8 ] [90])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [3 offset+0 S4 A32])) "fs/block_dev.c":29:20 75 {*movsi_internal}
     (nil))
(insn 69 68 70 9 (parallel [
            (set (reg/v/f:SI 3 bx [orig:99 p ] [99])
                (plus:SI (reg/f:SI 1 dx [orig:89 _7 ] [89])
                    (reg:SI 0 ax [orig:90 offset.1_8 ] [90])))
            (clobber (reg:CC 17 flags))
        ]) "fs/block_dev.c":29:11 209 {*addsi_1}
     (nil))
(insn 70 69 71 9 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [3 offset+0 S4 A32])
        (const_int 0 [0])) "fs/block_dev.c":30:16 75 {*movsi_internal}
     (nil))
(insn 71 70 72 9 (set (reg/f:SI 0 ax [115])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 52 [0x34])) [5 pos+0 S4 A32])) "fs/block_dev.c":31:14 75 {*movsi_internal}
     (nil))
(insn 72 71 73 9 (set (reg:SI 1 dx [orig:91 _9 ] [91])
        (mem:SI (reg/f:SI 0 ax [115]) [1 *pos_32(D)+0 S4 A32])) "fs/block_dev.c":31:14 75 {*movsi_internal}
     (nil))
(insn 73 72 74 9 (set (reg:SI 0 ax [orig:92 chars.2_10 ] [92])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [3 chars+0 S4 A32])) "fs/block_dev.c":31:14 75 {*movsi_internal}
     (nil))
(insn 74 73 75 9 (parallel [
            (set (reg:SI 1 dx [orig:93 _11 ] [93])
                (plus:SI (reg:SI 1 dx [orig:91 _9 ] [91])
                    (reg:SI 0 ax [orig:92 chars.2_10 ] [92])))
            (clobber (reg:CC 17 flags))
        ]) "fs/block_dev.c":31:14 209 {*addsi_1}
     (nil))
(insn 75 74 76 9 (set (reg/f:SI 0 ax [116])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 52 [0x34])) [5 pos+0 S4 A32])) "fs/block_dev.c":31:14 75 {*movsi_internal}
     (nil))
(insn 76 75 77 9 (set (mem:SI (reg/f:SI 0 ax [116]) [1 *pos_32(D)+0 S4 A32])
        (reg:SI 1 dx [orig:93 _11 ] [93])) "fs/block_dev.c":31:14 75 {*movsi_internal}
     (nil))
(insn 77 76 78 9 (set (reg:SI 0 ax [117])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [3 chars+0 S4 A32])) "fs/block_dev.c":32:14 75 {*movsi_internal}
     (nil))
(insn 78 77 79 9 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 16 [0x10])) [3 read+0 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 16 [0x10])) [3 read+0 S4 A32])
                    (reg:SI 0 ax [117])))
            (clobber (reg:CC 17 flags))
        ]) "fs/block_dev.c":32:14 209 {*addsi_1}
     (nil))
(insn 79 78 80 9 (set (reg:SI 0 ax [118])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [3 chars+0 S4 A32])) "fs/block_dev.c":33:15 75 {*movsi_internal}
     (nil))
(insn 80 79 136 9 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 60 [0x3c])) [3 count+0 S4 A32])
                (minus:SI (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 60 [0x3c])) [3 count+0 S4 A32])
                    (reg:SI 0 ax [118])))
            (clobber (reg:CC 17 flags))
        ]) "fs/block_dev.c":33:15 282 {*subsi_1}
     (nil))
(jump_insn 136 80 137 9 (set (pc)
        (label_ref 96)) "fs/block_dev.c":34:15 807 {jump}
     (nil)
 -> 96)
(barrier 137 136 101)
(code_label 101 137 83 10 12 (nil) [1 uses])
(note 83 101 84 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 84 83 85 10 (set (reg/f:SI 0 ax [orig:94 buf.3_12 ] [94])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 56 [0x38])) [2 buf+0 S4 A32])) "fs/block_dev.c":35:13 75 {*movsi_internal}
     (nil))
(insn 85 84 86 10 (parallel [
            (set (reg:SI 1 dx [119])
                (plus:SI (reg/f:SI 0 ax [orig:94 buf.3_12 ] [94])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "fs/block_dev.c":35:13 209 {*addsi_1}
     (nil))
(insn 86 85 87 10 (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 56 [0x38])) [2 buf+0 S4 A32])
        (reg:SI 1 dx [119])) "fs/block_dev.c":35:13 75 {*movsi_internal}
     (nil))
(insn 87 86 88 10 (set (reg/f:SI 1 dx [orig:95 p.4_13 ] [95])
        (reg/v/f:SI 3 bx [orig:99 p ] [99])) "fs/block_dev.c":35:28 75 {*movsi_internal}
     (nil))
(insn 88 87 89 10 (parallel [
            (set (reg/v/f:SI 3 bx [orig:99 p ] [99])
                (plus:SI (reg/f:SI 1 dx [orig:95 p.4_13 ] [95])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "fs/block_dev.c":35:28 209 {*addsi_1}
     (nil))
(insn 89 88 90 10 (set (reg:QI 1 dx [orig:96 _14 ] [96])
        (mem:QI (reg/f:SI 1 dx [orig:95 p.4_13 ] [95]) [0 *p.4_13+0 S1 A8])) "fs/block_dev.c":35:25 77 {*movqi_internal}
     (nil))
(insn 90 89 91 10 (set (reg:SI 1 dx [orig:97 _15 ] [97])
        (sign_extend:SI (reg:QI 1 dx [orig:96 _14 ] [96]))) "fs/block_dev.c":35:13 153 {extendqisi2}
     (nil))
(insn 91 90 92 10 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "fs/block_dev.c":35:13 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 92 91 93 10 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (reg/f:SI 0 ax [orig:94 buf.3_12 ] [94])) "fs/block_dev.c":35:13 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 93 92 94 10 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [3  S4 A32])
        (reg:SI 1 dx [orig:97 _15 ] [97])) "fs/block_dev.c":35:13 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 94 93 95 10 (call (mem:QI (symbol_ref:SI ("put_fs_byte") [flags 0x3]  <function_decl 0x77329dd10a00 put_fs_byte>) [0 put_fs_byte S1 A8])
        (const_int 16 [0x10])) "fs/block_dev.c":35:13 812 {*call}
     (nil)
    (nil))
(insn 95 94 96 10 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "fs/block_dev.c":35:13 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(code_label 96 95 97 11 11 (nil) [1 uses])
(note 97 96 98 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 98 97 99 11 (set (reg:SI 0 ax [orig:98 chars.5_16 ] [98])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [3 chars+0 S4 A32])) "fs/block_dev.c":34:21 75 {*movsi_internal}
     (nil))
(insn 99 98 100 11 (parallel [
            (set (reg:SI 1 dx [120])
                (plus:SI (reg:SI 0 ax [orig:98 chars.5_16 ] [98])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "fs/block_dev.c":34:21 209 {*addsi_1}
     (nil))
(insn 100 99 104 11 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [3 chars+0 S4 A32])
        (reg:SI 1 dx [120])) "fs/block_dev.c":34:21 75 {*movsi_internal}
     (nil))
(insn 104 100 105 11 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:SI 0 ax [orig:98 chars.5_16 ] [98])
            (const_int 0 [0]))) "fs/block_dev.c":34:24 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 105 104 106 11 (set (pc)
        (if_then_else (gt (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 101)
            (pc))) "fs/block_dev.c":34:24 806 {*jcc}
     (nil)
 -> 101)
(note 106 105 107 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 107 106 108 12 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "fs/block_dev.c":36:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 108 107 109 12 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [4  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [4 bh+0 S4 A32])) "fs/block_dev.c":36:9 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(insn 109 108 110 12 (set (reg:SI 3 bx)
        (reg:SI 4 si [82])) "fs/block_dev.c":36:9 75 {*movsi_internal}
     (nil))
(call_insn 110 109 111 12 (call (mem:QI (symbol_ref:SI ("brelse") [flags 0x41]  <function_decl 0x77329dd0e200 brelse>) [0 brelse S1 A8])
        (const_int 16 [0x10])) "fs/block_dev.c":36:9 812 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 111 110 112 12 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "fs/block_dev.c":36:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(code_label 112 111 113 13 5 (nil) [1 uses])
(note 113 112 117 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 117 113 118 13 (set (reg:CCNO 17 flags)
        (compare:CCNO (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 60 [0x3c])) [3 count+0 S4 A32])
            (const_int 0 [0]))) "fs/block_dev.c":22:18 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 118 117 119 13 (set (pc)
        (if_then_else (gt (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 114)
            (pc))) "fs/block_dev.c":22:18 806 {*jcc}
     (nil)
 -> 114)
(note 119 118 120 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 120 119 121 14 (set (reg:SI 0 ax [orig:100 iftmp.0_27 ] [100])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [3 read+0 S4 A32])) "fs/block_dev.c":38:12 75 {*movsi_internal}
     (nil))
(code_label 121 120 122 15 10 (nil) [2 uses])
(note 122 121 128 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 128 122 139 15 (use (reg/i:SI 0 ax)) "fs/block_dev.c":39:1 -1
     (nil))
(note 139 128 0 NOTE_INSN_DELETED)

;; Function block_write (block_write, funcdef_no=8, decl_uid=1157, cgraph_uid=9, symbol_order=8)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=32, prev_offset=0)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 158:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 11:  (0) =rm  (1) %0  (2) re {*andsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) g {*movsi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) r  (1) 0  (2) m {*subsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 28:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 34:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 39:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 41:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 47:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 49:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 50:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-20)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-24)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-28)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (1) lBwBz {*call_value} (sp_off=-32)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 58:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-32)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 60:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 63:  (0) =rm  (1) %0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 64:  (0) ?mr {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 67:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 85:  (0) r  (1) r  (2) le {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 86:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 92:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=12,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 94:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 95:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) =rm  (1) 0  (2) re {*subsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=21,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 101:  (0) r  (1) r  (2) le {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 102:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 103:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 106:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=21,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 109:  (0) r  (1) r  (2) le {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=7,overall=27,losers=2 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 111:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 114:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=21,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 115:  (0) r  (1) r  (2) le {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 116:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 120:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 123:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 124:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 125:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 126:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 128:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 129:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 135:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 138:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2
EBB 3 4
EBB 5 6
EBB 7
EBB 8 9 10
EBB 11
EBB 12
EBB 13
EBB 14 15
EBB 16 17
EBB 18

********** Pseudo live ranges #1: **********

  BB 18
   Insn 146: point = 0, n_alt = -1
   Insn 145: point = 0, n_alt = -2
   Insn 141: point = 1, n_alt = -2
  BB 11
   Insn 154: point = 4, n_alt = -1
   Insn 75: point = 4, n_alt = 0
  BB 17
   Insn 138: point = 5, n_alt = 0
  BB 10
   Insn 152: point = 6, n_alt = -1
   Insn 70: point = 6, n_alt = 0
  BB 9
   Insn 68: point = 7, n_alt = -1
   Insn 67: point = 7, n_alt = 1
  BB 8
   Insn 65: point = 7, n_alt = -1
   Insn 64: point = 7, n_alt = 1
   Insn 63: point = 7, n_alt = 0
  BB 6
   Insn 150: point = 8, n_alt = -1
   Insn 41: point = 8, n_alt = 1
   Insn 40: point = 9, n_alt = -2
   Insn 39: point = 10, n_alt = 0
   Insn 38: point = 10, n_alt = 0
   Insn 37: point = 10, n_alt = -2
   Insn 36: point = 10, n_alt = 0
   Insn 35: point = 10, n_alt = 0
   Insn 34: point = 10, n_alt = 0
  BB 7
   Insn 60: point = 11, n_alt = 1
   Insn 59: point = 12, n_alt = -2
   Insn 58: point = 13, n_alt = 0
   Insn 57: point = 13, n_alt = 0
   Insn 56: point = 13, n_alt = -2
   Insn 55: point = 13, n_alt = 0
   Insn 54: point = 13, n_alt = 0
   Insn 53: point = 13, n_alt = 0
   Insn 52: point = 14, n_alt = 0
   Insn 51: point = 15, n_alt = 0
   Insn 50: point = 15, n_alt = 0
   Insn 49: point = 15, n_alt = 0
   Insn 48: point = 17, n_alt = 0
   Insn 47: point = 18, n_alt = 3
   Insn 46: point = 20, n_alt = 0
  BB 5
   Insn 32: point = 22, n_alt = -1
   Insn 31: point = 22, n_alt = 0
  BB 4
   Insn 28: point = 23, n_alt = 1
   Insn 27: point = 24, n_alt = 0
  BB 3
   Insn 25: point = 26, n_alt = -1
   Insn 24: point = 26, n_alt = 1
   Insn 23: point = 27, n_alt = 0
   Insn 22: point = 28, n_alt = 1
   Insn 21: point = 29, n_alt = 1
   Insn 20: point = 31, n_alt = 0
  BB 16
   Insn 136: point = 33, n_alt = -1
   Insn 135: point = 33, n_alt = 1
  BB 2
   Insn 148: point = 34, n_alt = -1
   Insn 13: point = 34, n_alt = 1
   Insn 12: point = 34, n_alt = 1
   Insn 11: point = 35, n_alt = 0
   Insn 10: point = 37, n_alt = 0
   Insn 9: point = 39, n_alt = 0
   Insn 8: point = 40, n_alt = 1
   Insn 7: point = 41, n_alt = 0
   Insn 6: point = 43, n_alt = 0
   Insn 5: point = 45, n_alt = 0
   Insn 158: point = 46, n_alt = 0
  BB 15
   Insn 129: point = 47, n_alt = 0
   Insn 128: point = 47, n_alt = 0
   Insn 127: point = 47, n_alt = -2
   Insn 126: point = 47, n_alt = 0
   Insn 125: point = 47, n_alt = 0
   Insn 124: point = 47, n_alt = 8
   Insn 123: point = 48, n_alt = 0
  BB 14
   Insn 121: point = 50, n_alt = -1
   Insn 120: point = 50, n_alt = 0
   Insn 116: point = 51, n_alt = 1
   Insn 115: point = 52, n_alt = 3
   Insn 114: point = 53, n_alt = 0
  BB 12
   Insn 156: point = 55, n_alt = -1
   Insn 96: point = 55, n_alt = 0
   Insn 95: point = 56, n_alt = 0
   Insn 94: point = 57, n_alt = 0
   Insn 93: point = 58, n_alt = 0
   Insn 92: point = 59, n_alt = 1
   Insn 91: point = 60, n_alt = 0
   Insn 90: point = 61, n_alt = 0
   Insn 89: point = 63, n_alt = 0
   Insn 88: point = 64, n_alt = 0
   Insn 87: point = 66, n_alt = 0
   Insn 86: point = 67, n_alt = 1
   Insn 85: point = 67, n_alt = 3
   Insn 84: point = 69, n_alt = 0
   Insn 83: point = 70, n_alt = 0
   Insn 82: point = 72, n_alt = 0
  BB 13
   Insn 111: point = 74, n_alt = 8
   Insn 110: point = 75, n_alt = -2
   Insn 109: point = 77, n_alt = 3
   Insn 108: point = 78, n_alt = -2
   Insn 107: point = 80, n_alt = -2
   Insn 106: point = 81, n_alt = 0
   Insn 105: point = 81, n_alt = 0
   Insn 104: point = 81, n_alt = 0
   Insn 103: point = 82, n_alt = 0
   Insn 102: point = 82, n_alt = 1
   Insn 101: point = 83, n_alt = 3
   Insn 100: point = 84, n_alt = 0
 r82: [7..85]
 r83: [42..43]
 r84: [36..37]
 r85: [14..18]
 r86: [13..15]
 r87: [68..70]
 r88: [68..69]
 r89: [62..64]
 r90: [59..61]
 r91: [81..84]
 r92: [76..80]
 r93: [74..78]
 r94: [74..75]
 r95: [50..53]
 r96: [79..85] [74..77] [50..67]
 r97: [2..6]
 r98: [0..1]
 r99: [44..45]
 r100: [40..41]
 r101: [38..39]
 r102: [34..35]
 r105: [28..29]
 r106: [30..31]
 r107: [26..27]
 r108: [23..24]
 r109: [8..9]
 r110: [19..20]
 r111: [16..17]
 r112: [11..12]
 r113: [71..72]
 r114: [65..66]
 r115: [62..63]
 r116: [59..60]
 r117: [57..58]
 r118: [55..56]
 r119: [82..83]
 r120: [51..52]
 r121: [47..48]
Compressing live ranges: from 86 to 60 - 69%
Ranges after the compression:
 r82: [4..59]
 r83: [30..31]
 r84: [24..25]
 r85: [8..11]
 r86: [8..9]
 r87: [48..49]
 r88: [48..49]
 r89: [44..45]
 r90: [42..43]
 r91: [58..59]
 r92: [54..57]
 r93: [52..55]
 r94: [52..53]
 r95: [36..37]
 r96: [52..59] [36..47]
 r97: [2..3]
 r98: [0..1]
 r99: [32..33]
 r100: [28..29]
 r101: [26..27]
 r102: [22..23]
 r105: [18..19]
 r106: [20..21]
 r107: [16..17]
 r108: [14..15]
 r109: [4..5]
 r110: [12..13]
 r111: [10..11]
 r112: [6..7]
 r113: [50..51]
 r114: [46..47]
 r115: [44..45]
 r116: [42..43]
 r117: [40..41]
 r118: [38..39]
 r119: [58..59]
 r120: [36..37]
 r121: [34..35]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=48, prev_offset=48)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=32, prev_offset=32)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
changing reg in insn 158
changing reg in insn 127
changing reg in insn 56
changing reg in insn 37
changing reg in insn 6
changing reg in insn 7
changing reg in insn 10
changing reg in insn 11
changing reg in insn 47
changing reg in insn 52
changing reg in insn 49
changing reg in insn 53
changing reg in insn 83
changing reg in insn 85
changing reg in insn 84
changing reg in insn 85
changing reg in insn 88
changing reg in insn 90
changing reg in insn 90
changing reg in insn 90
changing reg in insn 92
changing reg in insn 100
changing reg in insn 104
changing reg in insn 101
changing reg in insn 107
changing reg in insn 110
changing reg in insn 108
changing reg in insn 111
changing reg in insn 109
changing reg in insn 110
changing reg in insn 111
changing reg in insn 114
changing reg in insn 120
changing reg in insn 115
changing reg in insn 109
changing reg in insn 85
changing reg in insn 108
changing reg in insn 138
changing reg in insn 75
changing reg in insn 70
changing reg in insn 141
changing reg in insn 141
changing reg in insn 145
changing reg in insn 5
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 21
changing reg in insn 22
changing reg in insn 20
changing reg in insn 21
changing reg in insn 23
changing reg in insn 24
changing reg in insn 27
changing reg in insn 28
changing reg in insn 40
changing reg in insn 41
changing reg in insn 46
changing reg in insn 47
changing reg in insn 48
changing reg in insn 49
changing reg in insn 59
changing reg in insn 60
changing reg in insn 82
changing reg in insn 83
changing reg in insn 87
changing reg in insn 88
changing reg in insn 89
changing reg in insn 90
changing reg in insn 91
changing reg in insn 92
changing reg in insn 93
changing reg in insn 94
changing reg in insn 95
changing reg in insn 96
changing reg in insn 101
changing reg in insn 102
changing reg in insn 115
changing reg in insn 116
changing reg in insn 123
changing reg in insn 124
deleting insn with uid = 37.
deleting insn with uid = 40.
deleting insn with uid = 56.
deleting insn with uid = 59.
deleting insn with uid = 110.
deleting insn with uid = 127.
deleting insn with uid = 141.
deleting insn with uid = 145.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 38.
verify found no changes in insn with uid = 57.
verify found no changes in insn with uid = 105.
verify found no changes in insn with uid = 128.


block_write

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp] 17 [flags]
;;  ref usage 	r0={32d,32u} r1={12d,7u,1e} r2={5d} r3={1d,3u} r4={2d,1u} r7={18d,92u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={32d,6u} r18={4d} r19={3e} r20={4d} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={4d} r38={4d} r39={4d} r40={4d} r41={4d} r42={4d} r43={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} 
;;    total ref usage 507{362d,141u,4e} in 92{88 regular + 4 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 158 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 158 3 2 2 (parallel [
            (set (reg:SI 3 bx [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 158 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 0 ax [99])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 52 [0x34])) [9 pos+0 S4 A32])) "fs/block_dev.c":43:17 75 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (reg:SI 0 ax [orig:83 _1 ] [83])
        (mem:SI (reg/f:SI 0 ax [99]) [1 *pos_31(D)+0 S4 A32])) "fs/block_dev.c":43:17 75 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (parallel [
            (set (reg:SI 0 ax [100])
                (ashiftrt:SI (reg:SI 0 ax [orig:83 _1 ] [83])
                    (const_int 10 [0xa])))
            (clobber (reg:CC 17 flags))
        ]) "fs/block_dev.c":43:9 702 {*ashrsi3_1}
     (nil))
(insn 8 7 9 2 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [3 block+0 S4 A32])
        (reg:SI 0 ax [100])) "fs/block_dev.c":43:9 75 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (reg/f:SI 0 ax [101])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 52 [0x34])) [9 pos+0 S4 A32])) "fs/block_dev.c":44:23 75 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:SI 0 ax [orig:84 _2 ] [84])
        (mem:SI (reg/f:SI 0 ax [101]) [1 *pos_31(D)+0 S4 A32])) "fs/block_dev.c":44:23 75 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (parallel [
            (set (reg:SI 0 ax [102])
                (and:SI (reg:SI 0 ax [orig:84 _2 ] [84])
                    (const_int 1023 [0x3ff])))
            (clobber (reg:CC 17 flags))
        ]) "fs/block_dev.c":44:9 490 {*andsi_1}
     (nil))
(insn 12 11 13 2 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [3 offset+0 S4 A32])
        (reg:SI 0 ax [102])) "fs/block_dev.c":44:9 75 {*movsi_internal}
     (nil))
(insn 13 12 148 2 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [3 written+0 S4 A32])
        (const_int 0 [0])) "fs/block_dev.c":46:9 75 {*movsi_internal}
     (nil))
(jump_insn 148 13 149 2 (set (pc)
        (label_ref 130)) "fs/block_dev.c":50:11 807 {jump}
     (nil)
 -> 130)
(barrier 149 148 132)
(code_label 132 149 16 3 25 (nil) [1 uses])
(note 16 132 20 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 20 16 21 3 (set (reg:SI 0 ax [106])
        (const_int 1024 [0x400])) "fs/block_dev.c":51:15 75 {*movsi_internal}
     (nil))
(insn 21 20 22 3 (parallel [
            (set (reg:SI 0 ax [105])
                (minus:SI (reg:SI 0 ax [106])
                    (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 24 [0x18])) [3 offset+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) "fs/block_dev.c":51:15 282 {*subsi_1}
     (nil))
(insn 22 21 23 3 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [3 chars+0 S4 A32])
        (reg:SI 0 ax [105])) "fs/block_dev.c":51:15 75 {*movsi_internal}
     (nil))
(insn 23 22 24 3 (set (reg:SI 0 ax [107])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [3 chars+0 S4 A32])) "fs/block_dev.c":52:12 75 {*movsi_internal}
     (nil))
(insn 24 23 25 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [107])
            (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 60 [0x3c])) [3 count+0 S4 A32]))) "fs/block_dev.c":52:12 11 {*cmpsi_1}
     (nil))
(jump_insn 25 24 26 3 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 29)
            (pc))) "fs/block_dev.c":52:12 806 {*jcc}
     (nil)
 -> 29)
(note 26 25 27 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 27 26 28 4 (set (reg:SI 0 ax [108])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 60 [0x3c])) [3 count+0 S4 A32])) "fs/block_dev.c":53:19 75 {*movsi_internal}
     (nil))
(insn 28 27 29 4 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [3 chars+0 S4 A32])
        (reg:SI 0 ax [108])) "fs/block_dev.c":53:19 75 {*movsi_internal}
     (nil))
(code_label 29 28 30 5 16 (nil) [1 uses])
(note 30 29 31 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 31 30 32 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 20 [0x14])) [3 chars+0 S4 A32])
            (const_int 1024 [0x400]))) "fs/block_dev.c":54:12 11 {*cmpsi_1}
     (nil))
(jump_insn 32 31 33 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 44)
            (pc))) "fs/block_dev.c":54:12 806 {*jcc}
     (nil)
 -> 44)
(note 33 32 34 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 34 33 35 6 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "fs/block_dev.c":55:18 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 35 34 36 6 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [3  S4 A32])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 36 [0x24])) [3 block+0 S4 A32])) "fs/block_dev.c":55:18 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 36 35 38 6 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [3  S4 A32])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 60 [0x3c])) [3 dev+0 S4 A32])) "fs/block_dev.c":55:18 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 38 36 39 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("getblk") [flags 0x41]  <function_decl 0x77329dd0e500 getblk>) [0 getblk S1 A8])
            (const_int 16 [0x10]))) "fs/block_dev.c":55:18 823 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 39 38 41 6 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "fs/block_dev.c":55:18 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 41 39 150 6 (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [4 bh+0 S4 A32])
        (reg:SI 0 ax [109])) "fs/block_dev.c":55:18 75 {*movsi_internal}
     (nil))
(jump_insn 150 41 151 6 (set (pc)
        (label_ref 61)) 807 {jump}
     (nil)
 -> 61)
(barrier 151 150 44)
(code_label 44 151 45 7 17 (nil) [1 uses])
(note 45 44 46 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 46 45 47 7 (set (reg:SI 0 ax [110])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [3 block+0 S4 A32])) "fs/block_dev.c":57:18 75 {*movsi_internal}
     (nil))
(insn 47 46 48 7 (parallel [
            (set (reg:SI 1 dx [orig:85 _3 ] [85])
                (plus:SI (reg:SI 0 ax [110])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "fs/block_dev.c":57:18 209 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:SI (reg/f:SI 19 frame)
                    (const_int -4 [0xfffffffffffffffc])) [3 block+0 S4 A32])
            (const_int 2 [0x2]))
        (nil)))
(insn 48 47 49 7 (set (reg:SI 0 ax [111])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [3 block+0 S4 A32])) "fs/block_dev.c":57:18 75 {*movsi_internal}
     (nil))
(insn 49 48 50 7 (parallel [
            (set (reg:SI 0 ax [orig:86 _4 ] [86])
                (plus:SI (reg:SI 0 ax [111])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "fs/block_dev.c":57:18 209 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:SI (reg/f:SI 19 frame)
                    (const_int -4 [0xfffffffffffffffc])) [3 block+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 50 49 51 7 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "fs/block_dev.c":57:18 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 51 50 52 7 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [3  S4 A32])
        (const_int -1 [0xffffffffffffffff])) "fs/block_dev.c":57:18 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(insn 52 51 53 7 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [3  S4 A32])
        (reg:SI 1 dx [orig:85 _3 ] [85])) "fs/block_dev.c":57:18 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 20 [0x14])
        (nil)))
(insn 53 52 54 7 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [3  S4 A32])
        (reg:SI 0 ax [orig:86 _4 ] [86])) "fs/block_dev.c":57:18 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 24 [0x18])
        (nil)))
(insn 54 53 55 7 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [3  S4 A32])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 52 [0x34])) [3 block+0 S4 A32])) "fs/block_dev.c":57:18 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 28 [0x1c])
        (nil)))
(insn 55 54 57 7 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [3  S4 A32])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 76 [0x4c])) [3 dev+0 S4 A32])) "fs/block_dev.c":57:18 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 32 [0x20])
        (nil)))
(call_insn 57 55 58 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("breada") [flags 0x41]  <function_decl 0x77329dd0e600 breada>) [0 breada S1 A8])
            (const_int 32 [0x20]))) "fs/block_dev.c":57:18 823 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 58 57 60 7 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) "fs/block_dev.c":57:18 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 60 58 61 7 (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [4 bh+0 S4 A32])
        (reg:SI 0 ax [112])) "fs/block_dev.c":57:18 75 {*movsi_internal}
     (nil))
(code_label 61 60 62 8 18 (nil) [1 uses])
(note 62 61 63 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 63 62 64 8 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 28 [0x1c])) [3 block+0 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 28 [0x1c])) [3 block+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "fs/block_dev.c":58:14 209 {*addsi_1}
     (nil))
(insn 64 63 65 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 12 [0xc])) [4 bh+0 S4 A32])
            (const_int 0 [0]))) "fs/block_dev.c":59:12 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 65 64 66 8 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 80)
            (pc))) "fs/block_dev.c":59:12 806 {*jcc}
     (nil)
 -> 80)
(note 66 65 67 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 67 66 68 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])) [3 written+0 S4 A32])
            (const_int 0 [0]))) "fs/block_dev.c":60:38 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 68 67 69 9 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 73)
            (pc))) "fs/block_dev.c":60:38 806 {*jcc}
     (nil)
 -> 73)
(note 69 68 70 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 70 69 152 10 (set (reg:SI 0 ax [orig:97 iftmp.6_25 ] [97])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [3 written+0 S4 A32])) "fs/block_dev.c":60:38 75 {*movsi_internal}
     (nil))
(jump_insn 152 70 153 10 (set (pc)
        (label_ref 139)) "fs/block_dev.c":60:38 807 {jump}
     (nil)
 -> 139)
(barrier 153 152 73)
(code_label 73 153 74 11 20 (nil) [1 uses])
(note 74 73 75 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 75 74 154 11 (set (reg:SI 0 ax [orig:97 iftmp.6_25 ] [97])
        (const_int -5 [0xfffffffffffffffb])) "fs/block_dev.c":60:38 75 {*movsi_internal}
     (nil))
(jump_insn 154 75 155 11 (set (pc)
        (label_ref 139)) "fs/block_dev.c":60:38 807 {jump}
     (nil)
 -> 139)
(barrier 155 154 80)
(code_label 80 155 81 12 19 (nil) [1 uses])
(note 81 80 82 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 82 81 83 12 (set (reg/f:SI 0 ax [113])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [4 bh+0 S4 A32])) "fs/block_dev.c":61:24 75 {*movsi_internal}
     (nil))
(insn 83 82 84 12 (set (reg/f:SI 1 dx [orig:87 _5 ] [87])
        (mem/f:SI (reg/f:SI 0 ax [113]) [2 bh_22->b_data+0 S4 A32])) "fs/block_dev.c":61:24 75 {*movsi_internal}
     (nil))
(insn 84 83 85 12 (set (reg:SI 0 ax [orig:88 offset.7_6 ] [88])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [3 offset+0 S4 A32])) "fs/block_dev.c":61:20 75 {*movsi_internal}
     (nil))
(insn 85 84 86 12 (parallel [
            (set (reg/v/f:SI 4 si [orig:96 p ] [96])
                (plus:SI (reg/f:SI 1 dx [orig:87 _5 ] [87])
                    (reg:SI 0 ax [orig:88 offset.7_6 ] [88])))
            (clobber (reg:CC 17 flags))
        ]) "fs/block_dev.c":61:11 209 {*addsi_1}
     (nil))
(insn 86 85 87 12 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [3 offset+0 S4 A32])
        (const_int 0 [0])) "fs/block_dev.c":62:16 75 {*movsi_internal}
     (nil))
(insn 87 86 88 12 (set (reg/f:SI 0 ax [114])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 52 [0x34])) [9 pos+0 S4 A32])) "fs/block_dev.c":63:14 75 {*movsi_internal}
     (nil))
(insn 88 87 89 12 (set (reg:SI 1 dx [orig:89 _7 ] [89])
        (mem:SI (reg/f:SI 0 ax [114]) [1 *pos_31(D)+0 S4 A32])) "fs/block_dev.c":63:14 75 {*movsi_internal}
     (nil))
(insn 89 88 90 12 (set (reg:SI 0 ax [115])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [3 chars+0 S4 A32])) "fs/block_dev.c":63:14 75 {*movsi_internal}
     (nil))
(insn 90 89 91 12 (parallel [
            (set (reg:SI 1 dx [orig:90 _8 ] [90])
                (plus:SI (reg:SI 1 dx [orig:89 _7 ] [89])
                    (reg:SI 0 ax [115])))
            (clobber (reg:CC 17 flags))
        ]) "fs/block_dev.c":63:14 209 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 1 dx [orig:89 _7 ] [89])
            (mem/c:SI (plus:SI (reg/f:SI 19 frame)
                    (const_int -12 [0xfffffffffffffff4])) [3 chars+0 S4 A32]))
        (nil)))
(insn 91 90 92 12 (set (reg/f:SI 0 ax [116])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 52 [0x34])) [9 pos+0 S4 A32])) "fs/block_dev.c":63:14 75 {*movsi_internal}
     (nil))
(insn 92 91 93 12 (set (mem:SI (reg/f:SI 0 ax [116]) [1 *pos_31(D)+0 S4 A32])
        (reg:SI 1 dx [orig:90 _8 ] [90])) "fs/block_dev.c":63:14 75 {*movsi_internal}
     (nil))
(insn 93 92 94 12 (set (reg:SI 0 ax [117])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [3 chars+0 S4 A32])) "fs/block_dev.c":64:17 75 {*movsi_internal}
     (nil))
(insn 94 93 95 12 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 16 [0x10])) [3 written+0 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 16 [0x10])) [3 written+0 S4 A32])
                    (reg:SI 0 ax [117])))
            (clobber (reg:CC 17 flags))
        ]) "fs/block_dev.c":64:17 209 {*addsi_1}
     (nil))
(insn 95 94 96 12 (set (reg:SI 0 ax [118])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [3 chars+0 S4 A32])) "fs/block_dev.c":65:15 75 {*movsi_internal}
     (nil))
(insn 96 95 156 12 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 60 [0x3c])) [3 count+0 S4 A32])
                (minus:SI (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 60 [0x3c])) [3 count+0 S4 A32])
                    (reg:SI 0 ax [118])))
            (clobber (reg:CC 17 flags))
        ]) "fs/block_dev.c":65:15 282 {*subsi_1}
     (nil))
(jump_insn 156 96 157 12 (set (pc)
        (label_ref 112)) "fs/block_dev.c":66:15 807 {jump}
     (nil)
 -> 112)
(barrier 157 156 117)
(code_label 117 157 99 13 24 (nil) [1 uses])
(note 99 117 100 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 100 99 101 13 (set (reg/f:SI 0 ax [orig:91 buf.8_9 ] [91])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 56 [0x38])) [2 buf+0 S4 A32])) "fs/block_dev.c":67:22 75 {*movsi_internal}
     (nil))
(insn 101 100 102 13 (parallel [
            (set (reg:SI 1 dx [119])
                (plus:SI (reg/f:SI 0 ax [orig:91 buf.8_9 ] [91])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "fs/block_dev.c":67:22 209 {*addsi_1}
     (nil))
(insn 102 101 103 13 (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 56 [0x38])) [2 buf+0 S4 A32])
        (reg:SI 1 dx [119])) "fs/block_dev.c":67:22 75 {*movsi_internal}
     (nil))
(insn 103 102 104 13 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "fs/block_dev.c":67:22 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 104 103 105 13 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (reg/f:SI 0 ax [orig:91 buf.8_9 ] [91])) "fs/block_dev.c":67:22 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 105 104 106 13 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:SI ("get_fs_byte") [flags 0x3]  <function_decl 0x77329dd10800 get_fs_byte>) [0 get_fs_byte S1 A8])
            (const_int 16 [0x10]))) "fs/block_dev.c":67:22 823 {*call_value}
     (nil)
    (nil))
(insn 106 105 107 13 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "fs/block_dev.c":67:22 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 107 106 108 13 (set (reg:QI 1 dx [orig:92 _10 ] [92])
        (reg:QI 0 ax)) "fs/block_dev.c":67:22 77 {*movqi_internal}
     (nil))
(insn 108 107 109 13 (set (reg/f:SI 0 ax [orig:93 p.9_11 ] [93])
        (reg/v/f:SI 4 si [orig:96 p ] [96])) "fs/block_dev.c":67:16 75 {*movsi_internal}
     (nil))
(insn 109 108 111 13 (parallel [
            (set (reg/v/f:SI 4 si [orig:96 p ] [96])
                (plus:SI (reg/f:SI 0 ax [orig:93 p.9_11 ] [93])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "fs/block_dev.c":67:16 209 {*addsi_1}
     (nil))
(insn 111 109 112 13 (set (mem:QI (reg/f:SI 0 ax [orig:93 p.9_11 ] [93]) [0 *p.9_11+0 S1 A8])
        (reg:QI 1 dx [orig:94 _12 ] [94])) "fs/block_dev.c":67:20 77 {*movqi_internal}
     (nil))
(code_label 112 111 113 14 23 (nil) [1 uses])
(note 113 112 114 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 114 113 115 14 (set (reg:SI 0 ax [orig:95 chars.10_13 ] [95])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [3 chars+0 S4 A32])) "fs/block_dev.c":66:21 75 {*movsi_internal}
     (nil))
(insn 115 114 116 14 (parallel [
            (set (reg:SI 1 dx [120])
                (plus:SI (reg:SI 0 ax [orig:95 chars.10_13 ] [95])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "fs/block_dev.c":66:21 209 {*addsi_1}
     (nil))
(insn 116 115 120 14 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [3 chars+0 S4 A32])
        (reg:SI 1 dx [120])) "fs/block_dev.c":66:21 75 {*movsi_internal}
     (nil))
(insn 120 116 121 14 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:SI 0 ax [orig:95 chars.10_13 ] [95])
            (const_int 0 [0]))) "fs/block_dev.c":66:24 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 121 120 122 14 (set (pc)
        (if_then_else (gt (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 117)
            (pc))) "fs/block_dev.c":66:24 806 {*jcc}
     (nil)
 -> 117)
(note 122 121 123 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 123 122 124 15 (set (reg/f:SI 0 ax [121])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [4 bh+0 S4 A32])) "fs/block_dev.c":68:20 75 {*movsi_internal}
     (nil))
(insn 124 123 125 15 (set (mem:QI (plus:SI (reg/f:SI 0 ax [121])
                (const_int 11 [0xb])) [0 bh_22->b_dirt+0 S1 A8])
        (const_int 1 [0x1])) "fs/block_dev.c":68:20 77 {*movqi_internal}
     (nil))
(insn 125 124 126 15 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "fs/block_dev.c":69:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 126 125 128 15 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [4  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [4 bh+0 S4 A32])) "fs/block_dev.c":69:9 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 128 126 129 15 (call (mem:QI (symbol_ref:SI ("brelse") [flags 0x41]  <function_decl 0x77329dd0e200 brelse>) [0 brelse S1 A8])
        (const_int 16 [0x10])) "fs/block_dev.c":69:9 812 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 129 128 130 15 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "fs/block_dev.c":69:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(code_label 130 129 131 16 15 (nil) [1 uses])
(note 131 130 135 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 135 131 136 16 (set (reg:CCNO 17 flags)
        (compare:CCNO (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 60 [0x3c])) [3 count+0 S4 A32])
            (const_int 0 [0]))) "fs/block_dev.c":50:18 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 136 135 137 16 (set (pc)
        (if_then_else (gt (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 132)
            (pc))) "fs/block_dev.c":50:18 806 {*jcc}
     (nil)
 -> 132)
(note 137 136 138 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 138 137 139 17 (set (reg:SI 0 ax [orig:97 iftmp.6_25 ] [97])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [3 written+0 S4 A32])) "fs/block_dev.c":71:12 75 {*movsi_internal}
     (nil))
(code_label 139 138 140 18 22 (nil) [2 uses])
(note 140 139 146 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 146 140 159 18 (use (reg/i:SI 0 ax)) "fs/block_dev.c":72:1 -1
     (nil))
(note 159 146 0 NOTE_INSN_DELETED)
