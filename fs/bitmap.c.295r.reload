
;; Function free_inode (free_inode, funcdef_no=1, decl_uid=1109, cgraph_uid=2, symbol_order=1)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 169:  (0) =r {*set_got}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 5:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 13:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) r {*cmphi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 17:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-4)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 23:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 29:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) rm  (1) rn {*cmphi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 36:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =r  (1) rm {*zero_extendhisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 38:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) Ts {*leasi} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 44:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 45:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =r  (1) Ts {*leasi} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 50:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 54:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 58:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =r  (1) Ts {*leasi} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 63:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 67:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =r  (1) rm {*zero_extendhisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 69:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 73:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 75:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 76:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 79:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) =r  (1) Ts {*leasi} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 84:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 88:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) r {*cmphi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 93:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 95:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) rm  (1) rn {*cmphi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 100:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) =r  (1) Ts {*leasi} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 105:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 109:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (0) =rm  (1) 0  (2) cI {*lshrhi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) =r  (1) rm {*zero_extendhisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 113:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 114:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 115:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 116:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 119:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 120:  (0) =r  (1) Ts {*leasi} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 121:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 123:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 124:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 127:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 128:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 129:  (0) =r  (1) rm {*zero_extendhisi2}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            alt=2: Bad operand -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 130:  (0) =rm  (1) %0  (2) re {*andsi_1}
      Creating newreg=128 from oldreg=97, assigning class GENERAL_REGS to r128
  130: {r128:SI=r128:SI&0x1fff;clobber flags:CC;}
      REG_DEAD r97:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  171: r128:SI=r97:SI
    Inserting insn reload after:
  172: r98:SI=r128:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 131:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 132:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 134:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 135:  (0) =a  (1) 0  (2) r  (3) m
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 140:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 141:  (0) =r  (1) Ts {*leasi} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 142:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 144:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 145:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 148:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 149:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 150:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 151:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-4)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 152:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 153:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 155:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 156:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2 3 4
EBB 5 6
EBB 7 8
EBB 9 10
EBB 11 12
EBB 13
EBB 14 15
EBB 16 17
EBB 18
EBB 20
EBB 19

********** Pseudo live ranges #1: **********

  BB 19
  BB 18
   Insn 163: point = 0, n_alt = -1
   Insn 156: point = 0, n_alt = 0
   Insn 155: point = 0, n_alt = 0
   Insn 154: point = 0, n_alt = -2
   Insn 153: point = 1, n_alt = 0
   Insn 152: point = 1, n_alt = 0
   Insn 151: point = 1, n_alt = 0
   Insn 150: point = 1, n_alt = 0
   Insn 149: point = 1, n_alt = 8
   Insn 148: point = 2, n_alt = 0
  BB 17
   Insn 145: point = 4, n_alt = 0
   Insn 144: point = 4, n_alt = 0
   Insn 143: point = 4, n_alt = -2
   Insn 142: point = 4, n_alt = 0
   Insn 141: point = 5, n_alt = 0
   Insn 140: point = 6, n_alt = 0
  BB 16
   Insn 138: point = 7, n_alt = -1
   Insn 137: point = 7, n_alt = 0
   Insn 136: point = 8, n_alt = -2
   Insn 133: point = 10, n_alt = -2
   Insn 135: point = 12, n_alt = 0
   Insn 168: point = 14, n_alt = -2
   Insn 134: point = 16, n_alt = 0
   Insn 132: point = 17, n_alt = 0
   Insn 131: point = 19, n_alt = 0
   Insn 172: point = 20, n_alt = -2
	Hard reg 2 is preferable by r128 with profit 1000
   Insn 130: point = 22, n_alt = 0
   Insn 171: point = 23, n_alt = -2
	Hard reg 2 is preferable by r128 with profit 1000
	Hard reg 0 is preferable by r128 with profit 1000
   Insn 129: point = 25, n_alt = 0
   Insn 128: point = 27, n_alt = 2
   Insn 127: point = 29, n_alt = 0
  BB 15
   Insn 124: point = 31, n_alt = 0
   Insn 123: point = 31, n_alt = 0
   Insn 122: point = 31, n_alt = -2
   Insn 121: point = 31, n_alt = 0
   Insn 120: point = 32, n_alt = 0
   Insn 119: point = 33, n_alt = 0
  BB 14
   Insn 117: point = 34, n_alt = -1
   Insn 116: point = 34, n_alt = 1
   Insn 115: point = 34, n_alt = 1
   Insn 114: point = 35, n_alt = 0
   Insn 113: point = 37, n_alt = 0
   Insn 112: point = 39, n_alt = 0
   Insn 111: point = 40, n_alt = 0
   Insn 110: point = 42, n_alt = 0
   Insn 109: point = 44, n_alt = 2
   Insn 108: point = 46, n_alt = 0
  BB 13
   Insn 105: point = 48, n_alt = 0
   Insn 104: point = 48, n_alt = 0
   Insn 103: point = 48, n_alt = -2
   Insn 102: point = 48, n_alt = 0
   Insn 101: point = 49, n_alt = 0
   Insn 100: point = 50, n_alt = 0
  BB 12
   Insn 97: point = 51, n_alt = -1
   Insn 96: point = 51, n_alt = 0
   Insn 95: point = 52, n_alt = 2
   Insn 94: point = 54, n_alt = 0
   Insn 93: point = 55, n_alt = 2
   Insn 92: point = 57, n_alt = 0
  BB 11
   Insn 90: point = 59, n_alt = -1
   Insn 89: point = 59, n_alt = 0
   Insn 88: point = 60, n_alt = 2
   Insn 87: point = 62, n_alt = 0
  BB 10
   Insn 84: point = 64, n_alt = 0
   Insn 83: point = 64, n_alt = 0
   Insn 82: point = 64, n_alt = -2
   Insn 81: point = 64, n_alt = 0
   Insn 80: point = 65, n_alt = 0
   Insn 79: point = 66, n_alt = 0
  BB 9
   Insn 77: point = 67, n_alt = -1
   Insn 76: point = 67, n_alt = 1
   Insn 75: point = 67, n_alt = 1
   Insn 74: point = 68, n_alt = -2
   Insn 73: point = 69, n_alt = 0
   Insn 72: point = 69, n_alt = 0
   Insn 71: point = 69, n_alt = -2
   Insn 70: point = 69, n_alt = 0
   Insn 69: point = 70, n_alt = 0
   Insn 68: point = 70, n_alt = 0
   Insn 67: point = 72, n_alt = 2
   Insn 66: point = 74, n_alt = 0
  BB 8
   Insn 63: point = 76, n_alt = 0
   Insn 62: point = 76, n_alt = 0
   Insn 61: point = 76, n_alt = -2
   Insn 60: point = 76, n_alt = 0
   Insn 59: point = 77, n_alt = 0
   Insn 58: point = 78, n_alt = 0
  BB 7
   Insn 56: point = 79, n_alt = -1
   Insn 55: point = 79, n_alt = 0
   Insn 54: point = 80, n_alt = 4
   Insn 53: point = 82, n_alt = 0
  BB 6
   Insn 50: point = 84, n_alt = 0
   Insn 49: point = 84, n_alt = 0
   Insn 48: point = 84, n_alt = -2
   Insn 47: point = 84, n_alt = 0
   Insn 46: point = 85, n_alt = 0
   Insn 45: point = 86, n_alt = 0
   Insn 44: point = 86, n_alt = 0
   Insn 43: point = 86, n_alt = 0
   Insn 42: point = 86, n_alt = -2
   Insn 41: point = 86, n_alt = 0
   Insn 40: point = 87, n_alt = 0
   Insn 39: point = 88, n_alt = 0
   Insn 38: point = 89, n_alt = 0
   Insn 37: point = 89, n_alt = 0
   Insn 36: point = 91, n_alt = 2
   Insn 35: point = 93, n_alt = 0
  BB 5
   Insn 33: point = 95, n_alt = -1
   Insn 32: point = 95, n_alt = 0
   Insn 29: point = 96, n_alt = 2
   Insn 28: point = 98, n_alt = 0
  BB 20
   Insn 167: point = 100, n_alt = -1
  BB 4
   Insn 161: point = 100, n_alt = -1
   Insn 23: point = 100, n_alt = 0
   Insn 22: point = 100, n_alt = 0
   Insn 21: point = 100, n_alt = -2
   Insn 20: point = 101, n_alt = 0
   Insn 19: point = 101, n_alt = 0
   Insn 18: point = 101, n_alt = 0
   Insn 17: point = 101, n_alt = 0
  BB 3
   Insn 15: point = 102, n_alt = -1
   Insn 14: point = 102, n_alt = 0
   Insn 13: point = 103, n_alt = 2
   Insn 12: point = 105, n_alt = 0
  BB 2
   Insn 6: point = 107, n_alt = -1
   Insn 5: point = 107, n_alt = 1
   Insn 169: point = 107, n_alt = 0
 r82: [0..107]
 r83: [102..103]
 r84: [95..96]
 r85: [90..91]
 r86: [88..89]
 r87: [79..80]
 r88: [71..72]
 r89: [69..70]
 r90: [59..60]
 r91: [51..55]
 r92: [51..52]
 r93: [43..44]
 r94: [41..42]
 r95: [38..40]
 r96: [26..27]
 r97: [24..25]
 r98: [13..20]
 r99: [13..17]
 r100: [9..10]
 r101: [7..8]
 r102: [104..105]
 r103: [97..98]
 r104: [92..93]
 r105: [86..87]
 r106: [84..85]
 r107: [81..82]
 r108: [76..77]
 r109: [73..74]
 r110: [67..68]
 r111: [64..65]
 r112: [61..62]
 r113: [56..57]
 r114: [53..54]
 r115: [48..49]
 r116: [45..46]
 r117: [36..39]
 r118: [36..37]
 r119: [34..35]
 r120: [31..32]
 r121: [28..29]
 r122: [18..19]
 r123: [11..14]
 r124: [15..16]
 r125: [4..5]
 r126: [1..2]
 r128: [21..23]
Compressing live ranges: from 108 to 82 - 75%
Ranges after the compression:
 r82: [0..81]
 r83: [78..79]
 r84: [74..75]
 r85: [70..71]
 r86: [68..69]
 r87: [60..61]
 r88: [54..55]
 r89: [52..53]
 r90: [44..45]
 r91: [38..41]
 r92: [38..39]
 r93: [32..33]
 r94: [30..31]
 r95: [28..29]
 r96: [18..19]
 r97: [16..17]
 r98: [8..13]
 r99: [8..11]
 r100: [6..7]
 r101: [4..5]
 r102: [80..81]
 r103: [76..77]
 r104: [72..73]
 r105: [66..67]
 r106: [64..65]
 r107: [62..63]
 r108: [58..59]
 r109: [56..57]
 r110: [50..51]
 r111: [48..49]
 r112: [46..47]
 r113: [42..43]
 r114: [40..41]
 r115: [36..37]
 r116: [34..35]
 r117: [26..29]
 r118: [26..27]
 r119: [24..25]
 r120: [22..23]
 r121: [20..21]
 r122: [12..13]
 r123: [8..9]
 r124: [10..11]
 r125: [2..3]
 r126: [0..1]
 r128: [14..15]

********** Assignment #1: **********

	 Assigning to 128 (cl=GENERAL_REGS, orig=97, freq=3000, tfirst=128, tfreq=3000)...
	   Assign 0 to reload r128 (freq=3000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=32)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=16)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
changing reg in insn 169
changing reg in insn 154
changing reg in insn 143
changing reg in insn 141
changing reg in insn 122
changing reg in insn 120
changing reg in insn 103
changing reg in insn 101
changing reg in insn 82
changing reg in insn 80
changing reg in insn 71
changing reg in insn 61
changing reg in insn 59
changing reg in insn 48
changing reg in insn 46
changing reg in insn 42
changing reg in insn 40
changing reg in insn 21
changing reg in insn 13
changing reg in insn 14
changing reg in insn 29
changing reg in insn 32
changing reg in insn 36
changing reg in insn 37
changing reg in insn 37
changing reg in insn 39
changing reg in insn 54
changing reg in insn 55
changing reg in insn 67
changing reg in insn 68
changing reg in insn 68
changing reg in insn 70
changing reg in insn 88
changing reg in insn 89
changing reg in insn 93
changing reg in insn 96
changing reg in insn 95
changing reg in insn 96
changing reg in insn 109
changing reg in insn 110
changing reg in insn 110
changing reg in insn 111
changing reg in insn 111
changing reg in insn 113
changing reg in insn 128
changing reg in insn 129
changing reg in insn 129
changing reg in insn 135
changing reg in insn 132
changing reg in insn 135
changing reg in insn 133
changing reg in insn 136
changing reg in insn 136
changing reg in insn 137
changing reg in insn 12
changing reg in insn 13
changing reg in insn 28
changing reg in insn 29
changing reg in insn 35
changing reg in insn 36
changing reg in insn 40
changing reg in insn 41
changing reg in insn 46
changing reg in insn 47
changing reg in insn 53
changing reg in insn 54
changing reg in insn 59
changing reg in insn 60
changing reg in insn 66
changing reg in insn 67
changing reg in insn 74
changing reg in insn 75
changing reg in insn 80
changing reg in insn 81
changing reg in insn 87
changing reg in insn 88
changing reg in insn 92
changing reg in insn 93
changing reg in insn 94
changing reg in insn 95
changing reg in insn 101
changing reg in insn 102
changing reg in insn 108
changing reg in insn 109
changing reg in insn 112
changing reg in insn 114
changing reg in insn 113
changing reg in insn 114
changing reg in insn 114
changing reg in insn 115
changing reg in insn 120
changing reg in insn 121
changing reg in insn 127
changing reg in insn 128
changing reg in insn 131
changing reg in insn 132
changing reg in insn 168
changing reg in insn 135
changing reg in insn 135
changing reg in insn 133
changing reg in insn 134
changing reg in insn 168
changing reg in insn 141
changing reg in insn 142
changing reg in insn 148
changing reg in insn 149
deleting insn with uid = 21.
deleting insn with uid = 42.
deleting insn with uid = 48.
deleting insn with uid = 61.
deleting insn with uid = 71.
deleting insn with uid = 74.
deleting insn with uid = 82.
deleting insn with uid = 103.
deleting insn with uid = 122.
deleting insn with uid = 171.
deleting insn with uid = 168.
deleting insn with uid = 143.
deleting insn with uid = 154.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 22.
verify found no changes in insn with uid = 43.
verify found no changes in insn with uid = 49.
verify found no changes in insn with uid = 62.
verify found no changes in insn with uid = 72.
verify found no changes in insn with uid = 83.
verify found no changes in insn with uid = 104.
verify found no changes in insn with uid = 123.
verify found no changes in insn with uid = 144.
verify found no changes in insn with uid = 155.


free_inode

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 17 [flags]
;;  ref usage 	r0={49d,39u} r1={15d,4u} r2={12d,1u} r3={1d,17u} r4={1d,1u} r7={36d,105u} r8={10d} r9={10d} r10={10d} r11={10d} r12={10d} r13={10d} r14={10d} r15={10d} r17={44d,9u} r18={10d} r20={10d} r21={10d} r22={10d} r23={10d} r24={10d} r25={10d} r26={10d} r27={10d} r28={10d} r29={10d} r30={10d} r31={10d} r32={10d} r33={10d} r34={10d} r35={10d} r36={10d} r37={10d} r38={10d} r39={10d} r40={10d} r41={10d} r42={10d} r43={10d} r44={10d} r45={10d} r46={10d} r47={10d} r48={10d} r49={10d} r50={10d} r51={10d} r52={10d} r53={10d} r54={10d} r55={10d} r56={10d} r57={10d} r58={10d} r59={10d} r60={10d} r61={10d} r62={10d} r63={10d} r64={10d} r65={10d} r66={10d} r67={10d} r68={10d} r69={10d} r70={10d} r71={10d} r72={10d} r73={10d} r74={10d} r75={10d} 
;;    total ref usage 984{808d,176u,0e} in 114{104 regular + 10 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 169 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 169 3 2 2 (parallel [
            (set (reg:SI 3 bx [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 169 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 32 [0x20])) [8 inode+0 S4 A32])
            (const_int 0 [0]))) "fs/bitmap.c":53:8 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 6 5 11 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 166)
            (pc))) "fs/bitmap.c":53:8 806 {*jcc}
     (nil)
 -> 166)
(note 11 6 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 12 11 13 3 (set (reg/f:SI 0 ax [102])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 32 [0x20])) [8 inode+0 S4 A32])) "fs/bitmap.c":55:15 75 {*movsi_internal}
     (nil))
(insn 13 12 14 3 (set (reg:HI 0 ax [orig:83 _1 ] [83])
        (mem:HI (plus:SI (reg/f:SI 0 ax [102])
                (const_int 44 [0x2c])) [4 inode_25(D)->i_dev+0 S2 A32])) "fs/bitmap.c":55:15 76 {*movhi_internal}
     (nil))
(insn 14 13 15 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:HI 0 ax [orig:83 _1 ] [83])
            (const_int 0 [0]))) "fs/bitmap.c":55:8 6 {*cmphi_ccno_1}
     (nil))
(jump_insn 15 14 16 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 26)
            (pc))) "fs/bitmap.c":55:8 806 {*jcc}
     (nil)
 -> 26)
(note 16 15 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 4 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":56:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 4 [0x4])
        (nil)))
(insn 18 17 19 4 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [13  S4 A32])
        (const_int 56 [0x38])) "fs/bitmap.c":56:9 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 19 18 20 4 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [13  S4 A32])
        (const_int 0 [0])) "fs/bitmap.c":56:9 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 20 19 22 4 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [8  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 44 [0x2c])) [8 inode+0 S4 A32])) "fs/bitmap.c":56:9 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 22 20 23 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("memset") [flags 0x41]  <function_decl 0x7b9e2653b200 memset>) [0 memset S1 A8])
            (const_int 16 [0x10]))) "fs/bitmap.c":56:9 823 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 23 22 161 4 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":56:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(jump_insn 161 23 162 4 (set (pc)
        (label_ref 159)) "fs/bitmap.c":57:9 807 {jump}
     (nil)
 -> 159)
(barrier 162 161 26)
(code_label 26 162 27 5 4 (nil) [1 uses])
(note 27 26 28 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 29 5 (set (reg/f:SI 0 ax [103])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 32 [0x20])) [8 inode+0 S4 A32])) "fs/bitmap.c":59:14 75 {*movsi_internal}
     (nil))
(insn 29 28 32 5 (set (reg:HI 0 ax [orig:84 _2 ] [84])
        (mem:HI (plus:SI (reg/f:SI 0 ax [103])
                (const_int 48 [0x30])) [4 inode_25(D)->i_count+0 S2 A32])) "fs/bitmap.c":59:14 76 {*movhi_internal}
     (nil))
(insn 32 29 33 5 (set (reg:CC 17 flags)
        (compare:CC (reg:HI 0 ax [orig:84 _2 ] [84])
            (const_int 1 [0x1]))) "fs/bitmap.c":59:8 10 {*cmphi_1}
     (nil))
(jump_insn 33 32 34 5 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 51)
            (pc))) "fs/bitmap.c":59:8 806 {*jcc}
     (nil)
 -> 51)
(note 34 33 35 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 35 34 36 6 (set (reg/f:SI 0 ax [104])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 32 [0x20])) [8 inode+0 S4 A32])) "fs/bitmap.c":60:61 75 {*movsi_internal}
     (nil))
(insn 36 35 37 6 (set (reg:HI 0 ax [orig:85 _3 ] [85])
        (mem:HI (plus:SI (reg/f:SI 0 ax [104])
                (const_int 48 [0x30])) [4 inode_25(D)->i_count+0 S2 A32])) "fs/bitmap.c":60:61 76 {*movhi_internal}
     (nil))
(insn 37 36 38 6 (set (reg:SI 0 ax [orig:86 _4 ] [86])
        (zero_extend:SI (reg:HI 0 ax [orig:85 _3 ] [85]))) "fs/bitmap.c":60:9 144 {*zero_extendhisi2}
     (nil))
(insn 38 37 39 6 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":60:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 39 38 40 6 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [13  S4 A32])
        (reg:SI 0 ax [orig:86 _4 ] [86])) "fs/bitmap.c":60:9 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 40 39 41 6 (set (reg/f:SI 0 ax [105])
        (plus:SI (reg:SI 3 bx [82])
            (const:SI (unspec:SI [
                        (symbol_ref/f:SI ("*.LC0") [flags 0x2]  <var_decl 0x7b9e2655d630 *.LC0>)
                    ] UNSPEC_GOTOFF)))) "fs/bitmap.c":60:9 205 {*leasi}
     (expr_list:REG_EQUAL (symbol_ref/f:SI ("*.LC0") [flags 0x2]  <var_decl 0x7b9e2655d630 *.LC0>)
        (nil)))
(insn 41 40 43 6 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (reg/f:SI 0 ax [105])) "fs/bitmap.c":60:9 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 43 41 44 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("printk") [flags 0x41]  <function_decl 0x7b9e26510900 printk>) [0 printk S1 A8])
            (const_int 16 [0x10]))) "fs/bitmap.c":60:9 823 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 44 43 45 6 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":60:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 45 44 46 6 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":61:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 46 45 47 6 (set (reg/f:SI 0 ax [106])
        (plus:SI (reg:SI 3 bx [82])
            (const:SI (unspec:SI [
                        (symbol_ref/f:SI ("*.LC1") [flags 0x2]  <var_decl 0x7b9e2655d6c0 *.LC1>)
                    ] UNSPEC_GOTOFF)))) "fs/bitmap.c":61:9 205 {*leasi}
     (expr_list:REG_EQUAL (symbol_ref/f:SI ("*.LC1") [flags 0x2]  <var_decl 0x7b9e2655d6c0 *.LC1>)
        (nil)))
(insn 47 46 49 6 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (reg/f:SI 0 ax [106])) "fs/bitmap.c":61:9 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 49 47 50 6 (call (mem:QI (symbol_ref:SI ("panic") [flags 0x41]  <function_decl 0x7b9e26510b00 panic>) [0 panic S1 A8])
        (const_int 16 [0x10])) "fs/bitmap.c":61:9 812 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 50 49 51 6 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":61:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(code_label 51 50 52 7 5 (nil) [1 uses])
(note 52 51 53 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 53 52 54 7 (set (reg/f:SI 0 ax [107])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 32 [0x20])) [8 inode+0 S4 A32])) "fs/bitmap.c":63:14 75 {*movsi_internal}
     (nil))
(insn 54 53 55 7 (set (reg:QI 0 ax [orig:87 _5 ] [87])
        (mem:QI (plus:SI (reg/f:SI 0 ax [107])
                (const_int 13 [0xd])) [0 inode_25(D)->i_nlinks+0 S1 A8])) "fs/bitmap.c":63:14 77 {*movqi_internal}
     (nil))
(insn 55 54 56 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:87 _5 ] [87])
            (const_int 0 [0]))) "fs/bitmap.c":63:8 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 56 55 57 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 64)
            (pc))) "fs/bitmap.c":63:8 806 {*jcc}
     (nil)
 -> 64)
(note 57 56 58 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 58 57 59 8 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":64:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 59 58 60 8 (set (reg/f:SI 0 ax [108])
        (plus:SI (reg:SI 3 bx [82])
            (const:SI (unspec:SI [
                        (symbol_ref/f:SI ("*.LC2") [flags 0x2]  <var_decl 0x7b9e2655d750 *.LC2>)
                    ] UNSPEC_GOTOFF)))) "fs/bitmap.c":64:9 205 {*leasi}
     (expr_list:REG_EQUAL (symbol_ref/f:SI ("*.LC2") [flags 0x2]  <var_decl 0x7b9e2655d750 *.LC2>)
        (nil)))
(insn 60 59 62 8 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (reg/f:SI 0 ax [108])) "fs/bitmap.c":64:9 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 62 60 63 8 (call (mem:QI (symbol_ref:SI ("panic") [flags 0x41]  <function_decl 0x7b9e26510b00 panic>) [0 panic S1 A8])
        (const_int 16 [0x10])) "fs/bitmap.c":64:9 812 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 63 62 64 8 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":64:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(code_label 64 63 65 9 6 (nil) [1 uses])
(note 65 64 66 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 66 65 67 9 (set (reg/f:SI 0 ax [109])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 32 [0x20])) [8 inode+0 S4 A32])) "fs/bitmap.c":65:31 75 {*movsi_internal}
     (nil))
(insn 67 66 68 9 (set (reg:HI 0 ax [orig:88 _6 ] [88])
        (mem:HI (plus:SI (reg/f:SI 0 ax [109])
                (const_int 44 [0x2c])) [4 inode_25(D)->i_dev+0 S2 A32])) "fs/bitmap.c":65:31 76 {*movhi_internal}
     (nil))
(insn 68 67 69 9 (set (reg:SI 0 ax [orig:89 _7 ] [89])
        (zero_extend:SI (reg:HI 0 ax [orig:88 _6 ] [88]))) "fs/bitmap.c":65:16 144 {*zero_extendhisi2}
     (nil))
(insn 69 68 70 9 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":65:16 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 70 69 72 9 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [13  S4 A32])
        (reg:SI 0 ax [orig:89 _7 ] [89])) "fs/bitmap.c":65:16 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 72 70 73 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("get_super") [flags 0x41]  <function_decl 0x7b9e2650e000 get_super>) [0 get_super S1 A8])
            (const_int 16 [0x10]))) "fs/bitmap.c":65:16 823 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 73 72 75 9 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":65:16 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 75 73 76 9 (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [19 sb+0 S4 A32])
        (reg:SI 0 ax [110])) "fs/bitmap.c":65:16 75 {*movsi_internal}
     (nil))
(insn 76 75 77 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 12 [0xc])) [19 sb+0 S4 A32])
            (const_int 0 [0]))) "fs/bitmap.c":65:8 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 77 76 78 9 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 85)
            (pc))) "fs/bitmap.c":65:8 806 {*jcc}
     (nil)
 -> 85)
(note 78 77 79 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 79 78 80 10 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":66:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 80 79 81 10 (set (reg/f:SI 0 ax [111])
        (plus:SI (reg:SI 3 bx [82])
            (const:SI (unspec:SI [
                        (symbol_ref/f:SI ("*.LC3") [flags 0x2]  <var_decl 0x7b9e2655d7e0 *.LC3>)
                    ] UNSPEC_GOTOFF)))) "fs/bitmap.c":66:9 205 {*leasi}
     (expr_list:REG_EQUAL (symbol_ref/f:SI ("*.LC3") [flags 0x2]  <var_decl 0x7b9e2655d7e0 *.LC3>)
        (nil)))
(insn 81 80 83 10 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (reg/f:SI 0 ax [111])) "fs/bitmap.c":66:9 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 83 81 84 10 (call (mem:QI (symbol_ref:SI ("panic") [flags 0x41]  <function_decl 0x7b9e26510b00 panic>) [0 panic S1 A8])
        (const_int 16 [0x10])) "fs/bitmap.c":66:9 812 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 84 83 85 10 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":66:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(code_label 85 84 86 11 7 (nil) [1 uses])
(note 86 85 87 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 87 86 88 11 (set (reg/f:SI 0 ax [112])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 32 [0x20])) [8 inode+0 S4 A32])) "fs/bitmap.c":67:14 75 {*movsi_internal}
     (nil))
(insn 88 87 89 11 (set (reg:HI 0 ax [orig:90 _8 ] [90])
        (mem:HI (plus:SI (reg/f:SI 0 ax [112])
                (const_int 46 [0x2e])) [4 inode_25(D)->i_num+0 S2 A16])) "fs/bitmap.c":67:14 76 {*movhi_internal}
     (nil))
(insn 89 88 90 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:HI 0 ax [orig:90 _8 ] [90])
            (const_int 0 [0]))) "fs/bitmap.c":67:8 6 {*cmphi_ccno_1}
     (nil))
(jump_insn 90 89 91 11 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 98)
            (pc))) "fs/bitmap.c":67:8 806 {*jcc}
     (nil)
 -> 98)
(note 91 90 92 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 92 91 93 12 (set (reg/f:SI 0 ax [113])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 32 [0x20])) [8 inode+0 S4 A32])) "fs/bitmap.c":67:34 75 {*movsi_internal}
     (nil))
(insn 93 92 94 12 (set (reg:HI 1 dx [orig:91 _9 ] [91])
        (mem:HI (plus:SI (reg/f:SI 0 ax [113])
                (const_int 46 [0x2e])) [4 inode_25(D)->i_num+0 S2 A16])) "fs/bitmap.c":67:34 76 {*movhi_internal}
     (nil))
(insn 94 93 95 12 (set (reg/f:SI 0 ax [114])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [19 sb+0 S4 A32])) "fs/bitmap.c":67:46 75 {*movsi_internal}
     (nil))
(insn 95 94 96 12 (set (reg:HI 0 ax [orig:92 _10 ] [92])
        (mem:HI (reg/f:SI 0 ax [114]) [4 sb_31->s_ninodes+0 S2 A32])) "fs/bitmap.c":67:46 76 {*movhi_internal}
     (nil))
(insn 96 95 97 12 (set (reg:CC 17 flags)
        (compare:CC (reg:HI 1 dx [orig:91 _9 ] [91])
            (reg:HI 0 ax [orig:92 _10 ] [92]))) "fs/bitmap.c":67:26 10 {*cmphi_1}
     (nil))
(jump_insn 97 96 98 12 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 106)
            (pc))) "fs/bitmap.c":67:26 806 {*jcc}
     (nil)
 -> 106)
(code_label 98 97 99 13 8 (nil) [1 uses])
(note 99 98 100 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 100 99 101 13 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":68:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 101 100 102 13 (set (reg/f:SI 0 ax [115])
        (plus:SI (reg:SI 3 bx [82])
            (const:SI (unspec:SI [
                        (symbol_ref/f:SI ("*.LC4") [flags 0x2]  <var_decl 0x7b9e2655d870 *.LC4>)
                    ] UNSPEC_GOTOFF)))) "fs/bitmap.c":68:9 205 {*leasi}
     (expr_list:REG_EQUAL (symbol_ref/f:SI ("*.LC4") [flags 0x2]  <var_decl 0x7b9e2655d870 *.LC4>)
        (nil)))
(insn 102 101 104 13 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (reg/f:SI 0 ax [115])) "fs/bitmap.c":68:9 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 104 102 105 13 (call (mem:QI (symbol_ref:SI ("panic") [flags 0x41]  <function_decl 0x7b9e26510b00 panic>) [0 panic S1 A8])
        (const_int 16 [0x10])) "fs/bitmap.c":68:9 812 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 105 104 106 13 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":68:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(code_label 106 105 107 14 9 (nil) [1 uses])
(note 107 106 108 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 108 107 109 14 (set (reg/f:SI 0 ax [116])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 32 [0x20])) [8 inode+0 S4 A32])) "fs/bitmap.c":69:32 75 {*movsi_internal}
     (nil))
(insn 109 108 110 14 (set (reg:HI 0 ax [orig:93 _11 ] [93])
        (mem:HI (plus:SI (reg/f:SI 0 ax [116])
                (const_int 46 [0x2e])) [4 inode_25(D)->i_num+0 S2 A16])) "fs/bitmap.c":69:32 76 {*movhi_internal}
     (nil))
(insn 110 109 111 14 (parallel [
            (set (reg:HI 0 ax [orig:94 _12 ] [94])
                (lshiftrt:HI (reg:HI 0 ax [orig:93 _11 ] [93])
                    (const_int 13 [0xd])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":69:40 711 {*lshrhi3_1}
     (nil))
(insn 111 110 112 14 (set (reg:SI 1 dx [orig:95 _13 ] [95])
        (zero_extend:SI (reg:HI 0 ax [orig:94 _12 ] [94]))) "fs/bitmap.c":69:40 144 {*zero_extendhisi2}
     (nil))
(insn 112 111 113 14 (set (reg/f:SI 0 ax [117])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [19 sb+0 S4 A32])) "fs/bitmap.c":69:14 75 {*movsi_internal}
     (nil))
(insn 113 112 114 14 (parallel [
            (set (reg:SI 1 dx [118])
                (plus:SI (reg:SI 1 dx [orig:95 _13 ] [95])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":69:14 209 {*addsi_1}
     (nil))
(insn 114 113 115 14 (set (reg/f:SI 0 ax [119])
        (mem/f:SI (plus:SI (plus:SI (mult:SI (reg:SI 1 dx [118])
                        (const_int 4 [0x4]))
                    (reg/f:SI 0 ax [117]))
                (const_int 4 [0x4])) [6 sb_31->s_imap[_13]+0 S4 A32])) "fs/bitmap.c":69:14 75 {*movsi_internal}
     (nil))
(insn 115 114 116 14 (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [6 bh+0 S4 A32])
        (reg/f:SI 0 ax [119])) "fs/bitmap.c":69:14 75 {*movsi_internal}
     (nil))
(insn 116 115 117 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 8 [0x8])) [6 bh+0 S4 A32])
            (const_int 0 [0]))) "fs/bitmap.c":69:8 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 117 116 118 14 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 125)
            (pc))) "fs/bitmap.c":69:8 806 {*jcc}
     (nil)
 -> 125)
(note 118 117 119 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 119 118 120 15 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":70:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 120 119 121 15 (set (reg/f:SI 0 ax [120])
        (plus:SI (reg:SI 3 bx [82])
            (const:SI (unspec:SI [
                        (symbol_ref/f:SI ("*.LC5") [flags 0x2]  <var_decl 0x7b9e2655d900 *.LC5>)
                    ] UNSPEC_GOTOFF)))) "fs/bitmap.c":70:9 205 {*leasi}
     (expr_list:REG_EQUAL (symbol_ref/f:SI ("*.LC5") [flags 0x2]  <var_decl 0x7b9e2655d900 *.LC5>)
        (nil)))
(insn 121 120 123 15 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (reg/f:SI 0 ax [120])) "fs/bitmap.c":70:9 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 123 121 124 15 (call (mem:QI (symbol_ref:SI ("panic") [flags 0x41]  <function_decl 0x7b9e26510b00 panic>) [0 panic S1 A8])
        (const_int 16 [0x10])) "fs/bitmap.c":70:9 812 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 124 123 125 15 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":70:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(code_label 125 124 126 16 10 (nil) [1 uses])
(note 126 125 127 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 127 126 128 16 (set (reg/f:SI 0 ax [121])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 32 [0x20])) [8 inode+0 S4 A32])) "fs/bitmap.c":71:9 75 {*movsi_internal}
     (nil))
(insn 128 127 129 16 (set (reg:HI 0 ax [orig:96 _14 ] [96])
        (mem:HI (plus:SI (reg/f:SI 0 ax [121])
                (const_int 46 [0x2e])) [4 inode_25(D)->i_num+0 S2 A16])) "fs/bitmap.c":71:9 76 {*movhi_internal}
     (nil))
(insn 129 128 130 16 (set (reg:SI 0 ax [orig:97 _15 ] [97])
        (zero_extend:SI (reg:HI 0 ax [orig:96 _14 ] [96]))) "fs/bitmap.c":71:9 144 {*zero_extendhisi2}
     (nil))
(insn 130 129 172 16 (parallel [
            (set (reg:SI 0 ax [orig:97 _15 ] [97])
                (and:SI (reg:SI 0 ax [orig:97 _15 ] [97])
                    (const_int 8191 [0x1fff])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":71:9 490 {*andsi_1}
     (nil))
(insn 172 130 131 16 (set (reg:SI 2 cx [orig:98 _16 ] [98])
        (reg:SI 0 ax [orig:97 _15 ] [97])) "fs/bitmap.c":71:9 75 {*movsi_internal}
     (nil))
(insn 131 172 132 16 (set (reg/f:SI 0 ax [122])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [6 bh+0 S4 A32])) "fs/bitmap.c":71:9 75 {*movsi_internal}
     (nil))
(insn 132 131 134 16 (set (reg/f:SI 1 dx [orig:99 _17 ] [99])
        (mem/f:SI (reg/f:SI 0 ax [122]) [2 bh_34->b_data+0 S4 A32])) "fs/bitmap.c":71:9 75 {*movsi_internal}
     (nil))
(insn 134 132 135 16 (set (reg:SI 0 ax [124])
        (const_int 0 [0])) "fs/bitmap.c":71:9 75 {*movsi_internal}
     (nil))
(insn 135 134 133 16 (parallel [
            (set (reg:SI 0 ax [orig:123 res ] [123])
                (asm_operands/v:SI ("btrl %2,%3
	setnb %%al") ("=a") 0 [
                        (reg:SI 0 ax [orig:123 res ] [123])
                        (reg:SI 2 cx [orig:98 _16 ] [98])
                        (mem:QI (reg/f:SI 1 dx [orig:99 _17 ] [99]) [0 *_17+0 S1 A8])
                    ]
                     [
                        (asm_input:SI ("0") fs/bitmap.c:71)
                        (asm_input:SI ("r") fs/bitmap.c:71)
                        (asm_input:QI ("m") fs/bitmap.c:71)
                    ]
                     [] fs/bitmap.c:71))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":71:9 -1
     (nil))
(insn 133 135 136 16 (set (reg/v:SI 4 si [orig:100 res ] [100])
        (reg:SI 0 ax [orig:123 res ] [123])) "fs/bitmap.c":71:9 75 {*movsi_internal}
     (nil))
(insn 136 133 137 16 (set (reg:SI 0 ax [orig:101 _37 ] [101])
        (reg/v:SI 4 si [orig:100 res ] [100])) "fs/bitmap.c":71:9 75 {*movsi_internal}
     (nil))
(insn 137 136 138 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:101 _37 ] [101])
            (const_int 0 [0]))) "fs/bitmap.c":71:8 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 138 137 139 16 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 146)
            (pc))) "fs/bitmap.c":71:8 806 {*jcc}
     (nil)
 -> 146)
(note 139 138 140 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 140 139 141 17 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":72:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 141 140 142 17 (set (reg/f:SI 0 ax [125])
        (plus:SI (reg:SI 3 bx [82])
            (const:SI (unspec:SI [
                        (symbol_ref/f:SI ("*.LC6") [flags 0x2]  <var_decl 0x7b9e2655da20 *.LC6>)
                    ] UNSPEC_GOTOFF)))) "fs/bitmap.c":72:9 205 {*leasi}
     (expr_list:REG_EQUAL (symbol_ref/f:SI ("*.LC6") [flags 0x2]  <var_decl 0x7b9e2655da20 *.LC6>)
        (nil)))
(insn 142 141 144 17 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (reg/f:SI 0 ax [125])) "fs/bitmap.c":72:9 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 144 142 145 17 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("printk") [flags 0x41]  <function_decl 0x7b9e26510900 printk>) [0 printk S1 A8])
            (const_int 16 [0x10]))) "fs/bitmap.c":72:9 823 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 145 144 146 17 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":72:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(code_label 146 145 147 18 11 (nil) [1 uses])
(note 147 146 148 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 148 147 149 18 (set (reg/f:SI 0 ax [126])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [6 bh+0 S4 A32])) "fs/bitmap.c":73:16 75 {*movsi_internal}
     (nil))
(insn 149 148 150 18 (set (mem:QI (plus:SI (reg/f:SI 0 ax [126])
                (const_int 11 [0xb])) [0 bh_34->b_dirt+0 S1 A8])
        (const_int 1 [0x1])) "fs/bitmap.c":73:16 77 {*movqi_internal}
     (nil))
(insn 150 149 151 18 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":74:5 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 4 [0x4])
        (nil)))
(insn 151 150 152 18 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [13  S4 A32])
        (const_int 56 [0x38])) "fs/bitmap.c":74:5 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 152 151 153 18 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [13  S4 A32])
        (const_int 0 [0])) "fs/bitmap.c":74:5 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 153 152 155 18 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [8  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 44 [0x2c])) [8 inode+0 S4 A32])) "fs/bitmap.c":74:5 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 155 153 156 18 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("memset") [flags 0x41]  <function_decl 0x7b9e2653b200 memset>) [0 memset S1 A8])
            (const_int 16 [0x10]))) "fs/bitmap.c":74:5 823 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 156 155 163 18 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":74:5 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(jump_insn 163 156 164 18 (set (pc)
        (label_ref 159)) 807 {jump}
     (nil)
 -> 159)
(barrier 164 163 166)
(code_label 166 164 165 20 12 (nil) [1 uses])
(note 165 166 167 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 167 165 159 20 (const_int 0 [0]) "fs/bitmap.c":54:9 843 {nop}
     (nil))
(code_label 159 167 160 19 1 (nil) [2 uses])
(note 160 159 170 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(note 170 160 0 NOTE_INSN_DELETED)

;; Function free_block (free_block, funcdef_no=2, decl_uid=1119, cgraph_uid=3, symbol_order=2)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 155:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 5:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 9:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 15:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) Ts {*leasi} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 20:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 24:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) rm {*zero_extendhisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 30:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) rm {*zero_extendhisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 36:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =r  (1) Ts {*leasi} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 41:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 44:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 49:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 51:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 52:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 56:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 61:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) =<  (1) ri*m {*pushsi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-4)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) =r  (1) Ts {*leasi} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 70:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 76:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 78:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 79:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 83:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 87:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) =r  (1) rm {*zero_extendhisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 89:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (0) =rm  (1) 0  (2) re {*subsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            alt=2: Bad operand -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 92:  (0) =rm  (1) %0  (2) re {*andsi_1}
      Creating newreg=137 from oldreg=117, assigning class GENERAL_REGS to r137
   92: {r137:SI=r137:SI&0x1fff;clobber flags:CC;}
      REG_DEAD r117:SI
      REG_UNUSED flags:CC
      REG_EQUAL [argp:SI+0x4]&0x1fff
    Inserting insn reload before:
  157: r137:SI=r117:SI
    Inserting insn reload after:
  158: r93:SI=r137:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=21,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 95:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (0) =r  (2) rm  (3) 0 {*movsicc_noc}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 103:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (0) =a  (1) 0  (2) r  (3) m
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 114:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 115:  (0) =r  (1) rm {*zero_extendhisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 116:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 117
	 Choosing alt 0 in insn 117:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 118:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 119:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 120:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-4)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 121:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 122:  (0) =r  (1) Ts {*leasi} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 123:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 125:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 126:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 127:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 128:  (0) =r  (1) Ts {*leasi} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 129:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 131:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 132:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 135:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=21,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 137:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 140:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 141:  (0) =r  (2) rm  (3) 0 {*movsicc_noc}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 142:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 144:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 145:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 146:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 147:  (0) m  (1) qn {*movqi_internal}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2 3
EBB 4 5
EBB 6
EBB 7 8 9
EBB 10
EBB 11 12
EBB 13
EBB 14

********** Pseudo live ranges #1: **********

  BB 14
  BB 9
   Insn 152: point = 0, n_alt = -1
   Insn 70: point = 0, n_alt = 0
   Insn 69: point = 0, n_alt = 0
   Insn 68: point = 0, n_alt = -2
   Insn 67: point = 1, n_alt = 0
   Insn 66: point = 2, n_alt = 0
   Insn 65: point = 3, n_alt = 0
   Insn 64: point = 3, n_alt = 0
   Insn 63: point = 3, n_alt = 0
   Insn 62: point = 4, n_alt = 0
   Insn 61: point = 6, n_alt = 4
   Insn 60: point = 8, n_alt = 0
  BB 13
   Insn 147: point = 10, n_alt = 8
   Insn 146: point = 11, n_alt = 0
   Insn 145: point = 13, n_alt = 0
   Insn 144: point = 15, n_alt = 0
   Insn 143: point = 16, n_alt = -2
   Insn 142: point = 18, n_alt = 0
   Insn 141: point = 20, n_alt = 0
   Insn 140: point = 22, n_alt = 0
   Insn 137: point = 22, n_alt = 3
   Insn 136: point = 23, n_alt = -2
   Insn 135: point = 25, n_alt = 0
  BB 12
   Insn 132: point = 26, n_alt = 0
   Insn 131: point = 26, n_alt = 0
   Insn 130: point = 26, n_alt = -2
   Insn 129: point = 27, n_alt = 0
   Insn 128: point = 28, n_alt = 0
   Insn 127: point = 29, n_alt = 0
   Insn 126: point = 29, n_alt = 0
   Insn 125: point = 29, n_alt = 0
   Insn 124: point = 29, n_alt = -2
   Insn 123: point = 29, n_alt = 0
   Insn 122: point = 30, n_alt = 0
   Insn 121: point = 31, n_alt = 0
   Insn 120: point = 31, n_alt = 0
   Insn 119: point = 32, n_alt = 0
   Insn 118: point = 32, n_alt = 0
   Insn 117: point = 34, n_alt = 0
   Insn 116: point = 36, n_alt = 0
   Insn 115: point = 37, n_alt = 0
   Insn 114: point = 39, n_alt = 2
   Insn 113: point = 41, n_alt = 0
  BB 11
   Insn 111: point = 43, n_alt = -1
   Insn 110: point = 43, n_alt = 0
   Insn 109: point = 44, n_alt = -2
   Insn 106: point = 46, n_alt = -2
   Insn 108: point = 48, n_alt = 0
   Insn 154: point = 50, n_alt = -2
   Insn 107: point = 52, n_alt = 0
   Insn 105: point = 53, n_alt = 0
   Insn 104: point = 55, n_alt = 0
   Insn 103: point = 57, n_alt = 0
   Insn 102: point = 59, n_alt = 0
   Insn 101: point = 60, n_alt = -2
   Insn 100: point = 62, n_alt = 0
   Insn 99: point = 64, n_alt = 0
   Insn 98: point = 66, n_alt = 0
   Insn 95: point = 66, n_alt = 3
   Insn 94: point = 67, n_alt = -2
   Insn 93: point = 69, n_alt = 0
   Insn 158: point = 70, n_alt = -2
	Hard reg 2 is preferable by r137 with profit 1000
   Insn 92: point = 72, n_alt = 0
   Insn 157: point = 73, n_alt = -2
	Hard reg 2 is preferable by r137 with profit 1000
	Hard reg 0 is preferable by r137 with profit 1000
   Insn 91: point = 75, n_alt = 0
   Insn 90: point = 76, n_alt = 0
   Insn 89: point = 77, n_alt = 0
   Insn 88: point = 79, n_alt = 0
   Insn 87: point = 81, n_alt = 2
   Insn 86: point = 83, n_alt = 0
  BB 10
   Insn 83: point = 85, n_alt = 0
   Insn 82: point = 85, n_alt = 0
   Insn 81: point = 85, n_alt = -2
   Insn 80: point = 85, n_alt = 0
   Insn 79: point = 85, n_alt = 0
   Insn 78: point = 85, n_alt = 8
   Insn 77: point = 86, n_alt = 0
   Insn 76: point = 87, n_alt = 8
   Insn 75: point = 88, n_alt = 0
  BB 8
   Insn 58: point = 90, n_alt = -1
   Insn 57: point = 90, n_alt = 0
   Insn 56: point = 91, n_alt = 4
   Insn 55: point = 93, n_alt = 0
  BB 7
   Insn 53: point = 95, n_alt = -1
   Insn 52: point = 95, n_alt = 1
   Insn 51: point = 95, n_alt = 1
   Insn 50: point = 96, n_alt = -2
   Insn 49: point = 97, n_alt = 0
   Insn 48: point = 97, n_alt = 0
   Insn 47: point = 97, n_alt = -2
   Insn 46: point = 97, n_alt = 0
   Insn 45: point = 97, n_alt = 0
   Insn 44: point = 97, n_alt = 0
  BB 6
   Insn 41: point = 98, n_alt = 0
   Insn 40: point = 98, n_alt = 0
   Insn 39: point = 98, n_alt = -2
   Insn 38: point = 98, n_alt = 0
   Insn 37: point = 99, n_alt = 0
   Insn 36: point = 100, n_alt = 0
  BB 5
   Insn 33: point = 101, n_alt = -1
   Insn 32: point = 101, n_alt = 0
   Insn 31: point = 102, n_alt = 0
   Insn 30: point = 104, n_alt = 2
   Insn 29: point = 106, n_alt = 0
  BB 4
   Insn 27: point = 108, n_alt = -1
   Insn 26: point = 108, n_alt = 0
   Insn 25: point = 109, n_alt = 0
   Insn 24: point = 111, n_alt = 2
   Insn 23: point = 113, n_alt = 0
  BB 3
   Insn 20: point = 115, n_alt = 0
   Insn 19: point = 115, n_alt = 0
   Insn 18: point = 115, n_alt = -2
   Insn 17: point = 115, n_alt = 0
   Insn 16: point = 116, n_alt = 0
   Insn 15: point = 117, n_alt = 0
  BB 2
   Insn 13: point = 118, n_alt = -1
   Insn 12: point = 118, n_alt = 1
   Insn 11: point = 118, n_alt = 1
   Insn 10: point = 119, n_alt = -2
   Insn 9: point = 120, n_alt = 0
   Insn 8: point = 120, n_alt = 0
   Insn 7: point = 120, n_alt = -2
   Insn 6: point = 120, n_alt = 0
   Insn 5: point = 120, n_alt = 0
   Insn 155: point = 120, n_alt = 0
 r82: [26..120] [0..9]
 r83: [110..111]
 r84: [108..109]
 r85: [103..104]
 r86: [101..102]
 r87: [90..91]
 r88: [5..6]
 r89: [3..4]
 r90: [80..81]
 r91: [78..79]
 r92: [76..77]
 r93: [49..70]
 r94: [58..60]
 r95: [54..55]
 r96: [49..53]
 r97: [38..39]
 r98: [35..37]
 r99: [33..34]
 r100: [31..32]
 r101: [14..16]
 r102: [10..11]
 r103: [45..46]
 r104: [43..44]
 r105: [118..119]
 r106: [115..116]
 r107: [112..113]
 r108: [105..106]
 r109: [98..99]
 r110: [95..96]
 r111: [92..93]
 r112: [7..8]
 r113: [1..2]
 r114: [87..88]
 r115: [85..86]
 r116: [82..83]
 r117: [74..75]
 r118: [68..69]
 r119: [63..67]
 r120: [65..66]
 r121: [61..62]
 r122: [56..59]
 r123: [56..57]
 r124: [47..50]
 r125: [51..52]
 r126: [40..41]
 r127: [35..36]
 r128: [29..30]
 r129: [27..28]
 r130: [24..25]
 r131: [19..23]
 r132: [21..22]
 r133: [17..18]
 r134: [12..15]
 r135: [12..13]
 r137: [71..73]
Compressing live ranges: from 121 to 94 - 77%
Ranges after the compression:
 r82: [20..93] [0..7]
 r83: [86..87]
 r84: [84..85]
 r85: [80..81]
 r86: [78..79]
 r87: [70..71]
 r88: [4..5]
 r89: [2..3]
 r90: [62..63]
 r91: [60..61]
 r92: [58..59]
 r93: [38..53]
 r94: [46..47]
 r95: [42..43]
 r96: [38..41]
 r97: [30..31]
 r98: [28..29]
 r99: [26..27]
 r100: [24..25]
 r101: [12..13]
 r102: [8..9]
 r103: [36..37]
 r104: [34..35]
 r105: [92..93]
 r106: [90..91]
 r107: [88..89]
 r108: [82..83]
 r109: [76..77]
 r110: [74..75]
 r111: [72..73]
 r112: [6..7]
 r113: [0..1]
 r114: [68..69]
 r115: [66..67]
 r116: [64..65]
 r117: [56..57]
 r118: [52..53]
 r119: [50..51]
 r120: [50..51]
 r121: [48..49]
 r122: [44..47]
 r123: [44..45]
 r124: [38..39]
 r125: [40..41]
 r126: [32..33]
 r127: [28..29]
 r128: [22..23]
 r129: [20..21]
 r130: [18..19]
 r131: [16..17]
 r132: [16..17]
 r133: [14..15]
 r134: [10..13]
 r135: [10..11]
 r137: [54..55]

********** Assignment #1: **********

	 Assigning to 137 (cl=GENERAL_REGS, orig=117, freq=3000, tfirst=137, tfreq=3000)...
	   Assign 0 to reload r137 (freq=3000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=32)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=16)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
changing reg in insn 155
changing reg in insn 130
changing reg in insn 128
changing reg in insn 124
changing reg in insn 122
changing reg in insn 81
changing reg in insn 68
changing reg in insn 66
changing reg in insn 47
changing reg in insn 39
changing reg in insn 37
changing reg in insn 18
changing reg in insn 16
changing reg in insn 7
changing reg in insn 24
changing reg in insn 25
changing reg in insn 25
changing reg in insn 26
changing reg in insn 30
changing reg in insn 31
changing reg in insn 31
changing reg in insn 32
changing reg in insn 56
changing reg in insn 57
changing reg in insn 61
changing reg in insn 62
changing reg in insn 62
changing reg in insn 63
changing reg in insn 87
changing reg in insn 88
changing reg in insn 88
changing reg in insn 89
changing reg in insn 89
changing reg in insn 90
changing reg in insn 108
changing reg in insn 101
changing reg in insn 103
changing reg in insn 104
changing reg in insn 105
changing reg in insn 105
changing reg in insn 108
changing reg in insn 114
changing reg in insn 115
changing reg in insn 115
changing reg in insn 117
changing reg in insn 117
changing reg in insn 118
changing reg in insn 118
changing reg in insn 120
changing reg in insn 143
changing reg in insn 145
changing reg in insn 146
changing reg in insn 147
changing reg in insn 106
changing reg in insn 109
changing reg in insn 109
changing reg in insn 110
changing reg in insn 10
changing reg in insn 11
changing reg in insn 16
changing reg in insn 17
changing reg in insn 23
changing reg in insn 24
changing reg in insn 29
changing reg in insn 30
changing reg in insn 37
changing reg in insn 38
changing reg in insn 50
changing reg in insn 51
changing reg in insn 55
changing reg in insn 56
changing reg in insn 60
changing reg in insn 61
changing reg in insn 66
changing reg in insn 67
changing reg in insn 75
changing reg in insn 76
changing reg in insn 77
changing reg in insn 78
changing reg in insn 86
changing reg in insn 87
changing reg in insn 91
changing reg in insn 93
changing reg in insn 94
changing reg in insn 99
changing reg in insn 94
changing reg in insn 100
changing reg in insn 99
changing reg in insn 98
changing reg in insn 95
changing reg in insn 95
changing reg in insn 99
changing reg in insn 100
changing reg in insn 101
changing reg in insn 102
changing reg in insn 104
changing reg in insn 103
changing reg in insn 104
changing reg in insn 154
changing reg in insn 108
changing reg in insn 108
changing reg in insn 106
changing reg in insn 107
changing reg in insn 154
changing reg in insn 113
changing reg in insn 114
changing reg in insn 116
changing reg in insn 122
changing reg in insn 123
changing reg in insn 128
changing reg in insn 129
changing reg in insn 135
changing reg in insn 136
changing reg in insn 141
changing reg in insn 136
changing reg in insn 142
changing reg in insn 141
changing reg in insn 140
changing reg in insn 137
changing reg in insn 137
changing reg in insn 141
changing reg in insn 142
changing reg in insn 143
changing reg in insn 144
changing reg in insn 146
changing reg in insn 145
changing reg in insn 146
deleting insn with uid = 7.
deleting insn with uid = 10.
deleting insn with uid = 18.
deleting insn with uid = 39.
deleting insn with uid = 47.
deleting insn with uid = 50.
deleting insn with uid = 68.
deleting insn with uid = 81.
deleting insn with uid = 157.
deleting insn with uid = 94.
deleting insn with uid = 154.
deleting insn with uid = 124.
deleting insn with uid = 130.
deleting insn with uid = 136.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.
verify found no changes in insn with uid = 19.
verify found no changes in insn with uid = 40.
verify found no changes in insn with uid = 48.
verify found no changes in insn with uid = 69.
verify found no changes in insn with uid = 82.
verify found no changes in insn with uid = 125.
verify found no changes in insn with uid = 131.


free_block

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 17 [flags]
;;  ref usage 	r0={51d,48u} r1={17d,8u,1e} r2={10d,1u} r3={1d,13u} r4={1d,1u} r7={30d,95u} r8={8d} r9={8d} r10={8d} r11={8d} r12={8d} r13={8d} r14={8d} r15={8d} r16={2e} r17={44d,8u} r18={8d} r20={8d} r21={8d} r22={8d} r23={8d} r24={8d} r25={8d} r26={8d} r27={8d} r28={8d} r29={8d} r30={8d} r31={8d} r32={8d} r33={8d} r34={8d} r35={8d} r36={8d} r37={8d} r38={8d} r39={8d} r40={8d} r41={8d} r42={8d} r43={8d} r44={8d} r45={8d} r46={8d} r47={8d} r48={8d} r49={8d} r50={8d} r51={8d} r52={8d} r53={8d} r54={8d} r55={8d} r56={8d} r57={8d} r58={8d} r59={8d} r60={8d} r61={8d} r62={8d} r63={8d} r64={8d} r65={8d} r66={8d} r67={8d} r68={8d} r69={8d} r70={8d} r71={8d} r72={8d} r73={8d} r74={8d} r75={8d} 
;;    total ref usage 851{674d,174u,3e} in 111{103 regular + 8 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 155 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 155 3 2 2 (parallel [
            (set (reg:SI 3 bx [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 155 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":82:16 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 6 5 8 2 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [13  S4 A32])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 44 [0x2c])) [13 dev+0 S4 A32])) "fs/bitmap.c":82:16 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 8 6 9 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("get_super") [flags 0x41]  <function_decl 0x7b9e2650e000 get_super>) [0 get_super S1 A8])
            (const_int 16 [0x10]))) "fs/bitmap.c":82:16 823 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 9 8 11 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":82:16 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 11 9 12 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [19 sb+0 S4 A32])
        (reg:SI 0 ax [105])) "fs/bitmap.c":82:16 75 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 12 [0xc])) [19 sb+0 S4 A32])
            (const_int 0 [0]))) "fs/bitmap.c":82:8 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 13 12 14 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 21)
            (pc))) "fs/bitmap.c":82:8 806 {*jcc}
     (nil)
 -> 21)
(note 14 13 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 3 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":83:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 16 15 17 3 (set (reg/f:SI 0 ax [106])
        (plus:SI (reg:SI 3 bx [82])
            (const:SI (unspec:SI [
                        (symbol_ref/f:SI ("*.LC7") [flags 0x2]  <var_decl 0x7b9e2655dbd0 *.LC7>)
                    ] UNSPEC_GOTOFF)))) "fs/bitmap.c":83:9 205 {*leasi}
     (expr_list:REG_EQUAL (symbol_ref/f:SI ("*.LC7") [flags 0x2]  <var_decl 0x7b9e2655dbd0 *.LC7>)
        (nil)))
(insn 17 16 19 3 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (reg/f:SI 0 ax [106])) "fs/bitmap.c":83:9 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 19 17 20 3 (call (mem:QI (symbol_ref:SI ("panic") [flags 0x41]  <function_decl 0x7b9e26510b00 panic>) [0 panic S1 A8])
        (const_int 16 [0x10])) "fs/bitmap.c":83:9 812 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 20 19 21 3 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":83:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(code_label 21 20 22 4 14 (nil) [1 uses])
(note 22 21 23 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 4 (set (reg/f:SI 0 ax [107])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [19 sb+0 S4 A32])) "fs/bitmap.c":84:19 75 {*movsi_internal}
     (nil))
(insn 24 23 25 4 (set (reg:HI 0 ax [orig:83 _1 ] [83])
        (mem:HI (plus:SI (reg/f:SI 0 ax [107])
                (const_int 8 [0x8])) [4 sb_29->s_firstdatazone+0 S2 A32])) "fs/bitmap.c":84:19 76 {*movhi_internal}
     (nil))
(insn 25 24 26 4 (set (reg:SI 0 ax [orig:84 _2 ] [84])
        (zero_extend:SI (reg:HI 0 ax [orig:83 _1 ] [83]))) "fs/bitmap.c":84:19 144 {*zero_extendhisi2}
     (nil))
(insn 26 25 27 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 36 [0x24])) [13 block+0 S4 A32])
            (reg:SI 0 ax [orig:84 _2 ] [84]))) "fs/bitmap.c":84:8 11 {*cmpsi_1}
     (nil))
(jump_insn 27 26 28 4 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 34)
            (pc))) "fs/bitmap.c":84:8 806 {*jcc}
     (nil)
 -> 34)
(note 28 27 29 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 30 5 (set (reg/f:SI 0 ax [108])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [19 sb+0 S4 A32])) "fs/bitmap.c":84:51 75 {*movsi_internal}
     (nil))
(insn 30 29 31 5 (set (reg:HI 0 ax [orig:85 _3 ] [85])
        (mem:HI (plus:SI (reg/f:SI 0 ax [108])
                (const_int 2 [0x2])) [4 sb_29->s_nzones+0 S2 A16])) "fs/bitmap.c":84:51 76 {*movhi_internal}
     (nil))
(insn 31 30 32 5 (set (reg:SI 0 ax [orig:86 _4 ] [86])
        (zero_extend:SI (reg:HI 0 ax [orig:85 _3 ] [85]))) "fs/bitmap.c":84:51 144 {*zero_extendhisi2}
     (nil))
(insn 32 31 33 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 36 [0x24])) [13 block+0 S4 A32])
            (reg:SI 0 ax [orig:86 _4 ] [86]))) "fs/bitmap.c":84:37 11 {*cmpsi_1}
     (nil))
(jump_insn 33 32 34 5 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 42)
            (pc))) "fs/bitmap.c":84:37 806 {*jcc}
     (nil)
 -> 42)
(code_label 34 33 35 6 15 (nil) [1 uses])
(note 35 34 36 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 36 35 37 6 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":85:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 37 36 38 6 (set (reg/f:SI 0 ax [109])
        (plus:SI (reg:SI 3 bx [82])
            (const:SI (unspec:SI [
                        (symbol_ref/f:SI ("*.LC8") [flags 0x2]  <var_decl 0x7b9e2655dc60 *.LC8>)
                    ] UNSPEC_GOTOFF)))) "fs/bitmap.c":85:9 205 {*leasi}
     (expr_list:REG_EQUAL (symbol_ref/f:SI ("*.LC8") [flags 0x2]  <var_decl 0x7b9e2655dc60 *.LC8>)
        (nil)))
(insn 38 37 40 6 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (reg/f:SI 0 ax [109])) "fs/bitmap.c":85:9 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 40 38 41 6 (call (mem:QI (symbol_ref:SI ("panic") [flags 0x41]  <function_decl 0x7b9e26510b00 panic>) [0 panic S1 A8])
        (const_int 16 [0x10])) "fs/bitmap.c":85:9 812 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 41 40 42 6 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":85:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(code_label 42 41 43 7 16 (nil) [1 uses])
(note 43 42 44 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 45 7 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":86:10 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 45 44 46 7 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [13  S4 A32])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 44 [0x2c])) [13 block+0 S4 A32])) "fs/bitmap.c":86:10 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 46 45 48 7 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [13  S4 A32])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 44 [0x2c])) [13 dev+0 S4 A32])) "fs/bitmap.c":86:10 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 48 46 49 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("get_hash_table") [flags 0x41]  <function_decl 0x7b9e2650e400 get_hash_table>) [0 get_hash_table S1 A8])
            (const_int 16 [0x10]))) "fs/bitmap.c":86:10 823 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 49 48 51 7 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":86:10 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 51 49 52 7 (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [6 bh+0 S4 A32])
        (reg:SI 0 ax [110])) "fs/bitmap.c":86:10 75 {*movsi_internal}
     (nil))
(insn 52 51 53 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 8 [0x8])) [6 bh+0 S4 A32])
            (const_int 0 [0]))) "fs/bitmap.c":87:8 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 53 52 54 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 84)
            (pc))) "fs/bitmap.c":87:8 806 {*jcc}
     (nil)
 -> 84)
(note 54 53 55 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 55 54 56 8 (set (reg/f:SI 0 ax [111])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [6 bh+0 S4 A32])) "fs/bitmap.c":88:15 75 {*movsi_internal}
     (nil))
(insn 56 55 57 8 (set (reg:QI 0 ax [orig:87 _5 ] [87])
        (mem:QI (plus:SI (reg/f:SI 0 ax [111])
                (const_int 12 [0xc])) [0 bh_34->b_count+0 S1 A32])) "fs/bitmap.c":88:15 77 {*movqi_internal}
     (nil))
(insn 57 56 58 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:87 _5 ] [87])
            (const_int 1 [0x1]))) "fs/bitmap.c":88:12 9 {*cmpqi_1}
     (nil))
(jump_insn 58 57 59 8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 73)
            (pc))) "fs/bitmap.c":88:12 806 {*jcc}
     (nil)
 -> 73)
(note 59 58 60 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 60 59 61 9 (set (reg/f:SI 0 ax [112])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [6 bh+0 S4 A32])) "fs/bitmap.c":90:35 75 {*movsi_internal}
     (nil))
(insn 61 60 62 9 (set (reg:QI 0 ax [orig:88 _6 ] [88])
        (mem:QI (plus:SI (reg/f:SI 0 ax [112])
                (const_int 12 [0xc])) [0 bh_34->b_count+0 S1 A32])) "fs/bitmap.c":90:35 77 {*movqi_internal}
     (nil))
(insn 62 61 63 9 (set (reg:SI 0 ax [orig:89 _7 ] [89])
        (zero_extend:SI (reg:QI 0 ax [orig:88 _6 ] [88]))) "fs/bitmap.c":89:13 143 {*zero_extendqisi2}
     (nil))
(insn 63 62 64 9 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [13  S4 A32])
        (reg:SI 0 ax [orig:89 _7 ] [89])) "fs/bitmap.c":89:13 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 4 [0x4])
        (nil)))
(insn 64 63 65 9 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [13  S4 A32])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 40 [0x28])) [13 block+0 S4 A32])) "fs/bitmap.c":89:13 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 65 64 66 9 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [13  S4 A32])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 40 [0x28])) [13 dev+0 S4 A32])) "fs/bitmap.c":89:13 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 66 65 67 9 (set (reg/f:SI 0 ax [113])
        (plus:SI (reg:SI 3 bx [82])
            (const:SI (unspec:SI [
                        (symbol_ref/f:SI ("*.LC9") [flags 0x2]  <var_decl 0x7b9e2655dcf0 *.LC9>)
                    ] UNSPEC_GOTOFF)))) "fs/bitmap.c":89:13 205 {*leasi}
     (expr_list:REG_EQUAL (symbol_ref/f:SI ("*.LC9") [flags 0x2]  <var_decl 0x7b9e2655dcf0 *.LC9>)
        (nil)))
(insn 67 66 69 9 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (reg/f:SI 0 ax [113])) "fs/bitmap.c":89:13 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 69 67 70 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("printk") [flags 0x41]  <function_decl 0x7b9e26510900 printk>) [0 printk S1 A8])
            (const_int 16 [0x10]))) "fs/bitmap.c":89:13 823 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 70 69 152 9 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":89:13 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(jump_insn 152 70 153 9 (set (pc)
        (label_ref 150)) "fs/bitmap.c":91:13 807 {jump}
     (nil)
 -> 150)
(barrier 153 152 73)
(code_label 73 153 74 10 18 (nil) [1 uses])
(note 74 73 75 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 75 74 76 10 (set (reg/f:SI 0 ax [114])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [6 bh+0 S4 A32])) "fs/bitmap.c":93:20 75 {*movsi_internal}
     (nil))
(insn 76 75 77 10 (set (mem:QI (plus:SI (reg/f:SI 0 ax [114])
                (const_int 11 [0xb])) [0 bh_34->b_dirt+0 S1 A8])
        (const_int 0 [0])) "fs/bitmap.c":93:20 77 {*movqi_internal}
     (nil))
(insn 77 76 78 10 (set (reg/f:SI 0 ax [115])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [6 bh+0 S4 A32])) "fs/bitmap.c":94:24 75 {*movsi_internal}
     (nil))
(insn 78 77 79 10 (set (mem:QI (plus:SI (reg/f:SI 0 ax [115])
                (const_int 10 [0xa])) [0 bh_34->b_uptodate+0 S1 A16])
        (const_int 0 [0])) "fs/bitmap.c":94:24 77 {*movqi_internal}
     (nil))
(insn 79 78 80 10 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":95:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 80 79 82 10 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [6  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [6 bh+0 S4 A32])) "fs/bitmap.c":95:9 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 82 80 83 10 (call (mem:QI (symbol_ref:SI ("brelse") [flags 0x41]  <function_decl 0x7b9e2650e200 brelse>) [0 brelse S1 A8])
        (const_int 16 [0x10])) "fs/bitmap.c":95:9 812 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 83 82 84 10 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":95:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(code_label 84 83 85 11 17 (nil) [1 uses])
(note 85 84 86 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 86 85 87 11 (set (reg/f:SI 0 ax [116])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [19 sb+0 S4 A32])) "fs/bitmap.c":97:16 75 {*movsi_internal}
     (nil))
(insn 87 86 88 11 (set (reg:HI 0 ax [orig:90 _8 ] [90])
        (mem:HI (plus:SI (reg/f:SI 0 ax [116])
                (const_int 8 [0x8])) [4 sb_29->s_firstdatazone+0 S2 A32])) "fs/bitmap.c":97:16 76 {*movhi_internal}
     (nil))
(insn 88 87 89 11 (set (reg:SI 0 ax [orig:91 _9 ] [91])
        (zero_extend:SI (reg:HI 0 ax [orig:90 _8 ] [90]))) "fs/bitmap.c":97:16 144 {*zero_extendhisi2}
     (nil))
(insn 89 88 90 11 (parallel [
            (set (reg:SI 0 ax [orig:92 _10 ] [92])
                (plus:SI (reg:SI 0 ax [orig:91 _9 ] [91])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":97:34 209 {*addsi_1}
     (nil))
(insn 90 89 91 11 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 36 [0x24])) [13 block+0 S4 A32])
                (minus:SI (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 36 [0x24])) [13 block+0 S4 A32])
                    (reg:SI 0 ax [orig:92 _10 ] [92])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":97:11 282 {*subsi_1}
     (nil))
(insn 91 90 92 11 (set (reg:SI 0 ax [117])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 36 [0x24])) [13 block+0 S4 A32])) "fs/bitmap.c":98:9 75 {*movsi_internal}
     (nil))
(insn 92 91 158 11 (parallel [
            (set (reg:SI 0 ax [117])
                (and:SI (reg:SI 0 ax [117])
                    (const_int 8191 [0x1fff])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":98:9 490 {*andsi_1}
     (expr_list:REG_EQUAL (and:SI (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                    (const_int 4 [0x4])) [13 block+0 S4 A32])
            (const_int 8191 [0x1fff]))
        (nil)))
(insn 158 92 93 11 (set (reg:SI 2 cx [orig:93 _11 ] [93])
        (reg:SI 0 ax [117])) "fs/bitmap.c":98:9 75 {*movsi_internal}
     (nil))
(insn 93 158 95 11 (set (reg:SI 0 ax [118])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 36 [0x24])) [13 block+0 S4 A32])) "fs/bitmap.c":98:9 75 {*movsi_internal}
     (nil))
(insn 95 93 98 11 (parallel [
            (set (reg:SI 1 dx [120])
                (plus:SI (reg:SI 0 ax [119])
                    (const_int 8191 [0x1fff])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":98:9 209 {*addsi_1}
     (nil))
(insn 98 95 99 11 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:SI 0 ax [119])
            (const_int 0 [0]))) "fs/bitmap.c":98:9 7 {*cmpsi_ccno_1}
     (nil))
(insn 99 98 100 11 (set (reg:SI 0 ax [119])
        (if_then_else:SI (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:SI 1 dx [120])
            (reg:SI 0 ax [119]))) "fs/bitmap.c":98:9 1100 {*movsicc_noc}
     (nil))
(insn 100 99 101 11 (parallel [
            (set (reg:SI 0 ax [121])
                (ashiftrt:SI (reg:SI 0 ax [119])
                    (const_int 13 [0xd])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":98:9 702 {*ashrsi3_1}
     (nil))
(insn 101 100 102 11 (set (reg:SI 1 dx [orig:94 _12 ] [94])
        (reg:SI 0 ax [121])) "fs/bitmap.c":98:9 75 {*movsi_internal}
     (nil))
(insn 102 101 103 11 (set (reg/f:SI 0 ax [122])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [19 sb+0 S4 A32])) "fs/bitmap.c":98:9 75 {*movsi_internal}
     (nil))
(insn 103 102 104 11 (parallel [
            (set (reg:SI 1 dx [123])
                (plus:SI (reg:SI 1 dx [orig:94 _12 ] [94])
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":98:9 209 {*addsi_1}
     (nil))
(insn 104 103 105 11 (set (reg/f:SI 0 ax [orig:95 _13 ] [95])
        (mem/f:SI (plus:SI (plus:SI (mult:SI (reg:SI 1 dx [123])
                        (const_int 4 [0x4]))
                    (reg/f:SI 0 ax [122]))
                (const_int 4 [0x4])) [6 sb_29->s_zmap[_12]+0 S4 A32])) "fs/bitmap.c":98:9 75 {*movsi_internal}
     (nil))
(insn 105 104 107 11 (set (reg/f:SI 1 dx [orig:96 _14 ] [96])
        (mem/f:SI (reg/f:SI 0 ax [orig:95 _13 ] [95]) [2 _13->b_data+0 S4 A32])) "fs/bitmap.c":98:9 75 {*movsi_internal}
     (nil))
(insn 107 105 108 11 (set (reg:SI 0 ax [125])
        (const_int 0 [0])) "fs/bitmap.c":98:9 75 {*movsi_internal}
     (nil))
(insn 108 107 106 11 (parallel [
            (set (reg:SI 0 ax [orig:124 res ] [124])
                (asm_operands/v:SI ("btrl %2,%3
	setnb %%al") ("=a") 0 [
                        (reg:SI 0 ax [orig:124 res ] [124])
                        (reg:SI 2 cx [orig:93 _11 ] [93])
                        (mem:QI (reg/f:SI 1 dx [orig:96 _14 ] [96]) [0 *_14+0 S1 A8])
                    ]
                     [
                        (asm_input:SI ("0") fs/bitmap.c:98)
                        (asm_input:SI ("r") fs/bitmap.c:98)
                        (asm_input:QI ("m") fs/bitmap.c:98)
                    ]
                     [] fs/bitmap.c:98))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":98:9 -1
     (nil))
(insn 106 108 109 11 (set (reg/v:SI 4 si [orig:103 res ] [103])
        (reg:SI 0 ax [orig:124 res ] [124])) "fs/bitmap.c":98:9 75 {*movsi_internal}
     (nil))
(insn 109 106 110 11 (set (reg:SI 0 ax [orig:104 _41 ] [104])
        (reg/v:SI 4 si [orig:103 res ] [103])) "fs/bitmap.c":98:9 75 {*movsi_internal}
     (nil))
(insn 110 109 111 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:104 _41 ] [104])
            (const_int 0 [0]))) "fs/bitmap.c":98:8 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 111 110 112 11 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 133)
            (pc))) "fs/bitmap.c":98:8 806 {*jcc}
     (nil)
 -> 133)
(note 112 111 113 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 113 112 114 12 (set (reg/f:SI 0 ax [126])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [19 sb+0 S4 A32])) "fs/bitmap.c":99:51 75 {*movsi_internal}
     (nil))
(insn 114 113 115 12 (set (reg:HI 0 ax [orig:97 _15 ] [97])
        (mem:HI (plus:SI (reg/f:SI 0 ax [126])
                (const_int 8 [0x8])) [4 sb_29->s_firstdatazone+0 S2 A32])) "fs/bitmap.c":99:51 76 {*movhi_internal}
     (nil))
(insn 115 114 116 12 (set (reg:SI 1 dx [orig:98 _16 ] [98])
        (zero_extend:SI (reg:HI 0 ax [orig:97 _15 ] [97]))) "fs/bitmap.c":99:51 144 {*zero_extendhisi2}
     (nil))
(insn 116 115 117 12 (set (reg:SI 0 ax [127])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 36 [0x24])) [13 block+0 S4 A32])) "fs/bitmap.c":99:47 75 {*movsi_internal}
     (nil))
(insn 117 116 118 12 (parallel [
            (set (reg:SI 0 ax [orig:99 _17 ] [99])
                (plus:SI (reg:SI 0 ax [127])
                    (reg:SI 1 dx [orig:98 _16 ] [98])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":99:47 209 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 1 dx [orig:98 _16 ] [98])
            (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                    (const_int 4 [0x4])) [13 block+0 S4 A32]))
        (nil)))
(insn 118 117 119 12 (parallel [
            (set (reg:SI 0 ax [orig:100 _18 ] [100])
                (plus:SI (reg:SI 0 ax [orig:99 _17 ] [99])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":99:9 209 {*addsi_1}
     (nil))
(insn 119 118 120 12 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":99:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 4 [0x4])
        (nil)))
(insn 120 119 121 12 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [13  S4 A32])
        (reg:SI 0 ax [orig:100 _18 ] [100])) "fs/bitmap.c":99:9 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 121 120 122 12 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [13  S4 A32])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 40 [0x28])) [13 dev+0 S4 A32])) "fs/bitmap.c":99:9 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 122 121 123 12 (set (reg/f:SI 0 ax [128])
        (plus:SI (reg:SI 3 bx [82])
            (const:SI (unspec:SI [
                        (symbol_ref/f:SI ("*.LC10") [flags 0x2]  <var_decl 0x7b9e2655de10 *.LC10>)
                    ] UNSPEC_GOTOFF)))) "fs/bitmap.c":99:9 205 {*leasi}
     (expr_list:REG_EQUAL (symbol_ref/f:SI ("*.LC10") [flags 0x2]  <var_decl 0x7b9e2655de10 *.LC10>)
        (nil)))
(insn 123 122 125 12 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (reg/f:SI 0 ax [128])) "fs/bitmap.c":99:9 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 125 123 126 12 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("printk") [flags 0x41]  <function_decl 0x7b9e26510900 printk>) [0 printk S1 A8])
            (const_int 16 [0x10]))) "fs/bitmap.c":99:9 823 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 126 125 127 12 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":99:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 127 126 128 12 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":100:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 128 127 129 12 (set (reg/f:SI 0 ax [129])
        (plus:SI (reg:SI 3 bx [82])
            (const:SI (unspec:SI [
                        (symbol_ref/f:SI ("*.LC11") [flags 0x2]  <var_decl 0x7b9e2655dea0 *.LC11>)
                    ] UNSPEC_GOTOFF)))) "fs/bitmap.c":100:9 205 {*leasi}
     (expr_list:REG_EQUAL (symbol_ref/f:SI ("*.LC11") [flags 0x2]  <var_decl 0x7b9e2655dea0 *.LC11>)
        (nil)))
(insn 129 128 131 12 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (reg/f:SI 0 ax [129])) "fs/bitmap.c":100:9 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 131 129 132 12 (call (mem:QI (symbol_ref:SI ("panic") [flags 0x41]  <function_decl 0x7b9e26510b00 panic>) [0 panic S1 A8])
        (const_int 16 [0x10])) "fs/bitmap.c":100:9 812 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 132 131 133 12 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":100:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(code_label 133 132 134 13 20 (nil) [1 uses])
(note 134 133 135 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 135 134 137 13 (set (reg:SI 0 ax [130])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 36 [0x24])) [13 block+0 S4 A32])) "fs/bitmap.c":102:22 75 {*movsi_internal}
     (nil))
(insn 137 135 140 13 (parallel [
            (set (reg:SI 1 dx [132])
                (plus:SI (reg:SI 0 ax [131])
                    (const_int 8191 [0x1fff])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":102:22 209 {*addsi_1}
     (nil))
(insn 140 137 141 13 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:SI 0 ax [131])
            (const_int 0 [0]))) "fs/bitmap.c":102:22 7 {*cmpsi_ccno_1}
     (nil))
(insn 141 140 142 13 (set (reg:SI 0 ax [131])
        (if_then_else:SI (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:SI 1 dx [132])
            (reg:SI 0 ax [131]))) "fs/bitmap.c":102:22 1100 {*movsicc_noc}
     (nil))
(insn 142 141 143 13 (parallel [
            (set (reg:SI 0 ax [133])
                (ashiftrt:SI (reg:SI 0 ax [131])
                    (const_int 13 [0xd])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":102:22 702 {*ashrsi3_1}
     (nil))
(insn 143 142 144 13 (set (reg:SI 1 dx [orig:101 _19 ] [101])
        (reg:SI 0 ax [133])) "fs/bitmap.c":102:22 75 {*movsi_internal}
     (nil))
(insn 144 143 145 13 (set (reg/f:SI 0 ax [134])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [19 sb+0 S4 A32])) "fs/bitmap.c":102:15 75 {*movsi_internal}
     (nil))
(insn 145 144 146 13 (parallel [
            (set (reg:SI 1 dx [135])
                (plus:SI (reg:SI 1 dx [orig:101 _19 ] [101])
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":102:15 209 {*addsi_1}
     (nil))
(insn 146 145 147 13 (set (reg/f:SI 0 ax [orig:102 _20 ] [102])
        (mem/f:SI (plus:SI (plus:SI (mult:SI (reg:SI 1 dx [135])
                        (const_int 4 [0x4]))
                    (reg/f:SI 0 ax [134]))
                (const_int 4 [0x4])) [6 sb_29->s_zmap[_19]+0 S4 A32])) "fs/bitmap.c":102:15 75 {*movsi_internal}
     (nil))
(insn 147 146 150 13 (set (mem:QI (plus:SI (reg/f:SI 0 ax [orig:102 _20 ] [102])
                (const_int 11 [0xb])) [0 _20->b_dirt+0 S1 A8])
        (const_int 1 [0x1])) "fs/bitmap.c":102:38 77 {*movqi_internal}
     (nil))
(code_label 150 147 151 14 13 (nil) [1 uses])
(note 151 150 156 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(note 156 151 0 NOTE_INSN_DELETED)

;; Function new_block (new_block, funcdef_no=3, decl_uid=1141, cgraph_uid=4, symbol_order=3)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=32, prev_offset=0)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 190:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 5:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 9:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 15:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) Ts {*leasi} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 20:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 23:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 30:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 32:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =r  (1) g {*movsi_internal}
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
            2 Small class reload: reject+=3
          alt=0,overall=28,losers=3,rld_nregs=3
	 Choosing alt 0 in insn 40:  (0) =c  (1) c  (2) S
      Creating newreg=129 from oldreg=107, assigning class CREG to r129
      Creating newreg=130 from oldreg=108, assigning class CREG to r130
      Creating newreg=131 from oldreg=83, assigning class SIREG to r131
   40: {r129:SI=asm_operands;clobber flags:CC;}
      REG_DEAD r108:SI
      REG_DEAD r83:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  193: r130:SI=r108:SI
  194: r131:SI=r83:SI
    Inserting insn reload after:
  192: r107:SI=r129:SI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 38:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 42:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 52:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 67:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) =a  (1) 0  (2) r  (3) m
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 91:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) =r  (1) Ts {*leasi} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 95:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 96:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 100:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 102:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
      Creating newreg=132 from oldreg=115, assigning class GENERAL_REGS to r132
  102: {r132:SI=r132:SI<<0xd;clobber flags:CC;}
      REG_DEAD r115:SI
      REG_UNUSED flags:CC
      REG_EQUAL [frame:SI-0x8]<<0xd
    Inserting insn reload before:
  195: r132:SI=r115:SI
    Inserting insn reload after:
  196: r85:SI=r132:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 104:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (0) =r  (1) rm {*zero_extendhisi2}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 106
	 Choosing alt 0 in insn 106:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 107:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=12,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 108:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 109:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 110:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) =r  (1) rm {*zero_extendhisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 115:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 120:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 121:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 122:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 124:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 125:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 127:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 128:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 131:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 132:  (0) =r  (1) Ts {*leasi} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 133:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 135:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 136:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 139:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 140:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 141:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 144:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 145:  (0) =r  (1) Ts {*leasi} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 146:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 148:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 149:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 152:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 153:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 155:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 156:  (0) =r  (1) g {*movsi_internal}
            1 Small class reload: reject+=3
            2 Small class reload: reject+=3
          alt=0,overall=18,losers=2,rld_nregs=2
	 Choosing alt 0 in insn 157:  (0) a  (1) c  (2) D
      Creating newreg=133 from oldreg=124, assigning class CREG to r133
      Creating newreg=134 from oldreg=94, assigning class DIREG to r134
  157: {asm_operands;clobber flags:CC;}
      REG_DEAD r124:SI
      REG_DEAD r123:SI
      REG_DEAD r94:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  197: r133:SI=r124:SI
  198: r134:SI=r94:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 158:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 159:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 160:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 161:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 162:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 163:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 165:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 166:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 167:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2 3
EBB 4
EBB 5 6
EBB 7
EBB 8 23
EBB 24
EBB 9 10 11
EBB 12
EBB 13 14
EBB 15 16
EBB 17 18
EBB 19 20
EBB 21
EBB 22

********** Pseudo live ranges #1: **********

  BB 22
   Insn 175: point = 0, n_alt = -1
   Insn 174: point = 0, n_alt = -2
   Insn 170: point = 1, n_alt = -2
  BB 16
   Insn 181: point = 4, n_alt = -1
   Insn 115: point = 4, n_alt = 0
  BB 12
   Insn 179: point = 5, n_alt = -1
   Insn 76: point = 5, n_alt = 0
  BB 21
   Insn 167: point = 6, n_alt = 0
   Insn 166: point = 7, n_alt = 0
   Insn 165: point = 7, n_alt = 0
   Insn 164: point = 7, n_alt = -2
   Insn 163: point = 8, n_alt = 0
   Insn 162: point = 8, n_alt = 0
   Insn 161: point = 8, n_alt = 8
   Insn 160: point = 9, n_alt = 0
   Insn 159: point = 10, n_alt = 8
   Insn 158: point = 11, n_alt = 0
   Insn 157: point = 12, n_alt = 0
   Insn 198: point = 13, n_alt = -2
	Hard reg 4 is preferable by r134 with profit 1000
   Insn 197: point = 15, n_alt = -2
	Hard reg 1 is preferable by r133 with profit 1000
   Insn 156: point = 17, n_alt = 0
   Insn 155: point = 18, n_alt = 0
   Insn 154: point = 19, n_alt = -2
   Insn 153: point = 21, n_alt = 0
   Insn 152: point = 23, n_alt = 0
  BB 20
   Insn 149: point = 25, n_alt = 0
   Insn 148: point = 25, n_alt = 0
   Insn 147: point = 25, n_alt = -2
   Insn 146: point = 25, n_alt = 0
   Insn 145: point = 26, n_alt = 0
   Insn 144: point = 27, n_alt = 0
  BB 19
   Insn 142: point = 28, n_alt = -1
   Insn 141: point = 28, n_alt = 0
   Insn 140: point = 29, n_alt = 4
   Insn 139: point = 31, n_alt = 0
  BB 18
   Insn 136: point = 33, n_alt = 0
   Insn 135: point = 33, n_alt = 0
   Insn 134: point = 33, n_alt = -2
   Insn 133: point = 33, n_alt = 0
   Insn 132: point = 34, n_alt = 0
   Insn 131: point = 35, n_alt = 0
  BB 17
   Insn 129: point = 36, n_alt = -1
   Insn 128: point = 36, n_alt = 1
   Insn 127: point = 36, n_alt = 1
   Insn 126: point = 37, n_alt = -2
   Insn 125: point = 38, n_alt = 0
   Insn 124: point = 38, n_alt = 0
   Insn 123: point = 38, n_alt = -2
   Insn 122: point = 38, n_alt = 0
   Insn 121: point = 38, n_alt = 0
   Insn 120: point = 38, n_alt = 0
  BB 15
   Insn 113: point = 39, n_alt = -1
   Insn 112: point = 39, n_alt = 0
   Insn 111: point = 40, n_alt = 0
   Insn 110: point = 42, n_alt = 2
   Insn 109: point = 44, n_alt = 0
   Insn 108: point = 45, n_alt = 0
   Insn 107: point = 46, n_alt = 0
   Insn 106: point = 48, n_alt = 0
   Insn 105: point = 50, n_alt = 0
   Insn 104: point = 52, n_alt = 2
   Insn 103: point = 54, n_alt = 0
   Insn 196: point = 55, n_alt = -2
	Hard reg 1 is preferable by r132 with profit 1000
   Insn 102: point = 57, n_alt = 0
   Insn 195: point = 58, n_alt = -2
	Hard reg 1 is preferable by r132 with profit 1000
	Hard reg 0 is preferable by r132 with profit 1000
   Insn 101: point = 60, n_alt = 0
   Insn 100: point = 61, n_alt = 8
   Insn 99: point = 62, n_alt = 0
  BB 14
   Insn 96: point = 64, n_alt = 0
   Insn 95: point = 64, n_alt = 0
   Insn 94: point = 64, n_alt = -2
   Insn 93: point = 64, n_alt = 0
   Insn 92: point = 65, n_alt = 0
   Insn 91: point = 66, n_alt = 0
  BB 13
   Insn 89: point = 67, n_alt = -1
   Insn 88: point = 67, n_alt = 0
   Insn 87: point = 68, n_alt = -2
   Insn 83: point = 70, n_alt = -2
   Insn 86: point = 72, n_alt = 0
   Insn 189: point = 74, n_alt = -2
   Insn 85: point = 76, n_alt = 0
   Insn 84: point = 77, n_alt = 0
   Insn 82: point = 78, n_alt = 0
   Insn 81: point = 80, n_alt = 0
  BB 11
   Insn 73: point = 82, n_alt = -1
   Insn 72: point = 82, n_alt = 0
  BB 10
   Insn 68: point = 83, n_alt = -1
   Insn 67: point = 83, n_alt = 1
  BB 9
   Insn 65: point = 84, n_alt = -1
   Insn 64: point = 84, n_alt = 0
  BB 23
   Insn 184: point = 85, n_alt = -1
  BB 24
   Insn 188: point = 86, n_alt = -1
  BB 6
   Insn 46: point = 87, n_alt = -1
   Insn 45: point = 87, n_alt = 0
   Insn 42: point = 87, n_alt = 1
   Insn 41: point = 88, n_alt = 0
   Insn 38: point = 89, n_alt = 1
   Insn 192: point = 90, n_alt = -2
	Hard reg 0 is preferable by r129 with profit 1000
   Insn 40: point = 92, n_alt = 0
   Insn 194: point = 94, n_alt = -2
	Hard reg 0 is preferable by r131 with profit 1000
   Insn 193: point = 96, n_alt = -2
	Hard reg 1 is preferable by r130 with profit 1000
   Insn 39: point = 98, n_alt = 0
   Insn 37: point = 99, n_alt = 0
   Insn 36: point = 101, n_alt = 0
  BB 5
   Insn 34: point = 103, n_alt = -1
   Insn 33: point = 103, n_alt = 1
   Insn 32: point = 103, n_alt = 1
   Insn 31: point = 104, n_alt = 0
   Insn 30: point = 106, n_alt = 0
   Insn 29: point = 108, n_alt = 0
   Insn 28: point = 109, n_alt = 0
  BB 8
   Insn 59: point = 111, n_alt = -1
   Insn 58: point = 111, n_alt = 0
  BB 4
   Insn 177: point = 112, n_alt = -1
   Insn 24: point = 112, n_alt = 1
   Insn 23: point = 112, n_alt = 1
  BB 3
   Insn 20: point = 113, n_alt = 0
   Insn 19: point = 113, n_alt = 0
   Insn 18: point = 113, n_alt = -2
   Insn 17: point = 113, n_alt = 0
   Insn 16: point = 114, n_alt = 0
   Insn 15: point = 115, n_alt = 0
  BB 2
   Insn 13: point = 116, n_alt = -1
   Insn 12: point = 116, n_alt = 1
   Insn 11: point = 116, n_alt = 1
   Insn 10: point = 117, n_alt = -2
   Insn 9: point = 118, n_alt = 0
   Insn 8: point = 118, n_alt = 0
   Insn 7: point = 118, n_alt = -2
   Insn 6: point = 118, n_alt = 0
   Insn 5: point = 118, n_alt = 0
   Insn 190: point = 118, n_alt = 0
  BB 7
   Insn 52: point = 119, n_alt = 0
 r82: [7..119]
 r83: [95..99]
 r84: [73..78]
 r85: [49..55]
 r86: [51..52]
 r87: [49..50]
 r88: [47..48]
 r89: [45..46]
 r90: [41..42]
 r91: [39..40]
 r92: [28..29]
 r93: [20..21]
 r94: [14..19]
 r95: [2..6]
 r96: [87..88]
 r97: [69..70]
 r98: [67..68]
 r99: [0..1]
 r100: [116..117]
 r101: [113..114]
 r102: [105..109]
 r103: [105..106]
 r104: [107..108]
 r105: [103..104]
 r106: [100..101]
 r107: [89..90]
 r108: [97..98]
 r109: [79..80]
 r110: [71..74]
 r111: [75..77]
 r112: [73..76]
 r113: [64..65]
 r114: [61..62]
 r115: [59..60]
 r116: [53..54]
 r117: [43..44]
 r118: [36..37]
 r119: [33..34]
 r120: [30..31]
 r121: [25..26]
 r122: [22..23]
 r123: [12..18]
 r124: [16..17]
 r125: [10..11]
 r126: [8..9]
 r129: [91..92]
 r130: [93..96]
 r131: [93..94]
 r132: [56..58]
 r133: [12..15]
 r134: [12..13]
Compressing live ranges: from 120 to 86 - 71%
Ranges after the compression:
 r82: [4..85]
 r83: [70..73]
 r84: [56..59]
 r85: [38..43]
 r86: [40..41]
 r87: [38..39]
 r88: [36..37]
 r89: [34..35]
 r90: [30..31]
 r91: [28..29]
 r92: [20..21]
 r93: [14..15]
 r94: [10..13]
 r95: [2..3]
 r96: [62..63]
 r97: [54..55]
 r98: [52..53]
 r99: [0..1]
 r100: [84..85]
 r101: [82..83]
 r102: [78..81]
 r103: [78..79]
 r104: [80..81]
 r105: [76..77]
 r106: [74..75]
 r107: [64..65]
 r108: [72..73]
 r109: [60..61]
 r110: [56..57]
 r111: [58..59]
 r112: [56..59]
 r113: [50..51]
 r114: [48..49]
 r115: [46..47]
 r116: [42..43]
 r117: [32..33]
 r118: [26..27]
 r119: [24..25]
 r120: [22..23]
 r121: [18..19]
 r122: [16..17]
 r123: [8..13]
 r124: [12..13]
 r125: [6..7]
 r126: [4..5]
 r129: [66..67]
 r130: [68..71]
 r131: [68..69]
 r132: [44..45]
 r133: [8..11]
 r134: [8..9]

********** Assignment #1: **********

	 Assigning to 129 (cl=CREG, orig=107, freq=2000, tfirst=129, tfreq=2000)...
	   Assign 2 to reload r129 (freq=2000)
	 Assigning to 130 (cl=CREG, orig=108, freq=2000, tfirst=130, tfreq=2000)...
	   Assign 2 to reload r130 (freq=2000)
	 Assigning to 131 (cl=SIREG, orig=83, freq=2000, tfirst=131, tfreq=2000)...
	   Assign 4 to reload r131 (freq=2000)
	 Assigning to 133 (cl=CREG, orig=124, freq=2000, tfirst=133, tfreq=2000)...
	   Assign 2 to reload r133 (freq=2000)
	 Assigning to 134 (cl=DIREG, orig=94, freq=2000, tfirst=134, tfreq=2000)...
	   Assign 5 to reload r134 (freq=2000)
	 Assigning to 132 (cl=GENERAL_REGS, orig=115, freq=3000, tfirst=132, tfreq=3000)...
	   Assign 0 to reload r132 (freq=3000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=48, prev_offset=48)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=32, prev_offset=32)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
changing reg in insn 190
changing reg in insn 164
changing reg in insn 147
changing reg in insn 145
changing reg in insn 134
changing reg in insn 132
changing reg in insn 123
changing reg in insn 94
changing reg in insn 92
changing reg in insn 18
changing reg in insn 16
changing reg in insn 7
changing reg in insn 37
changing reg in insn 82
changing reg in insn 86
changing reg in insn 104
changing reg in insn 105
changing reg in insn 105
changing reg in insn 106
changing reg in insn 107
changing reg in insn 107
changing reg in insn 108
changing reg in insn 110
changing reg in insn 111
changing reg in insn 111
changing reg in insn 112
changing reg in insn 140
changing reg in insn 141
changing reg in insn 153
changing reg in insn 154
changing reg in insn 154
changing reg in insn 167
changing reg in insn 115
changing reg in insn 76
changing reg in insn 170
changing reg in insn 41
changing reg in insn 42
changing reg in insn 83
changing reg in insn 87
changing reg in insn 87
changing reg in insn 88
changing reg in insn 170
changing reg in insn 174
changing reg in insn 10
changing reg in insn 11
changing reg in insn 16
changing reg in insn 17
changing reg in insn 28
changing reg in insn 31
changing reg in insn 30
changing reg in insn 31
changing reg in insn 29
changing reg in insn 30
changing reg in insn 31
changing reg in insn 32
changing reg in insn 36
changing reg in insn 37
changing reg in insn 38
changing reg in insn 39
changing reg in insn 81
changing reg in insn 82
changing reg in insn 189
changing reg in insn 86
changing reg in insn 86
changing reg in insn 83
changing reg in insn 84
changing reg in insn 189
changing reg in insn 85
changing reg in insn 86
changing reg in insn 92
changing reg in insn 93
changing reg in insn 99
changing reg in insn 100
changing reg in insn 101
changing reg in insn 103
changing reg in insn 104
changing reg in insn 109
changing reg in insn 110
changing reg in insn 126
changing reg in insn 127
changing reg in insn 132
changing reg in insn 133
changing reg in insn 139
changing reg in insn 140
changing reg in insn 145
changing reg in insn 146
changing reg in insn 152
changing reg in insn 153
changing reg in insn 155
changing reg in insn 157
changing reg in insn 156
changing reg in insn 158
changing reg in insn 159
changing reg in insn 160
changing reg in insn 161
deleting insn with uid = 7.
deleting insn with uid = 10.
deleting insn with uid = 18.
deleting insn with uid = 189.
deleting insn with uid = 94.
deleting insn with uid = 195.
deleting insn with uid = 123.
deleting insn with uid = 126.
deleting insn with uid = 134.
deleting insn with uid = 147.
deleting insn with uid = 164.
deleting insn with uid = 170.
deleting insn with uid = 174.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.
verify found no changes in insn with uid = 19.
verify found no changes in insn with uid = 95.
verify found no changes in insn with uid = 124.
verify found no changes in insn with uid = 135.
verify found no changes in insn with uid = 148.
verify found no changes in insn with uid = 165.


new_block

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp] 17 [flags]
;;  ref usage 	r0={43d,36u} r1={14d,6u} r2={12d,4u} r3={1d,11u} r4={3d,3u} r5={1d,1u} r7={23d,106u} r8={7d} r9={7d} r10={7d} r11={7d} r12={7d} r13={7d} r14={7d} r15={7d} r17={42d,11u} r18={7d} r19={2e} r20={7d} r21={7d} r22={7d} r23={7d} r24={7d} r25={7d} r26={7d} r27={7d} r28={7d} r29={7d} r30={7d} r31={7d} r32={7d} r33={7d} r34={7d} r35={7d} r36={7d} r37={7d} r38={7d} r39={7d} r40={7d} r41={7d} r42={7d} r43={7d} r44={7d} r45={7d} r46={7d} r47={7d} r48={7d} r49={7d} r50={7d} r51={7d} r52={7d} r53={7d} r54={7d} r55={7d} r56={7d} r57={7d} r58={7d} r59={7d} r60={7d} r61={7d} r62={7d} r63={7d} r64={7d} r65={7d} r66={7d} r67={7d} r68={7d} r69={7d} r70={7d} r71={7d} r72={7d} r73={7d} r74={7d} r75={7d} 
;;    total ref usage 774{594d,178u,2e} in 120{113 regular + 7 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 190 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 190 3 2 2 (parallel [
            (set (reg:SI 3 bx [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 190 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":111:16 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 6 5 8 2 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [13  S4 A32])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 60 [0x3c])) [13 dev+0 S4 A32])) "fs/bitmap.c":111:16 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 8 6 9 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("get_super") [flags 0x41]  <function_decl 0x7b9e2650e000 get_super>) [0 get_super S1 A8])
            (const_int 16 [0x10]))) "fs/bitmap.c":111:16 823 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 9 8 11 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":111:16 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 11 9 12 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [19 sb+0 S4 A32])
        (reg:SI 0 ax [100])) "fs/bitmap.c":111:16 75 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])) [19 sb+0 S4 A32])
            (const_int 0 [0]))) "fs/bitmap.c":111:8 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 13 12 14 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 21)
            (pc))) "fs/bitmap.c":111:8 806 {*jcc}
     (nil)
 -> 21)
(note 14 13 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 3 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":112:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 16 15 17 3 (set (reg/f:SI 0 ax [101])
        (plus:SI (reg:SI 3 bx [82])
            (const:SI (unspec:SI [
                        (symbol_ref/f:SI ("*.LC12") [flags 0x2]  <var_decl 0x7b9e2655d510 *.LC12>)
                    ] UNSPEC_GOTOFF)))) "fs/bitmap.c":112:9 205 {*leasi}
     (expr_list:REG_EQUAL (symbol_ref/f:SI ("*.LC12") [flags 0x2]  <var_decl 0x7b9e2655d510 *.LC12>)
        (nil)))
(insn 17 16 19 3 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (reg/f:SI 0 ax [101])) "fs/bitmap.c":112:9 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 19 17 20 3 (call (mem:QI (symbol_ref:SI ("panic") [flags 0x41]  <function_decl 0x7b9e26510b00 panic>) [0 panic S1 A8])
        (const_int 16 [0x10])) "fs/bitmap.c":112:9 812 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 20 19 21 3 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":112:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(code_label 21 20 22 4 22 (nil) [1 uses])
(note 22 21 23 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 4 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [13 j+0 S4 A32])
        (const_int 8192 [0x2000])) "fs/bitmap.c":113:7 75 {*movsi_internal}
     (nil))
(insn 24 23 177 4 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [13 i+0 S4 A32])
        (const_int 0 [0])) "fs/bitmap.c":114:12 75 {*movsi_internal}
     (nil))
(jump_insn 177 24 178 4 (set (pc)
        (label_ref 53)) "fs/bitmap.c":114:5 807 {jump}
     (nil)
 -> 53)
(barrier 178 177 55)
(code_label 55 178 27 5 26 (nil) [1 uses])
(note 27 55 28 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 29 5 (set (reg/f:SI 0 ax [102])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [19 sb+0 S4 A32])) "fs/bitmap.c":115:17 75 {*movsi_internal}
     (nil))
(insn 29 28 30 5 (set (reg:SI 1 dx [104])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [13 i+0 S4 A32])) "fs/bitmap.c":115:17 75 {*movsi_internal}
     (nil))
(insn 30 29 31 5 (parallel [
            (set (reg:SI 1 dx [103])
                (plus:SI (reg:SI 1 dx [104])
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":115:17 209 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:SI (reg/f:SI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [13 i+0 S4 A32])
            (const_int 12 [0xc]))
        (nil)))
(insn 31 30 32 5 (set (reg/f:SI 0 ax [105])
        (mem/f:SI (plus:SI (plus:SI (mult:SI (reg:SI 1 dx [103])
                        (const_int 4 [0x4]))
                    (reg/f:SI 0 ax [102]))
                (const_int 4 [0x4])) [6 sb_28->s_zmap[i_15]+0 S4 A32])) "fs/bitmap.c":115:17 75 {*movsi_internal}
     (nil))
(insn 32 31 33 5 (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [6 bh+0 S4 A32])
        (reg/f:SI 0 ax [105])) "fs/bitmap.c":115:17 75 {*movsi_internal}
     (nil))
(insn 33 32 34 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 28 [0x1c])) [6 bh+0 S4 A32])
            (const_int 0 [0]))) "fs/bitmap.c":115:12 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 34 33 35 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 50)
            (pc))) "fs/bitmap.c":115:12 806 {*jcc}
     (nil)
 -> 50)
(note 35 34 36 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 36 35 37 6 (set (reg/f:SI 0 ax [106])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [6 bh+0 S4 A32])) "fs/bitmap.c":116:22 75 {*movsi_internal}
     (nil))
(insn 37 36 39 6 (set (reg/f:SI 0 ax [orig:83 _1 ] [83])
        (mem/f:SI (reg/f:SI 0 ax [106]) [2 bh_33->b_data+0 S4 A32])) "fs/bitmap.c":116:22 75 {*movsi_internal}
     (nil))
(insn 39 37 193 6 (set (reg:SI 1 dx [108])
        (const_int 0 [0])) "fs/bitmap.c":116:22 75 {*movsi_internal}
     (nil))
(insn 193 39 194 6 (set (reg:SI 2 cx [108])
        (reg:SI 1 dx [108])) "fs/bitmap.c":116:22 75 {*movsi_internal}
     (nil))
(insn 194 193 40 6 (set (reg/f:SI 4 si [orig:83 _1 ] [83])
        (reg/f:SI 0 ax [orig:83 _1 ] [83])) "fs/bitmap.c":116:22 75 {*movsi_internal}
     (nil))
(insn 40 194 192 6 (parallel [
            (set (reg:SI 2 cx [orig:107 __res ] [107])
                (asm_operands/v:SI ("cld
1:	lodsl
	notl %%eax
	bsfl %%eax, %%edx
	je 2f
	addl %%edx, %%ecx
	jmp 3f
2:	addl $32, %%ecx
	cmpl $8192, %%ecx
	jl 1b
3:") ("=c") 0 [
                        (reg:SI 2 cx [108])
                        (reg/f:SI 4 si [orig:83 _1 ] [83])
                    ]
                     [
                        (asm_input:SI ("c") fs/bitmap.c:116)
                        (asm_input:SI ("S") fs/bitmap.c:116)
                    ]
                     [] fs/bitmap.c:116))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":116:22 -1
     (nil))
(insn 192 40 38 6 (set (reg:SI 0 ax [orig:107 __res ] [107])
        (reg:SI 2 cx [orig:107 __res ] [107])) "fs/bitmap.c":116:22 75 {*movsi_internal}
     (nil))
(insn 38 192 41 6 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [13 __res+0 S4 A32])
        (reg:SI 0 ax [orig:107 __res ] [107])) "fs/bitmap.c":116:22 75 {*movsi_internal}
     (nil))
(insn 41 38 42 6 (set (reg:SI 0 ax [orig:96 _35 ] [96])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [13 __res+0 S4 A32])) "fs/bitmap.c":116:22 75 {*movsi_internal}
     (nil))
(insn 42 41 45 6 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [13 j+0 S4 A32])
        (reg:SI 0 ax [orig:96 _35 ] [96])) "fs/bitmap.c":116:20 75 {*movsi_internal}
     (nil))
(insn 45 42 46 6 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 20 [0x14])) [13 j+0 S4 A32])
            (const_int 8191 [0x1fff]))) "fs/bitmap.c":116:16 11 {*cmpsi_1}
     (nil))
(jump_insn 46 45 50 6 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 187)
            (pc))) "fs/bitmap.c":116:16 806 {*jcc}
     (nil)
 -> 187)
(code_label 50 46 51 7 24 (nil) [1 uses])
(note 51 50 52 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 52 51 53 7 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 24 [0x18])) [13 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 24 [0x18])) [13 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":114:25 209 {*addsi_1}
     (nil))
(code_label 53 52 54 8 23 (nil) [1 uses])
(note 54 53 58 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 58 54 59 8 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 24 [0x18])) [13 i+0 S4 A32])
            (const_int 7 [0x7]))) "fs/bitmap.c":114:19 11 {*cmpsi_1}
     (nil))
(jump_insn 59 58 183 8 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 55)
            (pc))) "fs/bitmap.c":114:19 806 {*jcc}
     (nil)
 -> 55)
(note 183 59 184 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(jump_insn 184 183 185 23 (set (pc)
        (label_ref 60)) 807 {jump}
     (nil)
 -> 60)
(barrier 185 184 187)
(code_label 187 185 186 24 34 (nil) [1 uses])
(note 186 187 188 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 188 186 60 24 (const_int 0 [0]) "fs/bitmap.c":117:17 843 {nop}
     (nil))
(code_label 60 188 61 9 25 (nil) [1 uses])
(note 61 60 64 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 64 61 65 9 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 24 [0x18])) [13 i+0 S4 A32])
            (const_int 7 [0x7]))) "fs/bitmap.c":118:8 11 {*cmpsi_1}
     (nil))
(jump_insn 65 64 66 9 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 74)
            (pc))) "fs/bitmap.c":118:8 806 {*jcc}
     (nil)
 -> 74)
(note 66 65 67 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 67 66 68 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 28 [0x1c])) [6 bh+0 S4 A32])
            (const_int 0 [0]))) "fs/bitmap.c":118:16 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 68 67 69 10 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 74)
            (pc))) "fs/bitmap.c":118:16 806 {*jcc}
     (nil)
 -> 74)
(note 69 68 72 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 72 69 73 11 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 20 [0x14])) [13 j+0 S4 A32])
            (const_int 8191 [0x1fff]))) "fs/bitmap.c":118:23 11 {*cmpsi_1}
     (nil))
(jump_insn 73 72 74 11 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 79)
            (pc))) "fs/bitmap.c":118:23 806 {*jcc}
     (nil)
 -> 79)
(code_label 74 73 75 12 27 (nil) [2 uses])
(note 75 74 76 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 76 75 179 12 (set (reg:SI 0 ax [orig:95 _19 ] [95])
        (const_int 0 [0])) "fs/bitmap.c":119:16 75 {*movsi_internal}
     (nil))
(jump_insn 179 76 180 12 (set (pc)
        (label_ref 168)) "fs/bitmap.c":119:16 807 {jump}
     (nil)
 -> 168)
(barrier 180 179 79)
(code_label 79 180 80 13 28 (nil) [1 uses])
(note 80 79 81 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 81 80 82 13 (set (reg/f:SI 0 ax [109])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [6 bh+0 S4 A32])) "fs/bitmap.c":120:9 75 {*movsi_internal}
     (nil))
(insn 82 81 84 13 (set (reg/f:SI 2 cx [orig:84 _2 ] [84])
        (mem/f:SI (reg/f:SI 0 ax [109]) [2 bh_14->b_data+0 S4 A32])) "fs/bitmap.c":120:9 75 {*movsi_internal}
     (nil))
(insn 84 82 85 13 (set (reg:SI 0 ax [111])
        (const_int 0 [0])) "fs/bitmap.c":120:9 75 {*movsi_internal}
     (nil))
(insn 85 84 86 13 (set (reg:SI 1 dx [112])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [13 j+0 S4 A32])) "fs/bitmap.c":120:9 75 {*movsi_internal}
     (nil))
(insn 86 85 83 13 (parallel [
            (set (reg:SI 0 ax [orig:110 res ] [110])
                (asm_operands/v:SI ("btsl %2,%3
	setb %%al") ("=a") 0 [
                        (reg:SI 0 ax [orig:110 res ] [110])
                        (reg:SI 1 dx [112])
                        (mem:QI (reg/f:SI 2 cx [orig:84 _2 ] [84]) [0 *_2+0 S1 A8])
                    ]
                     [
                        (asm_input:SI ("0") fs/bitmap.c:120)
                        (asm_input:SI ("r") fs/bitmap.c:120)
                        (asm_input:QI ("m") fs/bitmap.c:120)
                    ]
                     [] fs/bitmap.c:120))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":120:9 -1
     (nil))
(insn 83 86 87 13 (set (reg/v:SI 4 si [orig:97 res ] [97])
        (reg:SI 0 ax [orig:110 res ] [110])) "fs/bitmap.c":120:9 75 {*movsi_internal}
     (nil))
(insn 87 83 88 13 (set (reg:SI 0 ax [orig:98 _39 ] [98])
        (reg/v:SI 4 si [orig:97 res ] [97])) "fs/bitmap.c":120:9 75 {*movsi_internal}
     (nil))
(insn 88 87 89 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:98 _39 ] [98])
            (const_int 0 [0]))) "fs/bitmap.c":120:8 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 89 88 90 13 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 97)
            (pc))) "fs/bitmap.c":120:8 806 {*jcc}
     (nil)
 -> 97)
(note 90 89 91 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 91 90 92 14 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":121:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 92 91 93 14 (set (reg/f:SI 0 ax [113])
        (plus:SI (reg:SI 3 bx [82])
            (const:SI (unspec:SI [
                        (symbol_ref/f:SI ("*.LC13") [flags 0x2]  <var_decl 0x7b9e26597000 *.LC13>)
                    ] UNSPEC_GOTOFF)))) "fs/bitmap.c":121:9 205 {*leasi}
     (expr_list:REG_EQUAL (symbol_ref/f:SI ("*.LC13") [flags 0x2]  <var_decl 0x7b9e26597000 *.LC13>)
        (nil)))
(insn 93 92 95 14 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (reg/f:SI 0 ax [113])) "fs/bitmap.c":121:9 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 95 93 96 14 (call (mem:QI (symbol_ref:SI ("panic") [flags 0x41]  <function_decl 0x7b9e26510b00 panic>) [0 panic S1 A8])
        (const_int 16 [0x10])) "fs/bitmap.c":121:9 812 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 96 95 97 14 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":121:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(code_label 97 96 98 15 30 (nil) [1 uses])
(note 98 97 99 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 99 98 100 15 (set (reg/f:SI 0 ax [114])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [6 bh+0 S4 A32])) "fs/bitmap.c":122:16 75 {*movsi_internal}
     (nil))
(insn 100 99 101 15 (set (mem:QI (plus:SI (reg/f:SI 0 ax [114])
                (const_int 11 [0xb])) [0 bh_14->b_dirt+0 S1 A8])
        (const_int 1 [0x1])) "fs/bitmap.c":122:16 77 {*movqi_internal}
     (nil))
(insn 101 100 102 15 (set (reg:SI 0 ax [115])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [13 i+0 S4 A32])) "fs/bitmap.c":123:12 75 {*movsi_internal}
     (nil))
(insn 102 101 196 15 (parallel [
            (set (reg:SI 0 ax [115])
                (ashift:SI (reg:SI 0 ax [115])
                    (const_int 13 [0xd])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":123:12 655 {*ashlsi3_1}
     (expr_list:REG_EQUAL (ashift:SI (mem/c:SI (plus:SI (reg/f:SI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [13 i+0 S4 A32])
            (const_int 13 [0xd]))
        (nil)))
(insn 196 102 103 15 (set (reg:SI 1 dx [orig:85 _3 ] [85])
        (reg:SI 0 ax [115])) "fs/bitmap.c":123:12 75 {*movsi_internal}
     (nil))
(insn 103 196 104 15 (set (reg/f:SI 0 ax [116])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [19 sb+0 S4 A32])) "fs/bitmap.c":123:23 75 {*movsi_internal}
     (nil))
(insn 104 103 105 15 (set (reg:HI 0 ax [orig:86 _4 ] [86])
        (mem:HI (plus:SI (reg/f:SI 0 ax [116])
                (const_int 8 [0x8])) [4 sb_28->s_firstdatazone+0 S2 A32])) "fs/bitmap.c":123:23 76 {*movhi_internal}
     (nil))
(insn 105 104 106 15 (set (reg:SI 0 ax [orig:87 _5 ] [87])
        (zero_extend:SI (reg:HI 0 ax [orig:86 _4 ] [86]))) "fs/bitmap.c":123:23 144 {*zero_extendhisi2}
     (nil))
(insn 106 105 107 15 (parallel [
            (set (reg:SI 0 ax [orig:88 _6 ] [88])
                (plus:SI (reg:SI 0 ax [orig:87 _5 ] [87])
                    (reg:SI 1 dx [orig:85 _3 ] [85])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":123:19 209 {*addsi_1}
     (nil))
(insn 107 106 108 15 (parallel [
            (set (reg:SI 0 ax [orig:89 _7 ] [89])
                (plus:SI (reg:SI 0 ax [orig:88 _6 ] [88])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":123:41 209 {*addsi_1}
     (nil))
(insn 108 107 109 15 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 20 [0x14])) [13 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 20 [0x14])) [13 j+0 S4 A32])
                    (reg:SI 0 ax [orig:89 _7 ] [89])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":123:7 209 {*addsi_1}
     (nil))
(insn 109 108 110 15 (set (reg/f:SI 0 ax [117])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [19 sb+0 S4 A32])) "fs/bitmap.c":124:16 75 {*movsi_internal}
     (nil))
(insn 110 109 111 15 (set (reg:HI 0 ax [orig:90 _8 ] [90])
        (mem:HI (plus:SI (reg/f:SI 0 ax [117])
                (const_int 2 [0x2])) [4 sb_28->s_nzones+0 S2 A16])) "fs/bitmap.c":124:16 76 {*movhi_internal}
     (nil))
(insn 111 110 112 15 (set (reg:SI 0 ax [orig:91 _9 ] [91])
        (zero_extend:SI (reg:HI 0 ax [orig:90 _8 ] [90]))) "fs/bitmap.c":124:16 144 {*zero_extendhisi2}
     (nil))
(insn 112 111 113 15 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 20 [0x14])) [13 j+0 S4 A32])
            (reg:SI 0 ax [orig:91 _9 ] [91]))) "fs/bitmap.c":124:8 11 {*cmpsi_1}
     (nil))
(jump_insn 113 112 114 15 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 118)
            (pc))) "fs/bitmap.c":124:8 806 {*jcc}
     (nil)
 -> 118)
(note 114 113 115 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 115 114 181 16 (set (reg:SI 0 ax [orig:95 _19 ] [95])
        (const_int 0 [0])) "fs/bitmap.c":125:16 75 {*movsi_internal}
     (nil))
(jump_insn 181 115 182 16 (set (pc)
        (label_ref 168)) "fs/bitmap.c":125:16 807 {jump}
     (nil)
 -> 168)
(barrier 182 181 118)
(code_label 118 182 119 17 31 (nil) [1 uses])
(note 119 118 120 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 120 119 121 17 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":126:16 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 121 120 122 17 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [13  S4 A32])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [13 j+0 S4 A32])) "fs/bitmap.c":126:16 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 122 121 124 17 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [13  S4 A32])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 60 [0x3c])) [13 dev+0 S4 A32])) "fs/bitmap.c":126:16 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 124 122 125 17 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("getblk") [flags 0x41]  <function_decl 0x7b9e2650e500 getblk>) [0 getblk S1 A8])
            (const_int 16 [0x10]))) "fs/bitmap.c":126:16 823 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 125 124 127 17 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":126:16 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 127 125 128 17 (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [6 bh+0 S4 A32])
        (reg:SI 0 ax [118])) "fs/bitmap.c":126:16 75 {*movsi_internal}
     (nil))
(insn 128 127 129 17 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 28 [0x1c])) [6 bh+0 S4 A32])
            (const_int 0 [0]))) "fs/bitmap.c":126:8 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 129 128 130 17 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 137)
            (pc))) "fs/bitmap.c":126:8 806 {*jcc}
     (nil)
 -> 137)
(note 130 129 131 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 131 130 132 18 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":127:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 132 131 133 18 (set (reg/f:SI 0 ax [119])
        (plus:SI (reg:SI 3 bx [82])
            (const:SI (unspec:SI [
                        (symbol_ref/f:SI ("*.LC14") [flags 0x2]  <var_decl 0x7b9e26597090 *.LC14>)
                    ] UNSPEC_GOTOFF)))) "fs/bitmap.c":127:9 205 {*leasi}
     (expr_list:REG_EQUAL (symbol_ref/f:SI ("*.LC14") [flags 0x2]  <var_decl 0x7b9e26597090 *.LC14>)
        (nil)))
(insn 133 132 135 18 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (reg/f:SI 0 ax [119])) "fs/bitmap.c":127:9 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 135 133 136 18 (call (mem:QI (symbol_ref:SI ("panic") [flags 0x41]  <function_decl 0x7b9e26510b00 panic>) [0 panic S1 A8])
        (const_int 16 [0x10])) "fs/bitmap.c":127:9 812 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 136 135 137 18 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":127:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(code_label 137 136 138 19 32 (nil) [1 uses])
(note 138 137 139 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 139 138 140 19 (set (reg/f:SI 0 ax [120])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [6 bh+0 S4 A32])) "fs/bitmap.c":128:11 75 {*movsi_internal}
     (nil))
(insn 140 139 141 19 (set (reg:QI 0 ax [orig:92 _10 ] [92])
        (mem:QI (plus:SI (reg/f:SI 0 ax [120])
                (const_int 12 [0xc])) [0 bh_44->b_count+0 S1 A32])) "fs/bitmap.c":128:11 77 {*movqi_internal}
     (nil))
(insn 141 140 142 19 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:92 _10 ] [92])
            (const_int 1 [0x1]))) "fs/bitmap.c":128:8 9 {*cmpqi_1}
     (nil))
(jump_insn 142 141 143 19 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 150)
            (pc))) "fs/bitmap.c":128:8 806 {*jcc}
     (nil)
 -> 150)
(note 143 142 144 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 144 143 145 20 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":129:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 145 144 146 20 (set (reg/f:SI 0 ax [121])
        (plus:SI (reg:SI 3 bx [82])
            (const:SI (unspec:SI [
                        (symbol_ref/f:SI ("*.LC15") [flags 0x2]  <var_decl 0x7b9e26597120 *.LC15>)
                    ] UNSPEC_GOTOFF)))) "fs/bitmap.c":129:9 205 {*leasi}
     (expr_list:REG_EQUAL (symbol_ref/f:SI ("*.LC15") [flags 0x2]  <var_decl 0x7b9e26597120 *.LC15>)
        (nil)))
(insn 146 145 148 20 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (reg/f:SI 0 ax [121])) "fs/bitmap.c":129:9 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 148 146 149 20 (call (mem:QI (symbol_ref:SI ("panic") [flags 0x41]  <function_decl 0x7b9e26510b00 panic>) [0 panic S1 A8])
        (const_int 16 [0x10])) "fs/bitmap.c":129:9 812 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 149 148 150 20 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":129:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(code_label 150 149 151 21 33 (nil) [1 uses])
(note 151 150 152 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 152 151 153 21 (set (reg/f:SI 0 ax [122])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [6 bh+0 S4 A32])) "fs/bitmap.c":130:5 75 {*movsi_internal}
     (nil))
(insn 153 152 154 21 (set (reg/f:SI 0 ax [orig:93 _11 ] [93])
        (mem/f:SI (reg/f:SI 0 ax [122]) [2 bh_44->b_data+0 S4 A32])) "fs/bitmap.c":130:5 75 {*movsi_internal}
     (nil))
(insn 154 153 155 21 (set (reg:SI 4 si [orig:94 _12 ] [94])
        (reg/f:SI 0 ax [orig:93 _11 ] [93])) "fs/bitmap.c":130:5 75 {*movsi_internal}
     (nil))
(insn 155 154 156 21 (set (reg:SI 0 ax [123])
        (const_int 0 [0])) "fs/bitmap.c":130:5 75 {*movsi_internal}
     (nil))
(insn 156 155 197 21 (set (reg:SI 1 dx [124])
        (const_int 256 [0x100])) "fs/bitmap.c":130:5 75 {*movsi_internal}
     (nil))
(insn 197 156 198 21 (set (reg:SI 2 cx [124])
        (reg:SI 1 dx [124])) "fs/bitmap.c":130:5 75 {*movsi_internal}
     (nil))
(insn 198 197 157 21 (set (reg:SI 5 di [orig:94 _12 ] [94])
        (reg:SI 4 si [orig:94 _12 ] [94])) "fs/bitmap.c":130:5 75 {*movsi_internal}
     (nil))
(insn 157 198 158 21 (parallel [
            (asm_operands/v ("cld
	rep
	stosl") ("") 0 [
                    (reg:SI 0 ax [123])
                    (reg:SI 2 cx [124])
                    (reg:SI 5 di [orig:94 _12 ] [94])
                ]
                 [
                    (asm_input:SI ("a") fs/bitmap.c:130)
                    (asm_input:SI ("c") fs/bitmap.c:130)
                    (asm_input:SI ("D") fs/bitmap.c:130)
                ]
                 [] fs/bitmap.c:130)
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":130:5 -1
     (nil))
(insn 158 157 159 21 (set (reg/f:SI 0 ax [125])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [6 bh+0 S4 A32])) "fs/bitmap.c":131:20 75 {*movsi_internal}
     (nil))
(insn 159 158 160 21 (set (mem:QI (plus:SI (reg/f:SI 0 ax [125])
                (const_int 10 [0xa])) [0 bh_44->b_uptodate+0 S1 A16])
        (const_int 1 [0x1])) "fs/bitmap.c":131:20 77 {*movqi_internal}
     (nil))
(insn 160 159 161 21 (set (reg/f:SI 0 ax [126])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [6 bh+0 S4 A32])) "fs/bitmap.c":132:16 75 {*movsi_internal}
     (nil))
(insn 161 160 162 21 (set (mem:QI (plus:SI (reg/f:SI 0 ax [126])
                (const_int 11 [0xb])) [0 bh_44->b_dirt+0 S1 A8])
        (const_int 1 [0x1])) "fs/bitmap.c":132:16 77 {*movqi_internal}
     (nil))
(insn 162 161 163 21 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":133:5 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 163 162 165 21 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [6  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 40 [0x28])) [6 bh+0 S4 A32])) "fs/bitmap.c":133:5 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 165 163 166 21 (call (mem:QI (symbol_ref:SI ("brelse") [flags 0x41]  <function_decl 0x7b9e2650e200 brelse>) [0 brelse S1 A8])
        (const_int 16 [0x10])) "fs/bitmap.c":133:5 812 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 166 165 167 21 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":133:5 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 167 166 168 21 (set (reg:SI 0 ax [orig:95 _19 ] [95])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [13 j+0 S4 A32])) "fs/bitmap.c":134:12 75 {*movsi_internal}
     (nil))
(code_label 168 167 169 22 29 (nil) [2 uses])
(note 169 168 175 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 175 169 191 22 (use (reg/i:SI 0 ax)) "fs/bitmap.c":135:1 -1
     (nil))
(note 191 175 0 NOTE_INSN_DELETED)

;; Function new_inode (new_inode, funcdef_no=4, decl_uid=1163, cgraph_uid=5, symbol_order=4)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=32, prev_offset=0)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 196:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (1) lBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 17:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 21:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 23:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 27:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =r  (1) Ts {*leasi} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 32:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 36:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 42:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 44:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 45:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =r  (1) g {*movsi_internal}
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
            2 Small class reload: reject+=3
          alt=0,overall=28,losers=3,rld_nregs=3
	 Choosing alt 0 in insn 52:  (0) =c  (1) c  (2) S
      Creating newreg=156 from oldreg=119, assigning class CREG to r156
      Creating newreg=157 from oldreg=120, assigning class CREG to r157
      Creating newreg=158 from oldreg=83, assigning class SIREG to r158
   52: {r156:SI=asm_operands;clobber flags:CC;}
      REG_DEAD r120:SI
      REG_DEAD r83:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  199: r157:SI=r120:SI
  200: r158:SI=r83:SI
    Inserting insn reload after:
  198: r119:SI=r156:SI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 50:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 54:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 64:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 74:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 83:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
      Creating newreg=159 from oldreg=121, assigning class GENERAL_REGS to r159
   83: {r159:SI=r159:SI<<0xd;clobber flags:CC;}
      REG_DEAD r121:SI
      REG_UNUSED flags:CC
      REG_EQUAL [frame:SI-0x8]<<0xd
    Inserting insn reload before:
  201: r159:SI=r121:SI
    Inserting insn reload after:
  202: r84:SI=r159:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 87:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) =r  (1) rm {*zero_extendhisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 93:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 97:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 106:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (0) =a  (1) 0  (2) r  (3) m
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 113:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 114:  (0) =r  (1) Ts {*leasi} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 115:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 117:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 118:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 121:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 122:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 123:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 124:  (0) m  (1) rn {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 125:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 126:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 127:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 128:  (0) =r  (1) r {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 129:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 130:  (0) m  (1) rn {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 131:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 132:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 133:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 134:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 135:  (0) m  (1) rn {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 136:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 138:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 139:  (0) =Q  (1) Q {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 140:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=7,overall=27,losers=2 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 141:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 142:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 143:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 144:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 145:  (0) =r  (1) r {*movhi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 146:  (0) =rm  (1) 0  (2) cI {*ashlhi3_1}
      Creating newreg=160 from oldreg=95, assigning class GENERAL_REGS to r160
  146: {r160:HI=r160:HI<<0xd;clobber flags:CC;}
      REG_DEAD r95:HI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  203: r160:HI=r95:HI
    Inserting insn reload after:
  204: r96:HI=r160:HI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 147:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 148:  (0) =r  (1) r {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 149:  (0) =rm  (1) %0  (2) rn {*addhi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 150:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 151:  (0) m  (1) rn {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 152:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 153:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 154:  (0) =r  (1) g {*movsi_internal}
            1 Small class reload: reject+=3
            3 Matching alt: reject+=2
            3 Small class reload: reject+=3
            3 Non input pseudo reload: reject++
          alt=0,overall=21,losers=2,rld_nregs=2
            1 Small class reload: reject+=3
            3 Matching alt: reject+=2
            3 Small class reload: reject+=3
            3 Non input pseudo reload: reject++
          alt=0,overall=21,losers=2,rld_nregs=2
	 Choosing alt 0 in insn 155:  (0) =d  (1) %a  (2) rm  (3) =1 {*smulsi3_highpart_1}
      Creating newreg=161 from oldreg=154, assigning class AREG to r161
  155: {r143:SI=trunc(sign_extend(r161:SI)*sign_extend(r144:SI) 0>>0x20);clobber r161:SI;clobber flags:CC;}
      REG_DEAD r144:SI
      REG_UNUSED r154:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  205: r161:SI=r99:SI

          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 156:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
      Creating newreg=162 from oldreg=143, assigning class GENERAL_REGS to r162
  156: {r162:SI=r162:SI>>0x5;clobber flags:CC;}
      REG_DEAD r143:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  206: r162:SI=r143:SI
    Inserting insn reload after:
  207: r145:SI=r162:SI

            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Small class reload: reject+=3
          alt=0,overall=21,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 157:  (0) rm  (1) 0 {ashrsi3_cvt}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
	 Choosing alt 0 in insn 158:  (0) =rm  (1) 0  (2) re {*subsi_1}
      Creating newreg=163 from oldreg=145, assigning class GENERAL_REGS to r163
  158: {r163:SI=r163:SI-r146:SI;clobber flags:CC;}
      REG_DEAD r146:SI
      REG_DEAD r145:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  208: r163:SI=r145:SI
    Inserting insn reload after:
  209: r100:SI=r163:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 159:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 160:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 161
	 Choosing alt 0 in insn 161:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 163:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 164:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 165:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 166:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 167:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 168:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 169:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 170:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 171:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 172:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 173:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2 3
EBB 4 5
EBB 6
EBB 7 8
EBB 9
EBB 10 19
EBB 20
EBB 11 12 13
EBB 14
EBB 15 16
EBB 17
EBB 18

********** Pseudo live ranges #1: **********

  BB 18
   Insn 181: point = 0, n_alt = -1
   Insn 180: point = 0, n_alt = -2
   Insn 176: point = 1, n_alt = -2
  BB 14
   Insn 187: point = 4, n_alt = -1
   Insn 98: point = 4, n_alt = 0
   Insn 97: point = 5, n_alt = 0
   Insn 96: point = 5, n_alt = 0
   Insn 95: point = 5, n_alt = -2
   Insn 94: point = 6, n_alt = 0
   Insn 93: point = 6, n_alt = 0
  BB 3
   Insn 183: point = 7, n_alt = -1
   Insn 12: point = 7, n_alt = 0
  BB 17
   Insn 173: point = 8, n_alt = 0
   Insn 172: point = 9, n_alt = 1
   Insn 171: point = 10, n_alt = 0
   Insn 170: point = 11, n_alt = 0
   Insn 169: point = 13, n_alt = 0
   Insn 168: point = 14, n_alt = 1
   Insn 167: point = 15, n_alt = 0
   Insn 166: point = 16, n_alt = 0
   Insn 165: point = 18, n_alt = 0
   Insn 164: point = 19, n_alt = 1
   Insn 163: point = 20, n_alt = 0
   Insn 162: point = 21, n_alt = -2
   Insn 161: point = 23, n_alt = 0
   Insn 160: point = 25, n_alt = 0
   Insn 159: point = 27, n_alt = 0
   Insn 209: point = 29, n_alt = -2
	Hard reg 1 is preferable by r163 with profit 1000
   Insn 158: point = 31, n_alt = 0
   Insn 208: point = 33, n_alt = -2
	Hard reg 1 is preferable by r163 with profit 1000
	Hard reg 0 is preferable by r163 with profit 1000
   Insn 157: point = 35, n_alt = 1
   Insn 207: point = 37, n_alt = -2
	Hard reg 0 is preferable by r162 with profit 1000
   Insn 156: point = 39, n_alt = 0
   Insn 206: point = 40, n_alt = -2
	Hard reg 0 is preferable by r162 with profit 1000
	Hard reg 1 is preferable by r162 with profit 1000
   Insn 155: point = 42, n_alt = 0
   Insn 205: point = 44, n_alt = -2
	Hard reg 2 is preferable by r161 with profit 1000
   Insn 154: point = 45, n_alt = 0
   Insn 153: point = 46, n_alt = 0
   Insn 152: point = 48, n_alt = 0
   Insn 151: point = 49, n_alt = 3
   Insn 150: point = 50, n_alt = 0
   Insn 149: point = 51, n_alt = 0
   Insn 148: point = 53, n_alt = 0
   Insn 147: point = 55, n_alt = 0
   Insn 204: point = 56, n_alt = -2
	Hard reg 1 is preferable by r160 with profit 1000
   Insn 146: point = 58, n_alt = 0
   Insn 203: point = 59, n_alt = -2
	Hard reg 1 is preferable by r160 with profit 1000
	Hard reg 0 is preferable by r160 with profit 1000
   Insn 145: point = 61, n_alt = 0
   Insn 144: point = 63, n_alt = 0
   Insn 143: point = 64, n_alt = 8
   Insn 142: point = 65, n_alt = 0
   Insn 141: point = 66, n_alt = 8
   Insn 140: point = 67, n_alt = 0
   Insn 139: point = 68, n_alt = 0
   Insn 138: point = 70, n_alt = 2
   Insn 137: point = 72, n_alt = 0
   Insn 136: point = 74, n_alt = 0
   Insn 135: point = 75, n_alt = 3
   Insn 134: point = 76, n_alt = 0
   Insn 133: point = 77, n_alt = 2
   Insn 132: point = 79, n_alt = 0
   Insn 131: point = 81, n_alt = 0
   Insn 130: point = 82, n_alt = 3
   Insn 129: point = 83, n_alt = 0
   Insn 128: point = 84, n_alt = 0
   Insn 127: point = 86, n_alt = 0
   Insn 126: point = 87, n_alt = 8
   Insn 125: point = 88, n_alt = 0
   Insn 124: point = 89, n_alt = 3
   Insn 123: point = 90, n_alt = 0
   Insn 122: point = 91, n_alt = 8
   Insn 121: point = 92, n_alt = 0
  BB 16
   Insn 118: point = 94, n_alt = 0
   Insn 117: point = 94, n_alt = 0
   Insn 116: point = 94, n_alt = -2
   Insn 115: point = 94, n_alt = 0
   Insn 114: point = 95, n_alt = 0
   Insn 113: point = 96, n_alt = 0
  BB 15
   Insn 111: point = 97, n_alt = -1
   Insn 110: point = 97, n_alt = 0
   Insn 109: point = 98, n_alt = -2
   Insn 105: point = 100, n_alt = -2
   Insn 108: point = 102, n_alt = 0
   Insn 195: point = 104, n_alt = -2
   Insn 107: point = 106, n_alt = 0
   Insn 106: point = 107, n_alt = 0
   Insn 104: point = 108, n_alt = 0
   Insn 103: point = 110, n_alt = 0
  BB 13
   Insn 90: point = 112, n_alt = -1
   Insn 89: point = 112, n_alt = 0
   Insn 88: point = 113, n_alt = 0
   Insn 87: point = 115, n_alt = 2
   Insn 86: point = 117, n_alt = 0
   Insn 85: point = 118, n_alt = 0
   Insn 84: point = 120, n_alt = 0
   Insn 202: point = 121, n_alt = -2
	Hard reg 1 is preferable by r159 with profit 1000
   Insn 83: point = 123, n_alt = 0
   Insn 201: point = 124, n_alt = -2
	Hard reg 1 is preferable by r159 with profit 1000
	Hard reg 0 is preferable by r159 with profit 1000
   Insn 82: point = 126, n_alt = 0
  BB 12
   Insn 80: point = 128, n_alt = -1
   Insn 79: point = 128, n_alt = 0
  BB 11
   Insn 75: point = 129, n_alt = -1
   Insn 74: point = 129, n_alt = 1
  BB 19
   Insn 190: point = 130, n_alt = -1
  BB 20
   Insn 194: point = 131, n_alt = -1
  BB 8
   Insn 58: point = 132, n_alt = -1
   Insn 57: point = 132, n_alt = 0
   Insn 54: point = 132, n_alt = 1
   Insn 53: point = 133, n_alt = 0
   Insn 50: point = 134, n_alt = 1
   Insn 198: point = 135, n_alt = -2
	Hard reg 0 is preferable by r156 with profit 1000
   Insn 52: point = 137, n_alt = 0
   Insn 200: point = 139, n_alt = -2
	Hard reg 0 is preferable by r158 with profit 1000
   Insn 199: point = 141, n_alt = -2
	Hard reg 1 is preferable by r157 with profit 1000
   Insn 51: point = 143, n_alt = 0
   Insn 49: point = 144, n_alt = 0
   Insn 48: point = 146, n_alt = 0
  BB 7
   Insn 46: point = 148, n_alt = -1
   Insn 45: point = 148, n_alt = 1
   Insn 44: point = 148, n_alt = 1
   Insn 43: point = 149, n_alt = 0
   Insn 42: point = 151, n_alt = 0
   Insn 41: point = 153, n_alt = 0
   Insn 40: point = 154, n_alt = 0
  BB 10
   Insn 71: point = 156, n_alt = -1
   Insn 70: point = 156, n_alt = 0
  BB 6
   Insn 185: point = 157, n_alt = -1
   Insn 36: point = 157, n_alt = 1
   Insn 35: point = 157, n_alt = 1
  BB 5
   Insn 32: point = 158, n_alt = 0
   Insn 31: point = 158, n_alt = 0
   Insn 30: point = 158, n_alt = -2
   Insn 29: point = 158, n_alt = 0
   Insn 28: point = 159, n_alt = 0
   Insn 27: point = 160, n_alt = 0
  BB 4
   Insn 25: point = 161, n_alt = -1
   Insn 24: point = 161, n_alt = 1
   Insn 23: point = 161, n_alt = 1
   Insn 22: point = 162, n_alt = -2
   Insn 21: point = 163, n_alt = 0
   Insn 20: point = 163, n_alt = 0
   Insn 19: point = 163, n_alt = -2
   Insn 18: point = 163, n_alt = 0
   Insn 17: point = 163, n_alt = 0
  BB 2
   Insn 10: point = 164, n_alt = -1
   Insn 9: point = 164, n_alt = 1
   Insn 8: point = 164, n_alt = 1
   Insn 7: point = 165, n_alt = -2
   Insn 6: point = 166, n_alt = 0
   Insn 5: point = 166, n_alt = -2
   Insn 196: point = 166, n_alt = 0
  BB 9
   Insn 64: point = 167, n_alt = 0
 r82: [28..167] [5..6]
 r83: [140..144]
 r84: [119..121]
 r85: [112..118]
 r86: [114..115]
 r87: [112..113]
 r88: [103..108]
 r89: [82..84]
 r90: [78..79]
 r91: [75..77]
 r92: [71..72]
 r93: [69..70]
 r94: [66..68]
 r95: [60..61]
 r96: [52..56]
 r97: [52..53]
 r98: [49..51]
 r99: [36..46]
 r100: [24..29]
 r101: [24..25]
 r102: [22..23]
 r103: [19..21]
 r104: [14..16]
 r105: [9..11]
 r106: [7..8] [2..4]
 r107: [132..133]
 r108: [99..100]
 r109: [97..98]
 r110: [0..1]
 r111: [164..165]
 r112: [161..162]
 r113: [158..159]
 r114: [150..154]
 r115: [150..151]
 r116: [152..153]
 r117: [148..149]
 r118: [145..146]
 r119: [134..135]
 r120: [142..143]
 r121: [125..126]
 r122: [119..120]
 r123: [116..117]
 r124: [109..110]
 r125: [101..104]
 r126: [105..107]
 r127: [103..106]
 r128: [94..95]
 r129: [91..92]
 r130: [89..90]
 r131: [87..88]
 r132: [85..86]
 r133: [82..83]
 r134: [80..81]
 r135: [75..76]
 r136: [73..74]
 r137: [66..67]
 r138: [64..65]
 r139: [62..63]
 r140: [54..55]
 r141: [49..50]
 r142: [47..48]
 r143: [41..42]
 r144: [43..45]
 r145: [34..37]
 r146: [32..35]
 r147: [26..27]
 r148: [19..20]
 r149: [17..18]
 r150: [14..15]
 r151: [12..13]
 r152: [9..10]
 r156: [136..137]
 r157: [138..141]
 r158: [138..139]
 r159: [122..124]
 r160: [57..59]
 r161: [42..44]
 r162: [38..40]
 r163: [30..33]
Compressing live ranges: from 168 to 128 - 76%
Ranges after the compression:
 r82: [24..127] [4..5]
 r83: [110..113]
 r84: [96..97]
 r85: [90..95]
 r86: [92..93]
 r87: [90..91]
 r88: [84..87]
 r89: [68..69]
 r90: [64..65]
 r91: [62..63]
 r92: [58..59]
 r93: [56..57]
 r94: [54..55]
 r95: [48..49]
 r96: [42..45]
 r97: [42..43]
 r98: [40..41]
 r99: [30..37]
 r100: [20..25]
 r101: [20..21]
 r102: [18..19]
 r103: [16..17]
 r104: [12..13]
 r105: [8..9]
 r106: [6..7] [2..3]
 r107: [102..103]
 r108: [82..83]
 r109: [80..81]
 r110: [0..1]
 r111: [126..127]
 r112: [124..125]
 r113: [122..123]
 r114: [118..121]
 r115: [118..119]
 r116: [120..121]
 r117: [116..117]
 r118: [114..115]
 r119: [104..105]
 r120: [112..113]
 r121: [100..101]
 r122: [96..97]
 r123: [94..95]
 r124: [88..89]
 r125: [84..85]
 r126: [86..87]
 r127: [84..87]
 r128: [78..79]
 r129: [76..77]
 r130: [74..75]
 r131: [72..73]
 r132: [70..71]
 r133: [68..69]
 r134: [66..67]
 r135: [62..63]
 r136: [60..61]
 r137: [54..55]
 r138: [52..53]
 r139: [50..51]
 r140: [44..45]
 r141: [40..41]
 r142: [38..39]
 r143: [34..35]
 r144: [36..37]
 r145: [28..31]
 r146: [26..29]
 r147: [22..23]
 r148: [16..17]
 r149: [14..15]
 r150: [12..13]
 r151: [10..11]
 r152: [8..9]
 r156: [106..107]
 r157: [108..111]
 r158: [108..109]
 r159: [98..99]
 r160: [46..47]
 r161: [35..37]
 r162: [32..33]
 r163: [26..27]

********** Assignment #1: **********

	 Assigning to 156 (cl=CREG, orig=119, freq=2000, tfirst=156, tfreq=2000)...
	   Assign 2 to reload r156 (freq=2000)
	 Assigning to 157 (cl=CREG, orig=120, freq=2000, tfirst=157, tfreq=2000)...
	   Assign 2 to reload r157 (freq=2000)
	 Assigning to 158 (cl=SIREG, orig=83, freq=2000, tfirst=158, tfreq=2000)...
	   Assign 4 to reload r158 (freq=2000)
	 Assigning to 161 (cl=AREG, orig=154, freq=2000, tfirst=161, tfreq=2000)...
	   Assign 0 to reload r161 (freq=2000)
	 Assigning to 159 (cl=GENERAL_REGS, orig=121, freq=3000, tfirst=159, tfreq=3000)...
	   Assign 0 to reload r159 (freq=3000)
	 Assigning to 160 (cl=GENERAL_REGS, orig=95, freq=3000, tfirst=160, tfreq=3000)...
	   Assign 0 to reload r160 (freq=3000)
	 Assigning to 162 (cl=GENERAL_REGS, orig=143, freq=3000, tfirst=162, tfreq=3000)...
	   Assign 0 to reload r162 (freq=3000)
	 Assigning to 163 (cl=GENERAL_REGS, orig=145, freq=3000, tfirst=163, tfreq=3000)...
	   Assign 0 to reload r163 (freq=3000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=48, prev_offset=48)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=32, prev_offset=32)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
changing reg in insn 196
changing reg in insn 159
changing reg in insn 152
changing reg in insn 136
changing reg in insn 131
changing reg in insn 116
changing reg in insn 114
changing reg in insn 95
changing reg in insn 30
changing reg in insn 28
changing reg in insn 19
changing reg in insn 5
changing reg in insn 49
changing reg in insn 85
changing reg in insn 85
changing reg in insn 85
changing reg in insn 89
changing reg in insn 87
changing reg in insn 88
changing reg in insn 88
changing reg in insn 89
changing reg in insn 104
changing reg in insn 108
changing reg in insn 128
changing reg in insn 130
changing reg in insn 132
changing reg in insn 133
changing reg in insn 133
changing reg in insn 135
changing reg in insn 137
changing reg in insn 138
changing reg in insn 138
changing reg in insn 139
changing reg in insn 141
changing reg in insn 145
changing reg in insn 149
changing reg in insn 148
changing reg in insn 149
changing reg in insn 149
changing reg in insn 151
changing reg in insn 153
changing reg in insn 157
changing reg in insn 160
changing reg in insn 161
changing reg in insn 162
changing reg in insn 162
changing reg in insn 164
changing reg in insn 166
changing reg in insn 168
changing reg in insn 170
changing reg in insn 172
changing reg in insn 173
changing reg in insn 98
changing reg in insn 12
changing reg in insn 176
changing reg in insn 53
changing reg in insn 54
changing reg in insn 105
changing reg in insn 109
changing reg in insn 109
changing reg in insn 110
changing reg in insn 176
changing reg in insn 180
changing reg in insn 7
changing reg in insn 8
changing reg in insn 22
changing reg in insn 23
changing reg in insn 28
changing reg in insn 29
changing reg in insn 40
changing reg in insn 43
changing reg in insn 42
changing reg in insn 43
changing reg in insn 41
changing reg in insn 42
changing reg in insn 43
changing reg in insn 44
changing reg in insn 48
changing reg in insn 49
changing reg in insn 50
changing reg in insn 51
changing reg in insn 82
changing reg in insn 84
changing reg in insn 85
changing reg in insn 86
changing reg in insn 87
changing reg in insn 103
changing reg in insn 104
changing reg in insn 195
changing reg in insn 108
changing reg in insn 108
changing reg in insn 105
changing reg in insn 106
changing reg in insn 195
changing reg in insn 107
changing reg in insn 108
changing reg in insn 114
changing reg in insn 115
changing reg in insn 121
changing reg in insn 122
changing reg in insn 123
changing reg in insn 124
changing reg in insn 125
changing reg in insn 126
changing reg in insn 127
changing reg in insn 129
changing reg in insn 130
changing reg in insn 131
changing reg in insn 132
changing reg in insn 134
changing reg in insn 135
changing reg in insn 136
changing reg in insn 137
changing reg in insn 140
changing reg in insn 141
changing reg in insn 142
changing reg in insn 143
changing reg in insn 144
changing reg in insn 147
changing reg in insn 150
changing reg in insn 151
changing reg in insn 152
changing reg in insn 153
changing reg in insn 155
changing reg in insn 154
changing reg in insn 155
changing reg in insn 157
changing reg in insn 158
changing reg in insn 159
changing reg in insn 160
changing reg in insn 163
changing reg in insn 164
changing reg in insn 165
changing reg in insn 166
changing reg in insn 167
changing reg in insn 168
changing reg in insn 169
changing reg in insn 170
changing reg in insn 171
changing reg in insn 172
deleting insn with uid = 5.
deleting insn with uid = 7.
deleting insn with uid = 19.
deleting insn with uid = 22.
deleting insn with uid = 30.
deleting insn with uid = 201.
deleting insn with uid = 95.
deleting insn with uid = 195.
deleting insn with uid = 116.
deleting insn with uid = 145.
deleting insn with uid = 203.
deleting insn with uid = 148.
deleting insn with uid = 207.
deleting insn with uid = 208.
deleting insn with uid = 176.
deleting insn with uid = 180.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 6.
verify found no changes in insn with uid = 20.
verify found no changes in insn with uid = 31.
verify found no changes in insn with uid = 96.
verify found no changes in insn with uid = 117.


new_inode

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 17 [flags]
;;  ref usage 	r0={58d,52u} r1={23d,17u,1e} r2={11d,6u} r3={1d,11u} r4={2d,2u} r7={13d,89u} r8={5d} r9={5d} r10={5d} r11={5d} r12={5d} r13={5d} r14={5d} r15={5d} r17={36d,9u} r18={5d} r19={3e} r20={5d} r21={5d} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={5d} r29={5d} r30={5d} r31={5d} r32={5d} r33={5d} r34={5d} r35={5d} r36={5d} r37={5d} r38={5d} r39={5d} r40={5d} r41={5d} r42={5d} r43={5d} r44={5d} r45={5d} r46={5d} r47={5d} r48={5d} r49={5d} r50={5d} r51={5d} r52={5d} r53={5d} r54={5d} r55={5d} r56={5d} r57={5d} r58={5d} r59={5d} r60={5d} r61={5d} r62={5d} r63={5d} r64={5d} r65={5d} r66={5d} r67={5d} r68={5d} r69={5d} r70={5d} r71={5d} r72={5d} r73={5d} r74={5d} r75={5d} 
;;    total ref usage 659{469d,186u,4e} in 136{131 regular + 5 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 196 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 196 3 2 2 (parallel [
            (set (reg:SI 3 bx [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 196 6 2 NOTE_INSN_FUNCTION_BEG)
(call_insn 6 2 8 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("get_empty_inode") [flags 0x41]  <function_decl 0x7b9e26510300 get_empty_inode>) [0 get_empty_inode S1 A8])
            (const_int 0 [0]))) "fs/bitmap.c":144:19 823 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 8 6 9 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [8 inode+0 S4 A32])
        (reg:SI 0 ax [111])) "fs/bitmap.c":144:19 75 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])) [8 inode+0 S4 A32])
            (const_int 0 [0]))) "fs/bitmap.c":144:8 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 10 9 11 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 15)
            (pc))) "fs/bitmap.c":144:8 806 {*jcc}
     (nil)
 -> 15)
(note 11 10 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 12 11 183 3 (set (reg/f:SI 0 ax [orig:106 _30 ] [106])
        (const_int 0 [0])) "fs/bitmap.c":145:16 75 {*movsi_internal}
     (nil))
(jump_insn 183 12 184 3 (set (pc)
        (label_ref 174)) "fs/bitmap.c":145:16 807 {jump}
     (nil)
 -> 174)
(barrier 184 183 15)
(code_label 15 184 16 4 36 (nil) [1 uses])
(note 16 15 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 4 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":146:16 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 18 17 20 4 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [13  S4 A32])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 60 [0x3c])) [13 dev+0 S4 A32])) "fs/bitmap.c":146:16 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 20 18 21 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("get_super") [flags 0x41]  <function_decl 0x7b9e2650e000 get_super>) [0 get_super S1 A8])
            (const_int 16 [0x10]))) "fs/bitmap.c":146:16 823 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 21 20 23 4 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":146:16 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 23 21 24 4 (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [19 sb+0 S4 A32])
        (reg:SI 0 ax [112])) "fs/bitmap.c":146:16 75 {*movsi_internal}
     (nil))
(insn 24 23 25 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 12 [0xc])) [19 sb+0 S4 A32])
            (const_int 0 [0]))) "fs/bitmap.c":146:8 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 25 24 26 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 33)
            (pc))) "fs/bitmap.c":146:8 806 {*jcc}
     (nil)
 -> 33)
(note 26 25 27 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 27 26 28 5 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":147:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 28 27 29 5 (set (reg/f:SI 0 ax [113])
        (plus:SI (reg:SI 3 bx [82])
            (const:SI (unspec:SI [
                        (symbol_ref/f:SI ("*.LC16") [flags 0x2]  <var_decl 0x7b9e26547f30 *.LC16>)
                    ] UNSPEC_GOTOFF)))) "fs/bitmap.c":147:9 205 {*leasi}
     (expr_list:REG_EQUAL (symbol_ref/f:SI ("*.LC16") [flags 0x2]  <var_decl 0x7b9e26547f30 *.LC16>)
        (nil)))
(insn 29 28 31 5 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (reg/f:SI 0 ax [113])) "fs/bitmap.c":147:9 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 31 29 32 5 (call (mem:QI (symbol_ref:SI ("panic") [flags 0x41]  <function_decl 0x7b9e26510b00 panic>) [0 panic S1 A8])
        (const_int 16 [0x10])) "fs/bitmap.c":147:9 812 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 32 31 33 5 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":147:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(code_label 33 32 34 6 38 (nil) [1 uses])
(note 34 33 35 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 35 34 36 6 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [13 j+0 S4 A32])
        (const_int 8192 [0x2000])) "fs/bitmap.c":148:7 75 {*movsi_internal}
     (nil))
(insn 36 35 185 6 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [13 i+0 S4 A32])
        (const_int 0 [0])) "fs/bitmap.c":149:12 75 {*movsi_internal}
     (nil))
(jump_insn 185 36 186 6 (set (pc)
        (label_ref 65)) "fs/bitmap.c":149:5 807 {jump}
     (nil)
 -> 65)
(barrier 186 185 67)
(code_label 67 186 39 7 42 (nil) [1 uses])
(note 39 67 40 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 40 39 41 7 (set (reg/f:SI 0 ax [114])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [19 sb+0 S4 A32])) "fs/bitmap.c":150:17 75 {*movsi_internal}
     (nil))
(insn 41 40 42 7 (set (reg:SI 1 dx [116])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [13 i+0 S4 A32])) "fs/bitmap.c":150:17 75 {*movsi_internal}
     (nil))
(insn 42 41 43 7 (parallel [
            (set (reg:SI 1 dx [115])
                (plus:SI (reg:SI 1 dx [116])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":150:17 209 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:SI (reg/f:SI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [13 i+0 S4 A32])
            (const_int 4 [0x4]))
        (nil)))
(insn 43 42 44 7 (set (reg/f:SI 0 ax [117])
        (mem/f:SI (plus:SI (plus:SI (mult:SI (reg:SI 1 dx [115])
                        (const_int 4 [0x4]))
                    (reg/f:SI 0 ax [114]))
                (const_int 4 [0x4])) [6 sb_39->s_imap[i_26]+0 S4 A32])) "fs/bitmap.c":150:17 75 {*movsi_internal}
     (nil))
(insn 44 43 45 7 (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [6 bh+0 S4 A32])
        (reg/f:SI 0 ax [117])) "fs/bitmap.c":150:17 75 {*movsi_internal}
     (nil))
(insn 45 44 46 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 28 [0x1c])) [6 bh+0 S4 A32])
            (const_int 0 [0]))) "fs/bitmap.c":150:12 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 46 45 47 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 62)
            (pc))) "fs/bitmap.c":150:12 806 {*jcc}
     (nil)
 -> 62)
(note 47 46 48 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 48 47 49 8 (set (reg/f:SI 0 ax [118])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [6 bh+0 S4 A32])) "fs/bitmap.c":151:22 75 {*movsi_internal}
     (nil))
(insn 49 48 51 8 (set (reg/f:SI 0 ax [orig:83 _1 ] [83])
        (mem/f:SI (reg/f:SI 0 ax [118]) [2 bh_44->b_data+0 S4 A32])) "fs/bitmap.c":151:22 75 {*movsi_internal}
     (nil))
(insn 51 49 199 8 (set (reg:SI 1 dx [120])
        (const_int 0 [0])) "fs/bitmap.c":151:22 75 {*movsi_internal}
     (nil))
(insn 199 51 200 8 (set (reg:SI 2 cx [120])
        (reg:SI 1 dx [120])) "fs/bitmap.c":151:22 75 {*movsi_internal}
     (nil))
(insn 200 199 52 8 (set (reg/f:SI 4 si [orig:83 _1 ] [83])
        (reg/f:SI 0 ax [orig:83 _1 ] [83])) "fs/bitmap.c":151:22 75 {*movsi_internal}
     (nil))
(insn 52 200 198 8 (parallel [
            (set (reg:SI 2 cx [orig:119 __res ] [119])
                (asm_operands/v:SI ("cld
1:	lodsl
	notl %%eax
	bsfl %%eax, %%edx
	je 2f
	addl %%edx, %%ecx
	jmp 3f
2:	addl $32, %%ecx
	cmpl $8192, %%ecx
	jl 1b
3:") ("=c") 0 [
                        (reg:SI 2 cx [120])
                        (reg/f:SI 4 si [orig:83 _1 ] [83])
                    ]
                     [
                        (asm_input:SI ("c") fs/bitmap.c:151)
                        (asm_input:SI ("S") fs/bitmap.c:151)
                    ]
                     [] fs/bitmap.c:151))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":151:22 -1
     (nil))
(insn 198 52 50 8 (set (reg:SI 0 ax [orig:119 __res ] [119])
        (reg:SI 2 cx [orig:119 __res ] [119])) "fs/bitmap.c":151:22 75 {*movsi_internal}
     (nil))
(insn 50 198 53 8 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [13 __res+0 S4 A32])
        (reg:SI 0 ax [orig:119 __res ] [119])) "fs/bitmap.c":151:22 75 {*movsi_internal}
     (nil))
(insn 53 50 54 8 (set (reg:SI 0 ax [orig:107 _46 ] [107])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [13 __res+0 S4 A32])) "fs/bitmap.c":151:22 75 {*movsi_internal}
     (nil))
(insn 54 53 57 8 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [13 j+0 S4 A32])
        (reg:SI 0 ax [orig:107 _46 ] [107])) "fs/bitmap.c":151:20 75 {*movsi_internal}
     (nil))
(insn 57 54 58 8 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 20 [0x14])) [13 j+0 S4 A32])
            (const_int 8191 [0x1fff]))) "fs/bitmap.c":151:16 11 {*cmpsi_1}
     (nil))
(jump_insn 58 57 62 8 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 193)
            (pc))) "fs/bitmap.c":151:16 806 {*jcc}
     (nil)
 -> 193)
(code_label 62 58 63 9 40 (nil) [1 uses])
(note 63 62 64 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 64 63 65 9 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 24 [0x18])) [13 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 24 [0x18])) [13 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":149:25 209 {*addsi_1}
     (nil))
(code_label 65 64 66 10 39 (nil) [1 uses])
(note 66 65 70 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 70 66 71 10 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 24 [0x18])) [13 i+0 S4 A32])
            (const_int 7 [0x7]))) "fs/bitmap.c":149:19 11 {*cmpsi_1}
     (nil))
(jump_insn 71 70 189 10 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 67)
            (pc))) "fs/bitmap.c":149:19 806 {*jcc}
     (nil)
 -> 67)
(note 189 71 190 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(jump_insn 190 189 191 19 (set (pc)
        (label_ref 72)) 807 {jump}
     (nil)
 -> 72)
(barrier 191 190 193)
(code_label 193 191 192 20 46 (nil) [1 uses])
(note 192 193 194 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 194 192 72 20 (const_int 0 [0]) "fs/bitmap.c":152:17 843 {nop}
     (nil))
(code_label 72 194 73 11 41 (nil) [1 uses])
(note 73 72 74 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 74 73 75 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 28 [0x1c])) [6 bh+0 S4 A32])
            (const_int 0 [0]))) "fs/bitmap.c":153:8 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 75 74 76 11 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 91)
            (pc))) "fs/bitmap.c":153:8 806 {*jcc}
     (nil)
 -> 91)
(note 76 75 79 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 79 76 80 12 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 20 [0x14])) [13 j+0 S4 A32])
            (const_int 8191 [0x1fff]))) "fs/bitmap.c":153:13 11 {*cmpsi_1}
     (nil))
(jump_insn 80 79 81 12 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 91)
            (pc))) "fs/bitmap.c":153:13 806 {*jcc}
     (nil)
 -> 91)
(note 81 80 82 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 82 81 83 13 (set (reg:SI 0 ax [121])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [13 i+0 S4 A32])) "fs/bitmap.c":153:35 75 {*movsi_internal}
     (nil))
(insn 83 82 202 13 (parallel [
            (set (reg:SI 0 ax [121])
                (ashift:SI (reg:SI 0 ax [121])
                    (const_int 13 [0xd])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":153:35 655 {*ashlsi3_1}
     (expr_list:REG_EQUAL (ashift:SI (mem/c:SI (plus:SI (reg/f:SI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [13 i+0 S4 A32])
            (const_int 13 [0xd]))
        (nil)))
(insn 202 83 84 13 (set (reg:SI 1 dx [orig:84 _2 ] [84])
        (reg:SI 0 ax [121])) "fs/bitmap.c":153:35 75 {*movsi_internal}
     (nil))
(insn 84 202 85 13 (set (reg:SI 0 ax [122])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [13 j+0 S4 A32])) "fs/bitmap.c":153:31 75 {*movsi_internal}
     (nil))
(insn 85 84 86 13 (parallel [
            (set (reg:SI 1 dx [orig:85 _3 ] [85])
                (plus:SI (reg:SI 1 dx [orig:84 _2 ] [84])
                    (reg:SI 0 ax [122])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":153:31 209 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 1 dx [orig:84 _2 ] [84])
            (mem/c:SI (plus:SI (reg/f:SI 19 frame)
                    (const_int -12 [0xfffffffffffffff4])) [13 j+0 S4 A32]))
        (nil)))
(insn 86 85 87 13 (set (reg/f:SI 0 ax [123])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [19 sb+0 S4 A32])) "fs/bitmap.c":153:46 75 {*movsi_internal}
     (nil))
(insn 87 86 88 13 (set (reg:HI 0 ax [orig:86 _4 ] [86])
        (mem:HI (reg/f:SI 0 ax [123]) [4 sb_39->s_ninodes+0 S2 A32])) "fs/bitmap.c":153:46 76 {*movhi_internal}
     (nil))
(insn 88 87 89 13 (set (reg:SI 0 ax [orig:87 _5 ] [87])
        (zero_extend:SI (reg:HI 0 ax [orig:86 _4 ] [86]))) "fs/bitmap.c":153:46 144 {*zero_extendhisi2}
     (nil))
(insn 89 88 90 13 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 1 dx [orig:85 _3 ] [85])
            (reg:SI 0 ax [orig:87 _5 ] [87]))) "fs/bitmap.c":153:26 11 {*cmpsi_1}
     (nil))
(jump_insn 90 89 91 13 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 101)
            (pc))) "fs/bitmap.c":153:26 806 {*jcc}
     (nil)
 -> 101)
(code_label 91 90 92 14 43 (nil) [2 uses])
(note 92 91 93 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 93 92 94 14 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":154:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 94 93 96 14 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [8  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [8 inode+0 S4 A32])) "fs/bitmap.c":154:9 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 96 94 97 14 (call (mem:QI (symbol_ref:SI ("iput") [flags 0x41]  <function_decl 0x7b9e264d2d00 iput>) [0 iput S1 A8])
        (const_int 16 [0x10])) "fs/bitmap.c":154:9 812 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 97 96 98 14 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":154:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 98 97 187 14 (set (reg/f:SI 0 ax [orig:106 _30 ] [106])
        (const_int 0 [0])) "fs/bitmap.c":155:16 75 {*movsi_internal}
     (nil))
(jump_insn 187 98 188 14 (set (pc)
        (label_ref 174)) "fs/bitmap.c":155:16 807 {jump}
     (nil)
 -> 174)
(barrier 188 187 101)
(code_label 101 188 102 15 44 (nil) [1 uses])
(note 102 101 103 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 103 102 104 15 (set (reg/f:SI 0 ax [124])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [6 bh+0 S4 A32])) "fs/bitmap.c":157:9 75 {*movsi_internal}
     (nil))
(insn 104 103 106 15 (set (reg/f:SI 2 cx [orig:88 _6 ] [88])
        (mem/f:SI (reg/f:SI 0 ax [124]) [2 bh_25->b_data+0 S4 A32])) "fs/bitmap.c":157:9 75 {*movsi_internal}
     (nil))
(insn 106 104 107 15 (set (reg:SI 0 ax [126])
        (const_int 0 [0])) "fs/bitmap.c":157:9 75 {*movsi_internal}
     (nil))
(insn 107 106 108 15 (set (reg:SI 1 dx [127])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [13 j+0 S4 A32])) "fs/bitmap.c":157:9 75 {*movsi_internal}
     (nil))
(insn 108 107 105 15 (parallel [
            (set (reg:SI 0 ax [orig:125 res ] [125])
                (asm_operands/v:SI ("btsl %2,%3
	setb %%al") ("=a") 0 [
                        (reg:SI 0 ax [orig:125 res ] [125])
                        (reg:SI 1 dx [127])
                        (mem:QI (reg/f:SI 2 cx [orig:88 _6 ] [88]) [0 *_6+0 S1 A8])
                    ]
                     [
                        (asm_input:SI ("0") fs/bitmap.c:157)
                        (asm_input:SI ("r") fs/bitmap.c:157)
                        (asm_input:QI ("m") fs/bitmap.c:157)
                    ]
                     [] fs/bitmap.c:157))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":157:9 -1
     (nil))
(insn 105 108 109 15 (set (reg/v:SI 4 si [orig:108 res ] [108])
        (reg:SI 0 ax [orig:125 res ] [125])) "fs/bitmap.c":157:9 75 {*movsi_internal}
     (nil))
(insn 109 105 110 15 (set (reg:SI 0 ax [orig:109 _50 ] [109])
        (reg/v:SI 4 si [orig:108 res ] [108])) "fs/bitmap.c":157:9 75 {*movsi_internal}
     (nil))
(insn 110 109 111 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:109 _50 ] [109])
            (const_int 0 [0]))) "fs/bitmap.c":157:8 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 111 110 112 15 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 119)
            (pc))) "fs/bitmap.c":157:8 806 {*jcc}
     (nil)
 -> 119)
(note 112 111 113 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 113 112 114 16 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":158:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 114 113 115 16 (set (reg/f:SI 0 ax [128])
        (plus:SI (reg:SI 3 bx [82])
            (const:SI (unspec:SI [
                        (symbol_ref/f:SI ("*.LC17") [flags 0x2]  <var_decl 0x7b9e265972d0 *.LC17>)
                    ] UNSPEC_GOTOFF)))) "fs/bitmap.c":158:9 205 {*leasi}
     (expr_list:REG_EQUAL (symbol_ref/f:SI ("*.LC17") [flags 0x2]  <var_decl 0x7b9e265972d0 *.LC17>)
        (nil)))
(insn 115 114 117 16 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (reg/f:SI 0 ax [128])) "fs/bitmap.c":158:9 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 117 115 118 16 (call (mem:QI (symbol_ref:SI ("panic") [flags 0x41]  <function_decl 0x7b9e26510b00 panic>) [0 panic S1 A8])
        (const_int 16 [0x10])) "fs/bitmap.c":158:9 812 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 118 117 119 16 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":158:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(code_label 119 118 120 17 45 (nil) [1 uses])
(note 120 119 121 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 121 120 122 17 (set (reg/f:SI 0 ax [129])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [6 bh+0 S4 A32])) "fs/bitmap.c":159:16 75 {*movsi_internal}
     (nil))
(insn 122 121 123 17 (set (mem:QI (plus:SI (reg/f:SI 0 ax [129])
                (const_int 11 [0xb])) [0 bh_25->b_dirt+0 S1 A8])
        (const_int 1 [0x1])) "fs/bitmap.c":159:16 77 {*movqi_internal}
     (nil))
(insn 123 122 124 17 (set (reg/f:SI 0 ax [130])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [8 inode+0 S4 A32])) "fs/bitmap.c":160:20 75 {*movsi_internal}
     (nil))
(insn 124 123 125 17 (set (mem:HI (plus:SI (reg/f:SI 0 ax [130])
                (const_int 48 [0x30])) [4 inode_36->i_count+0 S2 A32])
        (const_int 1 [0x1])) "fs/bitmap.c":160:20 76 {*movhi_internal}
     (nil))
(insn 125 124 126 17 (set (reg/f:SI 0 ax [131])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [8 inode+0 S4 A32])) "fs/bitmap.c":161:21 75 {*movsi_internal}
     (nil))
(insn 126 125 127 17 (set (mem:QI (plus:SI (reg/f:SI 0 ax [131])
                (const_int 13 [0xd])) [0 inode_36->i_nlinks+0 S1 A8])
        (const_int 1 [0x1])) "fs/bitmap.c":161:21 77 {*movqi_internal}
     (nil))
(insn 127 126 128 17 (set (reg:SI 0 ax [132])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 48 [0x30])) [13 dev+0 S4 A32])) "fs/bitmap.c":162:18 75 {*movsi_internal}
     (nil))
(insn 128 127 129 17 (set (reg:HI 1 dx [orig:89 _7 ] [89])
        (reg:HI 0 ax [132])) "fs/bitmap.c":162:18 76 {*movhi_internal}
     (nil))
(insn 129 128 130 17 (set (reg/f:SI 0 ax [133])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [8 inode+0 S4 A32])) "fs/bitmap.c":162:18 75 {*movsi_internal}
     (nil))
(insn 130 129 131 17 (set (mem:HI (plus:SI (reg/f:SI 0 ax [133])
                (const_int 44 [0x2c])) [4 inode_36->i_dev+0 S2 A32])
        (reg:HI 1 dx [orig:89 _7 ] [89])) "fs/bitmap.c":162:18 76 {*movhi_internal}
     (nil))
(insn 131 130 132 17 (set (reg/f:SI 0 ax [134])
        (mem/u/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x40]  <var_decl 0x7b9e2652f120 current>)
                        ] UNSPEC_GOT))) [20  S4 A8])) "fs/bitmap.c":163:27 75 {*movsi_internal}
     (nil))
(insn 132 131 133 17 (set (reg/f:SI 0 ax [orig:90 current.0_8 ] [90])
        (mem/f/c:SI (reg/f:SI 0 ax [134]) [5 current+0 S4 A32])) "fs/bitmap.c":163:27 75 {*movsi_internal}
     (nil))
(insn 133 132 134 17 (set (reg:HI 1 dx [orig:91 _9 ] [91])
        (mem:HI (plus:SI (reg/f:SI 0 ax [orig:90 current.0_8 ] [90])
                (const_int 578 [0x242])) [4 current.0_8->euid+0 S2 A16])) "fs/bitmap.c":163:27 76 {*movhi_internal}
     (nil))
(insn 134 133 135 17 (set (reg/f:SI 0 ax [135])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [8 inode+0 S4 A32])) "fs/bitmap.c":163:18 75 {*movsi_internal}
     (nil))
(insn 135 134 136 17 (set (mem:HI (plus:SI (reg/f:SI 0 ax [135])
                (const_int 2 [0x2])) [4 inode_36->i_uid+0 S2 A16])
        (reg:HI 1 dx [orig:91 _9 ] [91])) "fs/bitmap.c":163:18 76 {*movhi_internal}
     (nil))
(insn 136 135 137 17 (set (reg/f:SI 0 ax [136])
        (mem/u/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x40]  <var_decl 0x7b9e2652f120 current>)
                        ] UNSPEC_GOT))) [20  S4 A8])) "fs/bitmap.c":164:27 75 {*movsi_internal}
     (nil))
(insn 137 136 138 17 (set (reg/f:SI 0 ax [orig:92 current.1_10 ] [92])
        (mem/f/c:SI (reg/f:SI 0 ax [136]) [5 current+0 S4 A32])) "fs/bitmap.c":164:27 75 {*movsi_internal}
     (nil))
(insn 138 137 139 17 (set (reg:HI 0 ax [orig:93 _11 ] [93])
        (mem:HI (plus:SI (reg/f:SI 0 ax [orig:92 current.1_10 ] [92])
                (const_int 584 [0x248])) [4 current.1_10->egid+0 S2 A32])) "fs/bitmap.c":164:27 76 {*movhi_internal}
     (nil))
(insn 139 138 140 17 (set (reg:QI 1 dx [orig:94 _12 ] [94])
        (reg:QI 0 ax [orig:93 _11 ] [93])) "fs/bitmap.c":164:18 77 {*movqi_internal}
     (nil))
(insn 140 139 141 17 (set (reg/f:SI 0 ax [137])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [8 inode+0 S4 A32])) "fs/bitmap.c":164:18 75 {*movsi_internal}
     (nil))
(insn 141 140 142 17 (set (mem:QI (plus:SI (reg/f:SI 0 ax [137])
                (const_int 12 [0xc])) [0 inode_36->i_gid+0 S1 A32])
        (reg:QI 1 dx [orig:94 _12 ] [94])) "fs/bitmap.c":164:18 77 {*movqi_internal}
     (nil))
(insn 142 141 143 17 (set (reg/f:SI 0 ax [138])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [8 inode+0 S4 A32])) "fs/bitmap.c":165:19 75 {*movsi_internal}
     (nil))
(insn 143 142 144 17 (set (mem:QI (plus:SI (reg/f:SI 0 ax [138])
                (const_int 51 [0x33])) [0 inode_36->i_dirt+0 S1 A8])
        (const_int 1 [0x1])) "fs/bitmap.c":165:19 77 {*movqi_internal}
     (nil))
(insn 144 143 146 17 (set (reg:SI 0 ax [139])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [13 i+0 S4 A32])) "fs/bitmap.c":166:22 75 {*movsi_internal}
     (nil))
(insn 146 144 204 17 (parallel [
            (set (reg:HI 0 ax [orig:95 _13 ] [95])
                (ashift:HI (reg:HI 0 ax [orig:95 _13 ] [95])
                    (const_int 13 [0xd])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":166:22 659 {*ashlhi3_1}
     (nil))
(insn 204 146 147 17 (set (reg:HI 1 dx [orig:96 _14 ] [96])
        (reg:HI 0 ax [orig:95 _13 ] [95])) "fs/bitmap.c":166:22 76 {*movhi_internal}
     (nil))
(insn 147 204 149 17 (set (reg:SI 0 ax [140])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [13 j+0 S4 A32])) "fs/bitmap.c":166:22 75 {*movsi_internal}
     (nil))
(insn 149 147 150 17 (parallel [
            (set (reg:HI 1 dx [orig:98 _16 ] [98])
                (plus:HI (reg:HI 1 dx [orig:96 _14 ] [96])
                    (reg:HI 0 ax [orig:97 _15 ] [97])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":166:22 212 {*addhi_1}
     (nil))
(insn 150 149 151 17 (set (reg/f:SI 0 ax [141])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [8 inode+0 S4 A32])) "fs/bitmap.c":166:18 75 {*movsi_internal}
     (nil))
(insn 151 150 152 17 (set (mem:HI (plus:SI (reg/f:SI 0 ax [141])
                (const_int 46 [0x2e])) [4 inode_36->i_num+0 S2 A16])
        (reg:HI 1 dx [orig:98 _16 ] [98])) "fs/bitmap.c":166:18 76 {*movhi_internal}
     (nil))
(insn 152 151 153 17 (set (reg/f:SI 0 ax [142])
        (mem/u/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("jiffies") [flags 0x40]  <var_decl 0x7b9e2652f360 jiffies>)
                        ] UNSPEC_GOT))) [20  S4 A8])) "fs/bitmap.c":167:56 75 {*movsi_internal}
     (nil))
(insn 153 152 154 17 (set (reg:SI 2 cx [orig:99 jiffies.2_17 ] [99])
        (mem/v/c:SI (reg/f:SI 0 ax [142]) [3 jiffies+0 S4 A32])) "fs/bitmap.c":167:56 75 {*movsi_internal}
     (nil))
(insn 154 153 205 17 (set (reg:SI 1 dx [144])
        (const_int 1374389535 [0x51eb851f])) "fs/bitmap.c":167:56 75 {*movsi_internal}
     (nil))
(insn 205 154 155 17 (set (reg:SI 0 ax [154])
        (reg:SI 2 cx [orig:99 jiffies.2_17 ] [99])) "fs/bitmap.c":167:56 75 {*movsi_internal}
     (nil))
(insn 155 205 206 17 (parallel [
            (set (reg:SI 1 dx [143])
                (truncate:SI (lshiftrt:DI (mult:DI (sign_extend:DI (reg:SI 0 ax [154]))
                            (sign_extend:DI (reg:SI 1 dx [144])))
                        (const_int 32 [0x20]))))
            (clobber (reg:SI 0 ax [154]))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":167:56 435 {*smulsi3_highpart_1}
     (nil))
(insn 206 155 156 17 (set (reg:SI 0 ax [143])
        (reg:SI 1 dx [143])) "fs/bitmap.c":167:56 75 {*movsi_internal}
     (nil))
(insn 156 206 157 17 (parallel [
            (set (reg:SI 0 ax [143])
                (ashiftrt:SI (reg:SI 0 ax [143])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":167:56 702 {*ashrsi3_1}
     (nil))
(insn 157 156 158 17 (parallel [
            (set (reg:SI 2 cx [146])
                (ashiftrt:SI (reg:SI 2 cx [orig:99 jiffies.2_17 ] [99])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":167:56 694 {ashrsi3_cvt}
     (nil))
(insn 158 157 209 17 (parallel [
            (set (reg:SI 0 ax [145])
                (minus:SI (reg:SI 0 ax [145])
                    (reg:SI 2 cx [146])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":167:56 282 {*subsi_1}
     (nil))
(insn 209 158 159 17 (set (reg:SI 1 dx [orig:100 _18 ] [100])
        (reg:SI 0 ax [145])) "fs/bitmap.c":167:56 75 {*movsi_internal}
     (nil))
(insn 159 209 160 17 (set (reg/f:SI 0 ax [147])
        (mem/u/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("startup_time") [flags 0x40]  <var_decl 0x7b9e2652f3f0 startup_time>)
                        ] UNSPEC_GOT))) [20  S4 A8])) "fs/bitmap.c":167:56 75 {*movsi_internal}
     (nil))
(insn 160 159 161 17 (set (reg:SI 0 ax [orig:101 startup_time.3_19 ] [101])
        (mem/c:SI (reg/f:SI 0 ax [147]) [3 startup_time+0 S4 A32])) "fs/bitmap.c":167:56 75 {*movsi_internal}
     (nil))
(insn 161 160 162 17 (parallel [
            (set (reg:SI 0 ax [orig:102 _20 ] [102])
                (plus:SI (reg:SI 0 ax [orig:101 startup_time.3_19 ] [101])
                    (reg:SI 1 dx [orig:100 _18 ] [100])))
            (clobber (reg:CC 17 flags))
        ]) "fs/bitmap.c":167:56 209 {*addsi_1}
     (nil))
(insn 162 161 163 17 (set (reg:SI 1 dx [orig:103 _21 ] [103])
        (reg:SI 0 ax [orig:102 _20 ] [102])) "fs/bitmap.c":167:56 75 {*movsi_internal}
     (nil))
(insn 163 162 164 17 (set (reg/f:SI 0 ax [148])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [8 inode+0 S4 A32])) "fs/bitmap.c":167:54 75 {*movsi_internal}
     (nil))
(insn 164 163 165 17 (set (mem:SI (plus:SI (reg/f:SI 0 ax [148])
                (const_int 40 [0x28])) [3 inode_36->i_ctime+0 S4 A32])
        (reg:SI 1 dx [orig:103 _21 ] [103])) "fs/bitmap.c":167:54 75 {*movsi_internal}
     (nil))
(insn 165 164 166 17 (set (reg/f:SI 0 ax [149])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [8 inode+0 S4 A32])) "fs/bitmap.c":167:44 75 {*movsi_internal}
     (nil))
(insn 166 165 167 17 (set (reg:SI 1 dx [orig:104 _22 ] [104])
        (mem:SI (plus:SI (reg/f:SI 0 ax [149])
                (const_int 40 [0x28])) [3 inode_36->i_ctime+0 S4 A32])) "fs/bitmap.c":167:44 75 {*movsi_internal}
     (nil))
(insn 167 166 168 17 (set (reg/f:SI 0 ax [150])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [8 inode+0 S4 A32])) "fs/bitmap.c":167:37 75 {*movsi_internal}
     (nil))
(insn 168 167 169 17 (set (mem:SI (plus:SI (reg/f:SI 0 ax [150])
                (const_int 36 [0x24])) [3 inode_36->i_atime+0 S4 A32])
        (reg:SI 1 dx [orig:104 _22 ] [104])) "fs/bitmap.c":167:37 75 {*movsi_internal}
     (nil))
(insn 169 168 170 17 (set (reg/f:SI 0 ax [151])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [8 inode+0 S4 A32])) "fs/bitmap.c":167:27 75 {*movsi_internal}
     (nil))
(insn 170 169 171 17 (set (reg:SI 1 dx [orig:105 _23 ] [105])
        (mem:SI (plus:SI (reg/f:SI 0 ax [151])
                (const_int 36 [0x24])) [3 inode_36->i_atime+0 S4 A32])) "fs/bitmap.c":167:27 75 {*movsi_internal}
     (nil))
(insn 171 170 172 17 (set (reg/f:SI 0 ax [152])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [8 inode+0 S4 A32])) "fs/bitmap.c":167:20 75 {*movsi_internal}
     (nil))
(insn 172 171 173 17 (set (mem:SI (plus:SI (reg/f:SI 0 ax [152])
                (const_int 8 [0x8])) [3 inode_36->i_mtime+0 S4 A32])
        (reg:SI 1 dx [orig:105 _23 ] [105])) "fs/bitmap.c":167:20 75 {*movsi_internal}
     (nil))
(insn 173 172 174 17 (set (reg/f:SI 0 ax [orig:106 _30 ] [106])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [8 inode+0 S4 A32])) "fs/bitmap.c":168:12 75 {*movsi_internal}
     (nil))
(code_label 174 173 175 18 37 (nil) [2 uses])
(note 175 174 181 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 181 175 197 18 (use (reg/i:SI 0 ax)) "fs/bitmap.c":169:1 -1
     (nil))
(note 197 181 0 NOTE_INSN_DELETED)
