
;; Function put_fs_byte (put_fs_byte, funcdef_no=2, decl_uid=1325, cgraph_uid=3, symbol_order=2)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=4, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 2:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 3:  (0) =Q  (1) Q {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=7,overall=27,losers=2 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 4:  (0) m  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 8:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) r  (1) m
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2 3

********** Pseudo live ranges #1: **********

  BB 3
   Insn 14: point = 0, n_alt = -1
  BB 2
   Insn 10: point = 0, n_alt = 0
   Insn 9: point = 1, n_alt = 0
   Insn 8: point = 2, n_alt = 4
   Insn 4: point = 3, n_alt = 8
   Insn 3: point = 4, n_alt = 0
   Insn 2: point = 6, n_alt = 0
   Insn 15: point = 7, n_alt = 0
 r82: [7..7]
 r83: [5..6]
 r84: [3..4]
 r85: [0..2]
 r86: [0..1]
Compressing live ranges: from 8 to 7 - 87%
Ranges after the compression:
 r82: [6..6]
 r83: [4..5]
 r84: [2..3]
 r85: [0..1]
 r86: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=8)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=4, prev_offset=4)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 15
changing reg in insn 2
changing reg in insn 3
changing reg in insn 4
changing reg in insn 8
changing reg in insn 10
changing reg in insn 9
changing reg in insn 10
deleting insn with uid = 3.
starting the processing of deferred insns
ending the processing of deferred insns


put_fs_byte

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 17 [flags]
;;  ref usage 	r0={4d,2u} r1={2d,1u} r2={1d} r7={1d,7u} r17={2d} 
;;    total ref usage 20{10d,10u,0e} in 7{7 regular + 0 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
(note 6 1 15 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 15 6 2 2 (parallel [
            (set (reg:SI 0 ax [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(insn 2 15 4 2 (set (reg:SI 0 ax [83])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 val+0 S4 A32])) "include/asm/segment.h":13:1 75 {*movsi_internal}
     (nil))
(insn 4 2 5 2 (set (mem/c:QI (reg/f:SI 7 sp) [0 val+0 S1 A32])
        (reg:QI 0 ax [84])) "include/asm/segment.h":13:1 77 {*movqi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:QI 0 ax [85])
        (mem/c:QI (reg/f:SI 7 sp) [0 val+0 S1 A32])) "include/asm/segment.h":14:5 77 {*movqi_internal}
     (nil))
(insn 9 8 10 2 (set (reg/f:SI 1 dx [86])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [6 addr+0 S4 A32])) "include/asm/segment.h":14:5 75 {*movsi_internal}
     (nil))
(insn 10 9 13 2 (parallel [
            (asm_operands/v ("movb %0, %%fs:%1") ("") 0 [
                    (reg:QI 0 ax [85])
                    (mem:QI (reg/f:SI 1 dx [86]) [0 *addr_3(D)+0 S1 A8])
                ]
                 [
                    (asm_input:QI ("r") include/asm/segment.h:14)
                    (asm_input:QI ("m") include/asm/segment.h:14)
                ]
                 [] include/asm/segment.h:14)
            (clobber (reg:CC 17 flags))
        ]) "include/asm/segment.h":14:5 -1
     (nil))
(note 13 10 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 16 3 (const_int 0 [0]) "include/asm/segment.h":15:1 843 {nop}
     (nil))
(note 16 14 0 NOTE_INSN_DELETED)

;; Function cp_stat (cp_stat, funcdef_no=8, decl_uid=1364, cgraph_uid=9, symbol_order=8)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=48, prev_offset=0)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 5:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 10:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 12:  (0) r  (1) rm {*movhi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) m  (1) rn {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 15:  (0) r  (1) rm {*movhi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 16:  (0) m  (1) rn {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 18:  (0) r  (1) rm {*movhi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 19:  (0) m  (1) rn {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 21:  (0) q  (1) m {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=7,overall=27,losers=2 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 22:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 24:  (0) r  (1) rm {*movhi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 25:  (0) m  (1) rn {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 27:  (0) q  (1) m {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=7,overall=27,losers=2 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 28:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 30:  (0) r  (1) rm {*movhi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 31:  (0) m  (1) rn {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 39:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 43:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 47:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 48:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=23,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 56:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 57
	 Choosing alt 0 in insn 57:  (0) =rm  (1) %0  (2) re {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 58:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 60:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 64:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 65:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) rm  (1) re {*cmpsi_1}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4 6 5 7

********** Pseudo live ranges #1: **********

  BB 7
   Insn 82: point = 0, n_alt = -1
  BB 5
  BB 6
   Insn 80: point = 0, n_alt = -1
  BB 4
   Insn 73: point = 0, n_alt = -1
   Insn 72: point = 0, n_alt = 0
   Insn 68: point = 1, n_alt = 0
  BB 2
   Insn 77: point = 2, n_alt = -1
   Insn 48: point = 2, n_alt = 1
   Insn 47: point = 2, n_alt = 1
   Insn 46: point = 3, n_alt = -2
   Insn 45: point = 5, n_alt = 0
   Insn 44: point = 7, n_alt = 0
   Insn 43: point = 8, n_alt = 1
   Insn 42: point = 9, n_alt = -2
   Insn 41: point = 11, n_alt = 0
   Insn 40: point = 13, n_alt = 0
   Insn 39: point = 14, n_alt = 1
   Insn 38: point = 15, n_alt = -2
   Insn 37: point = 17, n_alt = 0
   Insn 36: point = 19, n_alt = 0
   Insn 35: point = 20, n_alt = 1
   Insn 34: point = 21, n_alt = -2
   Insn 33: point = 23, n_alt = 0
   Insn 32: point = 25, n_alt = 0
   Insn 31: point = 26, n_alt = 3
   Insn 30: point = 27, n_alt = 2
   Insn 29: point = 29, n_alt = 0
   Insn 28: point = 30, n_alt = 8
   Insn 27: point = 31, n_alt = 4
   Insn 26: point = 33, n_alt = 0
   Insn 25: point = 34, n_alt = 3
   Insn 24: point = 35, n_alt = 2
   Insn 23: point = 37, n_alt = 0
   Insn 22: point = 38, n_alt = 8
   Insn 21: point = 39, n_alt = 4
   Insn 20: point = 41, n_alt = 0
   Insn 19: point = 42, n_alt = 3
   Insn 18: point = 43, n_alt = 2
   Insn 17: point = 45, n_alt = 0
   Insn 16: point = 46, n_alt = 3
   Insn 15: point = 47, n_alt = 2
   Insn 14: point = 49, n_alt = 0
   Insn 13: point = 50, n_alt = 3
   Insn 12: point = 51, n_alt = 2
   Insn 11: point = 53, n_alt = 0
   Insn 10: point = 54, n_alt = 0
   Insn 9: point = 54, n_alt = 0
   Insn 8: point = 54, n_alt = -2
   Insn 7: point = 55, n_alt = 0
   Insn 6: point = 55, n_alt = 0
   Insn 5: point = 55, n_alt = 0
   Insn 83: point = 55, n_alt = 0
  BB 3
   Insn 65: point = 56, n_alt = 0
   Insn 64: point = 56, n_alt = 0
   Insn 63: point = 56, n_alt = 0
   Insn 62: point = 56, n_alt = 0
   Insn 61: point = 57, n_alt = 0
   Insn 60: point = 58, n_alt = 0
   Insn 59: point = 58, n_alt = 0
   Insn 58: point = 60, n_alt = 4
   Insn 57: point = 62, n_alt = 0
   Insn 56: point = 64, n_alt = 3
   Insn 55: point = 65, n_alt = 0
   Insn 54: point = 66, n_alt = 0
   Insn 53: point = 68, n_alt = 0
   Insn 52: point = 69, n_alt = 0
 r82: [54..55]
 r83: [50..51]
 r84: [46..47]
 r85: [42..43]
 r86: [38..39]
 r87: [34..35]
 r88: [30..31]
 r89: [26..27]
 r90: [22..23]
 r91: [20..21]
 r92: [16..17]
 r93: [14..15]
 r94: [10..11]
 r95: [8..9]
 r96: [4..5]
 r97: [2..3]
 r98: [67..69]
 r99: [57..66]
 r100: [63..65]
 r101: [61..62]
 r102: [59..60]
 r103: [56..58]
 r104: [0..1]
 r105: [52..53]
 r106: [48..49]
 r107: [44..45]
 r108: [40..41]
 r109: [36..37]
 r110: [32..33]
 r111: [28..29]
 r112: [24..25]
 r113: [18..19]
 r114: [12..13]
 r115: [6..7]
 r116: [67..68]
 r117: [63..64]
Compressing live ranges: from 70 to 66 - 94%
Ranges after the compression:
 r82: [54..55]
 r83: [50..51]
 r84: [46..47]
 r85: [42..43]
 r86: [38..39]
 r87: [34..35]
 r88: [30..31]
 r89: [26..27]
 r90: [22..23]
 r91: [20..21]
 r92: [16..17]
 r93: [14..15]
 r94: [10..11]
 r95: [8..9]
 r96: [4..5]
 r97: [2..3]
 r98: [64..65]
 r99: [56..63]
 r100: [62..63]
 r101: [60..61]
 r102: [58..59]
 r103: [56..57]
 r104: [0..1]
 r105: [52..53]
 r106: [48..49]
 r107: [44..45]
 r108: [40..41]
 r109: [36..37]
 r110: [32..33]
 r111: [28..29]
 r112: [24..25]
 r113: [18..19]
 r114: [12..13]
 r115: [6..7]
 r116: [64..65]
 r117: [62..63]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=64, prev_offset=64)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=48, prev_offset=48)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
changing reg in insn 83
changing reg in insn 8
changing reg in insn 12
changing reg in insn 13
changing reg in insn 15
changing reg in insn 16
changing reg in insn 18
changing reg in insn 19
changing reg in insn 21
changing reg in insn 22
changing reg in insn 24
changing reg in insn 25
changing reg in insn 27
changing reg in insn 28
changing reg in insn 30
changing reg in insn 31
changing reg in insn 33
changing reg in insn 34
changing reg in insn 34
changing reg in insn 35
changing reg in insn 37
changing reg in insn 38
changing reg in insn 38
changing reg in insn 39
changing reg in insn 41
changing reg in insn 42
changing reg in insn 42
changing reg in insn 43
changing reg in insn 45
changing reg in insn 46
changing reg in insn 46
changing reg in insn 47
changing reg in insn 52
changing reg in insn 54
changing reg in insn 54
changing reg in insn 54
changing reg in insn 61
changing reg in insn 55
changing reg in insn 57
changing reg in insn 58
changing reg in insn 58
changing reg in insn 59
changing reg in insn 59
changing reg in insn 62
changing reg in insn 68
changing reg in insn 72
changing reg in insn 11
changing reg in insn 12
changing reg in insn 14
changing reg in insn 15
changing reg in insn 17
changing reg in insn 18
changing reg in insn 20
changing reg in insn 21
changing reg in insn 23
changing reg in insn 24
changing reg in insn 26
changing reg in insn 27
changing reg in insn 29
changing reg in insn 30
changing reg in insn 32
changing reg in insn 33
changing reg in insn 36
changing reg in insn 37
changing reg in insn 40
changing reg in insn 41
changing reg in insn 44
changing reg in insn 45
changing reg in insn 53
changing reg in insn 54
changing reg in insn 56
deleting insn with uid = 34.
deleting insn with uid = 38.
deleting insn with uid = 42.
deleting insn with uid = 46.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 9.
verify found no changes in insn with uid = 63.


cp_stat

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 17 [flags]
;;  ref usage 	r0={32d,29u} r1={5d,2u,1e} r2={4d,1u} r3={1d,1u} r7={9d,52u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r16={1e} r17={12d,1u} r18={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} 
;;    total ref usage 281{193d,86u,2e} in 61{59 regular + 2 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 83 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 83 3 2 2 (parallel [
            (set (reg:SI 0 ax [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 83 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "fs/stat.c":21:5 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 6 5 7 2 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [7  S4 A32])
        (const_int 32 [0x20])) "fs/stat.c":21:5 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 7 6 8 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [9  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 80 [0x50])) [9 statbuf+0 S4 A32])) "fs/stat.c":21:5 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(insn 8 7 9 2 (set (reg:SI 3 bx)
        (reg:SI 0 ax [82])) "fs/stat.c":21:5 75 {*movsi_internal}
     (nil))
(call_insn 9 8 10 2 (call (mem:QI (symbol_ref:SI ("verify_area") [flags 0x41]  <function_decl 0x78974d738500 verify_area>) [0 verify_area S1 A8])
        (const_int 16 [0x10])) "fs/stat.c":21:5 812 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 10 9 11 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "fs/stat.c":21:5 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 11 10 12 2 (set (reg/f:SI 0 ax [105])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 64 [0x40])) [8 inode+0 S4 A32])) "fs/stat.c":22:23 75 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:HI 0 ax [orig:83 _1 ] [83])
        (mem:HI (plus:SI (reg/f:SI 0 ax [105])
                (const_int 44 [0x2c])) [2 inode_28(D)->i_dev+0 S2 A32])) "fs/stat.c":22:23 76 {*movhi_internal}
     (nil))
(insn 13 12 14 2 (set (mem/c:HI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [2 tmp.st_dev+0 S2 A32])
        (reg:HI 0 ax [orig:83 _1 ] [83])) "fs/stat.c":22:16 76 {*movhi_internal}
     (nil))
(insn 14 13 15 2 (set (reg/f:SI 0 ax [106])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 64 [0x40])) [8 inode+0 S4 A32])) "fs/stat.c":23:23 75 {*movsi_internal}
     (nil))
(insn 15 14 16 2 (set (reg:HI 0 ax [orig:84 _2 ] [84])
        (mem:HI (plus:SI (reg/f:SI 0 ax [106])
                (const_int 46 [0x2e])) [2 inode_28(D)->i_num+0 S2 A16])) "fs/stat.c":23:23 76 {*movhi_internal}
     (nil))
(insn 16 15 17 2 (set (mem/c:HI (plus:SI (reg/f:SI 7 sp)
                (const_int 14 [0xe])) [2 tmp.st_ino+0 S2 A16])
        (reg:HI 0 ax [orig:84 _2 ] [84])) "fs/stat.c":23:16 76 {*movhi_internal}
     (nil))
(insn 17 16 18 2 (set (reg/f:SI 0 ax [107])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 64 [0x40])) [8 inode+0 S4 A32])) "fs/stat.c":24:24 75 {*movsi_internal}
     (nil))
(insn 18 17 19 2 (set (reg:HI 0 ax [orig:85 _3 ] [85])
        (mem:HI (reg/f:SI 0 ax [107]) [2 inode_28(D)->i_mode+0 S2 A32])) "fs/stat.c":24:24 76 {*movhi_internal}
     (nil))
(insn 19 18 20 2 (set (mem/c:HI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [2 tmp.st_mode+0 S2 A32])
        (reg:HI 0 ax [orig:85 _3 ] [85])) "fs/stat.c":24:17 76 {*movhi_internal}
     (nil))
(insn 20 19 21 2 (set (reg/f:SI 0 ax [108])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 64 [0x40])) [8 inode+0 S4 A32])) "fs/stat.c":25:25 75 {*movsi_internal}
     (nil))
(insn 21 20 22 2 (set (reg:QI 0 ax [orig:86 _4 ] [86])
        (mem:QI (plus:SI (reg/f:SI 0 ax [108])
                (const_int 13 [0xd])) [0 inode_28(D)->i_nlinks+0 S1 A8])) "fs/stat.c":25:25 77 {*movqi_internal}
     (nil))
(insn 22 21 23 2 (set (mem/c:QI (plus:SI (reg/f:SI 7 sp)
                (const_int 18 [0x12])) [0 tmp.st_nlink+0 S1 A16])
        (reg:QI 0 ax [orig:86 _4 ] [86])) "fs/stat.c":25:18 77 {*movqi_internal}
     (nil))
(insn 23 22 24 2 (set (reg/f:SI 0 ax [109])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 64 [0x40])) [8 inode+0 S4 A32])) "fs/stat.c":26:23 75 {*movsi_internal}
     (nil))
(insn 24 23 25 2 (set (reg:HI 0 ax [orig:87 _5 ] [87])
        (mem:HI (plus:SI (reg/f:SI 0 ax [109])
                (const_int 2 [0x2])) [2 inode_28(D)->i_uid+0 S2 A16])) "fs/stat.c":26:23 76 {*movhi_internal}
     (nil))
(insn 25 24 26 2 (set (mem/c:HI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [2 tmp.st_uid+0 S2 A32])
        (reg:HI 0 ax [orig:87 _5 ] [87])) "fs/stat.c":26:16 76 {*movhi_internal}
     (nil))
(insn 26 25 27 2 (set (reg/f:SI 0 ax [110])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 64 [0x40])) [8 inode+0 S4 A32])) "fs/stat.c":27:23 75 {*movsi_internal}
     (nil))
(insn 27 26 28 2 (set (reg:QI 0 ax [orig:88 _6 ] [88])
        (mem:QI (plus:SI (reg/f:SI 0 ax [110])
                (const_int 12 [0xc])) [0 inode_28(D)->i_gid+0 S1 A32])) "fs/stat.c":27:23 77 {*movqi_internal}
     (nil))
(insn 28 27 29 2 (set (mem/c:QI (plus:SI (reg/f:SI 7 sp)
                (const_int 22 [0x16])) [0 tmp.st_gid+0 S1 A16])
        (reg:QI 0 ax [orig:88 _6 ] [88])) "fs/stat.c":27:16 77 {*movqi_internal}
     (nil))
(insn 29 28 30 2 (set (reg/f:SI 0 ax [111])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 64 [0x40])) [8 inode+0 S4 A32])) "fs/stat.c":28:32 75 {*movsi_internal}
     (nil))
(insn 30 29 31 2 (set (reg:HI 0 ax [orig:89 _7 ] [89])
        (mem:HI (plus:SI (reg/f:SI 0 ax [111])
                (const_int 14 [0xe])) [2 inode_28(D)->i_zone[0]+0 S2 A16])) "fs/stat.c":28:32 76 {*movhi_internal}
     (nil))
(insn 31 30 32 2 (set (mem/c:HI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [2 tmp.st_rdev+0 S2 A32])
        (reg:HI 0 ax [orig:89 _7 ] [89])) "fs/stat.c":28:17 76 {*movhi_internal}
     (nil))
(insn 32 31 33 2 (set (reg/f:SI 0 ax [112])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 64 [0x40])) [8 inode+0 S4 A32])) "fs/stat.c":29:24 75 {*movsi_internal}
     (nil))
(insn 33 32 35 2 (set (reg:SI 0 ax [orig:90 _8 ] [90])
        (mem:SI (plus:SI (reg/f:SI 0 ax [112])
                (const_int 4 [0x4])) [3 inode_28(D)->i_size+0 S4 A32])) "fs/stat.c":29:24 75 {*movsi_internal}
     (nil))
(insn 35 33 36 2 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [3 tmp.st_size+0 S4 A32])
        (reg:SI 0 ax [orig:91 _9 ] [91])) "fs/stat.c":29:17 75 {*movsi_internal}
     (nil))
(insn 36 35 37 2 (set (reg/f:SI 0 ax [113])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 64 [0x40])) [8 inode+0 S4 A32])) "fs/stat.c":30:25 75 {*movsi_internal}
     (nil))
(insn 37 36 39 2 (set (reg:SI 0 ax [orig:92 _10 ] [92])
        (mem:SI (plus:SI (reg/f:SI 0 ax [113])
                (const_int 36 [0x24])) [3 inode_28(D)->i_atime+0 S4 A32])) "fs/stat.c":30:25 75 {*movsi_internal}
     (nil))
(insn 39 37 40 2 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 32 [0x20])) [3 tmp.st_atime+0 S4 A32])
        (reg:SI 0 ax [orig:93 _11 ] [93])) "fs/stat.c":30:18 75 {*movsi_internal}
     (nil))
(insn 40 39 41 2 (set (reg/f:SI 0 ax [114])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 64 [0x40])) [8 inode+0 S4 A32])) "fs/stat.c":31:25 75 {*movsi_internal}
     (nil))
(insn 41 40 43 2 (set (reg:SI 0 ax [orig:94 _12 ] [94])
        (mem:SI (plus:SI (reg/f:SI 0 ax [114])
                (const_int 8 [0x8])) [3 inode_28(D)->i_mtime+0 S4 A32])) "fs/stat.c":31:25 75 {*movsi_internal}
     (nil))
(insn 43 41 44 2 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 36 [0x24])) [3 tmp.st_mtime+0 S4 A32])
        (reg:SI 0 ax [orig:95 _13 ] [95])) "fs/stat.c":31:18 75 {*movsi_internal}
     (nil))
(insn 44 43 45 2 (set (reg/f:SI 0 ax [115])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 64 [0x40])) [8 inode+0 S4 A32])) "fs/stat.c":32:25 75 {*movsi_internal}
     (nil))
(insn 45 44 47 2 (set (reg:SI 0 ax [orig:96 _14 ] [96])
        (mem:SI (plus:SI (reg/f:SI 0 ax [115])
                (const_int 40 [0x28])) [3 inode_28(D)->i_ctime+0 S4 A32])) "fs/stat.c":32:25 75 {*movsi_internal}
     (nil))
(insn 47 45 48 2 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 40 [0x28])) [3 tmp.st_ctime+0 S4 A32])
        (reg:SI 0 ax [orig:97 _15 ] [97])) "fs/stat.c":32:18 75 {*movsi_internal}
     (nil))
(insn 48 47 77 2 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 44 [0x2c])) [7 i+0 S4 A32])
        (const_int 0 [0])) "fs/stat.c":33:12 75 {*movsi_internal}
     (nil))
(jump_insn 77 48 78 2 (set (pc)
        (label_ref 66)) "fs/stat.c":33:5 807 {jump}
     (nil)
 -> 66)
(barrier 78 77 69)
(code_label 69 78 51 3 4 (nil) [1 uses])
(note 51 69 52 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 52 51 53 3 (set (reg:SI 1 dx [orig:98 i.0_16 ] [98])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 44 [0x2c])) [7 i+0 S4 A32])) "fs/stat.c":34:9 75 {*movsi_internal}
     (nil))
(insn 53 52 54 3 (set (reg/f:SI 0 ax [116])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 68 [0x44])) [9 statbuf+0 S4 A32])) "fs/stat.c":34:9 75 {*movsi_internal}
     (nil))
(insn 54 53 55 3 (parallel [
            (set (reg/f:SI 1 dx [orig:99 _17 ] [99])
                (plus:SI (reg:SI 1 dx [orig:98 i.0_16 ] [98])
                    (reg/f:SI 0 ax [116])))
            (clobber (reg:CC 17 flags))
        ]) "fs/stat.c":34:9 209 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 16 argp)
                    (const_int 4 [0x4])) [9 statbuf+0 S4 A32])
            (reg:SI 1 dx [orig:98 i.0_16 ] [98]))
        (nil)))
(insn 55 54 56 3 (set (reg:SI 0 ax [orig:100 i.1_18 ] [100])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 44 [0x2c])) [7 i+0 S4 A32])) "fs/stat.c":34:35 75 {*movsi_internal}
     (nil))
(insn 56 55 57 3 (parallel [
            (set (reg:SI 2 cx [117])
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) "fs/stat.c":34:35 209 {*addsi_1}
     (nil))
(insn 57 56 58 3 (parallel [
            (set (reg/f:SI 0 ax [orig:101 _19 ] [101])
                (plus:SI (reg:SI 0 ax [orig:100 i.1_18 ] [100])
                    (reg:SI 2 cx [117])))
            (clobber (reg:CC 17 flags))
        ]) "fs/stat.c":34:35 209 {*addsi_1}
     (nil))
(insn 58 57 59 3 (set (reg:QI 0 ax [orig:102 _20 ] [102])
        (mem:QI (reg/f:SI 0 ax [orig:101 _19 ] [101]) [0 *_19+0 S1 A8])) "fs/stat.c":34:35 77 {*movqi_internal}
     (nil))
(insn 59 58 60 3 (set (reg:SI 0 ax [orig:103 _21 ] [103])
        (sign_extend:SI (reg:QI 0 ax [orig:102 _20 ] [102]))) "fs/stat.c":34:9 153 {extendqisi2}
     (nil))
(insn 60 59 61 3 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "fs/stat.c":34:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 61 60 62 3 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [6  S4 A32])
        (reg/f:SI 1 dx [orig:99 _17 ] [99])) "fs/stat.c":34:9 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 62 61 63 3 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [7  S4 A32])
        (reg:SI 0 ax [orig:103 _21 ] [103])) "fs/stat.c":34:9 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 63 62 64 3 (call (mem:QI (symbol_ref:SI ("put_fs_byte") [flags 0x3]  <function_decl 0x78974d738a00 put_fs_byte>) [0 put_fs_byte S1 A8])
        (const_int 16 [0x10])) "fs/stat.c":34:9 812 {*call}
     (nil)
    (nil))
(insn 64 63 65 3 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "fs/stat.c":34:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 65 64 66 3 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 44 [0x2c])) [7 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 44 [0x2c])) [7 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "fs/stat.c":33:35 209 {*addsi_1}
     (nil))
(code_label 66 65 67 4 3 (nil) [1 uses])
(note 67 66 68 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 68 67 72 4 (set (reg:SI 0 ax [orig:104 i.2_22 ] [104])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 44 [0x2c])) [7 i+0 S4 A32])) "fs/stat.c":33:19 75 {*movsi_internal}
     (nil))
(insn 72 68 73 4 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 ax [orig:104 i.2_22 ] [104])
            (const_int 31 [0x1f]))) "fs/stat.c":33:19 11 {*cmpsi_1}
     (nil))
(jump_insn 73 72 79 4 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 69)
            (pc))) "fs/stat.c":33:19 806 {*jcc}
     (nil)
 -> 69)
(note 79 73 80 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 80 79 74 6 (const_int 0 [0]) "fs/stat.c":35:1 843 {nop}
     (nil))
(note 74 80 81 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(note 81 74 82 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 82 81 84 7 (const_int 0 [0]) "fs/stat.c":35:1 843 {nop}
     (nil))
(note 84 82 0 NOTE_INSN_DELETED)

;; Function sys_stat (sys_stat, funcdef_no=9, decl_uid=1374, cgraph_uid=10, symbol_order=9)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 5:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 9:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 20:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 24:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 25:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 29:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2 3
EBB 4
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 38: point = 0, n_alt = -1
   Insn 37: point = 0, n_alt = -2
   Insn 33: point = 1, n_alt = -2
  BB 3
   Insn 40: point = 4, n_alt = -1
   Insn 15: point = 4, n_alt = 0
  BB 4
   Insn 30: point = 5, n_alt = 0
   Insn 29: point = 6, n_alt = 0
   Insn 28: point = 6, n_alt = 0
   Insn 27: point = 6, n_alt = -2
   Insn 26: point = 7, n_alt = 0
   Insn 25: point = 7, n_alt = 0
   Insn 24: point = 7, n_alt = 0
   Insn 23: point = 7, n_alt = 0
   Insn 22: point = 7, n_alt = 0
   Insn 21: point = 7, n_alt = 0
   Insn 20: point = 7, n_alt = 0
  BB 2
   Insn 13: point = 8, n_alt = -1
   Insn 12: point = 8, n_alt = 1
   Insn 11: point = 8, n_alt = 1
   Insn 10: point = 9, n_alt = -2
   Insn 9: point = 10, n_alt = 0
   Insn 8: point = 10, n_alt = 0
   Insn 7: point = 10, n_alt = -2
   Insn 6: point = 10, n_alt = 0
   Insn 5: point = 10, n_alt = 0
   Insn 42: point = 10, n_alt = 0
 r82: [6..10]
 r83: [2..5]
 r84: [0..1]
 r85: [8..9]
Compressing live ranges: from 11 to 6 - 54%
Ranges after the compression:
 r82: [4..5]
 r83: [2..3]
 r84: [0..1]
 r85: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=32)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=16)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
changing reg in insn 42
changing reg in insn 27
changing reg in insn 7
changing reg in insn 30
changing reg in insn 15
changing reg in insn 33
changing reg in insn 33
changing reg in insn 37
changing reg in insn 10
changing reg in insn 11
deleting insn with uid = 7.
deleting insn with uid = 10.
deleting insn with uid = 27.
deleting insn with uid = 33.
deleting insn with uid = 37.
starting the processing of deferred insns
ending the processing of deferred insns


sys_stat

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0 [ax] 3 [bx] 7 [sp] 17 [flags]
;;  ref usage 	r0={6d,3u} r1={4d} r2={4d} r3={1d,2u} r7={11d,30u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={11d,1u} r18={3d} r20={3d} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} 
;;    total ref usage 268{232d,36u,0e} in 21{18 regular + 3 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 42 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 42 3 2 2 (parallel [
            (set (reg:SI 3 bx [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 42 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "fs/stat.c":41:19 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 6 5 8 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [6  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 44 [0x2c])) [6 filename+0 S4 A32])) "fs/stat.c":41:19 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 8 6 9 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("namei") [flags 0x41]  <function_decl 0x78974d715500 namei>) [0 namei S1 A8])
            (const_int 16 [0x10]))) "fs/stat.c":41:19 823 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 9 8 11 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "fs/stat.c":41:19 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 11 9 12 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [8 inode+0 S4 A32])
        (reg:SI 0 ax [85])) "fs/stat.c":41:19 75 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 12 [0xc])) [8 inode+0 S4 A32])
            (const_int 0 [0]))) "fs/stat.c":41:8 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 13 12 14 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 18)
            (pc))) "fs/stat.c":41:8 806 {*jcc}
     (nil)
 -> 18)
(note 14 13 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 40 3 (set (reg:SI 0 ax [orig:83 _1 ] [83])
        (const_int -2 [0xfffffffffffffffe])) "fs/stat.c":42:16 75 {*movsi_internal}
     (nil))
(jump_insn 40 15 41 3 (set (pc)
        (label_ref 31)) "fs/stat.c":42:16 807 {jump}
     (nil)
 -> 31)
(barrier 41 40 18)
(code_label 18 41 19 4 6 (nil) [1 uses])
(note 19 18 20 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 21 4 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "fs/stat.c":43:5 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 21 20 22 4 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [9  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 44 [0x2c])) [9 statbuf+0 S4 A32])) "fs/stat.c":43:5 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 22 21 23 4 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [8  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [8 inode+0 S4 A32])) "fs/stat.c":43:5 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 23 22 24 4 (call (mem:QI (symbol_ref:SI ("cp_stat") [flags 0x3]  <function_decl 0x78974d73a700 cp_stat>) [0 cp_stat S1 A8])
        (const_int 16 [0x10])) "fs/stat.c":43:5 812 {*call}
     (nil)
    (nil))
(insn 24 23 25 4 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "fs/stat.c":43:5 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 25 24 26 4 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "fs/stat.c":44:5 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 26 25 28 4 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [8  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [8 inode+0 S4 A32])) "fs/stat.c":44:5 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 28 26 29 4 (call (mem:QI (symbol_ref:SI ("iput") [flags 0x41]  <function_decl 0x78974d6d2d00 iput>) [0 iput S1 A8])
        (const_int 16 [0x10])) "fs/stat.c":44:5 812 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 29 28 30 4 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "fs/stat.c":44:5 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 30 29 31 4 (set (reg:SI 0 ax [orig:83 _1 ] [83])
        (const_int 0 [0])) "fs/stat.c":45:12 75 {*movsi_internal}
     (nil))
(code_label 31 30 32 5 7 (nil) [1 uses])
(note 32 31 38 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 38 32 43 5 (use (reg/i:SI 0 ax)) "fs/stat.c":46:1 -1
     (nil))
(note 43 38 0 NOTE_INSN_DELETED)

;; Function sys_fstat (sys_fstat, funcdef_no=10, decl_uid=1379, cgraph_uid=11, symbol_order=10)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 13:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 15:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 31:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 35:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2 3 4
EBB 5
EBB 6
EBB 7

********** Pseudo live ranges #1: **********

  BB 7
   Insn 44: point = 0, n_alt = -1
   Insn 43: point = 0, n_alt = -2
   Insn 39: point = 1, n_alt = -2
  BB 5
   Insn 46: point = 4, n_alt = -1
   Insn 26: point = 4, n_alt = 0
  BB 6
   Insn 36: point = 5, n_alt = 0
   Insn 35: point = 6, n_alt = 0
   Insn 34: point = 6, n_alt = 0
   Insn 33: point = 6, n_alt = 0
   Insn 32: point = 6, n_alt = 0
   Insn 31: point = 6, n_alt = 0
  BB 4
   Insn 23: point = 6, n_alt = -1
   Insn 22: point = 6, n_alt = 1
   Insn 21: point = 6, n_alt = 1
   Insn 20: point = 7, n_alt = 0
   Insn 19: point = 9, n_alt = 0
  BB 3
   Insn 17: point = 10, n_alt = -1
   Insn 16: point = 10, n_alt = 1
   Insn 15: point = 10, n_alt = 1
   Insn 14: point = 11, n_alt = 0
   Insn 13: point = 13, n_alt = 0
   Insn 12: point = 15, n_alt = 0
   Insn 11: point = 16, n_alt = 0
   Insn 10: point = 18, n_alt = 0
  BB 2
   Insn 8: point = 21, n_alt = -1
   Insn 7: point = 21, n_alt = 0
   Insn 48: point = 21, n_alt = 0
 r82: [19..21]
 r83: [12..16]
 r84: [2..5]
 r85: [0..1]
 r86: [17..18]
 r87: [12..13]
 r88: [14..15]
 r89: [10..11]
 r90: [8..9]
 r91: [6..7]
Compressing live ranges: from 22 to 18 - 81%
Ranges after the compression:
 r82: [16..17]
 r83: [10..13]
 r84: [2..3]
 r85: [0..1]
 r86: [14..15]
 r87: [10..11]
 r88: [12..13]
 r89: [8..9]
 r90: [6..7]
 r91: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=32)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=16)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
changing reg in insn 48
changing reg in insn 10
changing reg in insn 11
changing reg in insn 14
changing reg in insn 36
changing reg in insn 26
changing reg in insn 39
changing reg in insn 39
changing reg in insn 43
changing reg in insn 10
changing reg in insn 11
changing reg in insn 13
changing reg in insn 14
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 19
changing reg in insn 20
changing reg in insn 20
changing reg in insn 21
deleting insn with uid = 39.
deleting insn with uid = 43.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 34.


sys_fstat

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 7 [sp] 17 [flags]
;;  ref usage 	r0={10d,8u} r1={4d,2u} r2={2d} r7={5d,23u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={1e} r17={8d,3u} r18={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} 
;;    total ref usage 131{94d,36u,1e} in 25{24 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 48 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 48 3 2 2 (parallel [
            (set (reg:SI 0 ax [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 48 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 2 8 2 (set (reg:CC 17 flags)
        (compare:CC (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 32 [0x20])) [7 fd+0 S4 A32])
            (const_int 19 [0x13]))) "fs/stat.c":53:8 11 {*cmpsi_1}
     (nil))
(jump_insn 8 7 9 2 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 24)
            (pc))) "fs/stat.c":53:8 806 {*jcc}
     (nil)
 -> 24)
(note 9 8 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 3 (set (reg/f:SI 0 ax [86])
        (mem/u/c:SI (plus:SI (reg:SI 0 ax [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x40]  <var_decl 0x78974d72e120 current>)
                        ] UNSPEC_GOT))) [11  S4 A8])) "fs/stat.c":53:39 75 {*movsi_internal}
     (nil))
(insn 11 10 12 3 (set (reg/f:SI 0 ax [orig:83 current.3_1 ] [83])
        (mem/f/c:SI (reg/f:SI 0 ax [86]) [5 current+0 S4 A32])) "fs/stat.c":53:39 75 {*movsi_internal}
     (nil))
(insn 12 11 13 3 (set (reg:SI 1 dx [88])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 32 [0x20])) [7 fd+0 S4 A32])) "fs/stat.c":53:30 75 {*movsi_internal}
     (nil))
(insn 13 12 14 3 (parallel [
            (set (reg:SI 1 dx [87])
                (plus:SI (reg:SI 1 dx [88])
                    (const_int 160 [0xa0])))
            (clobber (reg:CC 17 flags))
        ]) "fs/stat.c":53:30 209 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (reg/f:SI 16 argp) [7 fd+0 S4 A32])
            (const_int 160 [0xa0]))
        (nil)))
(insn 14 13 15 3 (set (reg/f:SI 0 ax [89])
        (mem/f:SI (plus:SI (mult:SI (reg:SI 1 dx [87])
                    (const_int 4 [0x4]))
                (reg/f:SI 0 ax [orig:83 current.3_1 ] [83])) [10 current.3_1->filp[fd_4(D)]+0 S4 A32])) "fs/stat.c":53:30 75 {*movsi_internal}
     (nil))
(insn 15 14 16 3 (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [10 f+0 S4 A32])
        (reg/f:SI 0 ax [89])) "fs/stat.c":53:30 75 {*movsi_internal}
     (nil))
(insn 16 15 17 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 12 [0xc])) [10 f+0 S4 A32])
            (const_int 0 [0]))) "fs/stat.c":53:23 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 17 16 18 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 24)
            (pc))) "fs/stat.c":53:23 806 {*jcc}
     (nil)
 -> 24)
(note 18 17 19 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 19 18 20 4 (set (reg/f:SI 0 ax [90])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [10 f+0 S4 A32])) "fs/stat.c":53:62 75 {*movsi_internal}
     (nil))
(insn 20 19 21 4 (set (reg/f:SI 0 ax [91])
        (mem/f:SI (plus:SI (reg/f:SI 0 ax [90])
                (const_int 8 [0x8])) [8 f_6->f_inode+0 S4 A32])) "fs/stat.c":53:62 75 {*movsi_internal}
     (nil))
(insn 21 20 22 4 (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [8 inode+0 S4 A32])
        (reg/f:SI 0 ax [91])) "fs/stat.c":53:62 75 {*movsi_internal}
     (nil))
(insn 22 21 23 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 8 [0x8])) [8 inode+0 S4 A32])
            (const_int 0 [0]))) "fs/stat.c":53:51 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 23 22 24 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 29)
            (pc))) "fs/stat.c":53:51 806 {*jcc}
     (nil)
 -> 29)
(code_label 24 23 25 5 9 (nil) [2 uses])
(note 25 24 26 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 26 25 46 5 (set (reg:SI 0 ax [orig:84 _2 ] [84])
        (const_int -9 [0xfffffffffffffff7])) "fs/stat.c":54:16 75 {*movsi_internal}
     (nil))
(jump_insn 46 26 47 5 (set (pc)
        (label_ref 37)) "fs/stat.c":54:16 807 {jump}
     (nil)
 -> 37)
(barrier 47 46 29)
(code_label 29 47 30 6 10 (nil) [1 uses])
(note 30 29 31 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 31 30 32 6 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "fs/stat.c":55:5 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 32 31 33 6 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [9  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 44 [0x2c])) [9 statbuf+0 S4 A32])) "fs/stat.c":55:5 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 33 32 34 6 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [8  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [8 inode+0 S4 A32])) "fs/stat.c":55:5 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 34 33 35 6 (call (mem:QI (symbol_ref:SI ("cp_stat") [flags 0x3]  <function_decl 0x78974d73a700 cp_stat>) [0 cp_stat S1 A8])
        (const_int 16 [0x10])) "fs/stat.c":55:5 812 {*call}
     (nil)
    (nil))
(insn 35 34 36 6 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "fs/stat.c":55:5 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 36 35 37 6 (set (reg:SI 0 ax [orig:84 _2 ] [84])
        (const_int 0 [0])) "fs/stat.c":56:12 75 {*movsi_internal}
     (nil))
(code_label 37 36 38 7 11 (nil) [1 uses])
(note 38 37 44 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 44 38 49 7 (use (reg/i:SI 0 ax)) "fs/stat.c":57:1 -1
     (nil))
(note 49 44 0 NOTE_INSN_DELETED)
