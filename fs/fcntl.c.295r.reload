
;; Function dupfd (dupfd, funcdef_no=1, decl_uid=1324, cgraph_uid=2, symbol_order=1)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=12, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-8, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 123:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 13:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 40:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 45:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =r  (1) g {*movsi_internal}
            2 Small class reload: reject+=3
          alt=0,overall=15,losers=2,rld_nregs=2
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 76:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
      Creating newreg=122 from oldreg=110, assigning class GENERAL_REGS to r122
      Creating newreg=123, assigning class CREG to r123
   76: {r122:SI=r122:SI<<r123:QI;clobber flags:CC;}
      REG_DEAD r110:SI
      REG_DEAD r109:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  125: r122:SI=r110:SI
  127: r123:QI=r109:SI#0
    Inserting insn reload after:
  126: r89:SI=r122:SI

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 127:  (0) =Q  (1) Q {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) =rm  (1) 0 {*one_cmplsi2_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
            alt=2: Bad operand -- refuse
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 81
	 Choosing alt 0 in insn 81:  (0) =rm  (1) %0  (2) re {*andsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 82:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 88:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 91:  (0) =rm  (1) %0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 92:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 94:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 95:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 96:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 97:  (0) =rm  (1) %0  (2) rn {*addhi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 98:  (0) m  (1) rn {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2 3
EBB 4
EBB 5 6
EBB 7
EBB 8 9
EBB 10 15
EBB 16
EBB 11 12
EBB 13
EBB 14

********** Pseudo live ranges #1: **********

  BB 14
   Insn 107: point = 0, n_alt = -1
   Insn 106: point = 0, n_alt = -2
   Insn 102: point = 1, n_alt = -2
  BB 12
   Insn 115: point = 4, n_alt = -1
   Insn 66: point = 4, n_alt = 0
  BB 6
   Insn 111: point = 5, n_alt = -1
   Insn 29: point = 5, n_alt = 0
  BB 4
   Insn 109: point = 6, n_alt = -1
   Insn 19: point = 6, n_alt = 0
  BB 13
   Insn 99: point = 7, n_alt = 0
   Insn 98: point = 8, n_alt = 3
   Insn 97: point = 9, n_alt = 0
   Insn 96: point = 11, n_alt = 2
   Insn 95: point = 12, n_alt = 0
   Insn 94: point = 14, n_alt = 0
   Insn 93: point = 16, n_alt = 0
   Insn 92: point = 17, n_alt = 1
   Insn 91: point = 18, n_alt = 0
   Insn 90: point = 20, n_alt = 0
   Insn 89: point = 21, n_alt = 0
   Insn 88: point = 23, n_alt = 0
   Insn 87: point = 25, n_alt = 0
   Insn 86: point = 26, n_alt = 0
   Insn 85: point = 28, n_alt = 0
   Insn 84: point = 30, n_alt = 0
   Insn 83: point = 32, n_alt = 0
   Insn 82: point = 33, n_alt = 1
   Insn 81: point = 34, n_alt = 0
   Insn 80: point = 36, n_alt = 0
   Insn 79: point = 38, n_alt = 0
   Insn 78: point = 39, n_alt = -2
   Insn 77: point = 41, n_alt = 0
   Insn 126: point = 43, n_alt = -2
	Hard reg 1 is preferable by r122 with profit 1000
   Insn 76: point = 45, n_alt = 0
   Insn 127: point = 47, n_alt = 0
   Insn 125: point = 49, n_alt = -2
	Hard reg 1 is preferable by r122 with profit 1000
	Hard reg 4 is preferable by r122 with profit 1000
   Insn 75: point = 51, n_alt = 0
   Insn 74: point = 52, n_alt = 0
   Insn 73: point = 53, n_alt = 0
   Insn 72: point = 55, n_alt = 0
   Insn 71: point = 57, n_alt = 0
  BB 11
   Insn 64: point = 59, n_alt = -1
   Insn 63: point = 59, n_alt = 0
  BB 15
   Insn 118: point = 60, n_alt = -1
  BB 16
   Insn 122: point = 61, n_alt = -1
  BB 8
   Insn 43: point = 62, n_alt = -1
   Insn 42: point = 62, n_alt = 0
   Insn 41: point = 63, n_alt = 0
   Insn 40: point = 65, n_alt = 0
   Insn 39: point = 67, n_alt = 0
   Insn 38: point = 68, n_alt = 0
   Insn 37: point = 70, n_alt = 0
  BB 10
   Insn 58: point = 72, n_alt = -1
   Insn 57: point = 72, n_alt = 0
  BB 7
   Insn 113: point = 73, n_alt = -1
  BB 5
   Insn 27: point = 74, n_alt = -1
   Insn 26: point = 74, n_alt = 0
  BB 3
   Insn 16: point = 75, n_alt = -1
   Insn 15: point = 75, n_alt = 0
   Insn 14: point = 76, n_alt = 0
   Insn 13: point = 78, n_alt = 0
   Insn 12: point = 80, n_alt = 0
   Insn 11: point = 81, n_alt = 0
   Insn 10: point = 83, n_alt = 0
  BB 2
   Insn 8: point = 85, n_alt = -1
   Insn 7: point = 85, n_alt = 0
   Insn 123: point = 85, n_alt = 0
  BB 9
   Insn 45: point = 86, n_alt = 0
 r82: [29..86]
 r83: [77..81]
 r84: [75..76]
 r85: [64..68]
 r86: [62..63]
 r87: [54..55]
 r88: [35..53]
 r89: [42..43]
 r90: [40..41]
 r91: [35..39]
 r92: [33..36]
 r93: [33..34]
 r94: [22..30]
 r95: [13..26]
 r96: [17..21]
 r97: [8..12]
 r98: [10..11]
 r99: [8..9]
 r100: [2..7]
 r101: [0..1]
 r102: [82..83]
 r103: [77..78]
 r104: [79..80]
 r105: [69..70]
 r106: [64..65]
 r107: [66..67]
 r108: [56..57]
 r109: [48..52]
 r110: [50..51]
 r111: [37..38]
 r112: [31..32]
 r113: [27..28]
 r114: [22..23]
 r115: [24..25]
 r116: [17..18]
 r117: [19..20]
 r118: [13..14]
 r119: [15..16]
 r122: [44..49]
 r123: [46..47]
Compressing live ranges: from 87 to 62 - 71%
Ranges after the compression:
 r82: [22..61]
 r83: [56..59]
 r84: [54..55]
 r85: [48..51]
 r86: [46..47]
 r87: [42..43]
 r88: [28..41]
 r89: [34..35]
 r90: [32..33]
 r91: [28..31]
 r92: [26..29]
 r93: [26..27]
 r94: [16..23]
 r95: [8..19]
 r96: [12..15]
 r97: [4..7]
 r98: [6..7]
 r99: [4..5]
 r100: [2..3]
 r101: [0..1]
 r102: [60..61]
 r103: [56..57]
 r104: [58..59]
 r105: [52..53]
 r106: [48..49]
 r107: [50..51]
 r108: [44..45]
 r109: [38..41]
 r110: [40..41]
 r111: [30..31]
 r112: [24..25]
 r113: [20..21]
 r114: [16..17]
 r115: [18..19]
 r116: [12..13]
 r117: [14..15]
 r118: [8..9]
 r119: [10..11]
 r122: [36..39]
 r123: [36..37]

********** Assignment #1: **********

	 Assigning to 123 (cl=CREG, orig=123, freq=2000, tfirst=123, tfreq=2000)...
	   Assign 2 to reload r123 (freq=2000)
	 Assigning to 122 (cl=GENERAL_REGS, orig=110, freq=3000, tfirst=122, tfreq=3000)...
	   Assign 4 to reload r122 (freq=3000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=12, prev_offset=12)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-8, prev_offset=0)
changing reg in insn 123
changing reg in insn 85
changing reg in insn 83
changing reg in insn 79
changing reg in insn 71
changing reg in insn 37
changing reg in insn 10
changing reg in insn 11
changing reg in insn 14
changing reg in insn 14
changing reg in insn 15
changing reg in insn 38
changing reg in insn 41
changing reg in insn 41
changing reg in insn 42
changing reg in insn 72
changing reg in insn 73
changing reg in insn 73
changing reg in insn 77
changing reg in insn 77
changing reg in insn 78
changing reg in insn 78
changing reg in insn 80
changing reg in insn 82
changing reg in insn 81
changing reg in insn 82
changing reg in insn 84
changing reg in insn 89
changing reg in insn 86
changing reg in insn 95
changing reg in insn 92
changing reg in insn 89
changing reg in insn 92
changing reg in insn 95
changing reg in insn 98
changing reg in insn 96
changing reg in insn 96
changing reg in insn 97
changing reg in insn 97
changing reg in insn 98
changing reg in insn 99
changing reg in insn 66
changing reg in insn 29
changing reg in insn 19
changing reg in insn 102
changing reg in insn 102
changing reg in insn 106
changing reg in insn 10
changing reg in insn 11
changing reg in insn 13
changing reg in insn 14
changing reg in insn 12
changing reg in insn 13
changing reg in insn 37
changing reg in insn 38
changing reg in insn 40
changing reg in insn 41
changing reg in insn 39
changing reg in insn 40
changing reg in insn 71
changing reg in insn 72
changing reg in insn 74
changing reg in insn 75
changing reg in insn 79
changing reg in insn 80
changing reg in insn 83
changing reg in insn 84
changing reg in insn 85
changing reg in insn 86
changing reg in insn 88
changing reg in insn 89
changing reg in insn 87
changing reg in insn 88
changing reg in insn 91
changing reg in insn 92
changing reg in insn 90
changing reg in insn 91
changing reg in insn 94
changing reg in insn 95
changing reg in insn 93
changing reg in insn 94
deleting insn with uid = 125.
deleting insn with uid = 102.
deleting insn with uid = 106.
starting the processing of deferred insns
ending the processing of deferred insns


dupfd

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 17 [flags]
;;  ref usage 	r0={9d,13u} r1={21d,20u} r2={12d,11u} r3={1d,1u} r4={2d,2u} r7={1d,29u} r16={5e} r17={16d,6u} 
;;    total ref usage 149{62d,82u,5e} in 65{65 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 123 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 123 3 2 2 (parallel [
            (set (reg:SI 0 ax [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 123 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 2 8 2 (set (reg:CC 17 flags)
        (compare:CC (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 12 [0xc])) [6 fd+0 S4 A32])
            (const_int 19 [0x13]))) "fs/fcntl.c":17:8 11 {*cmpsi_1}
     (nil))
(jump_insn 8 7 9 2 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 17)
            (pc))) "fs/fcntl.c":17:8 806 {*jcc}
     (nil)
 -> 17)
(note 9 8 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 3 (set (reg/f:SI 1 dx [102])
        (mem/u/c:SI (plus:SI (reg:SI 0 ax [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x40]  <var_decl 0x7de15612e120 current>)
                        ] UNSPEC_GOT))) [15  S4 A8])) "fs/fcntl.c":17:34 75 {*movsi_internal}
     (nil))
(insn 11 10 12 3 (set (reg/f:SI 1 dx [orig:83 current.0_1 ] [83])
        (mem/f/c:SI (reg/f:SI 1 dx [102]) [1 current+0 S4 A32])) "fs/fcntl.c":17:34 75 {*movsi_internal}
     (nil))
(insn 12 11 13 3 (set (reg:SI 2 cx [104])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [6 fd+0 S4 A32])) "fs/fcntl.c":17:40 75 {*movsi_internal}
     (nil))
(insn 13 12 14 3 (parallel [
            (set (reg:SI 2 cx [103])
                (plus:SI (reg:SI 2 cx [104])
                    (const_int 160 [0xa0])))
            (clobber (reg:CC 17 flags))
        ]) "fs/fcntl.c":17:40 209 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (reg/f:SI 16 argp) [6 fd+0 S4 A32])
            (const_int 160 [0xa0]))
        (nil)))
(insn 14 13 15 3 (set (reg/f:SI 1 dx [orig:84 _2 ] [84])
        (mem/f:SI (plus:SI (mult:SI (reg:SI 2 cx [103])
                    (const_int 4 [0x4]))
                (reg/f:SI 1 dx [orig:83 current.0_1 ] [83])) [10 current.0_1->filp[fd_22(D)]+0 S4 A32])) "fs/fcntl.c":17:40 75 {*movsi_internal}
     (nil))
(insn 15 14 16 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:SI 1 dx [orig:84 _2 ] [84])
            (const_int 0 [0]))) "fs/fcntl.c":17:23 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 16 15 17 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 22)
            (pc))) "fs/fcntl.c":17:23 806 {*jcc}
     (nil)
 -> 22)
(code_label 17 16 18 4 2 (nil) [1 uses])
(note 18 17 19 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 19 18 109 4 (set (reg:SI 0 ax [orig:100 _20 ] [100])
        (const_int -9 [0xfffffffffffffff7])) "fs/fcntl.c":18:16 75 {*movsi_internal}
     (nil))
(jump_insn 109 19 110 4 (set (pc)
        (label_ref 100)) "fs/fcntl.c":18:16 807 {jump}
     (nil)
 -> 100)
(barrier 110 109 22)
(code_label 22 110 23 5 3 (nil) [1 uses])
(note 23 22 26 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 26 23 27 5 (set (reg:CC 17 flags)
        (compare:CC (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])) [6 arg+0 S4 A32])
            (const_int 19 [0x13]))) "fs/fcntl.c":19:8 11 {*cmpsi_1}
     (nil))
(jump_insn 27 26 28 5 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 32)
            (pc))) "fs/fcntl.c":19:8 806 {*jcc}
     (nil)
 -> 32)
(note 28 27 29 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 111 6 (set (reg:SI 0 ax [orig:100 _20 ] [100])
        (const_int -22 [0xffffffffffffffea])) "fs/fcntl.c":20:16 75 {*movsi_internal}
     (nil))
(jump_insn 111 29 112 6 (set (pc)
        (label_ref 100)) "fs/fcntl.c":20:16 807 {jump}
     (nil)
 -> 100)
(barrier 112 111 32)
(code_label 32 112 33 7 5 (nil) [1 uses])
(note 33 32 113 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(jump_insn 113 33 114 7 (set (pc)
        (label_ref 52)) "fs/fcntl.c":21:11 807 {jump}
     (nil)
 -> 52)
(barrier 114 113 54)
(code_label 54 114 36 8 9 (nil) [1 uses])
(note 36 54 37 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 37 36 38 8 (set (reg/f:SI 1 dx [105])
        (mem/u/c:SI (plus:SI (reg:SI 0 ax [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x40]  <var_decl 0x7de15612e120 current>)
                        ] UNSPEC_GOT))) [15  S4 A8])) "fs/fcntl.c":22:20 75 {*movsi_internal}
     (nil))
(insn 38 37 39 8 (set (reg/f:SI 1 dx [orig:85 current.1_3 ] [85])
        (mem/f/c:SI (reg/f:SI 1 dx [105]) [1 current+0 S4 A32])) "fs/fcntl.c":22:20 75 {*movsi_internal}
     (nil))
(insn 39 38 40 8 (set (reg:SI 2 cx [107])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [6 arg+0 S4 A32])) "fs/fcntl.c":22:26 75 {*movsi_internal}
     (nil))
(insn 40 39 41 8 (parallel [
            (set (reg:SI 2 cx [106])
                (plus:SI (reg:SI 2 cx [107])
                    (const_int 160 [0xa0])))
            (clobber (reg:CC 17 flags))
        ]) "fs/fcntl.c":22:26 209 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                    (const_int 4 [0x4])) [6 arg+0 S4 A32])
            (const_int 160 [0xa0]))
        (nil)))
(insn 41 40 42 8 (set (reg/f:SI 1 dx [orig:86 _4 ] [86])
        (mem/f:SI (plus:SI (mult:SI (reg:SI 2 cx [106])
                    (const_int 4 [0x4]))
                (reg/f:SI 1 dx [orig:85 current.1_3 ] [85])) [10 current.1_3->filp[arg_19]+0 S4 A32])) "fs/fcntl.c":22:26 75 {*movsi_internal}
     (nil))
(insn 42 41 43 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:SI 1 dx [orig:86 _4 ] [86])
            (const_int 0 [0]))) "fs/fcntl.c":22:12 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 43 42 44 8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 121)
            (pc))) "fs/fcntl.c":22:12 806 {*jcc}
     (nil)
 -> 121)
(note 44 43 45 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 45 44 52 9 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 16 [0x10])) [6 arg+0 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 16 [0x10])) [6 arg+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "fs/fcntl.c":23:16 209 {*addsi_1}
     (nil))
(code_label 52 45 53 10 6 (nil) [1 uses])
(note 53 52 57 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 57 53 58 10 (set (reg:CC 17 flags)
        (compare:CC (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])) [6 arg+0 S4 A32])
            (const_int 19 [0x13]))) "fs/fcntl.c":21:16 11 {*cmpsi_1}
     (nil))
(jump_insn 58 57 117 10 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 54)
            (pc))) "fs/fcntl.c":21:16 806 {*jcc}
     (nil)
 -> 54)
(note 117 58 118 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(jump_insn 118 117 119 15 (set (pc)
        (label_ref 59)) 807 {jump}
     (nil)
 -> 59)
(barrier 119 118 121)
(code_label 121 119 120 16 11 (nil) [1 uses])
(note 120 121 122 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 122 120 59 16 (const_int 0 [0]) "fs/fcntl.c":25:13 843 {nop}
     (nil))
(code_label 59 122 60 11 8 (nil) [1 uses])
(note 60 59 63 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 63 60 64 11 (set (reg:CC 17 flags)
        (compare:CC (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])) [6 arg+0 S4 A32])
            (const_int 19 [0x13]))) "fs/fcntl.c":26:8 11 {*cmpsi_1}
     (nil))
(jump_insn 64 63 65 11 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 69)
            (pc))) "fs/fcntl.c":26:8 806 {*jcc}
     (nil)
 -> 69)
(note 65 64 66 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 66 65 115 12 (set (reg:SI 0 ax [orig:100 _20 ] [100])
        (const_int -24 [0xffffffffffffffe8])) "fs/fcntl.c":27:16 75 {*movsi_internal}
     (nil))
(jump_insn 115 66 116 12 (set (pc)
        (label_ref 100)) "fs/fcntl.c":27:16 807 {jump}
     (nil)
 -> 100)
(barrier 116 115 69)
(code_label 69 116 70 13 10 (nil) [1 uses])
(note 70 69 71 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 71 70 72 13 (set (reg/f:SI 1 dx [108])
        (mem/u/c:SI (plus:SI (reg:SI 0 ax [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x40]  <var_decl 0x7de15612e120 current>)
                        ] UNSPEC_GOT))) [15  S4 A8])) "fs/fcntl.c":28:28 75 {*movsi_internal}
     (nil))
(insn 72 71 73 13 (set (reg/f:SI 1 dx [orig:87 current.2_5 ] [87])
        (mem/f/c:SI (reg/f:SI 1 dx [108]) [1 current+0 S4 A32])) "fs/fcntl.c":28:28 75 {*movsi_internal}
     (nil))
(insn 73 72 74 13 (set (reg:SI 3 bx [orig:88 _6 ] [88])
        (mem:SI (plus:SI (reg/f:SI 1 dx [orig:87 current.2_5 ] [87])
                (const_int 636 [0x27c])) [3 current.2_5->close_on_exec+0 S4 A32])) "fs/fcntl.c":28:28 75 {*movsi_internal}
     (nil))
(insn 74 73 75 13 (set (reg:SI 1 dx [109])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [6 arg+0 S4 A32])) "fs/fcntl.c":28:35 75 {*movsi_internal}
     (nil))
(insn 75 74 127 13 (set (reg:SI 4 si [110])
        (const_int 1 [0x1])) "fs/fcntl.c":28:35 75 {*movsi_internal}
     (nil))
(insn 127 75 76 13 (set (reg:QI 2 cx [123])
        (reg:QI 1 dx [109])) "fs/fcntl.c":28:35 77 {*movqi_internal}
     (nil))
(insn 76 127 126 13 (parallel [
            (set (reg:SI 4 si [110])
                (ashift:SI (reg:SI 4 si [110])
                    (reg:QI 2 cx [123])))
            (clobber (reg:CC 17 flags))
        ]) "fs/fcntl.c":28:35 655 {*ashlsi3_1}
     (nil))
(insn 126 76 77 13 (set (reg:SI 1 dx [orig:89 _7 ] [89])
        (reg:SI 4 si [110])) "fs/fcntl.c":28:35 75 {*movsi_internal}
     (nil))
(insn 77 126 78 13 (set (reg:SI 1 dx [orig:90 _8 ] [90])
        (not:SI (reg:SI 1 dx [orig:89 _7 ] [89]))) "fs/fcntl.c":28:31 632 {*one_cmplsi2_1}
     (nil))
(insn 78 77 79 13 (set (reg:SI 2 cx [orig:91 _9 ] [91])
        (reg:SI 1 dx [orig:90 _8 ] [90])) "fs/fcntl.c":28:31 75 {*movsi_internal}
     (nil))
(insn 79 78 80 13 (set (reg/f:SI 1 dx [111])
        (mem/u/c:SI (plus:SI (reg:SI 0 ax [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x40]  <var_decl 0x7de15612e120 current>)
                        ] UNSPEC_GOT))) [15  S4 A8])) "fs/fcntl.c":28:28 75 {*movsi_internal}
     (nil))
(insn 80 79 81 13 (set (reg/f:SI 1 dx [orig:92 current.3_10 ] [92])
        (mem/f/c:SI (reg/f:SI 1 dx [111]) [1 current+0 S4 A32])) "fs/fcntl.c":28:28 75 {*movsi_internal}
     (nil))
(insn 81 80 82 13 (parallel [
            (set (reg:SI 2 cx [orig:93 _11 ] [93])
                (and:SI (reg:SI 2 cx [orig:91 _9 ] [91])
                    (reg:SI 3 bx [orig:88 _6 ] [88])))
            (clobber (reg:CC 17 flags))
        ]) "fs/fcntl.c":28:28 490 {*andsi_1}
     (nil))
(insn 82 81 83 13 (set (mem:SI (plus:SI (reg/f:SI 1 dx [orig:92 current.3_10 ] [92])
                (const_int 636 [0x27c])) [3 current.3_10->close_on_exec+0 S4 A32])
        (reg:SI 2 cx [orig:93 _11 ] [93])) "fs/fcntl.c":28:28 75 {*movsi_internal}
     (nil))
(insn 83 82 84 13 (set (reg/f:SI 1 dx [112])
        (mem/u/c:SI (plus:SI (reg:SI 0 ax [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x40]  <var_decl 0x7de15612e120 current>)
                        ] UNSPEC_GOT))) [15  S4 A8])) "fs/fcntl.c":29:34 75 {*movsi_internal}
     (nil))
(insn 84 83 85 13 (set (reg/f:SI 1 dx [orig:94 current.4_12 ] [94])
        (mem/f/c:SI (reg/f:SI 1 dx [112]) [1 current+0 S4 A32])) "fs/fcntl.c":29:34 75 {*movsi_internal}
     (nil))
(insn 85 84 86 13 (set (reg/f:SI 0 ax [113])
        (mem/u/c:SI (plus:SI (reg:SI 0 ax [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x40]  <var_decl 0x7de15612e120 current>)
                        ] UNSPEC_GOT))) [15  S4 A8])) "fs/fcntl.c":29:13 75 {*movsi_internal}
     (nil))
(insn 86 85 87 13 (set (reg/f:SI 0 ax [orig:95 current.5_13 ] [95])
        (mem/f/c:SI (reg/f:SI 0 ax [113]) [1 current+0 S4 A32])) "fs/fcntl.c":29:13 75 {*movsi_internal}
     (nil))
(insn 87 86 88 13 (set (reg:SI 2 cx [115])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [6 fd+0 S4 A32])) "fs/fcntl.c":29:40 75 {*movsi_internal}
     (nil))
(insn 88 87 89 13 (parallel [
            (set (reg:SI 2 cx [114])
                (plus:SI (reg:SI 2 cx [115])
                    (const_int 160 [0xa0])))
            (clobber (reg:CC 17 flags))
        ]) "fs/fcntl.c":29:40 209 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (reg/f:SI 16 argp) [6 fd+0 S4 A32])
            (const_int 160 [0xa0]))
        (nil)))
(insn 89 88 90 13 (set (reg/f:SI 1 dx [orig:96 _14 ] [96])
        (mem/f:SI (plus:SI (mult:SI (reg:SI 2 cx [114])
                    (const_int 4 [0x4]))
                (reg/f:SI 1 dx [orig:94 current.4_12 ] [94])) [10 current.4_12->filp[fd_22(D)]+0 S4 A32])) "fs/fcntl.c":29:40 75 {*movsi_internal}
     (nil))
(insn 90 89 91 13 (set (reg:SI 2 cx [117])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [6 arg+0 S4 A32])) "fs/fcntl.c":29:25 75 {*movsi_internal}
     (nil))
(insn 91 90 92 13 (parallel [
            (set (reg:SI 2 cx [116])
                (plus:SI (reg:SI 2 cx [117])
                    (const_int 160 [0xa0])))
            (clobber (reg:CC 17 flags))
        ]) "fs/fcntl.c":29:25 209 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                    (const_int 4 [0x4])) [6 arg+0 S4 A32])
            (const_int 160 [0xa0]))
        (nil)))
(insn 92 91 93 13 (set (mem/f:SI (plus:SI (mult:SI (reg:SI 2 cx [116])
                    (const_int 4 [0x4]))
                (reg/f:SI 0 ax [orig:95 current.5_13 ] [95])) [10 current.5_13->filp[arg_19]+0 S4 A32])
        (reg/f:SI 1 dx [orig:96 _14 ] [96])) "fs/fcntl.c":29:25 75 {*movsi_internal}
     (nil))
(insn 93 92 94 13 (set (reg:SI 1 dx [119])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [6 arg+0 S4 A32])) "fs/fcntl.c":29:19 75 {*movsi_internal}
     (nil))
(insn 94 93 95 13 (parallel [
            (set (reg:SI 1 dx [118])
                (plus:SI (reg:SI 1 dx [119])
                    (const_int 160 [0xa0])))
            (clobber (reg:CC 17 flags))
        ]) "fs/fcntl.c":29:19 209 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                    (const_int 4 [0x4])) [6 arg+0 S4 A32])
            (const_int 160 [0xa0]))
        (nil)))
(insn 95 94 96 13 (set (reg/f:SI 0 ax [orig:97 _15 ] [97])
        (mem/f:SI (plus:SI (mult:SI (reg:SI 1 dx [118])
                    (const_int 4 [0x4]))
                (reg/f:SI 0 ax [orig:95 current.5_13 ] [95])) [10 current.5_13->filp[arg_19]+0 S4 A32])) "fs/fcntl.c":29:19 75 {*movsi_internal}
     (nil))
(insn 96 95 97 13 (set (reg:HI 1 dx [orig:98 _16 ] [98])
        (mem:HI (plus:SI (reg/f:SI 0 ax [orig:97 _15 ] [97])
                (const_int 4 [0x4])) [8 _15->f_count+0 S2 A32])) "fs/fcntl.c":29:45 76 {*movhi_internal}
     (nil))
(insn 97 96 98 13 (parallel [
            (set (reg:HI 1 dx [orig:99 _18 ] [99])
                (plus:HI (reg:HI 1 dx [orig:98 _16 ] [98])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "fs/fcntl.c":29:54 212 {*addhi_1}
     (nil))
(insn 98 97 99 13 (set (mem:HI (plus:SI (reg/f:SI 0 ax [orig:97 _15 ] [97])
                (const_int 4 [0x4])) [8 _15->f_count+0 S2 A32])
        (reg:HI 1 dx [orig:99 _18 ] [99])) "fs/fcntl.c":29:54 76 {*movhi_internal}
     (nil))
(insn 99 98 100 13 (set (reg:SI 0 ax [orig:100 _20 ] [100])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [6 arg+0 S4 A32])) "fs/fcntl.c":30:12 75 {*movsi_internal}
     (nil))
(code_label 100 99 101 14 4 (nil) [3 uses])
(note 101 100 107 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 107 101 124 14 (use (reg/i:SI 0 ax)) "fs/fcntl.c":31:1 -1
     (nil))
(note 124 107 0 NOTE_INSN_DELETED)

;; Function sys_dup (sys_dup, funcdef_no=2, decl_uid=1330, cgraph_uid=3, symbol_order=2)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=4, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =<  (1) ri*m {*pushsi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-4)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (1) lBwBz {*call_value} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 8:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-8)
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 17: point = 0, n_alt = -1
   Insn 16: point = 0, n_alt = -2
   Insn 12: point = 1, n_alt = -2
   Insn 9: point = 3, n_alt = -2
   Insn 8: point = 4, n_alt = 0
   Insn 7: point = 4, n_alt = 0
   Insn 6: point = 4, n_alt = 0
   Insn 5: point = 4, n_alt = 0
   Insn 19: point = 4, n_alt = 0
 r82: [4..4]
 r83: [2..3]
 r84: [0..1]
Compressing live ranges: from 5 to 5 - 100%
Ranges after the compression:
 r82: [4..4]
 r83: [2..3]
 r84: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=4, prev_offset=4)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 19
changing reg in insn 9
changing reg in insn 12
changing reg in insn 12
changing reg in insn 16
deleting insn with uid = 9.
deleting insn with uid = 12.
deleting insn with uid = 16.
starting the processing of deferred insns
ending the processing of deferred insns


sys_dup

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0 [ax] 7 [sp] 17 [flags]
;;  ref usage 	r0={3d,2u} r1={2d} r2={2d} r7={4d,8u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={3d} r18={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} 
;;    total ref usage 89{79d,10u,0e} in 6{5 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 19 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 19 3 2 2 (parallel [
            (set (reg:SI 0 ax [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 19 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [6  S4 A32])
        (const_int 0 [0])) "fs/fcntl.c":35:12 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 4 [0x4])
        (nil)))
(insn 6 5 7 2 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [6  S4 A32])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [6 fildes+0 S4 A32])) "fs/fcntl.c":35:12 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(call_insn 7 6 8 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("dupfd") [flags 0x3]  <function_decl 0x7de156138900 dupfd>) [0 dupfd S1 A8])
            (const_int 8 [0x8]))) "fs/fcntl.c":35:12 823 {*call_value}
     (nil)
    (nil))
(insn 8 7 17 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) "fs/fcntl.c":35:12 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 17 8 20 2 (use (reg/i:SI 0 ax)) "fs/fcntl.c":36:1 -1
     (nil))
(note 20 17 0 NOTE_INSN_DELETED)

;; Function sys_fcntl (sys_fcntl, funcdef_no=3, decl_uid=1335, cgraph_uid=4, symbol_order=3)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=28, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=-8, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 155:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 13:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 15:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) rBw {*tablejump_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =<  (1) ri*m {*pushsi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-4)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (1) lBwBz {*call_value} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 42:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =r  (1) g {*movsi_internal}
            2 Small class reload: reject+=3
          alt=0,overall=15,losers=2,rld_nregs=2
	 Choosing alt 0 in insn 52:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=138 from oldreg=85, assigning class GENERAL_REGS to r138
      Creating newreg=139, assigning class CREG to r139
   52: {r138:SI=r138:SI 0>>r139:QI;clobber flags:CC;}
      REG_DEAD r120:SI
      REG_DEAD r85:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  157: r138:SI=r85:SI
  159: r139:QI=r120:SI#0
    Inserting insn reload after:
  158: r86:SI=r138:SI

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 159:  (0) =Q  (1) Q {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 54:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 60:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =r  (1) g {*movsi_internal}
            2 Small class reload: reject+=3
          alt=0,overall=15,losers=2,rld_nregs=2
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 69:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
      Creating newreg=140 from oldreg=124, assigning class GENERAL_REGS to r140
      Creating newreg=141, assigning class CREG to r141
   69: {r140:SI=r140:SI<<r141:QI;clobber flags:CC;}
      REG_DEAD r124:SI
      REG_DEAD r123:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  160: r140:SI=r124:SI
  162: r141:QI=r123:SI#0
    Inserting insn reload after:
  161: r91:SI=r140:SI

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 162:  (0) =Q  (1) Q {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 73
	 Choosing alt 0 in insn 73:  (0) =rm  (1) %0  (2) re {*iorsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 74:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) =r  (1) g {*movsi_internal}
            2 Small class reload: reject+=3
          alt=0,overall=15,losers=2,rld_nregs=2
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 84:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
      Creating newreg=142 from oldreg=128, assigning class GENERAL_REGS to r142
      Creating newreg=143, assigning class CREG to r143
   84: {r142:SI=r142:SI<<r143:QI;clobber flags:CC;}
      REG_DEAD r128:SI
      REG_DEAD r127:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  163: r142:SI=r128:SI
  165: r143:QI=r127:SI#0
    Inserting insn reload after:
  164: r97:SI=r142:SI

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 165:  (0) =Q  (1) Q {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) =rm  (1) 0 {*one_cmplsi2_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
            alt=2: Bad operand -- refuse
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 89
	 Choosing alt 0 in insn 89:  (0) =rm  (1) %0  (2) re {*andsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 90:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 99:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =r  (1) rm {*zero_extendhisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 106:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            alt=2: Bad operand -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 107:  (0) =rm  (1) %0  (2) rn {*andhi_1}
      Creating newreg=144 from oldreg=103, assigning class GENERAL_REGS to r144
  107: {r144:HI=r144:HI&0xfffffffffffff3ff;clobber flags:CC;}
      REG_DEAD r103:HI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  166: r144:HI=r103:HI
    Inserting insn reload after:
  167: r104:HI=r144:HI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 109:  (0) m  (1) rn {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 111:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (0) =r  (1) r {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 114:  (0) =rm  (1) %0  (2) rn {*andhi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 115:  (0) =rm  (1) %0  (2) rn {*iorhi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 116:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 117:  (0) m  (1) rn {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 118:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 123:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 128:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2 3
EBB 4
EBB 5 6
EBB 7
EBB 8
EBB 9 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17

********** Pseudo live ranges #1: **********

  BB 17
   Insn 136: point = 0, n_alt = -1
   Insn 135: point = 0, n_alt = -2
   Insn 131: point = 1, n_alt = -2
  BB 15
   Insn 153: point = 4, n_alt = -1
   Insn 123: point = 4, n_alt = 0
  BB 14
   Insn 151: point = 5, n_alt = -1
   Insn 118: point = 5, n_alt = 0
   Insn 117: point = 6, n_alt = 3
   Insn 116: point = 7, n_alt = 0
   Insn 115: point = 8, n_alt = 0
   Insn 114: point = 10, n_alt = 0
   Insn 113: point = 12, n_alt = 0
   Insn 112: point = 14, n_alt = 0
   Insn 111: point = 15, n_alt = 2
   Insn 110: point = 17, n_alt = 0
   Insn 109: point = 18, n_alt = 3
   Insn 108: point = 19, n_alt = 0
   Insn 167: point = 20, n_alt = -2
	Hard reg 1 is preferable by r144 with profit 1000
   Insn 107: point = 22, n_alt = 0
   Insn 166: point = 23, n_alt = -2
	Hard reg 1 is preferable by r144 with profit 1000
	Hard reg 0 is preferable by r144 with profit 1000
   Insn 106: point = 25, n_alt = 2
   Insn 105: point = 27, n_alt = 0
  BB 13
   Insn 149: point = 28, n_alt = -1
   Insn 100: point = 28, n_alt = 0
   Insn 99: point = 30, n_alt = 2
   Insn 98: point = 32, n_alt = 0
  BB 12
   Insn 147: point = 33, n_alt = -1
   Insn 93: point = 33, n_alt = 0
  BB 10
   Insn 145: point = 34, n_alt = -1
   Insn 74: point = 34, n_alt = 1
   Insn 73: point = 35, n_alt = 0
   Insn 72: point = 37, n_alt = 0
   Insn 71: point = 39, n_alt = 0
   Insn 70: point = 41, n_alt = -2
   Insn 161: point = 43, n_alt = -2
	Hard reg 1 is preferable by r140 with profit 1000
   Insn 69: point = 45, n_alt = 0
   Insn 162: point = 47, n_alt = 0
   Insn 160: point = 49, n_alt = -2
	Hard reg 1 is preferable by r140 with profit 1000
	Hard reg 4 is preferable by r140 with profit 1000
   Insn 68: point = 51, n_alt = 0
   Insn 67: point = 52, n_alt = 0
   Insn 66: point = 53, n_alt = 0
   Insn 65: point = 55, n_alt = 0
   Insn 64: point = 57, n_alt = 0
  BB 11
   Insn 90: point = 59, n_alt = 1
   Insn 89: point = 60, n_alt = 0
   Insn 88: point = 62, n_alt = 0
   Insn 87: point = 64, n_alt = 0
   Insn 86: point = 66, n_alt = -2
   Insn 85: point = 68, n_alt = 0
   Insn 164: point = 70, n_alt = -2
	Hard reg 1 is preferable by r142 with profit 1000
   Insn 84: point = 72, n_alt = 0
   Insn 165: point = 74, n_alt = 0
   Insn 163: point = 76, n_alt = -2
	Hard reg 1 is preferable by r142 with profit 1000
	Hard reg 4 is preferable by r142 with profit 1000
   Insn 83: point = 78, n_alt = 0
   Insn 82: point = 79, n_alt = 0
   Insn 81: point = 80, n_alt = 0
   Insn 80: point = 82, n_alt = 0
   Insn 79: point = 84, n_alt = 0
  BB 9
   Insn 62: point = 86, n_alt = -1
   Insn 61: point = 86, n_alt = 0
   Insn 60: point = 87, n_alt = 0
   Insn 59: point = 89, n_alt = 0
  BB 8
   Insn 143: point = 91, n_alt = -1
   Insn 54: point = 91, n_alt = 0
   Insn 53: point = 93, n_alt = -2
   Insn 158: point = 95, n_alt = -2
	Hard reg 0 is preferable by r138 with profit 1000
   Insn 52: point = 97, n_alt = 0
   Insn 159: point = 99, n_alt = 0
   Insn 157: point = 101, n_alt = -2
	Hard reg 0 is preferable by r138 with profit 1000
	Hard reg 1 is preferable by r138 with profit 1000
   Insn 51: point = 103, n_alt = 0
   Insn 50: point = 104, n_alt = 0
   Insn 49: point = 106, n_alt = 0
   Insn 48: point = 108, n_alt = 0
  BB 7
   Insn 141: point = 111, n_alt = -1
   Insn 43: point = 111, n_alt = -2
   Insn 42: point = 112, n_alt = 0
   Insn 41: point = 112, n_alt = 0
   Insn 40: point = 112, n_alt = 0
   Insn 39: point = 112, n_alt = 0
  BB 6
   Insn 33: point = 112, n_alt = 0
   Insn 32: point = 113, n_alt = 0
   Insn 31: point = 115, n_alt = 0
   Insn 30: point = 117, n_alt = 0
   Insn 29: point = 119, n_alt = 0
  BB 4
   Insn 139: point = 121, n_alt = -1
   Insn 20: point = 121, n_alt = 0
  BB 16
   Insn 128: point = 122, n_alt = 0
  BB 5
   Insn 28: point = 123, n_alt = -1
   Insn 27: point = 123, n_alt = 0
  BB 3
   Insn 17: point = 124, n_alt = -1
   Insn 16: point = 124, n_alt = 1
   Insn 15: point = 124, n_alt = 1
   Insn 14: point = 125, n_alt = 0
   Insn 13: point = 127, n_alt = 0
   Insn 12: point = 129, n_alt = 0
   Insn 11: point = 130, n_alt = 0
   Insn 10: point = 132, n_alt = 0
  BB 2
   Insn 8: point = 134, n_alt = -1
   Insn 7: point = 134, n_alt = 0
   Insn 155: point = 134, n_alt = 0
 r82: [123..134] [112..120] [109..110] [65..90] [40..58]
 r83: [126..130]
 r84: [105..106]
 r85: [102..104]
 r86: [94..95]
 r87: [92..93]
 r88: [86..87]
 r89: [54..55]
 r90: [36..53]
 r91: [42..43]
 r92: [36..41]
 r93: [34..37]
 r94: [34..35]
 r95: [81..82]
 r96: [61..80]
 r97: [69..70]
 r98: [67..68]
 r99: [61..66]
 r100: [59..62]
 r101: [59..60]
 r102: [29..30]
 r103: [24..25]
 r104: [18..20]
 r105: [9..15]
 r106: [11..12]
 r107: [9..10]
 r108: [6..8]
 r109: [121..122] [111..111] [91..91] [33..33] [28..28] [2..5]
 r110: [0..1]
 r111: [131..132]
 r112: [126..127]
 r113: [128..129]
 r114: [124..125]
 r115: [118..119]
 r116: [116..117]
 r117: [114..115]
 r118: [112..113]
 r119: [107..108]
 r120: [100..103]
 r121: [88..89]
 r122: [56..57]
 r123: [48..52]
 r124: [50..51]
 r125: [38..39]
 r126: [83..84]
 r127: [75..79]
 r128: [77..78]
 r129: [63..64]
 r130: [31..32]
 r131: [26..27]
 r132: [18..19]
 r133: [16..17]
 r134: [13..14]
 r135: [6..7]
 r138: [96..101]
 r139: [98..99]
 r140: [44..49]
 r141: [46..47]
 r142: [71..76]
 r143: [73..74]
 r144: [21..23]
Compressing live ranges: from 135 to 110 - 81%
Ranges after the compression:
 r82: [102..109] [92..99] [89..90] [54..73] [34..47]
 r83: [104..107]
 r84: [85..86]
 r85: [83..84]
 r86: [77..78]
 r87: [75..76]
 r88: [70..71]
 r89: [44..45]
 r90: [30..43]
 r91: [36..37]
 r92: [30..35]
 r93: [28..31]
 r94: [28..29]
 r95: [66..67]
 r96: [50..65]
 r97: [58..59]
 r98: [56..57]
 r99: [50..55]
 r100: [48..51]
 r101: [48..49]
 r102: [23..24]
 r103: [18..19]
 r104: [14..15]
 r105: [6..11]
 r106: [8..9]
 r107: [6..7]
 r108: [4..5]
 r109: [100..101] [91..91] [74..74] [27..27] [22..22] [2..3]
 r110: [0..1]
 r111: [108..109]
 r112: [104..105]
 r113: [106..107]
 r114: [102..103]
 r115: [98..99]
 r116: [96..97]
 r117: [94..95]
 r118: [92..93]
 r119: [87..88]
 r120: [81..84]
 r121: [72..73]
 r122: [46..47]
 r123: [40..43]
 r124: [42..43]
 r125: [32..33]
 r126: [68..69]
 r127: [62..65]
 r128: [64..65]
 r129: [52..53]
 r130: [25..26]
 r131: [20..21]
 r132: [14..15]
 r133: [12..13]
 r134: [10..11]
 r135: [4..5]
 r138: [79..82]
 r139: [79..80]
 r140: [38..41]
 r141: [38..39]
 r142: [60..63]
 r143: [60..61]
 r144: [16..17]

********** Assignment #1: **********

	 Assigning to 139 (cl=CREG, orig=139, freq=2000, tfirst=139, tfreq=2000)...
	   Assign 2 to reload r139 (freq=2000)
	 Assigning to 141 (cl=CREG, orig=141, freq=2000, tfirst=141, tfreq=2000)...
	   Assign 2 to reload r141 (freq=2000)
	 Assigning to 143 (cl=CREG, orig=143, freq=2000, tfirst=143, tfreq=2000)...
	   Assign 2 to reload r143 (freq=2000)
	 Assigning to 138 (cl=GENERAL_REGS, orig=85, freq=3000, tfirst=138, tfreq=3000)...
	   Assign 1 to reload r138 (freq=3000)
	 Assigning to 140 (cl=GENERAL_REGS, orig=124, freq=3000, tfirst=140, tfreq=3000)...
	   Assign 4 to reload r140 (freq=3000)
	 Assigning to 142 (cl=GENERAL_REGS, orig=128, freq=3000, tfirst=142, tfreq=3000)...
	   Assign 4 to reload r142 (freq=3000)
	 Assigning to 144 (cl=GENERAL_REGS, orig=103, freq=3000, tfirst=144, tfreq=3000)...
	   Assign 0 to reload r144 (freq=3000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=28, prev_offset=28)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=16)
Can eliminate 19 to 6 (offset=-8, prev_offset=0)
changing reg in insn 155
changing reg in insn 87
changing reg in insn 79
changing reg in insn 71
changing reg in insn 64
changing reg in insn 48
changing reg in insn 32
changing reg in insn 31
changing reg in insn 10
changing reg in insn 11
changing reg in insn 14
changing reg in insn 49
changing reg in insn 50
changing reg in insn 50
changing reg in insn 53
changing reg in insn 53
changing reg in insn 54
changing reg in insn 60
changing reg in insn 61
changing reg in insn 65
changing reg in insn 66
changing reg in insn 66
changing reg in insn 70
changing reg in insn 70
changing reg in insn 72
changing reg in insn 74
changing reg in insn 73
changing reg in insn 74
changing reg in insn 80
changing reg in insn 81
changing reg in insn 81
changing reg in insn 85
changing reg in insn 85
changing reg in insn 86
changing reg in insn 86
changing reg in insn 88
changing reg in insn 90
changing reg in insn 89
changing reg in insn 90
changing reg in insn 99
changing reg in insn 100
changing reg in insn 106
changing reg in insn 109
changing reg in insn 111
changing reg in insn 115
changing reg in insn 113
changing reg in insn 114
changing reg in insn 114
changing reg in insn 115
changing reg in insn 115
changing reg in insn 117
changing reg in insn 128
changing reg in insn 123
changing reg in insn 118
changing reg in insn 100
changing reg in insn 93
changing reg in insn 54
changing reg in insn 43
changing reg in insn 20
changing reg in insn 131
changing reg in insn 131
changing reg in insn 135
changing reg in insn 10
changing reg in insn 11
changing reg in insn 13
changing reg in insn 14
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 29
changing reg in insn 30
changing reg in insn 30
changing reg in insn 31
changing reg in insn 31
changing reg in insn 32
changing reg in insn 32
changing reg in insn 33
changing reg in insn 48
changing reg in insn 49
changing reg in insn 51
changing reg in insn 59
changing reg in insn 60
changing reg in insn 64
changing reg in insn 65
changing reg in insn 67
changing reg in insn 68
changing reg in insn 71
changing reg in insn 72
changing reg in insn 79
changing reg in insn 80
changing reg in insn 82
changing reg in insn 83
changing reg in insn 87
changing reg in insn 88
changing reg in insn 98
changing reg in insn 99
changing reg in insn 105
changing reg in insn 106
changing reg in insn 108
changing reg in insn 109
changing reg in insn 110
changing reg in insn 111
changing reg in insn 112
changing reg in insn 116
changing reg in insn 117
deleting insn with uid = 43.
deleting insn with uid = 157.
deleting insn with uid = 53.
deleting insn with uid = 160.
deleting insn with uid = 70.
deleting insn with uid = 163.
deleting insn with uid = 86.
deleting insn with uid = 166.
deleting insn with uid = 113.
deleting insn with uid = 131.
deleting insn with uid = 135.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 41.


sys_fcntl

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 17 [flags]
;;  ref usage 	r0={28d,28u} r1={27d,25u} r2={7d,5u} r3={2d,2u} r4={4d,4u} r7={4d,40u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={2e} r17={20d,4u} r18={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} 
;;    total ref usage 267{157d,108u,2e} in 89{88 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 155 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 155 3 2 2 (parallel [
            (set (reg:SI 0 ax [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 155 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 2 8 2 (set (reg:CC 17 flags)
        (compare:CC (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 28 [0x1c])) [6 fd+0 S4 A32])
            (const_int 19 [0x13]))) "fs/fcntl.c":42:8 11 {*cmpsi_1}
     (nil))
(jump_insn 8 7 9 2 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 18)
            (pc))) "fs/fcntl.c":42:8 806 {*jcc}
     (nil)
 -> 18)
(note 9 8 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 3 (set (reg/f:SI 1 dx [111])
        (mem/u/c:SI (plus:SI (reg:SI 0 ax [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x40]  <var_decl 0x7de15612e120 current>)
                        ] UNSPEC_GOT))) [15  S4 A8])) "fs/fcntl.c":42:42 75 {*movsi_internal}
     (nil))
(insn 11 10 12 3 (set (reg/f:SI 1 dx [orig:83 current.6_1 ] [83])
        (mem/f/c:SI (reg/f:SI 1 dx [111]) [1 current+0 S4 A32])) "fs/fcntl.c":42:42 75 {*movsi_internal}
     (nil))
(insn 12 11 13 3 (set (reg:SI 2 cx [113])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [6 fd+0 S4 A32])) "fs/fcntl.c":42:33 75 {*movsi_internal}
     (nil))
(insn 13 12 14 3 (parallel [
            (set (reg:SI 2 cx [112])
                (plus:SI (reg:SI 2 cx [113])
                    (const_int 160 [0xa0])))
            (clobber (reg:CC 17 flags))
        ]) "fs/fcntl.c":42:33 209 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (reg/f:SI 16 argp) [6 fd+0 S4 A32])
            (const_int 160 [0xa0]))
        (nil)))
(insn 14 13 15 3 (set (reg/f:SI 1 dx [114])
        (mem/f:SI (plus:SI (mult:SI (reg:SI 2 cx [112])
                    (const_int 4 [0x4]))
                (reg/f:SI 1 dx [orig:83 current.6_1 ] [83])) [10 current.6_1->filp[fd_30(D)]+0 S4 A32])) "fs/fcntl.c":42:33 75 {*movsi_internal}
     (nil))
(insn 15 14 16 3 (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [10 filp+0 S4 A32])
        (reg/f:SI 1 dx [114])) "fs/fcntl.c":42:33 75 {*movsi_internal}
     (nil))
(insn 16 15 17 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 12 [0xc])) [10 filp+0 S4 A32])
            (const_int 0 [0]))) "fs/fcntl.c":42:23 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 17 16 18 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 23)
            (pc))) "fs/fcntl.c":42:23 806 {*jcc}
     (nil)
 -> 23)
(code_label 18 17 19 4 15 (nil) [1 uses])
(note 19 18 20 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 139 4 (set (reg:SI 0 ax [orig:109 _27 ] [109])
        (const_int -9 [0xfffffffffffffff7])) "fs/fcntl.c":43:16 75 {*movsi_internal}
     (nil))
(jump_insn 139 20 140 4 (set (pc)
        (label_ref 129)) "fs/fcntl.c":43:16 807 {jump}
     (nil)
 -> 129)
(barrier 140 139 23)
(code_label 23 140 24 5 16 (nil) [1 uses])
(note 24 23 27 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 27 24 28 5 (set (reg:CC 17 flags)
        (compare:CC (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 32 [0x20])) [6 cmd+0 S4 A32])
            (const_int 7 [0x7]))) "fs/fcntl.c":44:5 11 {*cmpsi_1}
     (nil))
(jump_insn 28 27 138 5 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 126)
            (pc))) "fs/fcntl.c":44:5 806 {*jcc}
     (nil)
 -> 126)
(note 138 28 29 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 29 138 30 6 (set (reg:SI 1 dx [115])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 32 [0x20])) [6 cmd+0 S4 A32])) "fs/fcntl.c":44:5 75 {*movsi_internal}
     (nil))
(insn 30 29 31 6 (parallel [
            (set (reg:SI 1 dx [116])
                (ashift:SI (reg:SI 1 dx [115])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "fs/fcntl.c":44:5 655 {*ashlsi3_1}
     (nil))
(insn 31 30 32 6 (set (reg:SI 1 dx [117])
        (mem/u/c:SI (plus:SI (plus:SI (reg:SI 1 dx [116])
                    (reg:SI 0 ax [82]))
                (const:SI (unspec:SI [
                            (label_ref:SI 34)
                        ] UNSPEC_GOTOFF))) [0  S4 A8])) "fs/fcntl.c":44:5 75 {*movsi_internal}
     (insn_list:REG_LABEL_OPERAND 34 (nil)))
(insn 32 31 33 6 (parallel [
            (set (reg:SI 1 dx [118])
                (plus:SI (reg:SI 1 dx [117])
                    (reg:SI 0 ax [82])))
            (clobber (reg:CC 17 flags))
        ]) "fs/fcntl.c":44:5 209 {*addsi_1}
     (nil))
(jump_insn 33 32 34 6 (parallel [
            (set (pc)
                (reg:SI 1 dx [118]))
            (use (label_ref 34))
        ]) "fs/fcntl.c":44:5 810 {*tablejump_1}
     (nil)
 -> 34)
(code_label 34 33 35 20 (nil) [2 uses])
(jump_table_data 35 34 36 (addr_diff_vec:SI (label_ref:SI 34)
         [
            (label_ref:SI 37)
            (label_ref:SI 46)
            (label_ref:SI 57)
            (label_ref:SI 96)
            (label_ref:SI 103)
            (label_ref:SI 121)
            (label_ref:SI 121)
            (label_ref:SI 121)
        ]
        (const_int 0 [0])
        (const_int 0 [0])))
(barrier 36 35 37)
(code_label 37 36 38 7 25 (nil) [1 uses])
(note 38 37 39 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 39 38 40 7 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [3  S4 A32])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 36 [0x24])) [3 arg+0 S4 A32])) "fs/fcntl.c":46:16 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 4 [0x4])
        (nil)))
(insn 40 39 41 7 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [6  S4 A32])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 32 [0x20])) [6 fd+0 S4 A32])) "fs/fcntl.c":46:16 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(call_insn 41 40 42 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("dupfd") [flags 0x3]  <function_decl 0x7de156138900 dupfd>) [0 dupfd S1 A8])
            (const_int 8 [0x8]))) "fs/fcntl.c":46:16 823 {*call_value}
     (nil)
    (nil))
(insn 42 41 141 7 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) "fs/fcntl.c":46:16 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(jump_insn 141 42 142 7 (set (pc)
        (label_ref 129)) "fs/fcntl.c":46:16 807 {jump}
     (nil)
 -> 129)
(barrier 142 141 46)
(code_label 46 142 47 8 24 (nil) [1 uses])
(note 47 46 48 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 48 47 49 8 (set (reg/f:SI 0 ax [119])
        (mem/u/c:SI (plus:SI (reg:SI 0 ax [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x40]  <var_decl 0x7de15612e120 current>)
                        ] UNSPEC_GOT))) [15  S4 A8])) "fs/fcntl.c":48:24 75 {*movsi_internal}
     (nil))
(insn 49 48 50 8 (set (reg/f:SI 0 ax [orig:84 current.7_2 ] [84])
        (mem/f/c:SI (reg/f:SI 0 ax [119]) [1 current+0 S4 A32])) "fs/fcntl.c":48:24 75 {*movsi_internal}
     (nil))
(insn 50 49 51 8 (set (reg:SI 1 dx [orig:85 _3 ] [85])
        (mem:SI (plus:SI (reg/f:SI 0 ax [orig:84 current.7_2 ] [84])
                (const_int 636 [0x27c])) [3 current.7_2->close_on_exec+0 S4 A32])) "fs/fcntl.c":48:24 75 {*movsi_internal}
     (nil))
(insn 51 50 159 8 (set (reg:SI 0 ax [120])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [6 fd+0 S4 A32])) "fs/fcntl.c":48:40 75 {*movsi_internal}
     (nil))
(insn 159 51 52 8 (set (reg:QI 2 cx [139])
        (reg:QI 0 ax [120])) "fs/fcntl.c":48:40 77 {*movqi_internal}
     (nil))
(insn 52 159 158 8 (parallel [
            (set (reg:SI 1 dx [orig:85 _3 ] [85])
                (lshiftrt:SI (reg:SI 1 dx [orig:85 _3 ] [85])
                    (reg:QI 2 cx [139])))
            (clobber (reg:CC 17 flags))
        ]) "fs/fcntl.c":48:40 701 {*lshrsi3_1}
     (nil))
(insn 158 52 54 8 (set (reg:SI 0 ax [orig:86 _4 ] [86])
        (reg:SI 1 dx [orig:85 _3 ] [85])) "fs/fcntl.c":48:40 75 {*movsi_internal}
     (nil))
(insn 54 158 143 8 (parallel [
            (set (reg:SI 0 ax [orig:109 _27 ] [109])
                (and:SI (reg:SI 0 ax [orig:87 _5 ] [87])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "fs/fcntl.c":48:47 490 {*andsi_1}
     (nil))
(jump_insn 143 54 144 8 (set (pc)
        (label_ref 129)) "fs/fcntl.c":48:47 807 {jump}
     (nil)
 -> 129)
(barrier 144 143 57)
(code_label 57 144 58 9 23 (nil) [1 uses])
(note 58 57 59 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 59 58 60 9 (set (reg:SI 1 dx [121])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 36 [0x24])) [3 arg+0 S4 A32])) "fs/fcntl.c":50:17 75 {*movsi_internal}
     (nil))
(insn 60 59 61 9 (parallel [
            (set (reg:SI 1 dx [orig:88 _6 ] [88])
                (and:SI (reg:SI 1 dx [121])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "fs/fcntl.c":50:17 490 {*andsi_1}
     (expr_list:REG_EQUAL (and:SI (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                    (const_int 8 [0x8])) [3 arg+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 61 60 62 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:88 _6 ] [88])
            (const_int 0 [0]))) "fs/fcntl.c":50:12 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 62 61 63 9 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 77)
            (pc))) "fs/fcntl.c":50:12 806 {*jcc}
     (nil)
 -> 77)
(note 63 62 64 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 64 63 65 10 (set (reg/f:SI 1 dx [122])
        (mem/u/c:SI (plus:SI (reg:SI 0 ax [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x40]  <var_decl 0x7de15612e120 current>)
                        ] UNSPEC_GOT))) [15  S4 A8])) "fs/fcntl.c":51:36 75 {*movsi_internal}
     (nil))
(insn 65 64 66 10 (set (reg/f:SI 1 dx [orig:89 current.8_7 ] [89])
        (mem/f/c:SI (reg/f:SI 1 dx [122]) [1 current+0 S4 A32])) "fs/fcntl.c":51:36 75 {*movsi_internal}
     (nil))
(insn 66 65 67 10 (set (reg:SI 3 bx [orig:90 _8 ] [90])
        (mem:SI (plus:SI (reg/f:SI 1 dx [orig:89 current.8_7 ] [89])
                (const_int 636 [0x27c])) [3 current.8_7->close_on_exec+0 S4 A32])) "fs/fcntl.c":51:36 75 {*movsi_internal}
     (nil))
(insn 67 66 68 10 (set (reg:SI 1 dx [123])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [6 fd+0 S4 A32])) "fs/fcntl.c":51:42 75 {*movsi_internal}
     (nil))
(insn 68 67 162 10 (set (reg:SI 4 si [124])
        (const_int 1 [0x1])) "fs/fcntl.c":51:42 75 {*movsi_internal}
     (nil))
(insn 162 68 69 10 (set (reg:QI 2 cx [141])
        (reg:QI 1 dx [123])) "fs/fcntl.c":51:42 77 {*movqi_internal}
     (nil))
(insn 69 162 161 10 (parallel [
            (set (reg:SI 4 si [124])
                (ashift:SI (reg:SI 4 si [124])
                    (reg:QI 2 cx [141])))
            (clobber (reg:CC 17 flags))
        ]) "fs/fcntl.c":51:42 655 {*ashlsi3_1}
     (nil))
(insn 161 69 71 10 (set (reg:SI 1 dx [orig:91 _9 ] [91])
        (reg:SI 4 si [124])) "fs/fcntl.c":51:42 75 {*movsi_internal}
     (nil))
(insn 71 161 72 10 (set (reg/f:SI 0 ax [125])
        (mem/u/c:SI (plus:SI (reg:SI 0 ax [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x40]  <var_decl 0x7de15612e120 current>)
                        ] UNSPEC_GOT))) [15  S4 A8])) "fs/fcntl.c":51:36 75 {*movsi_internal}
     (nil))
(insn 72 71 73 10 (set (reg/f:SI 0 ax [orig:93 current.9_11 ] [93])
        (mem/f/c:SI (reg/f:SI 0 ax [125]) [1 current+0 S4 A32])) "fs/fcntl.c":51:36 75 {*movsi_internal}
     (nil))
(insn 73 72 74 10 (parallel [
            (set (reg:SI 1 dx [orig:94 _12 ] [94])
                (ior:SI (reg:SI 1 dx [orig:92 _10 ] [92])
                    (reg:SI 3 bx [orig:90 _8 ] [90])))
            (clobber (reg:CC 17 flags))
        ]) "fs/fcntl.c":51:36 520 {*iorsi_1}
     (nil))
(insn 74 73 145 10 (set (mem:SI (plus:SI (reg/f:SI 0 ax [orig:93 current.9_11 ] [93])
                (const_int 636 [0x27c])) [3 current.9_11->close_on_exec+0 S4 A32])
        (reg:SI 1 dx [orig:94 _12 ] [94])) "fs/fcntl.c":51:36 75 {*movsi_internal}
     (nil))
(jump_insn 145 74 146 10 (set (pc)
        (label_ref 91)) 807 {jump}
     (nil)
 -> 91)
(barrier 146 145 77)
(code_label 77 146 78 11 26 (nil) [1 uses])
(note 78 77 79 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 79 78 80 11 (set (reg/f:SI 1 dx [126])
        (mem/u/c:SI (plus:SI (reg:SI 0 ax [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x40]  <var_decl 0x7de15612e120 current>)
                        ] UNSPEC_GOT))) [15  S4 A8])) "fs/fcntl.c":53:36 75 {*movsi_internal}
     (nil))
(insn 80 79 81 11 (set (reg/f:SI 1 dx [orig:95 current.10_13 ] [95])
        (mem/f/c:SI (reg/f:SI 1 dx [126]) [1 current+0 S4 A32])) "fs/fcntl.c":53:36 75 {*movsi_internal}
     (nil))
(insn 81 80 82 11 (set (reg:SI 3 bx [orig:96 _14 ] [96])
        (mem:SI (plus:SI (reg/f:SI 1 dx [orig:95 current.10_13 ] [95])
                (const_int 636 [0x27c])) [3 current.10_13->close_on_exec+0 S4 A32])) "fs/fcntl.c":53:36 75 {*movsi_internal}
     (nil))
(insn 82 81 83 11 (set (reg:SI 1 dx [127])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [6 fd+0 S4 A32])) "fs/fcntl.c":53:43 75 {*movsi_internal}
     (nil))
(insn 83 82 165 11 (set (reg:SI 4 si [128])
        (const_int 1 [0x1])) "fs/fcntl.c":53:43 75 {*movsi_internal}
     (nil))
(insn 165 83 84 11 (set (reg:QI 2 cx [143])
        (reg:QI 1 dx [127])) "fs/fcntl.c":53:43 77 {*movqi_internal}
     (nil))
(insn 84 165 164 11 (parallel [
            (set (reg:SI 4 si [128])
                (ashift:SI (reg:SI 4 si [128])
                    (reg:QI 2 cx [143])))
            (clobber (reg:CC 17 flags))
        ]) "fs/fcntl.c":53:43 655 {*ashlsi3_1}
     (nil))
(insn 164 84 85 11 (set (reg:SI 1 dx [orig:97 _15 ] [97])
        (reg:SI 4 si [128])) "fs/fcntl.c":53:43 75 {*movsi_internal}
     (nil))
(insn 85 164 87 11 (set (reg:SI 1 dx [orig:98 _16 ] [98])
        (not:SI (reg:SI 1 dx [orig:97 _15 ] [97]))) "fs/fcntl.c":53:39 632 {*one_cmplsi2_1}
     (nil))
(insn 87 85 88 11 (set (reg/f:SI 0 ax [129])
        (mem/u/c:SI (plus:SI (reg:SI 0 ax [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x40]  <var_decl 0x7de15612e120 current>)
                        ] UNSPEC_GOT))) [15  S4 A8])) "fs/fcntl.c":53:36 75 {*movsi_internal}
     (nil))
(insn 88 87 89 11 (set (reg/f:SI 0 ax [orig:100 current.11_18 ] [100])
        (mem/f/c:SI (reg/f:SI 0 ax [129]) [1 current+0 S4 A32])) "fs/fcntl.c":53:36 75 {*movsi_internal}
     (nil))
(insn 89 88 90 11 (parallel [
            (set (reg:SI 1 dx [orig:101 _19 ] [101])
                (and:SI (reg:SI 1 dx [orig:99 _17 ] [99])
                    (reg:SI 3 bx [orig:96 _14 ] [96])))
            (clobber (reg:CC 17 flags))
        ]) "fs/fcntl.c":53:36 490 {*andsi_1}
     (nil))
(insn 90 89 91 11 (set (mem:SI (plus:SI (reg/f:SI 0 ax [orig:100 current.11_18 ] [100])
                (const_int 636 [0x27c])) [3 current.11_18->close_on_exec+0 S4 A32])
        (reg:SI 1 dx [orig:101 _19 ] [101])) "fs/fcntl.c":53:36 75 {*movsi_internal}
     (nil))
(code_label 91 90 92 12 27 (nil) [1 uses])
(note 92 91 93 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 93 92 147 12 (set (reg:SI 0 ax [orig:109 _27 ] [109])
        (const_int 0 [0])) "fs/fcntl.c":54:16 75 {*movsi_internal}
     (nil))
(jump_insn 147 93 148 12 (set (pc)
        (label_ref 129)) "fs/fcntl.c":54:16 807 {jump}
     (nil)
 -> 129)
(barrier 148 147 96)
(code_label 96 148 97 13 22 (nil) [1 uses])
(note 97 96 98 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 98 97 99 13 (set (reg/f:SI 0 ax [130])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [10 filp+0 S4 A32])) "fs/fcntl.c":56:20 75 {*movsi_internal}
     (nil))
(insn 99 98 100 13 (set (reg:HI 0 ax [orig:102 _20 ] [102])
        (mem:HI (plus:SI (reg/f:SI 0 ax [130])
                (const_int 2 [0x2])) [8 filp_32->f_flags+0 S2 A16])) "fs/fcntl.c":56:20 76 {*movhi_internal}
     (nil))
(insn 100 99 149 13 (set (reg:SI 0 ax [orig:109 _27 ] [109])
        (zero_extend:SI (reg:HI 0 ax [orig:102 _20 ] [102]))) "fs/fcntl.c":56:20 144 {*zero_extendhisi2}
     (nil))
(jump_insn 149 100 150 13 (set (pc)
        (label_ref 129)) "fs/fcntl.c":56:20 807 {jump}
     (nil)
 -> 129)
(barrier 150 149 103)
(code_label 103 150 104 14 21 (nil) [1 uses])
(note 104 103 105 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 105 104 106 14 (set (reg/f:SI 0 ax [131])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [10 filp+0 S4 A32])) "fs/fcntl.c":58:23 75 {*movsi_internal}
     (nil))
(insn 106 105 107 14 (set (reg:HI 0 ax [orig:103 _21 ] [103])
        (mem:HI (plus:SI (reg/f:SI 0 ax [131])
                (const_int 2 [0x2])) [8 filp_32->f_flags+0 S2 A16])) "fs/fcntl.c":58:23 76 {*movhi_internal}
     (nil))
(insn 107 106 167 14 (parallel [
            (set (reg:HI 0 ax [orig:103 _21 ] [103])
                (and:HI (reg:HI 0 ax [orig:103 _21 ] [103])
                    (const_int -3073 [0xfffffffffffff3ff])))
            (clobber (reg:CC 17 flags))
        ]) "fs/fcntl.c":58:23 489 {*andhi_1}
     (nil))
(insn 167 107 108 14 (set (reg:HI 1 dx [orig:104 _22 ] [104])
        (reg:HI 0 ax [orig:103 _21 ] [103])) "fs/fcntl.c":58:23 76 {*movhi_internal}
     (nil))
(insn 108 167 109 14 (set (reg/f:SI 0 ax [132])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [10 filp+0 S4 A32])) "fs/fcntl.c":58:23 75 {*movsi_internal}
     (nil))
(insn 109 108 110 14 (set (mem:HI (plus:SI (reg/f:SI 0 ax [132])
                (const_int 2 [0x2])) [8 filp_32->f_flags+0 S2 A16])
        (reg:HI 1 dx [orig:104 _22 ] [104])) "fs/fcntl.c":58:23 76 {*movhi_internal}
     (nil))
(insn 110 109 111 14 (set (reg/f:SI 0 ax [133])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [10 filp+0 S4 A32])) "fs/fcntl.c":59:23 75 {*movsi_internal}
     (nil))
(insn 111 110 112 14 (set (reg:HI 1 dx [orig:105 _23 ] [105])
        (mem:HI (plus:SI (reg/f:SI 0 ax [133])
                (const_int 2 [0x2])) [8 filp_32->f_flags+0 S2 A16])) "fs/fcntl.c":59:23 76 {*movhi_internal}
     (nil))
(insn 112 111 114 14 (set (reg:SI 0 ax [134])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 36 [0x24])) [3 arg+0 S4 A32])) "fs/fcntl.c":59:30 75 {*movsi_internal}
     (nil))
(insn 114 112 115 14 (parallel [
            (set (reg:HI 0 ax [orig:107 _25 ] [107])
                (and:HI (reg:HI 0 ax [orig:106 _24 ] [106])
                    (const_int 3072 [0xc00])))
            (clobber (reg:CC 17 flags))
        ]) "fs/fcntl.c":59:30 489 {*andhi_1}
     (nil))
(insn 115 114 116 14 (parallel [
            (set (reg:HI 1 dx [orig:108 _26 ] [108])
                (ior:HI (reg:HI 1 dx [orig:105 _23 ] [105])
                    (reg:HI 0 ax [orig:107 _25 ] [107])))
            (clobber (reg:CC 17 flags))
        ]) "fs/fcntl.c":59:23 518 {*iorhi_1}
     (nil))
(insn 116 115 117 14 (set (reg/f:SI 0 ax [135])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [10 filp+0 S4 A32])) "fs/fcntl.c":59:23 75 {*movsi_internal}
     (nil))
(insn 117 116 118 14 (set (mem:HI (plus:SI (reg/f:SI 0 ax [135])
                (const_int 2 [0x2])) [8 filp_32->f_flags+0 S2 A16])
        (reg:HI 1 dx [orig:108 _26 ] [108])) "fs/fcntl.c":59:23 76 {*movhi_internal}
     (nil))
(insn 118 117 151 14 (set (reg:SI 0 ax [orig:109 _27 ] [109])
        (const_int 0 [0])) "fs/fcntl.c":60:16 75 {*movsi_internal}
     (nil))
(jump_insn 151 118 152 14 (set (pc)
        (label_ref 129)) "fs/fcntl.c":60:16 807 {jump}
     (nil)
 -> 129)
(barrier 152 151 121)
(code_label 121 152 122 15 19 (nil) [3 uses])
(note 122 121 123 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 123 122 153 15 (set (reg:SI 0 ax [orig:109 _27 ] [109])
        (const_int -1 [0xffffffffffffffff])) "fs/fcntl.c":64:16 75 {*movsi_internal}
     (nil))
(jump_insn 153 123 154 15 (set (pc)
        (label_ref 129)) "fs/fcntl.c":64:16 807 {jump}
     (nil)
 -> 129)
(barrier 154 153 126)
(code_label 126 154 127 16 18 (nil) [1 uses])
(note 127 126 128 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 128 127 129 16 (set (reg:SI 0 ax [orig:109 _27 ] [109])
        (const_int -1 [0xffffffffffffffff])) "fs/fcntl.c":66:16 75 {*movsi_internal}
     (nil))
(code_label 129 128 130 17 17 (nil) [7 uses])
(note 130 129 136 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 136 130 156 17 (use (reg/i:SI 0 ax)) "fs/fcntl.c":68:1 -1
     (nil))
(note 156 136 0 NOTE_INSN_DELETED)

;; Function sys_dup2 (sys_dup2, funcdef_no=4, decl_uid=1350, cgraph_uid=5, symbol_order=4)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 6:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 10:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 11:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 15:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 24: point = 0, n_alt = -1
   Insn 23: point = 0, n_alt = -2
   Insn 19: point = 1, n_alt = -2
   Insn 16: point = 3, n_alt = -2
   Insn 15: point = 4, n_alt = 0
   Insn 14: point = 4, n_alt = 0
   Insn 13: point = 4, n_alt = 0
   Insn 12: point = 4, n_alt = 0
   Insn 11: point = 4, n_alt = 0
   Insn 10: point = 4, n_alt = 0
   Insn 9: point = 4, n_alt = 0
   Insn 8: point = 4, n_alt = -2
   Insn 7: point = 5, n_alt = 0
   Insn 6: point = 6, n_alt = 0
   Insn 5: point = 6, n_alt = 0
   Insn 26: point = 7, n_alt = 0
 r82: [4..7]
 r83: [5..6]
 r84: [2..3]
 r85: [0..1]
Compressing live ranges: from 8 to 6 - 75%
Ranges after the compression:
 r82: [4..5]
 r83: [4..5]
 r84: [2..3]
 r85: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=16)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
changing reg in insn 26
changing reg in insn 8
changing reg in insn 5
changing reg in insn 7
changing reg in insn 16
changing reg in insn 19
changing reg in insn 19
changing reg in insn 23
deleting insn with uid = 16.
deleting insn with uid = 19.
deleting insn with uid = 23.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 9.
verify found no changes in insn with uid = 14.


sys_dup2

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 17 [flags]
;;  ref usage 	r0={4d,3u} r1={4d,1u} r2={3d} r3={1d,1u} r7={8d,18u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={7d} r18={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} 
;;    total ref usage 180{157d,23u,0e} in 13{11 regular + 2 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 26 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 26 3 2 2 (parallel [
            (set (reg:SI 0 ax [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 26 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:SI 1 dx [orig:83 newfd.12_1 ] [83])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [6 newfd+0 S4 A32])) "fs/fcntl.c":72:5 75 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "fs/fcntl.c":72:5 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 7 6 8 2 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [6  S4 A32])
        (reg:SI 1 dx [orig:83 newfd.12_1 ] [83])) "fs/fcntl.c":72:5 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(insn 8 7 9 2 (set (reg:SI 3 bx)
        (reg:SI 0 ax [82])) "fs/fcntl.c":72:5 75 {*movsi_internal}
     (nil))
(call_insn 9 8 10 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("sys_close") [flags 0x41]  <function_decl 0x7de156138800 sys_close>) [0 sys_close S1 A8])
            (const_int 16 [0x10]))) "fs/fcntl.c":72:5 823 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 10 9 11 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "fs/fcntl.c":72:5 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 11 10 12 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "fs/fcntl.c":73:12 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 12 11 13 2 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [6  S4 A32])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [6 newfd+0 S4 A32])) "fs/fcntl.c":73:12 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 13 12 14 2 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [6  S4 A32])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [6 oldfd+0 S4 A32])) "fs/fcntl.c":73:12 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 14 13 15 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("dupfd") [flags 0x3]  <function_decl 0x7de156138900 dupfd>) [0 dupfd S1 A8])
            (const_int 16 [0x10]))) "fs/fcntl.c":73:12 823 {*call_value}
     (nil)
    (nil))
(insn 15 14 24 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "fs/fcntl.c":73:12 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 24 15 27 2 (use (reg/i:SI 0 ax)) "fs/fcntl.c":74:1 -1
     (nil))
(note 27 24 0 NOTE_INSN_DELETED)
