
;; Function dupfd (dupfd, funcdef_no=1, decl_uid=1324, cgraph_uid=2, symbol_order=1)

scanning new insn with uid = 123.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 17 n_edges 22 count 19 (  1.1)
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 15 16 11 12 13 14
;;
;; Loop 1
;;  header 10, latch 9
;;  depth 1, outer 0
;;  nodes: 10 9 8
;; 2 succs { 4 3 }
;; 3 succs { 4 5 }
;; 4 succs { 14 }
;; 5 succs { 6 7 }
;; 6 succs { 14 }
;; 7 succs { 10 }
;; 8 succs { 9 16 }
;; 9 succs { 10 }
;; 10 succs { 8 15 }
;; 15 succs { 11 }
;; 16 succs { 11 }
;; 11 succs { 12 13 }
;; 12 succs { 14 }
;; 13 succs { 14 }
;; 14 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r112: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r112,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r111: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r111,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r110: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r110,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r109: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a24 (r109,l0) best CREG, allocno GENERAL_REGS
    r108: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r108,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a31 (r107,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r106: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a30 (r106,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r105: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a32 (r105,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r104: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a36 (r104,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r103: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a35 (r103,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a37 (r102,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r101: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r101,l0) best AREG, allocno GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r100,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r99,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r97,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r96,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r95,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a26 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a28 (r86,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r85,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a33 (r84,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a34 (r83,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r82,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r101,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 NON_Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 MEM:7000
  a1(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:14000
  a2(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:18000
  a3(r99,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a4(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a5(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:18000
  a6(r118,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a7(r119,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a8(r116,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a9(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a10(r117,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a11(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a12(r114,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a13(r115,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a14(r113,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a15(r82,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:42000
  a16(r112,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a17(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a18(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a19(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:2000
  a20(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:7000
  a21(r111,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a22(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:10000
  a23(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:10000
  a24(r109,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 NON_Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 MEM:12000
  a25(r110,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:6000
  a26(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a27(r108,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a28(r86,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a29(r85,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a30(r106,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a31(r107,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a32(r105,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a33(r84,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a34(r83,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a35(r103,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a36(r104,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a37(r102,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000

   Insn 107(l0): point = 0
   Insn 106(l0): point = 2
   Insn 102(l0): point = 4
   Insn 99(l0): point = 7
   Insn 98(l0): point = 9
   Insn 97(l0): point = 11
   Insn 96(l0): point = 13
   Insn 95(l0): point = 15
   Insn 94(l0): point = 17
   Insn 93(l0): point = 19
   Insn 92(l0): point = 21
   Insn 91(l0): point = 23
   Insn 90(l0): point = 25
   Insn 89(l0): point = 27
   Insn 88(l0): point = 29
   Insn 87(l0): point = 31
   Insn 86(l0): point = 33
   Insn 85(l0): point = 35
   Insn 84(l0): point = 37
   Insn 83(l0): point = 39
   Insn 82(l0): point = 41
   Insn 81(l0): point = 43
   Insn 80(l0): point = 45
   Insn 79(l0): point = 47
   Insn 78(l0): point = 49
   Insn 77(l0): point = 51
   Insn 76(l0): point = 53
   Insn 75(l0): point = 55
   Insn 74(l0): point = 57
   Insn 73(l0): point = 59
   Insn 72(l0): point = 61
   Insn 71(l0): point = 63
   Insn 115(l0): point = 66
   Insn 66(l0): point = 68
   Insn 64(l0): point = 71
   Insn 63(l0): point = 73
   Insn 122(l0): point = 76
   Insn 118(l0): point = 79
   Insn 43(l0): point = 82
   Insn 42(l0): point = 84
   Insn 41(l0): point = 86
   Insn 40(l0): point = 88
   Insn 39(l0): point = 90
   Insn 38(l0): point = 92
   Insn 37(l0): point = 94
   Insn 58(l0): point = 97
   Insn 57(l0): point = 99
   Insn 45(l0): point = 102
   Insn 113(l0): point = 105
   Insn 111(l0): point = 108
   Insn 29(l0): point = 110
   Insn 27(l0): point = 113
   Insn 26(l0): point = 115
   Insn 109(l0): point = 118
   Insn 19(l0): point = 120
   Insn 16(l0): point = 123
   Insn 15(l0): point = 125
   Insn 14(l0): point = 127
   Insn 13(l0): point = 129
   Insn 12(l0): point = 131
   Insn 11(l0): point = 133
   Insn 10(l0): point = 135
   Insn 8(l0): point = 138
   Insn 7(l0): point = 140
   Insn 123(l0): point = 142
 a0(r101): [3..4]
 a1(r100): [118..120] [108..110] [66..68] [5..7]
 a2(r97): [10..15]
 a3(r99): [10..11]
 a4(r98): [12..13]
 a5(r95): [16..33]
 a6(r118): [16..17]
 a7(r119): [18..19]
 a8(r116): [22..23]
 a9(r96): [22..27]
 a10(r117): [24..25]
 a11(r94): [28..37]
 a12(r114): [28..29]
 a13(r115): [30..31]
 a14(r113): [34..35]
 a15(r82): [123..142] [113..117] [71..107] [36..65]
 a16(r112): [38..39]
 a17(r92): [42..45]
 a18(r93): [42..43]
 a19(r91): [44..49]
 a20(r88): [44..59]
 a21(r111): [46..47]
 a22(r90): [50..51]
 a23(r89): [52..53]
 a24(r109): [54..57]
 a25(r110): [54..55]
 a26(r87): [60..61]
 a27(r108): [62..63]
 a28(r86): [85..86]
 a29(r85): [87..92]
 a30(r106): [87..88]
 a31(r107): [89..90]
 a32(r105): [93..94]
 a33(r84): [126..127]
 a34(r83): [128..133]
 a35(r103): [128..129]
 a36(r104): [130..131]
 a37(r102): [134..135]
Compressing live ranges: from 145 to 66 - 45%
Ranges after the compression:
 a0(r101): [0..1]
 a1(r100): [56..57] [52..53] [42..43] [2..3]
 a2(r97): [4..7]
 a3(r99): [4..5]
 a4(r98): [6..7]
 a5(r95): [8..19]
 a6(r118): [8..9]
 a7(r119): [10..11]
 a8(r116): [12..13]
 a9(r96): [12..15]
 a10(r117): [14..15]
 a11(r94): [16..23]
 a12(r114): [16..17]
 a13(r115): [18..19]
 a14(r113): [20..21]
 a15(r82): [58..65] [54..55] [44..51] [22..41]
 a16(r112): [24..25]
 a17(r92): [26..29]
 a18(r93): [26..27]
 a19(r91): [28..31]
 a20(r88): [28..37]
 a21(r111): [30..31]
 a22(r90): [32..33]
 a23(r89): [34..35]
 a24(r109): [36..37]
 a25(r110): [36..37]
 a26(r87): [38..39]
 a27(r108): [40..41]
 a28(r86): [44..45]
 a29(r85): [46..49]
 a30(r106): [46..47]
 a31(r107): [48..49]
 a32(r105): [50..51]
 a33(r84): [58..59]
 a34(r83): [60..63]
 a35(r103): [60..61]
 a36(r104): [62..63]
 a37(r102): [64..65]
  pref0:a24(r109)<-hr2@1000
  pref1:a0(r101)<-hr0@1500
  regions=1, blocks=17, points=66
    allocnos=38 (big 0), copies=0, conflicts=0, ranges=44
Disposition:
   15:r82  l0     0   34:r83  l0     1   33:r84  l0     1   29:r85  l0     1
   28:r86  l0     1   26:r87  l0     1   20:r88  l0     3   23:r89  l0     1
   22:r90  l0     1   19:r91  l0     2   17:r92  l0     1   18:r93  l0     2
   11:r94  l0     1    5:r95  l0     0    9:r96  l0     1    2:r97  l0     0
    4:r98  l0     1    3:r99  l0     1    1:r100 l0     0    0:r101 l0     0
   37:r102 l0     1   35:r103 l0     2   36:r104 l0     2   32:r105 l0     1
   30:r106 l0     2   31:r107 l0     2   27:r108 l0     1   24:r109 l0     1
   25:r110 l0     4   21:r111 l0     1   16:r112 l0     1   14:r113 l0     0
   12:r114 l0     2   13:r115 l0     2    8:r116 l0     2   10:r117 l0     2
    6:r118 l0     1    7:r119 l0     1
+++Costs: overall -1000, reg -1000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


dupfd

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 17 [flags]
;;  ref usage 	r0={2d,2u} r1={1d} r2={1d} r6={1d,16u} r7={1d,16u} r16={1d,28u,5e} r17={16d,6u} r19={1d,16u} r82={1d,6u} r83={1d,1u} r84={1d,1u} r85={1d,1u} r86={1d,1u} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,2u} r96={1d,1u} r97={1d,2u} r98={1d,1u} r99={1d,1u} r100={4d,1u} r101={1d,1u} r102={1d,1u} r103={1d,1u} r104={1d,1u} r105={1d,1u} r106={1d,1u} r107={1d,1u} r108={1d,1u} r109={1d,1u} r110={1d,1u} r111={1d,1u} r112={1d,1u} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} 
;;    total ref usage 199{65d,129u,5e} in 65{65 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 123 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 123 3 2 2 (parallel [
            (set (reg:SI 82)
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_FLUSH_QUEUE (nil)
            (nil))))
(note 2 123 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 2 8 2 (set (reg:CC 17 flags)
        (compare:CC (mem/c:SI (reg/f:SI 16 argp) [6 fd+0 S4 A32])
            (const_int 19 [0x13]))) "fs/fcntl.c":17:8 11 {*cmpsi_1}
     (nil))
(jump_insn 8 7 9 2 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 17)
            (pc))) "fs/fcntl.c":17:8 806 {*jcc}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (nil))
 -> 17)
(note 9 8 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 3 (set (reg/f:SI 102)
        (mem/u/c:SI (plus:SI (reg:SI 82)
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x40]  <var_decl 0x7bd51e52e120 current>)
                        ] UNSPEC_GOT))) [15  S4 A8])) "fs/fcntl.c":17:34 75 {*movsi_internal}
     (nil))
(insn 11 10 12 3 (set (reg/f:SI 83 [ current.0_1 ])
        (mem/f/c:SI (reg/f:SI 102) [1 current+0 S4 A32])) "fs/fcntl.c":17:34 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 102)
        (nil)))
(insn 12 11 13 3 (set (reg:SI 104)
        (mem/c:SI (reg/f:SI 16 argp) [6 fd+0 S4 A32])) "fs/fcntl.c":17:40 75 {*movsi_internal}
     (nil))
(insn 13 12 14 3 (parallel [
            (set (reg:SI 103)
                (plus:SI (reg:SI 104)
                    (const_int 160 [0xa0])))
            (clobber (reg:CC 17 flags))
        ]) "fs/fcntl.c":17:40 209 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 104)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:SI (mem/c:SI (reg/f:SI 16 argp) [6 fd+0 S4 A32])
                    (const_int 160 [0xa0]))
                (nil)))))
(insn 14 13 15 3 (set (reg/f:SI 84 [ _2 ])
        (mem/f:SI (plus:SI (mult:SI (reg:SI 103)
                    (const_int 4 [0x4]))
                (reg/f:SI 83 [ current.0_1 ])) [10 current.0_1->filp[fd_22(D)]+0 S4 A32])) "fs/fcntl.c":17:40 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 103)
        (expr_list:REG_DEAD (reg/f:SI 83 [ current.0_1 ])
            (nil))))
(insn 15 14 16 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:SI 84 [ _2 ])
            (const_int 0 [0]))) "fs/fcntl.c":17:23 7 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg/f:SI 84 [ _2 ])
        (nil)))
(jump_insn 16 15 17 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 22)
            (pc))) "fs/fcntl.c":17:23 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 22)
(code_label 17 16 18 4 2 (nil) [1 uses])
(note 18 17 19 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 19 18 109 4 (set (reg:SI 100 [ _20 ])
        (const_int -9 [0xfffffffffffffff7])) "fs/fcntl.c":18:16 75 {*movsi_internal}
     (nil))
(jump_insn 109 19 110 4 (set (pc)
        (label_ref 100)) "fs/fcntl.c":18:16 807 {jump}
     (nil)
 -> 100)
(barrier 110 109 22)
(code_label 22 110 23 5 3 (nil) [1 uses])
(note 23 22 26 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 26 23 27 5 (set (reg:CC 17 flags)
        (compare:CC (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                    (const_int 4 [0x4])) [6 arg+0 S4 A32])
            (const_int 19 [0x13]))) "fs/fcntl.c":19:8 11 {*cmpsi_1}
     (nil))
(jump_insn 27 26 28 5 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 32)
            (pc))) "fs/fcntl.c":19:8 806 {*jcc}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (nil))
 -> 32)
(note 28 27 29 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 111 6 (set (reg:SI 100 [ _20 ])
        (const_int -22 [0xffffffffffffffea])) "fs/fcntl.c":20:16 75 {*movsi_internal}
     (nil))
(jump_insn 111 29 112 6 (set (pc)
        (label_ref 100)) "fs/fcntl.c":20:16 807 {jump}
     (nil)
 -> 100)
(barrier 112 111 32)
(code_label 32 112 33 7 5 (nil) [1 uses])
(note 33 32 113 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(jump_insn 113 33 114 7 (set (pc)
        (label_ref 52)) "fs/fcntl.c":21:11 807 {jump}
     (nil)
 -> 52)
(barrier 114 113 54)
(code_label 54 114 36 8 9 (nil) [1 uses])
(note 36 54 37 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 37 36 38 8 (set (reg/f:SI 105)
        (mem/u/c:SI (plus:SI (reg:SI 82)
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x40]  <var_decl 0x7bd51e52e120 current>)
                        ] UNSPEC_GOT))) [15  S4 A8])) "fs/fcntl.c":22:20 75 {*movsi_internal}
     (nil))
(insn 38 37 39 8 (set (reg/f:SI 85 [ current.1_3 ])
        (mem/f/c:SI (reg/f:SI 105) [1 current+0 S4 A32])) "fs/fcntl.c":22:20 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 105)
        (nil)))
(insn 39 38 40 8 (set (reg:SI 107)
        (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 4 [0x4])) [6 arg+0 S4 A32])) "fs/fcntl.c":22:26 75 {*movsi_internal}
     (nil))
(insn 40 39 41 8 (parallel [
            (set (reg:SI 106)
                (plus:SI (reg:SI 107)
                    (const_int 160 [0xa0])))
            (clobber (reg:CC 17 flags))
        ]) "fs/fcntl.c":22:26 209 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 107)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                            (const_int 4 [0x4])) [6 arg+0 S4 A32])
                    (const_int 160 [0xa0]))
                (nil)))))
(insn 41 40 42 8 (set (reg/f:SI 86 [ _4 ])
        (mem/f:SI (plus:SI (mult:SI (reg:SI 106)
                    (const_int 4 [0x4]))
                (reg/f:SI 85 [ current.1_3 ])) [10 current.1_3->filp[arg_19]+0 S4 A32])) "fs/fcntl.c":22:26 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 106)
        (expr_list:REG_DEAD (reg/f:SI 85 [ current.1_3 ])
            (nil))))
(insn 42 41 43 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:SI 86 [ _4 ])
            (const_int 0 [0]))) "fs/fcntl.c":22:12 7 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg/f:SI 86 [ _4 ])
        (nil)))
(jump_insn 43 42 44 8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 121)
            (pc))) "fs/fcntl.c":22:12 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 121)
(note 44 43 45 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 45 44 52 9 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                        (const_int 4 [0x4])) [6 arg+0 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                            (const_int 4 [0x4])) [6 arg+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "fs/fcntl.c":23:16 209 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(code_label 52 45 53 10 6 (nil) [1 uses])
(note 53 52 57 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 57 53 58 10 (set (reg:CC 17 flags)
        (compare:CC (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                    (const_int 4 [0x4])) [6 arg+0 S4 A32])
            (const_int 19 [0x13]))) "fs/fcntl.c":21:16 11 {*cmpsi_1}
     (nil))
(jump_insn 58 57 117 10 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 54)
            (pc))) "fs/fcntl.c":21:16 806 {*jcc}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (nil))
 -> 54)
(note 117 58 118 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(jump_insn 118 117 119 15 (set (pc)
        (label_ref 59)) 807 {jump}
     (nil)
 -> 59)
(barrier 119 118 121)
(code_label 121 119 120 16 11 (nil) [1 uses])
(note 120 121 122 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 122 120 59 16 (const_int 0 [0]) "fs/fcntl.c":25:13 843 {nop}
     (nil))
(code_label 59 122 60 11 8 (nil) [1 uses])
(note 60 59 63 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 63 60 64 11 (set (reg:CC 17 flags)
        (compare:CC (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                    (const_int 4 [0x4])) [6 arg+0 S4 A32])
            (const_int 19 [0x13]))) "fs/fcntl.c":26:8 11 {*cmpsi_1}
     (nil))
(jump_insn 64 63 65 11 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 69)
            (pc))) "fs/fcntl.c":26:8 806 {*jcc}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (nil))
 -> 69)
(note 65 64 66 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 66 65 115 12 (set (reg:SI 100 [ _20 ])
        (const_int -24 [0xffffffffffffffe8])) "fs/fcntl.c":27:16 75 {*movsi_internal}
     (nil))
(jump_insn 115 66 116 12 (set (pc)
        (label_ref 100)) "fs/fcntl.c":27:16 807 {jump}
     (nil)
 -> 100)
(barrier 116 115 69)
(code_label 69 116 70 13 10 (nil) [1 uses])
(note 70 69 71 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 71 70 72 13 (set (reg/f:SI 108)
        (mem/u/c:SI (plus:SI (reg:SI 82)
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x40]  <var_decl 0x7bd51e52e120 current>)
                        ] UNSPEC_GOT))) [15  S4 A8])) "fs/fcntl.c":28:28 75 {*movsi_internal}
     (nil))
(insn 72 71 73 13 (set (reg/f:SI 87 [ current.2_5 ])
        (mem/f/c:SI (reg/f:SI 108) [1 current+0 S4 A32])) "fs/fcntl.c":28:28 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 108)
        (nil)))
(insn 73 72 74 13 (set (reg:SI 88 [ _6 ])
        (mem:SI (plus:SI (reg/f:SI 87 [ current.2_5 ])
                (const_int 636 [0x27c])) [3 current.2_5->close_on_exec+0 S4 A32])) "fs/fcntl.c":28:28 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 87 [ current.2_5 ])
        (nil)))
(insn 74 73 75 13 (set (reg:SI 109)
        (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 4 [0x4])) [6 arg+0 S4 A32])) "fs/fcntl.c":28:35 75 {*movsi_internal}
     (nil))
(insn 75 74 76 13 (set (reg:SI 110)
        (const_int 1 [0x1])) "fs/fcntl.c":28:35 75 {*movsi_internal}
     (nil))
(insn 76 75 77 13 (parallel [
            (set (reg:SI 89 [ _7 ])
                (ashift:SI (reg:SI 110)
                    (subreg:QI (reg:SI 109) 0)))
            (clobber (reg:CC 17 flags))
        ]) "fs/fcntl.c":28:35 655 {*ashlsi3_1}
     (expr_list:REG_DEAD (reg:SI 110)
        (expr_list:REG_DEAD (reg:SI 109)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 77 76 78 13 (set (reg:SI 90 [ _8 ])
        (not:SI (reg:SI 89 [ _7 ]))) "fs/fcntl.c":28:31 632 {*one_cmplsi2_1}
     (expr_list:REG_DEAD (reg:SI 89 [ _7 ])
        (nil)))
(insn 78 77 79 13 (set (reg:SI 91 [ _9 ])
        (reg:SI 90 [ _8 ])) "fs/fcntl.c":28:31 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 90 [ _8 ])
        (nil)))
(insn 79 78 80 13 (set (reg/f:SI 111)
        (mem/u/c:SI (plus:SI (reg:SI 82)
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x40]  <var_decl 0x7bd51e52e120 current>)
                        ] UNSPEC_GOT))) [15  S4 A8])) "fs/fcntl.c":28:28 75 {*movsi_internal}
     (nil))
(insn 80 79 81 13 (set (reg/f:SI 92 [ current.3_10 ])
        (mem/f/c:SI (reg/f:SI 111) [1 current+0 S4 A32])) "fs/fcntl.c":28:28 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 111)
        (nil)))
(insn 81 80 82 13 (parallel [
            (set (reg:SI 93 [ _11 ])
                (and:SI (reg:SI 88 [ _6 ])
                    (reg:SI 91 [ _9 ])))
            (clobber (reg:CC 17 flags))
        ]) "fs/fcntl.c":28:28 490 {*andsi_1}
     (expr_list:REG_DEAD (reg:SI 91 [ _9 ])
        (expr_list:REG_DEAD (reg:SI 88 [ _6 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 82 81 83 13 (set (mem:SI (plus:SI (reg/f:SI 92 [ current.3_10 ])
                (const_int 636 [0x27c])) [3 current.3_10->close_on_exec+0 S4 A32])
        (reg:SI 93 [ _11 ])) "fs/fcntl.c":28:28 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 93 [ _11 ])
        (expr_list:REG_DEAD (reg/f:SI 92 [ current.3_10 ])
            (nil))))
(insn 83 82 84 13 (set (reg/f:SI 112)
        (mem/u/c:SI (plus:SI (reg:SI 82)
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x40]  <var_decl 0x7bd51e52e120 current>)
                        ] UNSPEC_GOT))) [15  S4 A8])) "fs/fcntl.c":29:34 75 {*movsi_internal}
     (nil))
(insn 84 83 85 13 (set (reg/f:SI 94 [ current.4_12 ])
        (mem/f/c:SI (reg/f:SI 112) [1 current+0 S4 A32])) "fs/fcntl.c":29:34 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 112)
        (nil)))
(insn 85 84 86 13 (set (reg/f:SI 113)
        (mem/u/c:SI (plus:SI (reg:SI 82)
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x40]  <var_decl 0x7bd51e52e120 current>)
                        ] UNSPEC_GOT))) [15  S4 A8])) "fs/fcntl.c":29:13 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 82)
        (nil)))
(insn 86 85 87 13 (set (reg/f:SI 95 [ current.5_13 ])
        (mem/f/c:SI (reg/f:SI 113) [1 current+0 S4 A32])) "fs/fcntl.c":29:13 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 113)
        (nil)))
(insn 87 86 88 13 (set (reg:SI 115)
        (mem/c:SI (reg/f:SI 16 argp) [6 fd+0 S4 A32])) "fs/fcntl.c":29:40 75 {*movsi_internal}
     (nil))
(insn 88 87 89 13 (parallel [
            (set (reg:SI 114)
                (plus:SI (reg:SI 115)
                    (const_int 160 [0xa0])))
            (clobber (reg:CC 17 flags))
        ]) "fs/fcntl.c":29:40 209 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 115)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:SI (mem/c:SI (reg/f:SI 16 argp) [6 fd+0 S4 A32])
                    (const_int 160 [0xa0]))
                (nil)))))
(insn 89 88 90 13 (set (reg/f:SI 96 [ _14 ])
        (mem/f:SI (plus:SI (mult:SI (reg:SI 114)
                    (const_int 4 [0x4]))
                (reg/f:SI 94 [ current.4_12 ])) [10 current.4_12->filp[fd_22(D)]+0 S4 A32])) "fs/fcntl.c":29:40 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 114)
        (expr_list:REG_DEAD (reg/f:SI 94 [ current.4_12 ])
            (nil))))
(insn 90 89 91 13 (set (reg:SI 117)
        (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 4 [0x4])) [6 arg+0 S4 A32])) "fs/fcntl.c":29:25 75 {*movsi_internal}
     (nil))
(insn 91 90 92 13 (parallel [
            (set (reg:SI 116)
                (plus:SI (reg:SI 117)
                    (const_int 160 [0xa0])))
            (clobber (reg:CC 17 flags))
        ]) "fs/fcntl.c":29:25 209 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 117)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                            (const_int 4 [0x4])) [6 arg+0 S4 A32])
                    (const_int 160 [0xa0]))
                (nil)))))
(insn 92 91 93 13 (set (mem/f:SI (plus:SI (mult:SI (reg:SI 116)
                    (const_int 4 [0x4]))
                (reg/f:SI 95 [ current.5_13 ])) [10 current.5_13->filp[arg_19]+0 S4 A32])
        (reg/f:SI 96 [ _14 ])) "fs/fcntl.c":29:25 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 116)
        (expr_list:REG_DEAD (reg/f:SI 96 [ _14 ])
            (nil))))
(insn 93 92 94 13 (set (reg:SI 119)
        (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 4 [0x4])) [6 arg+0 S4 A32])) "fs/fcntl.c":29:19 75 {*movsi_internal}
     (nil))
(insn 94 93 95 13 (parallel [
            (set (reg:SI 118)
                (plus:SI (reg:SI 119)
                    (const_int 160 [0xa0])))
            (clobber (reg:CC 17 flags))
        ]) "fs/fcntl.c":29:19 209 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 119)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                            (const_int 4 [0x4])) [6 arg+0 S4 A32])
                    (const_int 160 [0xa0]))
                (nil)))))
(insn 95 94 96 13 (set (reg/f:SI 97 [ _15 ])
        (mem/f:SI (plus:SI (mult:SI (reg:SI 118)
                    (const_int 4 [0x4]))
                (reg/f:SI 95 [ current.5_13 ])) [10 current.5_13->filp[arg_19]+0 S4 A32])) "fs/fcntl.c":29:19 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 118)
        (expr_list:REG_DEAD (reg/f:SI 95 [ current.5_13 ])
            (nil))))
(insn 96 95 97 13 (set (reg:HI 98 [ _16 ])
        (mem:HI (plus:SI (reg/f:SI 97 [ _15 ])
                (const_int 4 [0x4])) [8 _15->f_count+0 S2 A32])) "fs/fcntl.c":29:45 76 {*movhi_internal}
     (nil))
(insn 97 96 98 13 (parallel [
            (set (reg:HI 99 [ _18 ])
                (plus:HI (reg:HI 98 [ _16 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "fs/fcntl.c":29:54 212 {*addhi_1}
     (expr_list:REG_DEAD (reg:HI 98 [ _16 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 98 97 99 13 (set (mem:HI (plus:SI (reg/f:SI 97 [ _15 ])
                (const_int 4 [0x4])) [8 _15->f_count+0 S2 A32])
        (reg:HI 99 [ _18 ])) "fs/fcntl.c":29:54 76 {*movhi_internal}
     (expr_list:REG_DEAD (reg:HI 99 [ _18 ])
        (expr_list:REG_DEAD (reg/f:SI 97 [ _15 ])
            (nil))))
(insn 99 98 100 13 (set (reg:SI 100 [ _20 ])
        (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 4 [0x4])) [6 arg+0 S4 A32])) "fs/fcntl.c":30:12 75 {*movsi_internal}
     (nil))
(code_label 100 99 101 14 4 (nil) [3 uses])
(note 101 100 102 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 102 101 106 14 (set (reg:SI 101 [ <retval> ])
        (reg:SI 100 [ _20 ])) "fs/fcntl.c":31:1 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 100 [ _20 ])
        (nil)))
(insn 106 102 107 14 (set (reg/i:SI 0 ax)
        (reg:SI 101 [ <retval> ])) "fs/fcntl.c":31:1 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 101 [ <retval> ])
        (nil)))
(insn 107 106 0 14 (use (reg/i:SI 0 ax)) "fs/fcntl.c":31:1 -1
     (nil))

;; Function sys_dup (sys_dup, funcdef_no=2, decl_uid=1330, cgraph_uid=3, symbol_order=2)

scanning new insn with uid = 19.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 3 n_edges 2 count 3 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r84: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r84,l0) best AREG, allocno GENERAL_REGS
    r83: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a1 (r83,l0) best AREG, allocno GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r82,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r84,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 NON_Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 MEM:7000
  a1(r83,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 NON_Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 MEM:11000
  a2(r82,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:6000

   Insn 17(l0): point = 0
   Insn 16(l0): point = 2
   Insn 12(l0): point = 4
   Insn 9(l0): point = 6
   Insn 8(l0): point = 8
   Insn 7(l0): point = 10
   Insn 6(l0): point = 12
   Insn 5(l0): point = 14
   Insn 19(l0): point = 16
 a0(r84): [3..4]
 a1(r83): [5..6]
 a2(r82): [16..16]
Compressing live ranges: from 19 to 5 - 26%
Ranges after the compression:
 a0(r84): [0..1]
 a1(r83): [2..3]
 a2(r82): [4..4]
  pref0:a0(r84)<-hr0@1500
  pref1:a1(r83)<-hr0@1500
  regions=1, blocks=3, points=5
    allocnos=3 (big 0), copies=0, conflicts=0, ranges=3
Disposition:
    2:r82  l0     0    1:r83  l0     0    0:r84  l0     0
+++Costs: overall -2000, reg -2000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


sys_dup

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 7 [sp] 17 [flags]
;;  ref usage 	r0={3d,3u} r1={2d} r2={2d} r6={1d,2u} r7={4d,7u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={1d,2u} r17={3d} r18={1d} r19={1d,2u} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r82={1d} r83={1d,1u} r84={1d,1u} 
;;    total ref usage 103{85d,18u,0e} in 9{8 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 19 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 19 3 2 2 (parallel [
            (set (reg:SI 82)
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_UNUSED (reg:SI 82)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_CFA_FLUSH_QUEUE (nil)
                (nil)))))
(note 2 19 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [6  S4 A32])
        (const_int 0 [0])) "fs/fcntl.c":35:12 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 4 [0x4])
        (nil)))
(insn 6 5 7 2 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [6  S4 A32])
        (mem/c:SI (reg/f:SI 16 argp) [6 fildes+0 S4 A32])) "fs/fcntl.c":35:12 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(call_insn 7 6 8 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("dupfd") [flags 0x3]  <function_decl 0x7bd51e538900 dupfd>) [0 dupfd S1 A8])
            (const_int 8 [0x8]))) "fs/fcntl.c":35:12 823 {*call_value}
     (nil)
    (nil))
(insn 8 7 9 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) "fs/fcntl.c":35:12 209 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (nil))))
(insn 9 8 12 2 (set (reg:SI 83 [ _4 ])
        (reg:SI 0 ax)) "fs/fcntl.c":35:12 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 12 9 16 2 (set (reg:SI 84 [ <retval> ])
        (reg:SI 83 [ _4 ])) "fs/fcntl.c":35:12 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 83 [ _4 ])
        (nil)))
(insn 16 12 17 2 (set (reg/i:SI 0 ax)
        (reg:SI 84 [ <retval> ])) "fs/fcntl.c":36:1 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 84 [ <retval> ])
        (nil)))
(insn 17 16 0 2 (use (reg/i:SI 0 ax)) "fs/fcntl.c":36:1 -1
     (nil))

;; Function sys_fcntl (sys_fcntl, funcdef_no=3, decl_uid=1335, cgraph_uid=4, symbol_order=3)

scanning new insn with uid = 155.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 18 n_edges 26 count 18 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17
;; 2 succs { 4 3 }
;; 3 succs { 4 5 }
;; 4 succs { 17 }
;; 5 succs { 16 6 }
;; 6 succs { 15 7 8 9 13 14 }
;; 7 succs { 17 }
;; 8 succs { 17 }
;; 9 succs { 10 11 }
;; 10 succs { 12 }
;; 11 succs { 12 }
;; 12 succs { 17 }
;; 13 succs { 17 }
;; 14 succs { 17 }
;; 15 succs { 17 }
;; 16 succs { 17 }
;; 17 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r135: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r135,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r134,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r133,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r132: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r132,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r131: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r131,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r130: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r130,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r129: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r129,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r128: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r128,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r127: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a23 (r127,l0) best CREG, allocno GENERAL_REGS
    r126: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a26 (r126,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a31 (r125,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a34 (r124,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r123: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a33 (r123,l0) best CREG, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a36 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a38 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a41 (r120,l0) best CREG, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a44 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a45 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a46 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a47 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a48 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a49 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a52 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r112: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a51 (r112,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r111: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a53 (r111,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r110: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r110,l0) best AREG, allocno GENERAL_REGS
    r109: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a1 (r109,l0) best AREG, allocno GENERAL_REGS
    r108: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r108,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r107,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r106: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r106,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r105: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r105,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r104: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r104,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r103: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r103,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r102,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r101: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r101,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r100,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r99,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r97,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r96,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r95,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a28 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a32 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a30 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a35 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a37 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a39 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a40 (r86,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a42 (r85,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a43 (r84,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a50 (r83,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r82,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r110,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 NON_Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 MEM:7000
  a1(r109,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 NON_Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 MEM:27000
  a2(r135,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a3(r108,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a4(r107,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:6000
  a5(r105,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:7000
  a6(r106,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:6000
  a7(r134,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a8(r133,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a9(r132,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a10(r104,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a11(r103,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a12(r131,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a13(r102,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a14(r130,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a15(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a16(r101,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a17(r99,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:2000
  a18(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:7000
  a19(r129,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a20(r82,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:49000
  a21(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:10000
  a22(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:10000
  a23(r127,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 NON_Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 MEM:12000
  a24(r128,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:6000
  a25(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a26(r126,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a27(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a28(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a29(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:2000
  a30(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:7000
  a31(r125,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a32(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:10000
  a33(r123,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 NON_Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 MEM:12000
  a34(r124,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:6000
  a35(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a36(r122,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a37(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a38(r121,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a39(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:6000
  a40(r86,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:10000
  a41(r120,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 NON_Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 MEM:12000
  a42(r85,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a43(r84,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a44(r119,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a45(r118,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a46(r117,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:9000
  a47(r116,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a48(r115,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a49(r114,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a50(r83,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a51(r112,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a52(r113,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a53(r111,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000

   Insn 136(l0): point = 0
   Insn 135(l0): point = 2
   Insn 131(l0): point = 4
   Insn 128(l0): point = 7
   Insn 153(l0): point = 10
   Insn 123(l0): point = 12
   Insn 151(l0): point = 15
   Insn 118(l0): point = 17
   Insn 117(l0): point = 19
   Insn 116(l0): point = 21
   Insn 115(l0): point = 23
   Insn 114(l0): point = 25
   Insn 113(l0): point = 27
   Insn 112(l0): point = 29
   Insn 111(l0): point = 31
   Insn 110(l0): point = 33
   Insn 109(l0): point = 35
   Insn 108(l0): point = 37
   Insn 107(l0): point = 39
   Insn 106(l0): point = 41
   Insn 105(l0): point = 43
   Insn 149(l0): point = 46
   Insn 100(l0): point = 48
   Insn 99(l0): point = 50
   Insn 98(l0): point = 52
   Insn 147(l0): point = 55
   Insn 93(l0): point = 57
   Insn 90(l0): point = 60
   Insn 89(l0): point = 62
   Insn 88(l0): point = 64
   Insn 87(l0): point = 66
   Insn 86(l0): point = 68
   Insn 85(l0): point = 70
   Insn 84(l0): point = 72
   Insn 83(l0): point = 74
   Insn 82(l0): point = 76
   Insn 81(l0): point = 78
   Insn 80(l0): point = 80
   Insn 79(l0): point = 82
   Insn 145(l0): point = 85
   Insn 74(l0): point = 87
   Insn 73(l0): point = 89
   Insn 72(l0): point = 91
   Insn 71(l0): point = 93
   Insn 70(l0): point = 95
   Insn 69(l0): point = 97
   Insn 68(l0): point = 99
   Insn 67(l0): point = 101
   Insn 66(l0): point = 103
   Insn 65(l0): point = 105
   Insn 64(l0): point = 107
   Insn 62(l0): point = 110
   Insn 61(l0): point = 112
   Insn 60(l0): point = 114
   Insn 59(l0): point = 116
   Insn 143(l0): point = 119
   Insn 54(l0): point = 121
   Insn 53(l0): point = 123
   Insn 52(l0): point = 125
   Insn 51(l0): point = 127
   Insn 50(l0): point = 129
   Insn 49(l0): point = 131
   Insn 48(l0): point = 133
   Insn 141(l0): point = 136
   Insn 43(l0): point = 138
   Insn 42(l0): point = 140
   Insn 41(l0): point = 142
   Insn 40(l0): point = 144
   Insn 39(l0): point = 146
   Insn 33(l0): point = 149
   Insn 32(l0): point = 151
   Insn 31(l0): point = 153
   Insn 30(l0): point = 155
   Insn 29(l0): point = 157
   Insn 28(l0): point = 160
   Insn 27(l0): point = 162
   Insn 139(l0): point = 165
   Insn 20(l0): point = 167
   Insn 17(l0): point = 170
   Insn 16(l0): point = 172
   Insn 15(l0): point = 174
   Insn 14(l0): point = 176
   Insn 13(l0): point = 178
   Insn 12(l0): point = 180
   Insn 11(l0): point = 182
   Insn 10(l0): point = 184
   Insn 8(l0): point = 187
   Insn 7(l0): point = 189
   Insn 155(l0): point = 191
 a0(r110): [3..4]
 a1(r109): [165..167] [136..138] [119..121] [55..57] [46..48] [15..17] [10..12] [5..7]
 a2(r135): [20..21]
 a3(r108): [20..23]
 a4(r107): [24..25]
 a5(r105): [24..31]
 a6(r106): [26..27]
 a7(r134): [28..29]
 a8(r133): [32..33]
 a9(r132): [36..37]
 a10(r104): [36..39]
 a11(r103): [40..41]
 a12(r131): [42..43]
 a13(r102): [49..50]
 a14(r130): [51..52]
 a15(r100): [61..64]
 a16(r101): [61..62]
 a17(r99): [63..68]
 a18(r96): [63..78]
 a19(r129): [65..66]
 a20(r82): [170..191] [149..164] [134..135] [94..118] [67..84]
 a21(r98): [69..70]
 a22(r97): [71..72]
 a23(r127): [73..76]
 a24(r128): [73..74]
 a25(r95): [79..80]
 a26(r126): [81..82]
 a27(r93): [88..91]
 a28(r94): [88..89]
 a29(r92): [90..95]
 a30(r90): [90..103]
 a31(r125): [92..93]
 a32(r91): [96..97]
 a33(r123): [98..101]
 a34(r124): [98..99]
 a35(r89): [104..105]
 a36(r122): [106..107]
 a37(r88): [113..114]
 a38(r121): [115..116]
 a39(r87): [122..123]
 a40(r86): [124..125]
 a41(r120): [126..127]
 a42(r85): [126..129]
 a43(r84): [130..131]
 a44(r119): [132..133]
 a45(r118): [150..151]
 a46(r117): [152..153]
 a47(r116): [154..155]
 a48(r115): [156..157]
 a49(r114): [175..176]
 a50(r83): [177..182]
 a51(r112): [177..178]
 a52(r113): [179..180]
 a53(r111): [183..184]
Compressing live ranges: from 194 to 104 - 53%
Ranges after the compression:
 a0(r110): [0..1]
 a1(r109): [94..95] [84..85] [70..71] [30..31] [24..25] [2..7]
 a2(r135): [8..9]
 a3(r108): [8..9]
 a4(r107): [10..11]
 a5(r105): [10..15]
 a6(r106): [12..13]
 a7(r134): [14..15]
 a8(r133): [16..17]
 a9(r132): [18..19]
 a10(r104): [18..19]
 a11(r103): [20..21]
 a12(r131): [22..23]
 a13(r102): [26..27]
 a14(r130): [28..29]
 a15(r100): [32..35]
 a16(r101): [32..33]
 a17(r99): [34..39]
 a18(r96): [34..45]
 a19(r129): [36..37]
 a20(r82): [96..103] [86..93] [82..83] [56..69] [38..49]
 a21(r98): [40..41]
 a22(r97): [42..43]
 a23(r127): [44..45]
 a24(r128): [44..45]
 a25(r95): [46..47]
 a26(r126): [48..49]
 a27(r93): [50..53]
 a28(r94): [50..51]
 a29(r92): [52..57]
 a30(r90): [52..61]
 a31(r125): [54..55]
 a32(r91): [58..59]
 a33(r123): [60..61]
 a34(r124): [60..61]
 a35(r89): [62..63]
 a36(r122): [64..65]
 a37(r88): [66..67]
 a38(r121): [68..69]
 a39(r87): [72..73]
 a40(r86): [74..75]
 a41(r120): [76..77]
 a42(r85): [76..77]
 a43(r84): [78..79]
 a44(r119): [80..81]
 a45(r118): [86..87]
 a46(r117): [88..89]
 a47(r116): [90..91]
 a48(r115): [92..93]
 a49(r114): [96..97]
 a50(r83): [98..101]
 a51(r112): [98..99]
 a52(r113): [100..101]
 a53(r111): [102..103]
  pref0:a23(r127)<-hr2@1000
  pref1:a33(r123)<-hr2@1000
  pref2:a41(r120)<-hr2@1000
  pref3:a0(r110)<-hr0@1500
  pref4:a1(r109)<-hr0@1500
  regions=1, blocks=18, points=104
    allocnos=54 (big 0), copies=0, conflicts=0, ranges=63
Disposition:
   20:r82  l0     0   50:r83  l0     1   43:r84  l0     0   42:r85  l0     1
   40:r86  l0     0   39:r87  l0     0   37:r88  l0     1   35:r89  l0     1
   30:r90  l0     3   32:r91  l0     1   29:r92  l0     1   27:r93  l0     0
   28:r94  l0     1   25:r95  l0     1   18:r96  l0     3   22:r97  l0     1
   21:r98  l0     1   17:r99  l0     1   15:r100 l0     0   16:r101 l0     1
   13:r102 l0     0   11:r103 l0     0   10:r104 l0     1    5:r105 l0     1
    6:r106 l0     0    4:r107 l0     0    3:r108 l0     1    1:r109 l0     0
    0:r110 l0     0   53:r111 l0     1   51:r112 l0     2   52:r113 l0     2
   49:r114 l0     1   48:r115 l0     1   47:r116 l0     1   46:r117 l0     1
   45:r118 l0     1   44:r119 l0     0   41:r120 l0     0   38:r121 l0     1
   36:r122 l0     1   33:r123 l0     1   34:r124 l0     4   31:r125 l0     0
   26:r126 l0     1   23:r127 l0     1   24:r128 l0     4   19:r129 l0     0
   14:r130 l0     0   12:r131 l0     0    9:r132 l0     0    8:r133 l0     0
    7:r134 l0     0    2:r135 l0     0
+++Costs: overall -2000, reg -2000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


sys_fcntl

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 7 [sp] 17 [flags]
;;  ref usage 	r0={3d,3u} r1={2d} r2={2d} r6={1d,17u} r7={4d,22u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={1d,27u,2e} r17={20d,4u} r18={1d} r19={1d,24u} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r82={1d,8u} r83={1d,1u} r84={1d,1u} r85={1d,1u} r86={1d,1u} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,1u} r100={1d,1u} r101={1d,1u} r102={1d,1u} r103={1d,1u} r104={1d,1u} r105={1d,1u} r106={1d,1u} r107={1d,1u} r108={1d,1u} r109={8d,1u} r110={1d,1u} r111={1d,1u} r112={1d,1u} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,1u} r121={1d,1u} r122={1d,1u} r123={1d,1u} r124={1d,1u} r125={1d,1u} r126={1d,1u} r127={1d,1u} r128={1d,1u} r129={1d,1u} r130={1d,1u} r131={1d,1u} r132={1d,1u} r133={1d,1u} r134={1d,1u} r135={1d,1u} 
;;    total ref usage 320{160d,158u,2e} in 89{88 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 155 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 155 3 2 2 (parallel [
            (set (reg:SI 82)
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_FLUSH_QUEUE (nil)
            (nil))))
(note 2 155 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 2 8 2 (set (reg:CC 17 flags)
        (compare:CC (mem/c:SI (reg/f:SI 16 argp) [6 fd+0 S4 A32])
            (const_int 19 [0x13]))) "fs/fcntl.c":42:8 11 {*cmpsi_1}
     (nil))
(jump_insn 8 7 9 2 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 18)
            (pc))) "fs/fcntl.c":42:8 806 {*jcc}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (nil))
 -> 18)
(note 9 8 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 3 (set (reg/f:SI 111)
        (mem/u/c:SI (plus:SI (reg:SI 82)
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x40]  <var_decl 0x7bd51e52e120 current>)
                        ] UNSPEC_GOT))) [15  S4 A8])) "fs/fcntl.c":42:42 75 {*movsi_internal}
     (nil))
(insn 11 10 12 3 (set (reg/f:SI 83 [ current.6_1 ])
        (mem/f/c:SI (reg/f:SI 111) [1 current+0 S4 A32])) "fs/fcntl.c":42:42 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 111)
        (nil)))
(insn 12 11 13 3 (set (reg:SI 113)
        (mem/c:SI (reg/f:SI 16 argp) [6 fd+0 S4 A32])) "fs/fcntl.c":42:33 75 {*movsi_internal}
     (nil))
(insn 13 12 14 3 (parallel [
            (set (reg:SI 112)
                (plus:SI (reg:SI 113)
                    (const_int 160 [0xa0])))
            (clobber (reg:CC 17 flags))
        ]) "fs/fcntl.c":42:33 209 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 113)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:SI (mem/c:SI (reg/f:SI 16 argp) [6 fd+0 S4 A32])
                    (const_int 160 [0xa0]))
                (nil)))))
(insn 14 13 15 3 (set (reg/f:SI 114)
        (mem/f:SI (plus:SI (mult:SI (reg:SI 112)
                    (const_int 4 [0x4]))
                (reg/f:SI 83 [ current.6_1 ])) [10 current.6_1->filp[fd_30(D)]+0 S4 A32])) "fs/fcntl.c":42:33 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 112)
        (expr_list:REG_DEAD (reg/f:SI 83 [ current.6_1 ])
            (nil))))
(insn 15 14 16 3 (set (mem/f/c:SI (plus:SI (reg/f:SI 19 frame)
                (const_int -4 [0xfffffffffffffffc])) [10 filp+0 S4 A32])
        (reg/f:SI 114)) "fs/fcntl.c":42:33 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 114)
        (nil)))
(insn 16 15 17 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:SI (plus:SI (reg/f:SI 19 frame)
                    (const_int -4 [0xfffffffffffffffc])) [10 filp+0 S4 A32])
            (const_int 0 [0]))) "fs/fcntl.c":42:23 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 17 16 18 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 23)
            (pc))) "fs/fcntl.c":42:23 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 23)
(code_label 18 17 19 4 15 (nil) [1 uses])
(note 19 18 20 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 139 4 (set (reg:SI 109 [ _27 ])
        (const_int -9 [0xfffffffffffffff7])) "fs/fcntl.c":43:16 75 {*movsi_internal}
     (nil))
(jump_insn 139 20 140 4 (set (pc)
        (label_ref 129)) "fs/fcntl.c":43:16 807 {jump}
     (nil)
 -> 129)
(barrier 140 139 23)
(code_label 23 140 24 5 16 (nil) [1 uses])
(note 24 23 27 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 27 24 28 5 (set (reg:CC 17 flags)
        (compare:CC (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                    (const_int 4 [0x4])) [6 cmd+0 S4 A32])
            (const_int 7 [0x7]))) "fs/fcntl.c":44:5 11 {*cmpsi_1}
     (nil))
(jump_insn 28 27 138 5 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 126)
            (pc))) "fs/fcntl.c":44:5 806 {*jcc}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (nil))
 -> 126)
(note 138 28 29 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 29 138 30 6 (set (reg:SI 115)
        (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 4 [0x4])) [6 cmd+0 S4 A32])) "fs/fcntl.c":44:5 75 {*movsi_internal}
     (nil))
(insn 30 29 31 6 (parallel [
            (set (reg:SI 116)
                (ashift:SI (reg:SI 115)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "fs/fcntl.c":44:5 655 {*ashlsi3_1}
     (expr_list:REG_DEAD (reg:SI 115)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 31 30 32 6 (set (reg:SI 117)
        (mem/u/c:SI (plus:SI (plus:SI (reg:SI 116)
                    (reg:SI 82))
                (const:SI (unspec:SI [
                            (label_ref:SI 34)
                        ] UNSPEC_GOTOFF))) [0  S4 A8])) "fs/fcntl.c":44:5 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 116)
        (insn_list:REG_LABEL_OPERAND 34 (nil))))
(insn 32 31 33 6 (parallel [
            (set (reg:SI 118)
                (plus:SI (reg:SI 117)
                    (reg:SI 82)))
            (clobber (reg:CC 17 flags))
        ]) "fs/fcntl.c":44:5 209 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 117)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(jump_insn 33 32 34 6 (parallel [
            (set (pc)
                (reg:SI 118))
            (use (label_ref 34))
        ]) "fs/fcntl.c":44:5 810 {*tablejump_1}
     (expr_list:REG_DEAD (reg:SI 118)
        (nil))
 -> 34)
(code_label 34 33 35 20 (nil) [2 uses])
(jump_table_data 35 34 36 (addr_diff_vec:SI (label_ref:SI 34)
         [
            (label_ref:SI 37)
            (label_ref:SI 46)
            (label_ref:SI 57)
            (label_ref:SI 96)
            (label_ref:SI 103)
            (label_ref:SI 121)
            (label_ref:SI 121)
            (label_ref:SI 121)
        ]
        (const_int 0 [0])
        (const_int 0 [0])))
(barrier 36 35 37)
(code_label 37 36 38 7 25 (nil) [1 uses])
(note 38 37 39 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 39 38 40 7 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [3  S4 A32])
        (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 8 [0x8])) [3 arg+0 S4 A32])) "fs/fcntl.c":46:16 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 4 [0x4])
        (nil)))
(insn 40 39 41 7 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [6  S4 A32])
        (mem/c:SI (reg/f:SI 16 argp) [6 fd+0 S4 A32])) "fs/fcntl.c":46:16 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(call_insn 41 40 42 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("dupfd") [flags 0x3]  <function_decl 0x7bd51e538900 dupfd>) [0 dupfd S1 A8])
            (const_int 8 [0x8]))) "fs/fcntl.c":46:16 823 {*call_value}
     (nil)
    (nil))
(insn 42 41 43 7 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) "fs/fcntl.c":46:16 209 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (nil))))
(insn 43 42 141 7 (set (reg:SI 109 [ _27 ])
        (reg:SI 0 ax)) "fs/fcntl.c":46:16 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(jump_insn 141 43 142 7 (set (pc)
        (label_ref 129)) "fs/fcntl.c":46:16 807 {jump}
     (nil)
 -> 129)
(barrier 142 141 46)
(code_label 46 142 47 8 24 (nil) [1 uses])
(note 47 46 48 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 48 47 49 8 (set (reg/f:SI 119)
        (mem/u/c:SI (plus:SI (reg:SI 82)
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x40]  <var_decl 0x7bd51e52e120 current>)
                        ] UNSPEC_GOT))) [15  S4 A8])) "fs/fcntl.c":48:24 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 82)
        (nil)))
(insn 49 48 50 8 (set (reg/f:SI 84 [ current.7_2 ])
        (mem/f/c:SI (reg/f:SI 119) [1 current+0 S4 A32])) "fs/fcntl.c":48:24 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 119)
        (nil)))
(insn 50 49 51 8 (set (reg:SI 85 [ _3 ])
        (mem:SI (plus:SI (reg/f:SI 84 [ current.7_2 ])
                (const_int 636 [0x27c])) [3 current.7_2->close_on_exec+0 S4 A32])) "fs/fcntl.c":48:24 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 84 [ current.7_2 ])
        (nil)))
(insn 51 50 52 8 (set (reg:SI 120)
        (mem/c:SI (reg/f:SI 16 argp) [6 fd+0 S4 A32])) "fs/fcntl.c":48:40 75 {*movsi_internal}
     (nil))
(insn 52 51 53 8 (parallel [
            (set (reg:SI 86 [ _4 ])
                (lshiftrt:SI (reg:SI 85 [ _3 ])
                    (subreg:QI (reg:SI 120) 0)))
            (clobber (reg:CC 17 flags))
        ]) "fs/fcntl.c":48:40 701 {*lshrsi3_1}
     (expr_list:REG_DEAD (reg:SI 120)
        (expr_list:REG_DEAD (reg:SI 85 [ _3 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 53 52 54 8 (set (reg:SI 87 [ _5 ])
        (reg:SI 86 [ _4 ])) "fs/fcntl.c":48:47 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 86 [ _4 ])
        (nil)))
(insn 54 53 143 8 (parallel [
            (set (reg:SI 109 [ _27 ])
                (and:SI (reg:SI 87 [ _5 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "fs/fcntl.c":48:47 490 {*andsi_1}
     (expr_list:REG_DEAD (reg:SI 87 [ _5 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(jump_insn 143 54 144 8 (set (pc)
        (label_ref 129)) "fs/fcntl.c":48:47 807 {jump}
     (nil)
 -> 129)
(barrier 144 143 57)
(code_label 57 144 58 9 23 (nil) [1 uses])
(note 58 57 59 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 59 58 60 9 (set (reg:SI 121)
        (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 8 [0x8])) [3 arg+0 S4 A32])) "fs/fcntl.c":50:17 75 {*movsi_internal}
     (nil))
(insn 60 59 61 9 (parallel [
            (set (reg:SI 88 [ _6 ])
                (and:SI (reg:SI 121)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "fs/fcntl.c":50:17 490 {*andsi_1}
     (expr_list:REG_DEAD (reg:SI 121)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (and:SI (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                            (const_int 8 [0x8])) [3 arg+0 S4 A32])
                    (const_int 1 [0x1]))
                (nil)))))
(insn 61 60 62 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 88 [ _6 ])
            (const_int 0 [0]))) "fs/fcntl.c":50:12 7 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 88 [ _6 ])
        (nil)))
(jump_insn 62 61 63 9 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 77)
            (pc))) "fs/fcntl.c":50:12 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 77)
(note 63 62 64 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 64 63 65 10 (set (reg/f:SI 122)
        (mem/u/c:SI (plus:SI (reg:SI 82)
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x40]  <var_decl 0x7bd51e52e120 current>)
                        ] UNSPEC_GOT))) [15  S4 A8])) "fs/fcntl.c":51:36 75 {*movsi_internal}
     (nil))
(insn 65 64 66 10 (set (reg/f:SI 89 [ current.8_7 ])
        (mem/f/c:SI (reg/f:SI 122) [1 current+0 S4 A32])) "fs/fcntl.c":51:36 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 122)
        (nil)))
(insn 66 65 67 10 (set (reg:SI 90 [ _8 ])
        (mem:SI (plus:SI (reg/f:SI 89 [ current.8_7 ])
                (const_int 636 [0x27c])) [3 current.8_7->close_on_exec+0 S4 A32])) "fs/fcntl.c":51:36 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 89 [ current.8_7 ])
        (nil)))
(insn 67 66 68 10 (set (reg:SI 123)
        (mem/c:SI (reg/f:SI 16 argp) [6 fd+0 S4 A32])) "fs/fcntl.c":51:42 75 {*movsi_internal}
     (nil))
(insn 68 67 69 10 (set (reg:SI 124)
        (const_int 1 [0x1])) "fs/fcntl.c":51:42 75 {*movsi_internal}
     (nil))
(insn 69 68 70 10 (parallel [
            (set (reg:SI 91 [ _9 ])
                (ashift:SI (reg:SI 124)
                    (subreg:QI (reg:SI 123) 0)))
            (clobber (reg:CC 17 flags))
        ]) "fs/fcntl.c":51:42 655 {*ashlsi3_1}
     (expr_list:REG_DEAD (reg:SI 124)
        (expr_list:REG_DEAD (reg:SI 123)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 70 69 71 10 (set (reg:SI 92 [ _10 ])
        (reg:SI 91 [ _9 ])) "fs/fcntl.c":51:42 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 91 [ _9 ])
        (nil)))
(insn 71 70 72 10 (set (reg/f:SI 125)
        (mem/u/c:SI (plus:SI (reg:SI 82)
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x40]  <var_decl 0x7bd51e52e120 current>)
                        ] UNSPEC_GOT))) [15  S4 A8])) "fs/fcntl.c":51:36 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 82)
        (nil)))
(insn 72 71 73 10 (set (reg/f:SI 93 [ current.9_11 ])
        (mem/f/c:SI (reg/f:SI 125) [1 current+0 S4 A32])) "fs/fcntl.c":51:36 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 125)
        (nil)))
(insn 73 72 74 10 (parallel [
            (set (reg:SI 94 [ _12 ])
                (ior:SI (reg:SI 90 [ _8 ])
                    (reg:SI 92 [ _10 ])))
            (clobber (reg:CC 17 flags))
        ]) "fs/fcntl.c":51:36 520 {*iorsi_1}
     (expr_list:REG_DEAD (reg:SI 92 [ _10 ])
        (expr_list:REG_DEAD (reg:SI 90 [ _8 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 74 73 145 10 (set (mem:SI (plus:SI (reg/f:SI 93 [ current.9_11 ])
                (const_int 636 [0x27c])) [3 current.9_11->close_on_exec+0 S4 A32])
        (reg:SI 94 [ _12 ])) "fs/fcntl.c":51:36 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 94 [ _12 ])
        (expr_list:REG_DEAD (reg/f:SI 93 [ current.9_11 ])
            (nil))))
(jump_insn 145 74 146 10 (set (pc)
        (label_ref 91)) 807 {jump}
     (nil)
 -> 91)
(barrier 146 145 77)
(code_label 77 146 78 11 26 (nil) [1 uses])
(note 78 77 79 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 79 78 80 11 (set (reg/f:SI 126)
        (mem/u/c:SI (plus:SI (reg:SI 82)
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x40]  <var_decl 0x7bd51e52e120 current>)
                        ] UNSPEC_GOT))) [15  S4 A8])) "fs/fcntl.c":53:36 75 {*movsi_internal}
     (nil))
(insn 80 79 81 11 (set (reg/f:SI 95 [ current.10_13 ])
        (mem/f/c:SI (reg/f:SI 126) [1 current+0 S4 A32])) "fs/fcntl.c":53:36 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 126)
        (nil)))
(insn 81 80 82 11 (set (reg:SI 96 [ _14 ])
        (mem:SI (plus:SI (reg/f:SI 95 [ current.10_13 ])
                (const_int 636 [0x27c])) [3 current.10_13->close_on_exec+0 S4 A32])) "fs/fcntl.c":53:36 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 95 [ current.10_13 ])
        (nil)))
(insn 82 81 83 11 (set (reg:SI 127)
        (mem/c:SI (reg/f:SI 16 argp) [6 fd+0 S4 A32])) "fs/fcntl.c":53:43 75 {*movsi_internal}
     (nil))
(insn 83 82 84 11 (set (reg:SI 128)
        (const_int 1 [0x1])) "fs/fcntl.c":53:43 75 {*movsi_internal}
     (nil))
(insn 84 83 85 11 (parallel [
            (set (reg:SI 97 [ _15 ])
                (ashift:SI (reg:SI 128)
                    (subreg:QI (reg:SI 127) 0)))
            (clobber (reg:CC 17 flags))
        ]) "fs/fcntl.c":53:43 655 {*ashlsi3_1}
     (expr_list:REG_DEAD (reg:SI 128)
        (expr_list:REG_DEAD (reg:SI 127)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 85 84 86 11 (set (reg:SI 98 [ _16 ])
        (not:SI (reg:SI 97 [ _15 ]))) "fs/fcntl.c":53:39 632 {*one_cmplsi2_1}
     (expr_list:REG_DEAD (reg:SI 97 [ _15 ])
        (nil)))
(insn 86 85 87 11 (set (reg:SI 99 [ _17 ])
        (reg:SI 98 [ _16 ])) "fs/fcntl.c":53:39 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 98 [ _16 ])
        (nil)))
(insn 87 86 88 11 (set (reg/f:SI 129)
        (mem/u/c:SI (plus:SI (reg:SI 82)
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x40]  <var_decl 0x7bd51e52e120 current>)
                        ] UNSPEC_GOT))) [15  S4 A8])) "fs/fcntl.c":53:36 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 82)
        (nil)))
(insn 88 87 89 11 (set (reg/f:SI 100 [ current.11_18 ])
        (mem/f/c:SI (reg/f:SI 129) [1 current+0 S4 A32])) "fs/fcntl.c":53:36 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:SI 129)
        (nil)))
(insn 89 88 90 11 (parallel [
            (set (reg:SI 101 [ _19 ])
                (and:SI (reg:SI 96 [ _14 ])
                    (reg:SI 99 [ _17 ])))
            (clobber (reg:CC 17 flags))
        ]) "fs/fcntl.c":53:36 490 {*andsi_1}
     (expr_list:REG_DEAD (reg:SI 99 [ _17 ])
        (expr_list:REG_DEAD (reg:SI 96 [ _14 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 90 89 91 11 (set (mem:SI (plus:SI (reg/f:SI 100 [ current.11_18 ])
                (const_int 636 [0x27c])) [3 current.11_18->close_on_exec+0 S4 A32])
        (reg:SI 101 [ _19 ])) "fs/fcntl.c":53:36 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 101 [ _19 ])
        (expr_list:REG_DEAD (reg/f:SI 100 [ current.11_18 ])
            (nil))))
(code_label 91 90 92 12 27 (nil) [1 uses])
(note 92 91 93 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 93 92 147 12 (set (reg:SI 109 [ _27 ])
        (const_int 0 [0])) "fs/fcntl.c":54:16 75 {*movsi_internal}
     (nil))
(jump_insn 147 93 148 12 (set (pc)
        (label_ref 129)) "fs/fcntl.c":54:16 807 {jump}
     (nil)
 -> 129)
(barrier 148 147 96)
(code_label 96 148 97 13 22 (nil) [1 uses])
(note 97 96 98 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 98 97 99 13 (set (reg/f:SI 130)
        (mem/f/c:SI (plus:SI (reg/f:SI 19 frame)
                (const_int -4 [0xfffffffffffffffc])) [10 filp+0 S4 A32])) "fs/fcntl.c":56:20 75 {*movsi_internal}
     (nil))
(insn 99 98 100 13 (set (reg:HI 102 [ _20 ])
        (mem:HI (plus:SI (reg/f:SI 130)
                (const_int 2 [0x2])) [8 filp_32->f_flags+0 S2 A16])) "fs/fcntl.c":56:20 76 {*movhi_internal}
     (expr_list:REG_DEAD (reg/f:SI 130)
        (nil)))
(insn 100 99 149 13 (set (reg:SI 109 [ _27 ])
        (zero_extend:SI (reg:HI 102 [ _20 ]))) "fs/fcntl.c":56:20 144 {*zero_extendhisi2}
     (expr_list:REG_DEAD (reg:HI 102 [ _20 ])
        (nil)))
(jump_insn 149 100 150 13 (set (pc)
        (label_ref 129)) "fs/fcntl.c":56:20 807 {jump}
     (nil)
 -> 129)
(barrier 150 149 103)
(code_label 103 150 104 14 21 (nil) [1 uses])
(note 104 103 105 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 105 104 106 14 (set (reg/f:SI 131)
        (mem/f/c:SI (plus:SI (reg/f:SI 19 frame)
                (const_int -4 [0xfffffffffffffffc])) [10 filp+0 S4 A32])) "fs/fcntl.c":58:23 75 {*movsi_internal}
     (nil))
(insn 106 105 107 14 (set (reg:HI 103 [ _21 ])
        (mem:HI (plus:SI (reg/f:SI 131)
                (const_int 2 [0x2])) [8 filp_32->f_flags+0 S2 A16])) "fs/fcntl.c":58:23 76 {*movhi_internal}
     (expr_list:REG_DEAD (reg/f:SI 131)
        (nil)))
(insn 107 106 108 14 (parallel [
            (set (reg:HI 104 [ _22 ])
                (and:HI (reg:HI 103 [ _21 ])
                    (const_int -3073 [0xfffffffffffff3ff])))
            (clobber (reg:CC 17 flags))
        ]) "fs/fcntl.c":58:23 489 {*andhi_1}
     (expr_list:REG_DEAD (reg:HI 103 [ _21 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 108 107 109 14 (set (reg/f:SI 132)
        (mem/f/c:SI (plus:SI (reg/f:SI 19 frame)
                (const_int -4 [0xfffffffffffffffc])) [10 filp+0 S4 A32])) "fs/fcntl.c":58:23 75 {*movsi_internal}
     (nil))
(insn 109 108 110 14 (set (mem:HI (plus:SI (reg/f:SI 132)
                (const_int 2 [0x2])) [8 filp_32->f_flags+0 S2 A16])
        (reg:HI 104 [ _22 ])) "fs/fcntl.c":58:23 76 {*movhi_internal}
     (expr_list:REG_DEAD (reg/f:SI 132)
        (expr_list:REG_DEAD (reg:HI 104 [ _22 ])
            (nil))))
(insn 110 109 111 14 (set (reg/f:SI 133)
        (mem/f/c:SI (plus:SI (reg/f:SI 19 frame)
                (const_int -4 [0xfffffffffffffffc])) [10 filp+0 S4 A32])) "fs/fcntl.c":59:23 75 {*movsi_internal}
     (nil))
(insn 111 110 112 14 (set (reg:HI 105 [ _23 ])
        (mem:HI (plus:SI (reg/f:SI 133)
                (const_int 2 [0x2])) [8 filp_32->f_flags+0 S2 A16])) "fs/fcntl.c":59:23 76 {*movhi_internal}
     (expr_list:REG_DEAD (reg/f:SI 133)
        (nil)))
(insn 112 111 113 14 (set (reg:SI 134)
        (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 8 [0x8])) [3 arg+0 S4 A32])) "fs/fcntl.c":59:30 75 {*movsi_internal}
     (nil))
(insn 113 112 114 14 (set (reg:HI 106 [ _24 ])
        (subreg:HI (reg:SI 134) 0)) "fs/fcntl.c":59:30 76 {*movhi_internal}
     (expr_list:REG_DEAD (reg:SI 134)
        (nil)))
(insn 114 113 115 14 (parallel [
            (set (reg:HI 107 [ _25 ])
                (and:HI (reg:HI 106 [ _24 ])
                    (const_int 3072 [0xc00])))
            (clobber (reg:CC 17 flags))
        ]) "fs/fcntl.c":59:30 489 {*andhi_1}
     (expr_list:REG_DEAD (reg:HI 106 [ _24 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 115 114 116 14 (parallel [
            (set (reg:HI 108 [ _26 ])
                (ior:HI (reg:HI 105 [ _23 ])
                    (reg:HI 107 [ _25 ])))
            (clobber (reg:CC 17 flags))
        ]) "fs/fcntl.c":59:23 518 {*iorhi_1}
     (expr_list:REG_DEAD (reg:HI 107 [ _25 ])
        (expr_list:REG_DEAD (reg:HI 105 [ _23 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 116 115 117 14 (set (reg/f:SI 135)
        (mem/f/c:SI (plus:SI (reg/f:SI 19 frame)
                (const_int -4 [0xfffffffffffffffc])) [10 filp+0 S4 A32])) "fs/fcntl.c":59:23 75 {*movsi_internal}
     (nil))
(insn 117 116 118 14 (set (mem:HI (plus:SI (reg/f:SI 135)
                (const_int 2 [0x2])) [8 filp_32->f_flags+0 S2 A16])
        (reg:HI 108 [ _26 ])) "fs/fcntl.c":59:23 76 {*movhi_internal}
     (expr_list:REG_DEAD (reg/f:SI 135)
        (expr_list:REG_DEAD (reg:HI 108 [ _26 ])
            (nil))))
(insn 118 117 151 14 (set (reg:SI 109 [ _27 ])
        (const_int 0 [0])) "fs/fcntl.c":60:16 75 {*movsi_internal}
     (nil))
(jump_insn 151 118 152 14 (set (pc)
        (label_ref 129)) "fs/fcntl.c":60:16 807 {jump}
     (nil)
 -> 129)
(barrier 152 151 121)
(code_label 121 152 122 15 19 (nil) [3 uses])
(note 122 121 123 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 123 122 153 15 (set (reg:SI 109 [ _27 ])
        (const_int -1 [0xffffffffffffffff])) "fs/fcntl.c":64:16 75 {*movsi_internal}
     (nil))
(jump_insn 153 123 154 15 (set (pc)
        (label_ref 129)) "fs/fcntl.c":64:16 807 {jump}
     (nil)
 -> 129)
(barrier 154 153 126)
(code_label 126 154 127 16 18 (nil) [1 uses])
(note 127 126 128 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 128 127 129 16 (set (reg:SI 109 [ _27 ])
        (const_int -1 [0xffffffffffffffff])) "fs/fcntl.c":66:16 75 {*movsi_internal}
     (nil))
(code_label 129 128 130 17 17 (nil) [7 uses])
(note 130 129 131 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 131 130 135 17 (set (reg:SI 110 [ <retval> ])
        (reg:SI 109 [ _27 ])) "fs/fcntl.c":68:1 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 109 [ _27 ])
        (nil)))
(insn 135 131 136 17 (set (reg/i:SI 0 ax)
        (reg:SI 110 [ <retval> ])) "fs/fcntl.c":68:1 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 110 [ <retval> ])
        (nil)))
(insn 136 135 0 17 (use (reg/i:SI 0 ax)) "fs/fcntl.c":68:1 -1
     (nil))

;; Function sys_dup2 (sys_dup2, funcdef_no=4, decl_uid=1350, cgraph_uid=5, symbol_order=4)

scanning new insn with uid = 26.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 3 n_edges 2 count 3 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r85: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r85,l0) best AREG, allocno GENERAL_REGS
    r84: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a1 (r84,l0) best AREG, allocno GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r83,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r82: preferred BREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a2 (r82,l0) best BREG, allocno GENERAL_REGS

  a0(r85,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 NON_Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 MEM:7000
  a1(r84,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 NON_Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 MEM:11000
  a2(r82,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 NON_Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 MEM:12000
  a3(r83,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000

   Insn 24(l0): point = 0
   Insn 23(l0): point = 2
   Insn 19(l0): point = 4
   Insn 16(l0): point = 6
   Insn 15(l0): point = 8
   Insn 14(l0): point = 10
   Insn 13(l0): point = 12
   Insn 12(l0): point = 14
   Insn 11(l0): point = 16
   Insn 10(l0): point = 18
   Insn 9(l0): point = 20
   Insn 8(l0): point = 22
   Insn 7(l0): point = 24
   Insn 6(l0): point = 26
   Insn 5(l0): point = 28
   Insn 26(l0): point = 30
 a0(r85): [3..4]
 a1(r84): [5..6]
 a2(r82): [23..30]
 a3(r83): [25..28]
Compressing live ranges: from 33 to 6 - 18%
Ranges after the compression:
 a0(r85): [0..1]
 a1(r84): [2..3]
 a2(r82): [4..5]
 a3(r83): [4..5]
  pref0:a0(r85)<-hr0@1500
  pref1:a1(r84)<-hr0@1500
  pref2:a2(r82)<-hr3@1500
  regions=1, blocks=3, points=6
    allocnos=4 (big 0), copies=0, conflicts=0, ranges=4
Disposition:
    2:r82  l0     0    3:r83  l0     1    1:r84  l0     0    0:r85  l0     0
+++Costs: overall -3000, reg -3000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


sys_dup2

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 3 [bx] 7 [sp] 17 [flags]
;;  ref usage 	r0={4d,3u} r1={3d} r2={3d} r3={1d,1u} r6={1d,2u} r7={8d,15u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r16={1d,4u} r17={7d} r18={2d} r19={1d,2u} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r82={1d,1u} r83={1d,1u} r84={1d,1u} r85={1d,1u} 
;;    total ref usage 194{163d,31u,0e} in 16{14 regular + 2 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 26 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 26 3 2 2 (parallel [
            (set (reg:SI 82)
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_FLUSH_QUEUE (nil)
            (nil))))
(note 2 26 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:SI 83 [ newfd.12_1 ])
        (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 4 [0x4])) [6 newfd+0 S4 A32])) "fs/fcntl.c":72:5 75 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "fs/fcntl.c":72:5 209 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
            (nil))))
(insn 7 6 8 2 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [6  S4 A32])
        (reg:SI 83 [ newfd.12_1 ])) "fs/fcntl.c":72:5 54 {*pushsi2}
     (expr_list:REG_DEAD (reg:SI 83 [ newfd.12_1 ])
        (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
            (nil))))
(insn 8 7 9 2 (set (reg:SI 3 bx)
        (reg:SI 82)) "fs/fcntl.c":72:5 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 82)
        (nil)))
(call_insn 9 8 10 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("sys_close") [flags 0x41]  <function_decl 0x7bd51e538800 sys_close>) [0 sys_close S1 A8])
            (const_int 16 [0x10]))) "fs/fcntl.c":72:5 823 {*call_value}
     (expr_list:REG_DEAD (reg:SI 3 bx)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 10 9 11 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "fs/fcntl.c":72:5 209 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (nil))))
(insn 11 10 12 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "fs/fcntl.c":73:12 209 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
            (nil))))
(insn 12 11 13 2 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [6  S4 A32])
        (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 4 [0x4])) [6 newfd+0 S4 A32])) "fs/fcntl.c":73:12 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 13 12 14 2 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [6  S4 A32])
        (mem/c:SI (reg/f:SI 16 argp) [6 oldfd+0 S4 A32])) "fs/fcntl.c":73:12 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 14 13 15 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("dupfd") [flags 0x3]  <function_decl 0x7bd51e538900 dupfd>) [0 dupfd S1 A8])
            (const_int 16 [0x10]))) "fs/fcntl.c":73:12 823 {*call_value}
     (nil)
    (nil))
(insn 15 14 16 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "fs/fcntl.c":73:12 209 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (nil))))
(insn 16 15 19 2 (set (reg:SI 84 [ _7 ])
        (reg:SI 0 ax)) "fs/fcntl.c":73:12 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 19 16 23 2 (set (reg:SI 85 [ <retval> ])
        (reg:SI 84 [ _7 ])) "fs/fcntl.c":73:12 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 84 [ _7 ])
        (nil)))
(insn 23 19 24 2 (set (reg/i:SI 0 ax)
        (reg:SI 85 [ <retval> ])) "fs/fcntl.c":74:1 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 85 [ <retval> ])
        (nil)))
(insn 24 23 0 2 (use (reg/i:SI 0 ax)) "fs/fcntl.c":74:1 -1
     (nil))
