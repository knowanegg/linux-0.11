
;; Function schedule (schedule, funcdef_no=1, decl_uid=1289, cgraph_uid=2, symbol_order=10)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=40, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=32, prev_offset=0)
Can eliminate 19 to 6 (offset=-4, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 182:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) Ts {*leasi}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 33:  (0) =rm  (1) %0  (2) re {*iorsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 34:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 37:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 46:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =rm  (1) 0 {*one_cmplsi2_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
            alt=2: Bad operand -- refuse
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 48
	 Choosing alt 0 in insn 48:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 60:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 63:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =r  (1) Ts {*leasi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 71:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 72:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 73:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) =r  (1) Ts {*leasi}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 75:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 79:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 95:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 97:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 104:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 106:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 109:  (0) =rm  (1) %0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 111:  (0) ?mr {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 114:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 121:  (0) =r  (1) Ts {*leasi}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 122:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 126:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 127:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 128:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 131:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 132:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 133:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 134:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
      Creating newreg=150 from oldreg=112, assigning class GENERAL_REGS to r150
  134: {r150:SI=r150:SI>>0x1;clobber flags:CC;}
      REG_DEAD r112:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  184: r150:SI=r112:SI
    Inserting insn reload after:
  185: r113:SI=r150:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 135:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 136:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 138:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 139:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 140
	 Choosing alt 0 in insn 140:  (0) =rm  (1) %0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 141:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 144:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 148:  (0) =r  (1) Ts {*leasi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 149:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 157:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 158:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 159:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 160:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 161:  (0) =r  (1) g {*movsi_internal}
            2 Small class reload: reject+=3
            3 Small class reload: reject+=3
          alt=0,overall=18,losers=2,rld_nregs=2
	 Choosing alt 0 in insn 163:  (0) m  (1) m  (2) d  (3) c
      Creating newreg=151 from oldreg=120, assigning class DREG to r151
      Creating newreg=152 from oldreg=122, assigning class CREG to r152
  163: {asm_operands;clobber flags:CC;}
      REG_DEAD r122:SI
      REG_DEAD r120:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  186: r151:SI=r120:SI
  187: r152:SI=r122:SI

	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2
EBB 3 4 5 6
EBB 7 8 9
EBB 10
EBB 11
EBB 12
EBB 13 14
EBB 15 16 17
EBB 18 19 20
EBB 21 22
EBB 23
EBB 24 25
EBB 27
EBB 26 28

********** Pseudo live ranges #1: **********

  BB 28
   Insn 181: point = 0, n_alt = -1
  BB 26
   Insn 163: point = 0, n_alt = 0
   Insn 187: point = 1, n_alt = -2
	Hard reg 0 is preferable by r152 with profit 1000
   Insn 186: point = 3, n_alt = -2
	Hard reg 3 is preferable by r151 with profit 1000
   Insn 162: point = 5, n_alt = -2
   Insn 161: point = 7, n_alt = 0
   Insn 160: point = 9, n_alt = 0
   Insn 159: point = 10, n_alt = 3
   Insn 158: point = 12, n_alt = 0
   Insn 157: point = 14, n_alt = 0
  BB 27
   Insn 179: point = 16, n_alt = -1
  BB 19
   Insn 115: point = 17, n_alt = -1
   Insn 114: point = 17, n_alt = 1
  BB 18
   Insn 112: point = 18, n_alt = -1
   Insn 111: point = 18, n_alt = 1
   Insn 109: point = 18, n_alt = 0
  BB 14
   Insn 170: point = 19, n_alt = -1
  BB 12
   Insn 168: point = 20, n_alt = -1
   Insn 75: point = 20, n_alt = 1
   Insn 74: point = 21, n_alt = 0
   Insn 73: point = 22, n_alt = 1
   Insn 72: point = 22, n_alt = 1
   Insn 71: point = 22, n_alt = 1
  BB 25
   Insn 175: point = 23, n_alt = -1
  BB 24
   Insn 150: point = 24, n_alt = -1
   Insn 149: point = 24, n_alt = 0
   Insn 148: point = 25, n_alt = 0
  BB 20
   Insn 173: point = 27, n_alt = -1
   Insn 122: point = 27, n_alt = 1
   Insn 121: point = 28, n_alt = 0
  BB 23
   Insn 144: point = 30, n_alt = 0
  BB 22
   Insn 141: point = 31, n_alt = 1
   Insn 140: point = 32, n_alt = 0
   Insn 139: point = 34, n_alt = 0
   Insn 138: point = 36, n_alt = 0
   Insn 137: point = 37, n_alt = 0
   Insn 136: point = 39, n_alt = 0
   Insn 135: point = 41, n_alt = 0
   Insn 185: point = 42, n_alt = -2
	Hard reg 3 is preferable by r150 with profit 1000
   Insn 134: point = 44, n_alt = 0
   Insn 184: point = 45, n_alt = -2
	Hard reg 3 is preferable by r150 with profit 1000
	Hard reg 1 is preferable by r150 with profit 1000
   Insn 133: point = 47, n_alt = 0
   Insn 132: point = 49, n_alt = 0
   Insn 131: point = 51, n_alt = 0
  BB 21
   Insn 129: point = 53, n_alt = -1
   Insn 128: point = 53, n_alt = 0
   Insn 127: point = 54, n_alt = 0
   Insn 126: point = 56, n_alt = 0
  BB 11
   Insn 69: point = 58, n_alt = -1
   Insn 68: point = 58, n_alt = 0
   Insn 67: point = 59, n_alt = 0
  BB 2
   Insn 166: point = 61, n_alt = -1
   Insn 6: point = 61, n_alt = 1
   Insn 5: point = 62, n_alt = 0
   Insn 182: point = 63, n_alt = 0
  BB 10
   Insn 63: point = 64, n_alt = 0
  BB 9
   Insn 60: point = 65, n_alt = 1
   Insn 59: point = 66, n_alt = 0
   Insn 58: point = 68, n_alt = 0
  BB 8
   Insn 56: point = 70, n_alt = -1
   Insn 55: point = 70, n_alt = 0
   Insn 54: point = 71, n_alt = 0
   Insn 53: point = 73, n_alt = 0
   Insn 52: point = 75, n_alt = 0
  BB 7
   Insn 50: point = 77, n_alt = -1
   Insn 49: point = 77, n_alt = 0
   Insn 48: point = 78, n_alt = 0
   Insn 47: point = 80, n_alt = 0
   Insn 46: point = 82, n_alt = 0
   Insn 45: point = 84, n_alt = 0
   Insn 44: point = 86, n_alt = 0
   Insn 43: point = 88, n_alt = 0
   Insn 42: point = 89, n_alt = 0
   Insn 41: point = 91, n_alt = 0
   Insn 40: point = 93, n_alt = 0
  BB 6
   Insn 37: point = 95, n_alt = 1
   Insn 36: point = 96, n_alt = 0
   Insn 35: point = 98, n_alt = 0
   Insn 34: point = 99, n_alt = 1
   Insn 33: point = 100, n_alt = 0
   Insn 32: point = 102, n_alt = 0
   Insn 31: point = 104, n_alt = 0
   Insn 30: point = 105, n_alt = 0
   Insn 29: point = 107, n_alt = 0
   Insn 28: point = 109, n_alt = 0
  BB 5
   Insn 26: point = 111, n_alt = -1
   Insn 25: point = 111, n_alt = 0
   Insn 24: point = 112, n_alt = 0
   Insn 23: point = 113, n_alt = 0
   Insn 22: point = 115, n_alt = 0
   Insn 21: point = 117, n_alt = 0
  BB 4
   Insn 19: point = 119, n_alt = -1
   Insn 18: point = 119, n_alt = 0
   Insn 17: point = 120, n_alt = 0
   Insn 16: point = 122, n_alt = 0
   Insn 15: point = 124, n_alt = 0
  BB 3
   Insn 13: point = 126, n_alt = -1
   Insn 12: point = 126, n_alt = 0
   Insn 11: point = 127, n_alt = 0
   Insn 10: point = 129, n_alt = 0
  BB 17
   Insn 106: point = 131, n_alt = 1
   Insn 105: point = 132, n_alt = 0
   Insn 104: point = 133, n_alt = 1
   Insn 103: point = 134, n_alt = 0
   Insn 102: point = 136, n_alt = 0
   Insn 101: point = 138, n_alt = 0
  BB 16
   Insn 99: point = 140, n_alt = -1
   Insn 98: point = 140, n_alt = 0
   Insn 97: point = 141, n_alt = 0
   Insn 96: point = 143, n_alt = 0
   Insn 95: point = 145, n_alt = 0
  BB 15
   Insn 93: point = 147, n_alt = -1
   Insn 92: point = 147, n_alt = 0
   Insn 91: point = 148, n_alt = 0
   Insn 90: point = 150, n_alt = 0
   Insn 89: point = 152, n_alt = 0
  BB 13
   Insn 83: point = 154, n_alt = -1
   Insn 82: point = 154, n_alt = 0
   Insn 81: point = 155, n_alt = 0
   Insn 80: point = 157, n_alt = 0
   Insn 79: point = 158, n_alt = 0
 r82: [8..158]
 r83: [126..127]
 r84: [121..122]
 r85: [119..120]
 r86: [114..115]
 r87: [111..113]
 r88: [111..112]
 r89: [106..107]
 r90: [101..105]
 r91: [99..102]
 r92: [99..100]
 r93: [95..96]
 r94: [90..91]
 r95: [79..89]
 r96: [85..86]
 r97: [83..84]
 r98: [81..82]
 r99: [79..80]
 r100: [77..78]
 r101: [72..73]
 r102: [70..71]
 r103: [65..66]
 r104: [154..155]
 r105: [149..150]
 r106: [147..148]
 r107: [142..143]
 r108: [140..141]
 r109: [135..136]
 r110: [53..54]
 r111: [48..49]
 r112: [46..47]
 r113: [33..42]
 r114: [38..39]
 r115: [33..37]
 r116: [31..34]
 r117: [31..32]
 r118: [13..14]
 r119: [11..12]
 r120: [4..10]
 r121: [6..7]
 r122: [2..5]
 r123: [61..62]
 r124: [128..129]
 r125: [123..124]
 r126: [116..117]
 r127: [108..109]
 r128: [103..104]
 r129: [97..98]
 r130: [92..93]
 r131: [87..88]
 r132: [74..75]
 r133: [67..68]
 r134: [58..59]
 r135: [20..21]
 r136: [156..157]
 r137: [151..152]
 r138: [144..145]
 r139: [137..138]
 r140: [133..134]
 r141: [131..132]
 r142: [27..28]
 r143: [55..56]
 r144: [50..51]
 r145: [40..41]
 r146: [35..36]
 r147: [24..25]
 r148: [8..9]
 r150: [43..45]
 r151: [0..3]
 r152: [0..1]
Compressing live ranges: from 159 to 126 - 79%
Ranges after the compression:
 r82: [8..125]
 r83: [98..99]
 r84: [94..95]
 r85: [92..93]
 r86: [88..89]
 r87: [86..87]
 r88: [86..87]
 r89: [82..83]
 r90: [78..81]
 r91: [76..79]
 r92: [76..77]
 r93: [72..73]
 r94: [68..69]
 r95: [58..67]
 r96: [64..65]
 r97: [62..63]
 r98: [60..61]
 r99: [58..59]
 r100: [56..57]
 r101: [52..53]
 r102: [50..51]
 r103: [46..47]
 r104: [122..123]
 r105: [118..119]
 r106: [116..117]
 r107: [112..113]
 r108: [110..111]
 r109: [106..107]
 r110: [38..39]
 r111: [34..35]
 r112: [32..33]
 r113: [22..29]
 r114: [26..27]
 r115: [22..25]
 r116: [20..23]
 r117: [20..21]
 r118: [12..13]
 r119: [10..11]
 r120: [4..9]
 r121: [6..7]
 r122: [2..5]
 r123: [44..45]
 r124: [100..101]
 r125: [96..97]
 r126: [90..91]
 r127: [84..85]
 r128: [80..81]
 r129: [74..75]
 r130: [70..71]
 r131: [66..67]
 r132: [54..55]
 r133: [48..49]
 r134: [42..43]
 r135: [14..15]
 r136: [124..125]
 r137: [120..121]
 r138: [114..115]
 r139: [108..109]
 r140: [104..105]
 r141: [102..103]
 r142: [18..19]
 r143: [40..41]
 r144: [36..37]
 r145: [28..29]
 r146: [24..25]
 r147: [16..17]
 r148: [8..9]
 r150: [30..31]
 r151: [0..3]
 r152: [0..1]

********** Assignment #1: **********

	 Assigning to 151 (cl=DREG, orig=120, freq=2000, tfirst=151, tfreq=2000)...
	   Assign 1 to reload r151 (freq=2000)
	 Assigning to 152 (cl=CREG, orig=122, freq=2000, tfirst=152, tfreq=2000)...
	   Assign 2 to reload r152 (freq=2000)
	 Assigning to 150 (cl=GENERAL_REGS, orig=112, freq=3000, tfirst=150, tfreq=3000)...
	   Assign 3 to reload r150 (freq=3000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=40, prev_offset=40)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=32, prev_offset=32)
Can eliminate 19 to 6 (offset=-4, prev_offset=0)
changing reg in insn 182
changing reg in insn 161
changing reg in insn 148
changing reg in insn 121
changing reg in insn 74
changing reg in insn 67
changing reg in insn 24
changing reg in insn 5
changing reg in insn 11
changing reg in insn 12
changing reg in insn 16
changing reg in insn 17
changing reg in insn 17
changing reg in insn 18
changing reg in insn 22
changing reg in insn 23
changing reg in insn 23
changing reg in insn 25
changing reg in insn 24
changing reg in insn 25
changing reg in insn 29
changing reg in insn 30
changing reg in insn 30
changing reg in insn 33
changing reg in insn 32
changing reg in insn 34
changing reg in insn 33
changing reg in insn 34
changing reg in insn 36
changing reg in insn 37
changing reg in insn 41
changing reg in insn 42
changing reg in insn 42
changing reg in insn 44
changing reg in insn 45
changing reg in insn 45
changing reg in insn 46
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 48
changing reg in insn 49
changing reg in insn 53
changing reg in insn 54
changing reg in insn 54
changing reg in insn 55
changing reg in insn 59
changing reg in insn 60
changing reg in insn 81
changing reg in insn 82
changing reg in insn 90
changing reg in insn 91
changing reg in insn 91
changing reg in insn 92
changing reg in insn 96
changing reg in insn 97
changing reg in insn 97
changing reg in insn 98
changing reg in insn 102
changing reg in insn 103
changing reg in insn 127
changing reg in insn 128
changing reg in insn 132
changing reg in insn 133
changing reg in insn 133
changing reg in insn 136
changing reg in insn 137
changing reg in insn 137
changing reg in insn 139
changing reg in insn 141
changing reg in insn 140
changing reg in insn 141
changing reg in insn 157
changing reg in insn 158
changing reg in insn 158
changing reg in insn 159
changing reg in insn 159
changing reg in insn 161
changing reg in insn 162
changing reg in insn 162
changing reg in insn 5
changing reg in insn 6
changing reg in insn 10
changing reg in insn 11
changing reg in insn 15
changing reg in insn 16
changing reg in insn 21
changing reg in insn 22
changing reg in insn 28
changing reg in insn 29
changing reg in insn 31
changing reg in insn 32
changing reg in insn 35
changing reg in insn 36
changing reg in insn 40
changing reg in insn 41
changing reg in insn 43
changing reg in insn 44
changing reg in insn 52
changing reg in insn 53
changing reg in insn 58
changing reg in insn 59
changing reg in insn 67
changing reg in insn 68
changing reg in insn 74
changing reg in insn 75
changing reg in insn 80
changing reg in insn 81
changing reg in insn 89
changing reg in insn 90
changing reg in insn 95
changing reg in insn 96
changing reg in insn 101
changing reg in insn 102
changing reg in insn 103
changing reg in insn 104
changing reg in insn 105
changing reg in insn 106
changing reg in insn 121
changing reg in insn 122
changing reg in insn 126
changing reg in insn 127
changing reg in insn 131
changing reg in insn 132
changing reg in insn 135
changing reg in insn 136
changing reg in insn 138
changing reg in insn 139
changing reg in insn 148
changing reg in insn 149
changing reg in insn 160
changing reg in insn 161
deleting insn with uid = 185.
deleting insn with uid = 162.
starting the processing of deferred insns
ending the processing of deferred insns


schedule

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 17 [flags]
;;  ref usage 	r0={3d,8u} r1={58d,57u} r2={8d,7u} r3={3d,3u} r7={1d,72u} r17={26d,13u} 
;;    total ref usage 259{99d,160u,0e} in 119{119 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 182 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 182 3 2 2 (parallel [
            (set (reg:SI 0 ax [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 182 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 1 dx [123])
        (plus:SI (reg:SI 0 ax [82])
            (const:SI (plus:SI (unspec:SI [
                            (symbol_ref:SI ("task") [flags 0x2]  <var_decl 0x731e0292e1b0 task>)
                        ] UNSPEC_GOTOFF)
                    (const_int 252 [0xfc]))))) "kernel/sched.c":67:9 205 {*leasi}
     (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("task") [flags 0x2]  <var_decl 0x731e0292e1b0 task>)
                (const_int 252 [0xfc])))
        (nil)))
(insn 6 5 166 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [20 p+0 S4 A32])
        (reg/f:SI 1 dx [123])) "kernel/sched.c":67:9 75 {*movsi_internal}
     (nil))
(jump_insn 166 6 167 2 (set (pc)
        (label_ref 64)) "kernel/sched.c":67:2 807 {jump}
     (nil)
 -> 64)
(barrier 167 166 66)
(code_label 66 167 9 3 5 (nil) [1 uses])
(note 9 66 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 3 (set (reg/f:SI 1 dx [124])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [20 p+0 S4 A32])) "kernel/sched.c":68:7 75 {*movsi_internal}
     (nil))
(insn 11 10 12 3 (set (reg/f:SI 1 dx [orig:83 _1 ] [83])
        (mem/f:SI (reg/f:SI 1 dx [124]) [13 *p_44+0 S4 A32])) "kernel/sched.c":68:7 75 {*movsi_internal}
     (nil))
(insn 12 11 13 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:SI 1 dx [orig:83 _1 ] [83])
            (const_int 0 [0]))) "kernel/sched.c":68:6 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 13 12 14 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 61)
            (pc))) "kernel/sched.c":68:6 806 {*jcc}
     (nil)
 -> 61)
(note 14 13 15 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 4 (set (reg/f:SI 1 dx [125])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [20 p+0 S4 A32])) "kernel/sched.c":69:9 75 {*movsi_internal}
     (nil))
(insn 16 15 17 4 (set (reg/f:SI 1 dx [orig:84 _2 ] [84])
        (mem/f:SI (reg/f:SI 1 dx [125]) [13 *p_44+0 S4 A32])) "kernel/sched.c":69:9 75 {*movsi_internal}
     (nil))
(insn 17 16 18 4 (set (reg:SI 1 dx [orig:85 _3 ] [85])
        (mem:SI (plus:SI (reg/f:SI 1 dx [orig:84 _2 ] [84])
                (const_int 588 [0x24c])) [2 _2->alarm+0 S4 A32])) "kernel/sched.c":69:12 75 {*movsi_internal}
     (nil))
(insn 18 17 19 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:85 _3 ] [85])
            (const_int 0 [0]))) "kernel/sched.c":69:7 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 19 18 20 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 38)
            (pc))) "kernel/sched.c":69:7 806 {*jcc}
     (nil)
 -> 38)
(note 20 19 21 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 22 5 (set (reg/f:SI 1 dx [126])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [20 p+0 S4 A32])) "kernel/sched.c":69:24 75 {*movsi_internal}
     (nil))
(insn 22 21 23 5 (set (reg/f:SI 1 dx [orig:86 _4 ] [86])
        (mem/f:SI (reg/f:SI 1 dx [126]) [13 *p_44+0 S4 A32])) "kernel/sched.c":69:24 75 {*movsi_internal}
     (nil))
(insn 23 22 24 5 (set (reg:SI 2 cx [orig:87 _5 ] [87])
        (mem:SI (plus:SI (reg/f:SI 1 dx [orig:86 _4 ] [86])
                (const_int 588 [0x24c])) [2 _4->alarm+0 S4 A32])) "kernel/sched.c":69:27 75 {*movsi_internal}
     (nil))
(insn 24 23 25 5 (set (reg:SI 1 dx [orig:88 jiffies.0_6 ] [88])
        (mem/v/c:SI (plus:SI (reg:SI 0 ax [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("jiffies") [flags 0x2]  <var_decl 0x731e0292e360 jiffies>)
                        ] UNSPEC_GOTOFF))) [2 jiffies+0 S4 A32])) "kernel/sched.c":69:35 75 {*movsi_internal}
     (nil))
(insn 25 24 26 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 2 cx [orig:87 _5 ] [87])
            (reg:SI 1 dx [orig:88 jiffies.0_6 ] [88]))) "kernel/sched.c":69:20 11 {*cmpsi_1}
     (nil))
(jump_insn 26 25 27 5 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 38)
            (pc))) "kernel/sched.c":69:20 806 {*jcc}
     (nil)
 -> 38)
(note 27 26 28 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 29 6 (set (reg/f:SI 1 dx [127])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [20 p+0 S4 A32])) "kernel/sched.c":70:6 75 {*movsi_internal}
     (nil))
(insn 29 28 30 6 (set (reg/f:SI 1 dx [orig:89 _7 ] [89])
        (mem/f:SI (reg/f:SI 1 dx [127]) [13 *p_44+0 S4 A32])) "kernel/sched.c":70:6 75 {*movsi_internal}
     (nil))
(insn 30 29 31 6 (set (reg:SI 2 cx [orig:90 _8 ] [90])
        (mem:SI (plus:SI (reg/f:SI 1 dx [orig:89 _7 ] [89])
                (const_int 12 [0xc])) [2 _7->signal+0 S4 A32])) "kernel/sched.c":70:18 75 {*movsi_internal}
     (nil))
(insn 31 30 32 6 (set (reg/f:SI 1 dx [128])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [20 p+0 S4 A32])) "kernel/sched.c":70:6 75 {*movsi_internal}
     (nil))
(insn 32 31 33 6 (set (reg/f:SI 1 dx [orig:91 _9 ] [91])
        (mem/f:SI (reg/f:SI 1 dx [128]) [13 *p_44+0 S4 A32])) "kernel/sched.c":70:6 75 {*movsi_internal}
     (nil))
(insn 33 32 34 6 (parallel [
            (set (reg:SI 2 cx [orig:92 _10 ] [92])
                (ior:SI (reg:SI 2 cx [orig:90 _8 ] [90])
                    (const_int 8192 [0x2000])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":70:18 520 {*iorsi_1}
     (nil))
(insn 34 33 35 6 (set (mem:SI (plus:SI (reg/f:SI 1 dx [orig:91 _9 ] [91])
                (const_int 12 [0xc])) [2 _9->signal+0 S4 A32])
        (reg:SI 2 cx [orig:92 _10 ] [92])) "kernel/sched.c":70:18 75 {*movsi_internal}
     (nil))
(insn 35 34 36 6 (set (reg/f:SI 1 dx [129])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [20 p+0 S4 A32])) "kernel/sched.c":71:6 75 {*movsi_internal}
     (nil))
(insn 36 35 37 6 (set (reg/f:SI 1 dx [orig:93 _11 ] [93])
        (mem/f:SI (reg/f:SI 1 dx [129]) [13 *p_44+0 S4 A32])) "kernel/sched.c":71:6 75 {*movsi_internal}
     (nil))
(insn 37 36 38 6 (set (mem:SI (plus:SI (reg/f:SI 1 dx [orig:93 _11 ] [93])
                (const_int 588 [0x24c])) [2 _11->alarm+0 S4 A32])
        (const_int 0 [0])) "kernel/sched.c":71:17 75 {*movsi_internal}
     (nil))
(code_label 38 37 39 7 4 (nil) [2 uses])
(note 39 38 40 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 40 39 41 7 (set (reg/f:SI 1 dx [130])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [20 p+0 S4 A32])) "kernel/sched.c":73:10 75 {*movsi_internal}
     (nil))
(insn 41 40 42 7 (set (reg/f:SI 1 dx [orig:94 _12 ] [94])
        (mem/f:SI (reg/f:SI 1 dx [130]) [13 *p_44+0 S4 A32])) "kernel/sched.c":73:10 75 {*movsi_internal}
     (nil))
(insn 42 41 43 7 (set (reg:SI 2 cx [orig:95 _13 ] [95])
        (mem:SI (plus:SI (reg/f:SI 1 dx [orig:94 _12 ] [94])
                (const_int 12 [0xc])) [2 _12->signal+0 S4 A32])) "kernel/sched.c":73:13 75 {*movsi_internal}
     (nil))
(insn 43 42 44 7 (set (reg/f:SI 1 dx [131])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [20 p+0 S4 A32])) "kernel/sched.c":73:40 75 {*movsi_internal}
     (nil))
(insn 44 43 45 7 (set (reg/f:SI 1 dx [orig:96 _14 ] [96])
        (mem/f:SI (reg/f:SI 1 dx [131]) [13 *p_44+0 S4 A32])) "kernel/sched.c":73:40 75 {*movsi_internal}
     (nil))
(insn 45 44 46 7 (set (reg:SI 1 dx [orig:97 _15 ] [97])
        (mem:SI (plus:SI (reg/f:SI 1 dx [orig:96 _14 ] [96])
                (const_int 528 [0x210])) [2 _14->blocked+0 S4 A32])) "kernel/sched.c":73:43 75 {*movsi_internal}
     (nil))
(insn 46 45 47 7 (parallel [
            (set (reg:SI 1 dx [orig:98 _16 ] [98])
                (and:SI (reg:SI 1 dx [orig:97 _15 ] [97])
                    (const_int -262401 [0xfffffffffffbfeff])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":73:37 490 {*andsi_1}
     (nil))
(insn 47 46 48 7 (set (reg:SI 1 dx [orig:99 _17 ] [99])
        (not:SI (reg:SI 1 dx [orig:98 _16 ] [98]))) "kernel/sched.c":73:24 632 {*one_cmplsi2_1}
     (nil))
(insn 48 47 49 7 (parallel [
            (set (reg:SI 1 dx [orig:100 _18 ] [100])
                (and:SI (reg:SI 1 dx [orig:99 _17 ] [99])
                    (reg:SI 2 cx [orig:95 _13 ] [95])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":73:22 490 {*andsi_1}
     (nil))
(insn 49 48 50 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:100 _18 ] [100])
            (const_int 0 [0]))) "kernel/sched.c":73:7 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 50 49 51 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 61)
            (pc))) "kernel/sched.c":73:7 806 {*jcc}
     (nil)
 -> 61)
(note 51 50 52 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 52 51 53 8 (set (reg/f:SI 1 dx [132])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [20 p+0 S4 A32])) "kernel/sched.c":74:9 75 {*movsi_internal}
     (nil))
(insn 53 52 54 8 (set (reg/f:SI 1 dx [orig:101 _19 ] [101])
        (mem/f:SI (reg/f:SI 1 dx [132]) [13 *p_44+0 S4 A32])) "kernel/sched.c":74:9 75 {*movsi_internal}
     (nil))
(insn 54 53 55 8 (set (reg:SI 1 dx [orig:102 _20 ] [102])
        (mem:SI (reg/f:SI 1 dx [orig:101 _19 ] [101]) [2 _19->state+0 S4 A32])) "kernel/sched.c":74:12 75 {*movsi_internal}
     (nil))
(insn 55 54 56 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:102 _20 ] [102])
            (const_int 1 [0x1]))) "kernel/sched.c":73:55 11 {*cmpsi_1}
     (nil))
(jump_insn 56 55 57 8 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 61)
            (pc))) "kernel/sched.c":73:55 806 {*jcc}
     (nil)
 -> 61)
(note 57 56 58 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 58 57 59 9 (set (reg/f:SI 1 dx [133])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [20 p+0 S4 A32])) "kernel/sched.c":75:6 75 {*movsi_internal}
     (nil))
(insn 59 58 60 9 (set (reg/f:SI 1 dx [orig:103 _21 ] [103])
        (mem/f:SI (reg/f:SI 1 dx [133]) [13 *p_44+0 S4 A32])) "kernel/sched.c":75:6 75 {*movsi_internal}
     (nil))
(insn 60 59 61 9 (set (mem:SI (reg/f:SI 1 dx [orig:103 _21 ] [103]) [2 _21->state+0 S4 A32])
        (const_int 0 [0])) "kernel/sched.c":75:17 75 {*movsi_internal}
     (nil))
(code_label 61 60 62 10 3 (nil) [3 uses])
(note 62 61 63 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 63 62 64 10 (parallel [
            (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 16 [0x10])) [20 p+0 S4 A32])
                (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 16 [0x10])) [20 p+0 S4 A32])
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":67:40 209 {*addsi_1}
     (nil))
(code_label 64 63 65 11 2 (nil) [1 uses])
(note 65 64 67 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 67 65 68 11 (set (reg:SI 1 dx [134])
        (plus:SI (reg:SI 0 ax [82])
            (const:SI (unspec:SI [
                        (symbol_ref:SI ("task") [flags 0x2]  <var_decl 0x731e0292e1b0 task>)
                    ] UNSPEC_GOTOFF)))) "kernel/sched.c":67:25 205 {*leasi}
     (expr_list:REG_EQUAL (symbol_ref:SI ("task") [flags 0x2]  <var_decl 0x731e0292e1b0 task>)
        (nil)))
(insn 68 67 69 11 (set (reg:CC 17 flags)
        (compare:CC (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])) [20 p+0 S4 A32])
            (reg:SI 1 dx [134]))) "kernel/sched.c":67:25 11 {*cmpsi_1}
     (nil))
(jump_insn 69 68 152 11 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 66)
            (pc))) "kernel/sched.c":67:25 806 {*jcc}
     (nil)
 -> 66)
(code_label 152 69 70 12 14 (nil) [1 uses])
(note 70 152 71 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 71 70 72 12 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [5 c+0 S4 A32])
        (const_int -1 [0xffffffffffffffff])) "kernel/sched.c":80:6 75 {*movsi_internal}
     (nil))
(insn 72 71 73 12 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [5 next+0 S4 A32])
        (const_int 0 [0])) "kernel/sched.c":81:9 75 {*movsi_internal}
     (nil))
(insn 73 72 74 12 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [5 i+0 S4 A32])
        (const_int 64 [0x40])) "kernel/sched.c":82:6 75 {*movsi_internal}
     (nil))
(insn 74 73 75 12 (set (reg/f:SI 1 dx [135])
        (plus:SI (reg:SI 0 ax [82])
            (const:SI (plus:SI (unspec:SI [
                            (symbol_ref:SI ("task") [flags 0x2]  <var_decl 0x731e0292e1b0 task>)
                        ] UNSPEC_GOTOFF)
                    (const_int 256 [0x100]))))) "kernel/sched.c":83:6 205 {*leasi}
     (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("task") [flags 0x2]  <var_decl 0x731e0292e1b0 task>)
                (const_int 256 [0x100])))
        (nil)))
(insn 75 74 168 12 (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [20 p+0 S4 A32])
        (reg/f:SI 1 dx [135])) "kernel/sched.c":83:6 75 {*movsi_internal}
     (nil))
(jump_insn 168 75 169 12 (set (pc)
        (label_ref 107)) "kernel/sched.c":85:10 807 {jump}
     (nil)
 -> 107)
(barrier 169 168 110)
(code_label 110 169 78 13 8 (nil) [1 uses])
(note 78 110 79 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 79 78 80 13 (parallel [
            (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 16 [0x10])) [20 p+0 S4 A32])
                (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 16 [0x10])) [20 p+0 S4 A32])
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":86:8 209 {*addsi_1}
     (nil))
(insn 80 79 81 13 (set (reg/f:SI 1 dx [136])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [20 p+0 S4 A32])) "kernel/sched.c":86:10 75 {*movsi_internal}
     (nil))
(insn 81 80 82 13 (set (reg/f:SI 1 dx [orig:104 _22 ] [104])
        (mem/f:SI (reg/f:SI 1 dx [136]) [13 *p_64+0 S4 A32])) "kernel/sched.c":86:10 75 {*movsi_internal}
     (nil))
(insn 82 81 83 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:SI 1 dx [orig:104 _22 ] [104])
            (const_int 0 [0]))) "kernel/sched.c":86:8 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 83 82 84 13 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 87)
            (pc))) "kernel/sched.c":86:8 806 {*jcc}
     (nil)
 -> 87)
(note 84 83 170 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(jump_insn 170 84 171 14 (set (pc)
        (label_ref 107)) "kernel/sched.c":87:6 807 {jump}
     (nil)
 -> 107)
(barrier 171 170 87)
(code_label 87 171 88 15 7 (nil) [1 uses])
(note 88 87 89 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 89 88 90 15 (set (reg/f:SI 1 dx [137])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [20 p+0 S4 A32])) "kernel/sched.c":88:10 75 {*movsi_internal}
     (nil))
(insn 90 89 91 15 (set (reg/f:SI 1 dx [orig:105 _23 ] [105])
        (mem/f:SI (reg/f:SI 1 dx [137]) [13 *p_64+0 S4 A32])) "kernel/sched.c":88:10 75 {*movsi_internal}
     (nil))
(insn 91 90 92 15 (set (reg:SI 1 dx [orig:106 _24 ] [106])
        (mem:SI (reg/f:SI 1 dx [orig:105 _23 ] [105]) [2 _23->state+0 S4 A32])) "kernel/sched.c":88:13 75 {*movsi_internal}
     (nil))
(insn 92 91 93 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:106 _24 ] [106])
            (const_int 0 [0]))) "kernel/sched.c":88:8 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 93 92 94 15 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 107)
            (pc))) "kernel/sched.c":88:8 806 {*jcc}
     (nil)
 -> 107)
(note 94 93 95 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 95 94 96 16 (set (reg/f:SI 1 dx [138])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [20 p+0 S4 A32])) "kernel/sched.c":89:10 75 {*movsi_internal}
     (nil))
(insn 96 95 97 16 (set (reg/f:SI 1 dx [orig:107 _25 ] [107])
        (mem/f:SI (reg/f:SI 1 dx [138]) [13 *p_64+0 S4 A32])) "kernel/sched.c":89:10 75 {*movsi_internal}
     (nil))
(insn 97 96 98 16 (set (reg:SI 1 dx [orig:108 _26 ] [108])
        (mem:SI (plus:SI (reg/f:SI 1 dx [orig:107 _25 ] [107])
                (const_int 4 [0x4])) [2 _25->counter+0 S4 A32])) "kernel/sched.c":89:13 75 {*movsi_internal}
     (nil))
(insn 98 97 99 16 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 20 [0x14])) [5 c+0 S4 A32])
            (reg:SI 1 dx [orig:108 _26 ] [108]))) "kernel/sched.c":88:37 11 {*cmpsi_1}
     (nil))
(jump_insn 99 98 100 16 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 107)
            (pc))) "kernel/sched.c":88:37 806 {*jcc}
     (nil)
 -> 107)
(note 100 99 101 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 101 100 102 17 (set (reg/f:SI 1 dx [139])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [20 p+0 S4 A32])) "kernel/sched.c":90:11 75 {*movsi_internal}
     (nil))
(insn 102 101 103 17 (set (reg/f:SI 1 dx [orig:109 _27 ] [109])
        (mem/f:SI (reg/f:SI 1 dx [139]) [13 *p_64+0 S4 A32])) "kernel/sched.c":90:11 75 {*movsi_internal}
     (nil))
(insn 103 102 104 17 (set (reg:SI 1 dx [140])
        (mem:SI (plus:SI (reg/f:SI 1 dx [orig:109 _27 ] [109])
                (const_int 4 [0x4])) [2 _27->counter+0 S4 A32])) "kernel/sched.c":90:8 75 {*movsi_internal}
     (nil))
(insn 104 103 105 17 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [5 c+0 S4 A32])
        (reg:SI 1 dx [140])) "kernel/sched.c":90:8 75 {*movsi_internal}
     (nil))
(insn 105 104 106 17 (set (reg:SI 1 dx [141])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [5 i+0 S4 A32])) "kernel/sched.c":90:30 75 {*movsi_internal}
     (nil))
(insn 106 105 107 17 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [5 next+0 S4 A32])
        (reg:SI 1 dx [141])) "kernel/sched.c":90:30 75 {*movsi_internal}
     (nil))
(code_label 107 106 108 18 6 (nil) [4 uses])
(note 108 107 109 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 109 108 111 18 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 28 [0x1c])) [5 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 28 [0x1c])) [5 i+0 S4 A32])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":85:11 209 {*addsi_1}
     (nil))
(insn 111 109 112 18 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 28 [0x1c])) [5 i+0 S4 A32])
            (const_int 0 [0]))) "kernel/sched.c":85:11 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 112 111 113 18 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 110)
            (pc))) "kernel/sched.c":85:11 806 {*jcc}
     (nil)
 -> 110)
(note 113 112 114 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 114 113 115 19 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 20 [0x14])) [5 c+0 S4 A32])
            (const_int 0 [0]))) "kernel/sched.c":92:7 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 115 114 120 19 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 178)
            (pc))) "kernel/sched.c":92:7 806 {*jcc}
     (nil)
 -> 178)
(note 120 115 121 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 121 120 122 20 (set (reg/f:SI 1 dx [142])
        (plus:SI (reg:SI 0 ax [82])
            (const:SI (plus:SI (unspec:SI [
                            (symbol_ref:SI ("task") [flags 0x2]  <var_decl 0x731e0292e1b0 task>)
                        ] UNSPEC_GOTOFF)
                    (const_int 252 [0xfc]))))) "kernel/sched.c":94:11 205 {*leasi}
     (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("task") [flags 0x2]  <var_decl 0x731e0292e1b0 task>)
                (const_int 252 [0xfc])))
        (nil)))
(insn 122 121 173 20 (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [20 p+0 S4 A32])
        (reg/f:SI 1 dx [142])) "kernel/sched.c":94:11 75 {*movsi_internal}
     (nil))
(jump_insn 173 122 174 20 (set (pc)
        (label_ref 145)) "kernel/sched.c":94:4 807 {jump}
     (nil)
 -> 145)
(barrier 174 173 147)
(code_label 147 174 125 21 13 (nil) [1 uses])
(note 125 147 126 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 126 125 127 21 (set (reg/f:SI 1 dx [143])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [20 p+0 S4 A32])) "kernel/sched.c":95:9 75 {*movsi_internal}
     (nil))
(insn 127 126 128 21 (set (reg/f:SI 1 dx [orig:110 _28 ] [110])
        (mem/f:SI (reg/f:SI 1 dx [143]) [13 *p_46+0 S4 A32])) "kernel/sched.c":95:9 75 {*movsi_internal}
     (nil))
(insn 128 127 129 21 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:SI 1 dx [orig:110 _28 ] [110])
            (const_int 0 [0]))) "kernel/sched.c":95:8 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 129 128 130 21 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 142)
            (pc))) "kernel/sched.c":95:8 806 {*jcc}
     (nil)
 -> 142)
(note 130 129 131 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 131 130 132 22 (set (reg/f:SI 1 dx [144])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [20 p+0 S4 A32])) "kernel/sched.c":96:24 75 {*movsi_internal}
     (nil))
(insn 132 131 133 22 (set (reg/f:SI 1 dx [orig:111 _29 ] [111])
        (mem/f:SI (reg/f:SI 1 dx [144]) [13 *p_46+0 S4 A32])) "kernel/sched.c":96:24 75 {*movsi_internal}
     (nil))
(insn 133 132 184 22 (set (reg:SI 1 dx [orig:112 _30 ] [112])
        (mem:SI (plus:SI (reg/f:SI 1 dx [orig:111 _29 ] [111])
                (const_int 4 [0x4])) [2 _29->counter+0 S4 A32])) "kernel/sched.c":96:27 75 {*movsi_internal}
     (nil))
(insn 184 133 134 22 (set (reg:SI 3 bx [orig:112 _30 ] [112])
        (reg:SI 1 dx [orig:112 _30 ] [112])) "kernel/sched.c":96:37 75 {*movsi_internal}
     (nil))
(insn 134 184 135 22 (parallel [
            (set (reg:SI 3 bx [orig:112 _30 ] [112])
                (ashiftrt:SI (reg:SI 3 bx [orig:112 _30 ] [112])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":96:37 702 {*ashrsi3_1}
     (nil))
(insn 135 134 136 22 (set (reg/f:SI 1 dx [145])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [20 p+0 S4 A32])) "kernel/sched.c":97:11 75 {*movsi_internal}
     (nil))
(insn 136 135 137 22 (set (reg/f:SI 1 dx [orig:114 _32 ] [114])
        (mem/f:SI (reg/f:SI 1 dx [145]) [13 *p_46+0 S4 A32])) "kernel/sched.c":97:11 75 {*movsi_internal}
     (nil))
(insn 137 136 138 22 (set (reg:SI 2 cx [orig:115 _33 ] [115])
        (mem:SI (plus:SI (reg/f:SI 1 dx [orig:114 _32 ] [114])
                (const_int 8 [0x8])) [2 _32->priority+0 S4 A32])) "kernel/sched.c":97:14 75 {*movsi_internal}
     (nil))
(insn 138 137 139 22 (set (reg/f:SI 1 dx [146])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [20 p+0 S4 A32])) "kernel/sched.c":96:7 75 {*movsi_internal}
     (nil))
(insn 139 138 140 22 (set (reg/f:SI 1 dx [orig:116 _34 ] [116])
        (mem/f:SI (reg/f:SI 1 dx [146]) [13 *p_46+0 S4 A32])) "kernel/sched.c":96:7 75 {*movsi_internal}
     (nil))
(insn 140 139 141 22 (parallel [
            (set (reg:SI 2 cx [orig:117 _35 ] [117])
                (plus:SI (reg:SI 2 cx [orig:115 _33 ] [115])
                    (reg:SI 3 bx [orig:113 _31 ] [113])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":96:43 209 {*addsi_1}
     (nil))
(insn 141 140 142 22 (set (mem:SI (plus:SI (reg/f:SI 1 dx [orig:116 _34 ] [116])
                (const_int 4 [0x4])) [2 _34->counter+0 S4 A32])
        (reg:SI 2 cx [orig:117 _35 ] [117])) "kernel/sched.c":96:20 75 {*movsi_internal}
     (nil))
(code_label 142 141 143 23 12 (nil) [1 uses])
(note 143 142 144 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 144 143 145 23 (parallel [
            (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 16 [0x10])) [20 p+0 S4 A32])
                (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 16 [0x10])) [20 p+0 S4 A32])
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":94:42 209 {*addsi_1}
     (nil))
(code_label 145 144 146 24 11 (nil) [1 uses])
(note 146 145 148 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 148 146 149 24 (set (reg:SI 1 dx [147])
        (plus:SI (reg:SI 0 ax [82])
            (const:SI (unspec:SI [
                        (symbol_ref:SI ("task") [flags 0x2]  <var_decl 0x731e0292e1b0 task>)
                    ] UNSPEC_GOTOFF)))) "kernel/sched.c":94:27 205 {*leasi}
     (expr_list:REG_EQUAL (symbol_ref:SI ("task") [flags 0x2]  <var_decl 0x731e0292e1b0 task>)
        (nil)))
(insn 149 148 150 24 (set (reg:CC 17 flags)
        (compare:CC (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])) [20 p+0 S4 A32])
            (reg:SI 1 dx [147]))) "kernel/sched.c":94:27 11 {*cmpsi_1}
     (nil))
(jump_insn 150 149 151 24 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 147)
            (pc))) "kernel/sched.c":94:27 806 {*jcc}
     (nil)
 -> 147)
(note 151 150 175 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(jump_insn 175 151 176 25 (set (pc)
        (label_ref 152)) "kernel/sched.c":80:6 807 {jump}
     (nil)
 -> 152)
(barrier 176 175 178)
(code_label 178 176 177 27 16 (nil) [1 uses])
(note 177 178 179 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 179 177 172 27 (const_int 0 [0]) "kernel/sched.c":93:5 843 {nop}
     (nil))
(code_label 172 179 156 26 15 (nil) [0 uses])
(note 156 172 157 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 157 156 158 26 (set (reg:SI 1 dx [orig:118 next.1_36 ] [118])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [5 next+0 S4 A32])) "kernel/sched.c":99:3 75 {*movsi_internal}
     (nil))
(insn 158 157 159 26 (parallel [
            (set (reg:SI 1 dx [orig:119 _37 ] [119])
                (ashift:SI (reg:SI 1 dx [orig:118 next.1_36 ] [118])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":99:3 655 {*ashlsi3_1}
     (nil))
(insn 159 158 160 26 (parallel [
            (set (reg:SI 3 bx [orig:120 _38 ] [120])
                (plus:SI (reg:SI 1 dx [orig:119 _37 ] [119])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":99:3 209 {*addsi_1}
     (nil))
(insn 160 159 161 26 (set (reg:SI 1 dx [148])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [5 next+0 S4 A32])) "kernel/sched.c":99:3 75 {*movsi_internal}
     (nil))
(insn 161 160 186 26 (set (reg/f:SI 0 ax [orig:121 _39 ] [121])
        (mem/f:SI (plus:SI (plus:SI (mult:SI (reg:SI 1 dx [148])
                        (const_int 4 [0x4]))
                    (reg:SI 0 ax [82]))
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("task") [flags 0x2]  <var_decl 0x731e0292e1b0 task>)
                        ] UNSPEC_GOTOFF))) [13 task[next_42]+0 S4 A32])) "kernel/sched.c":99:3 75 {*movsi_internal}
     (nil))
(insn 186 161 187 26 (set (reg:SI 1 dx [orig:120 _38 ] [120])
        (reg:SI 3 bx [orig:120 _38 ] [120])) "kernel/sched.c":99:3 75 {*movsi_internal}
     (nil))
(insn 187 186 163 26 (set (reg:SI 2 cx [orig:122 _40 ] [122])
        (reg:SI 0 ax [orig:122 _40 ] [122])) "kernel/sched.c":99:3 75 {*movsi_internal}
     (nil))
(insn 163 187 180 26 (parallel [
            (asm_operands/v ("cmpl %%ecx, current
	je 1f
	movw %%dx, %1
	xchgl %%ecx, current
	ljmp *%0
	cmpl %%ecx, last_task_used_math
	jne 1f
	clts
1:") ("") 0 [
                    (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 8 [0x8])) [2 __tmp.a+0 S4 A32])
                    (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 12 [0xc])) [2 __tmp.b+0 S4 A32])
                    (reg:SI 1 dx [orig:120 _38 ] [120])
                    (reg:SI 2 cx [orig:122 _40 ] [122])
                ]
                 [
                    (asm_input:SI ("m") kernel/sched.c:99)
                    (asm_input:SI ("m") kernel/sched.c:99)
                    (asm_input:SI ("d") kernel/sched.c:99)
                    (asm_input:SI ("c") kernel/sched.c:99)
                ]
                 [] kernel/sched.c:99)
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":99:3 -1
     (nil))
(note 180 163 181 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 181 180 183 28 (const_int 0 [0]) "kernel/sched.c":100:1 843 {nop}
     (nil))
(note 183 181 0 NOTE_INSN_DELETED)

;; Function interruptible_sleep_on (interruptible_sleep_on, funcdef_no=2, decl_uid=1295, cgraph_uid=3, symbol_order=11)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =r {*set_got}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 5:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) Ts {*leasi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 17:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) Ts {*leasi} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 22:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 30:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 34:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) lBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 49:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 55:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 56:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 60:  (0) m  (1) re {*movsi_internal}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2 3 4
EBB 5
EBB 6 7 8
EBB 9 10
EBB 12
EBB 11

********** Pseudo live ranges #1: **********

  BB 11
  BB 10
   Insn 67: point = 0, n_alt = -1
   Insn 60: point = 0, n_alt = 1
   Insn 59: point = 1, n_alt = 0
  BB 12
   Insn 71: point = 2, n_alt = -1
  BB 9
   Insn 57: point = 2, n_alt = -1
   Insn 56: point = 2, n_alt = 1
   Insn 55: point = 2, n_alt = 1
   Insn 54: point = 3, n_alt = 0
  BB 6
   Insn 39: point = 4, n_alt = -1
   Insn 38: point = 4, n_alt = 0
   Insn 37: point = 5, n_alt = 0
   Insn 36: point = 7, n_alt = 0
   Insn 35: point = 8, n_alt = 0
   Insn 34: point = 8, n_alt = 1
   Insn 33: point = 9, n_alt = 0
  BB 8
   Insn 65: point = 11, n_alt = -1
   Insn 49: point = 11, n_alt = 1
   Insn 48: point = 12, n_alt = 0
   Insn 47: point = 14, n_alt = 0
  BB 7
   Insn 45: point = 16, n_alt = -1
   Insn 44: point = 16, n_alt = 0
   Insn 43: point = 17, n_alt = 0
   Insn 42: point = 18, n_alt = 0
   Insn 41: point = 20, n_alt = 0
  BB 5
   Insn 30: point = 22, n_alt = 1
   Insn 29: point = 23, n_alt = 0
   Insn 28: point = 24, n_alt = 0
   Insn 27: point = 25, n_alt = 1
   Insn 26: point = 26, n_alt = 0
   Insn 25: point = 28, n_alt = 0
  BB 4
   Insn 22: point = 30, n_alt = 0
   Insn 21: point = 30, n_alt = 0
   Insn 20: point = 30, n_alt = -2
   Insn 19: point = 30, n_alt = 0
   Insn 18: point = 31, n_alt = 0
   Insn 17: point = 32, n_alt = 0
  BB 3
   Insn 15: point = 33, n_alt = -1
   Insn 14: point = 33, n_alt = 0
   Insn 13: point = 34, n_alt = 0
   Insn 12: point = 35, n_alt = 0
  BB 2
   Insn 6: point = 37, n_alt = -1
   Insn 5: point = 37, n_alt = 1
   Insn 72: point = 37, n_alt = 0
 r82: [4..37]
 r83: [33..35]
 r84: [22..24]
 r85: [8..9]
 r86: [4..5]
 r87: [16..18]
 r88: [16..17]
 r89: [11..12]
 r90: [33..34]
 r91: [30..31]
 r92: [27..28]
 r93: [25..26]
 r94: [22..23]
 r95: [6..7]
 r96: [19..20]
 r97: [13..14]
 r98: [2..3]
 r99: [0..1]
Compressing live ranges: from 38 to 28 - 73%
Ranges after the compression:
 r82: [4..27]
 r83: [26..27]
 r84: [18..19]
 r85: [8..9]
 r86: [4..5]
 r87: [14..15]
 r88: [14..15]
 r89: [10..11]
 r90: [26..27]
 r91: [24..25]
 r92: [22..23]
 r93: [20..21]
 r94: [18..19]
 r95: [6..7]
 r96: [16..17]
 r97: [12..13]
 r98: [2..3]
 r99: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=32)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=16)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
changing reg in insn 72
changing reg in insn 43
changing reg in insn 33
changing reg in insn 28
changing reg in insn 20
changing reg in insn 18
changing reg in insn 13
changing reg in insn 12
changing reg in insn 12
changing reg in insn 14
changing reg in insn 28
changing reg in insn 30
changing reg in insn 33
changing reg in insn 34
changing reg in insn 37
changing reg in insn 38
changing reg in insn 42
changing reg in insn 44
changing reg in insn 43
changing reg in insn 44
changing reg in insn 48
changing reg in insn 49
changing reg in insn 13
changing reg in insn 14
changing reg in insn 18
changing reg in insn 19
changing reg in insn 25
changing reg in insn 26
changing reg in insn 26
changing reg in insn 27
changing reg in insn 29
changing reg in insn 30
changing reg in insn 36
changing reg in insn 37
changing reg in insn 41
changing reg in insn 42
changing reg in insn 47
changing reg in insn 48
changing reg in insn 54
changing reg in insn 55
changing reg in insn 59
changing reg in insn 60
deleting insn with uid = 20.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 21.
verify found no changes in insn with uid = 35.


interruptible_sleep_on

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 17 [flags]
;;  ref usage 	r0={17d,14u} r1={6d,3u} r2={3d} r3={1d,7u} r7={4d,29u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={10d,5u} r18={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} 
;;    total ref usage 229{171d,58u,0e} in 42{40 regular + 2 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 72 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 72 3 2 2 (parallel [
            (set (reg:SI 3 bx [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 72 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 32 [0x20])) [20 p+0 S4 A32])
            (const_int 0 [0]))) "kernel/sched.c":106:5 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 6 5 11 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 70)
            (pc))) "kernel/sched.c":106:5 806 {*jcc}
     (nil)
 -> 70)
(note 11 6 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 12 11 13 3 (set (reg/f:SI 1 dx [orig:83 current.2_1 ] [83])
        (mem/f/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x2]  <var_decl 0x731e0292e120 current>)
                        ] UNSPEC_GOTOFF))) [13 current+0 S4 A32])) "kernel/sched.c":109:14 75 {*movsi_internal}
     (nil))
(insn 13 12 14 3 (set (reg:SI 0 ax [90])
        (plus:SI (reg:SI 3 bx [82])
            (const:SI (unspec:SI [
                        (symbol_ref:SI ("init_task") [flags 0x2]  <var_decl 0x731e0292e990 init_task>)
                    ] UNSPEC_GOTOFF)))) "kernel/sched.c":109:5 205 {*leasi}
     (expr_list:REG_EQUAL (symbol_ref:SI ("init_task") [flags 0x2]  <var_decl 0x731e0292e990 init_task>)
        (nil)))
(insn 14 13 15 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:SI 1 dx [orig:83 current.2_1 ] [83])
            (reg:SI 0 ax [90]))) "kernel/sched.c":109:5 11 {*cmpsi_1}
     (nil))
(jump_insn 15 14 16 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 23)
            (pc))) "kernel/sched.c":109:5 806 {*jcc}
     (nil)
 -> 23)
(note 16 15 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 4 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":110:3 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 18 17 19 4 (set (reg/f:SI 0 ax [91])
        (plus:SI (reg:SI 3 bx [82])
            (const:SI (unspec:SI [
                        (symbol_ref/f:SI ("*.LC0") [flags 0x2]  <var_decl 0x731e029da5a0 *.LC0>)
                    ] UNSPEC_GOTOFF)))) "kernel/sched.c":110:3 205 {*leasi}
     (expr_list:REG_EQUAL (symbol_ref/f:SI ("*.LC0") [flags 0x2]  <var_decl 0x731e029da5a0 *.LC0>)
        (nil)))
(insn 19 18 21 4 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [22  S4 A32])
        (reg/f:SI 0 ax [91])) "kernel/sched.c":110:3 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 21 19 22 4 (call (mem:QI (symbol_ref:SI ("panic") [flags 0x41]  <function_decl 0x731e02938700 panic>) [0 panic S1 A8])
        (const_int 16 [0x10])) "kernel/sched.c":110:3 812 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 22 21 23 4 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":110:3 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(code_label 23 22 24 5 20 (nil) [1 uses])
(note 24 23 25 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 25 24 26 5 (set (reg/f:SI 0 ax [92])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 32 [0x20])) [20 p+0 S4 A32])) "kernel/sched.c":111:6 75 {*movsi_internal}
     (nil))
(insn 26 25 27 5 (set (reg/f:SI 0 ax [93])
        (mem/f:SI (reg/f:SI 0 ax [92]) [13 *p_11(D)+0 S4 A32])) "kernel/sched.c":111:6 75 {*movsi_internal}
     (nil))
(insn 27 26 28 5 (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [13 tmp+0 S4 A32])
        (reg/f:SI 0 ax [93])) "kernel/sched.c":111:6 75 {*movsi_internal}
     (nil))
(insn 28 27 29 5 (set (reg/f:SI 1 dx [orig:84 current.3_2 ] [84])
        (mem/f/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x2]  <var_decl 0x731e0292e120 current>)
                        ] UNSPEC_GOTOFF))) [13 current+0 S4 A32])) "kernel/sched.c":112:5 75 {*movsi_internal}
     (nil))
(insn 29 28 30 5 (set (reg/f:SI 0 ax [94])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 32 [0x20])) [20 p+0 S4 A32])) "kernel/sched.c":112:5 75 {*movsi_internal}
     (nil))
(insn 30 29 31 5 (set (mem/f:SI (reg/f:SI 0 ax [94]) [13 *p_11(D)+0 S4 A32])
        (reg/f:SI 1 dx [orig:84 current.3_2 ] [84])) "kernel/sched.c":112:5 75 {*movsi_internal}
     (nil))
(code_label 31 30 32 6 21 ("repeat") [1 uses])
(note 32 31 33 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 33 32 34 6 (set (reg/f:SI 0 ax [orig:85 current.4_3 ] [85])
        (mem/f/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x2]  <var_decl 0x731e0292e120 current>)
                        ] UNSPEC_GOTOFF))) [13 current+0 S4 A32])) "kernel/sched.c":113:16 75 {*movsi_internal}
     (nil))
(insn 34 33 35 6 (set (mem:SI (reg/f:SI 0 ax [orig:85 current.4_3 ] [85]) [2 current.4_3->state+0 S4 A32])
        (const_int 2 [0x2])) "kernel/sched.c":113:24 75 {*movsi_internal}
     (nil))
(call_insn 35 34 36 6 (call (mem:QI (symbol_ref:SI ("schedule") [flags 0x3]  <function_decl 0x731e02915c00 schedule>) [0 schedule S1 A8])
        (const_int 0 [0])) "kernel/sched.c":114:2 812 {*call}
     (nil)
    (nil))
(insn 36 35 37 6 (set (reg/f:SI 0 ax [95])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 32 [0x20])) [20 p+0 S4 A32])) "kernel/sched.c":115:13 75 {*movsi_internal}
     (nil))
(insn 37 36 38 6 (set (reg/f:SI 0 ax [orig:86 _4 ] [86])
        (mem/f:SI (reg/f:SI 0 ax [95]) [13 *p_11(D)+0 S4 A32])) "kernel/sched.c":115:13 75 {*movsi_internal}
     (nil))
(insn 38 37 39 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:SI 0 ax [orig:86 _4 ] [86])
            (const_int 0 [0]))) "kernel/sched.c":115:12 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 39 38 40 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 52)
            (pc))) "kernel/sched.c":115:12 806 {*jcc}
     (nil)
 -> 52)
(note 40 39 41 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 41 40 42 7 (set (reg/f:SI 0 ax [96])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 32 [0x20])) [20 p+0 S4 A32])) "kernel/sched.c":115:19 75 {*movsi_internal}
     (nil))
(insn 42 41 43 7 (set (reg/f:SI 1 dx [orig:87 _5 ] [87])
        (mem/f:SI (reg/f:SI 0 ax [96]) [13 *p_11(D)+0 S4 A32])) "kernel/sched.c":115:19 75 {*movsi_internal}
     (nil))
(insn 43 42 44 7 (set (reg/f:SI 0 ax [orig:88 current.5_6 ] [88])
        (mem/f/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x2]  <var_decl 0x731e0292e120 current>)
                        ] UNSPEC_GOTOFF))) [13 current+0 S4 A32])) "kernel/sched.c":115:22 75 {*movsi_internal}
     (nil))
(insn 44 43 45 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:SI 1 dx [orig:87 _5 ] [87])
            (reg/f:SI 0 ax [orig:88 current.5_6 ] [88]))) "kernel/sched.c":115:16 11 {*cmpsi_1}
     (nil))
(jump_insn 45 44 46 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 52)
            (pc))) "kernel/sched.c":115:16 806 {*jcc}
     (nil)
 -> 52)
(note 46 45 47 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 47 46 48 8 (set (reg/f:SI 0 ax [97])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 32 [0x20])) [20 p+0 S4 A32])) "kernel/sched.c":116:15 75 {*movsi_internal}
     (nil))
(insn 48 47 49 8 (set (reg/f:SI 0 ax [orig:89 _7 ] [89])
        (mem/f:SI (reg/f:SI 0 ax [97]) [13 *p_11(D)+0 S4 A32])) "kernel/sched.c":116:15 75 {*movsi_internal}
     (nil))
(insn 49 48 65 8 (set (mem:SI (reg/f:SI 0 ax [orig:89 _7 ] [89]) [2 _7->state+0 S4 A32])
        (const_int 0 [0])) "kernel/sched.c":116:25 75 {*movsi_internal}
     (nil))
(jump_insn 65 49 66 8 (set (pc)
        (label_ref 31)) "kernel/sched.c":117:13 807 {jump}
     (nil)
 -> 31)
(barrier 66 65 52)
(code_label 52 66 53 9 22 (nil) [2 uses])
(note 53 52 54 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 54 53 55 9 (set (reg/f:SI 0 ax [98])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 32 [0x20])) [20 p+0 S4 A32])) "kernel/sched.c":119:12 75 {*movsi_internal}
     (nil))
(insn 55 54 56 9 (set (mem/f:SI (reg/f:SI 0 ax [98]) [13 *p_11(D)+0 S4 A32])
        (const_int 0 [0])) "kernel/sched.c":119:12 75 {*movsi_internal}
     (nil))
(insn 56 55 57 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 12 [0xc])) [13 tmp+0 S4 A32])
            (const_int 0 [0]))) "kernel/sched.c":120:5 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 57 56 58 9 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 63)
            (pc))) "kernel/sched.c":120:5 806 {*jcc}
     (nil)
 -> 63)
(note 58 57 59 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 59 58 60 10 (set (reg/f:SI 0 ax [99])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [13 tmp+0 S4 A32])) "kernel/sched.c":121:14 75 {*movsi_internal}
     (nil))
(insn 60 59 67 10 (set (mem:SI (reg/f:SI 0 ax [99]) [2 tmp_14->state+0 S4 A32])
        (const_int 0 [0])) "kernel/sched.c":121:14 75 {*movsi_internal}
     (nil))
(jump_insn 67 60 68 10 (set (pc)
        (label_ref 63)) 807 {jump}
     (nil)
 -> 63)
(barrier 68 67 70)
(code_label 70 68 69 12 23 (nil) [1 uses])
(note 69 70 71 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 71 69 63 12 (const_int 0 [0]) "kernel/sched.c":107:3 843 {nop}
     (nil))
(code_label 63 71 64 11 17 (nil) [2 uses])
(note 64 63 73 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(note 73 64 0 NOTE_INSN_DELETED)

;; Function wake_up (wake_up, funcdef_no=3, decl_uid=1297, cgraph_uid=4, symbol_order=12)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=4, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =r {*set_got}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 5:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 15:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) m  (1) re {*movsi_internal}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2 3 4
EBB 6
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
  BB 6
   Insn 26: point = 0, n_alt = -1
  BB 4
   Insn 17: point = 0, n_alt = 1
   Insn 16: point = 1, n_alt = 0
   Insn 15: point = 2, n_alt = 1
   Insn 14: point = 3, n_alt = 0
   Insn 13: point = 5, n_alt = 0
  BB 3
   Insn 11: point = 6, n_alt = -1
   Insn 10: point = 6, n_alt = 0
   Insn 9: point = 7, n_alt = 0
   Insn 8: point = 9, n_alt = 0
  BB 2
   Insn 6: point = 10, n_alt = -1
   Insn 5: point = 10, n_alt = 1
   Insn 27: point = 10, n_alt = 0
 r82: [10..10]
 r83: [6..7]
 r84: [2..3]
 r85: [8..9]
 r86: [4..5]
 r87: [0..1]
Compressing live ranges: from 11 to 11 - 100%
Ranges after the compression:
 r82: [10..10]
 r83: [6..7]
 r84: [2..3]
 r85: [8..9]
 r86: [4..5]
 r87: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=4, prev_offset=4)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 27
changing reg in insn 9
changing reg in insn 10
changing reg in insn 14
changing reg in insn 15
changing reg in insn 8
changing reg in insn 9
changing reg in insn 13
changing reg in insn 14
changing reg in insn 16
changing reg in insn 17
starting the processing of deferred insns
ending the processing of deferred insns


wake_up

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0 [ax] 17 [flags]
;;  ref usage 	r0={7d,5u} r1={1d} r2={1d} r7={1d,10u} r17={3d,2u} 
;;    total ref usage 30{13d,17u,0e} in 13{13 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 27 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 27 3 2 2 (parallel [
            (set (reg:SI 0 ax [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 27 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 4 [0x4])) [20 p+0 S4 A32])
            (const_int 0 [0]))) "kernel/sched.c":126:5 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 6 5 7 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 25)
            (pc))) "kernel/sched.c":126:5 806 {*jcc}
     (nil)
 -> 25)
(note 7 6 8 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 8 7 9 3 (set (reg/f:SI 0 ax [85])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [20 p+0 S4 A32])) "kernel/sched.c":126:11 75 {*movsi_internal}
     (nil))
(insn 9 8 10 3 (set (reg/f:SI 0 ax [orig:83 _1 ] [83])
        (mem/f:SI (reg/f:SI 0 ax [85]) [13 *p_4(D)+0 S4 A32])) "kernel/sched.c":126:11 75 {*movsi_internal}
     (nil))
(insn 10 9 11 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:SI 0 ax [orig:83 _1 ] [83])
            (const_int 0 [0]))) "kernel/sched.c":126:8 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 11 10 12 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 25)
            (pc))) "kernel/sched.c":126:8 806 {*jcc}
     (nil)
 -> 25)
(note 12 11 13 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 4 (set (reg/f:SI 0 ax [86])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [20 p+0 S4 A32])) "kernel/sched.c":127:5 75 {*movsi_internal}
     (nil))
(insn 14 13 15 4 (set (reg/f:SI 0 ax [orig:84 _2 ] [84])
        (mem/f:SI (reg/f:SI 0 ax [86]) [13 *p_4(D)+0 S4 A32])) "kernel/sched.c":127:5 75 {*movsi_internal}
     (nil))
(insn 15 14 16 4 (set (mem:SI (reg/f:SI 0 ax [orig:84 _2 ] [84]) [2 _2->state+0 S4 A32])
        (const_int 0 [0])) "kernel/sched.c":127:15 75 {*movsi_internal}
     (nil))
(insn 16 15 17 4 (set (reg/f:SI 0 ax [87])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [20 p+0 S4 A32])) "kernel/sched.c":128:6 75 {*movsi_internal}
     (nil))
(insn 17 16 25 4 (set (mem/f:SI (reg/f:SI 0 ax [87]) [13 *p_4(D)+0 S4 A32])
        (const_int 0 [0])) "kernel/sched.c":128:6 75 {*movsi_internal}
     (nil))
(code_label 25 17 24 6 26 (nil) [2 uses])
(note 24 25 26 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 26 24 20 6 (const_int 0 [0]) "kernel/sched.c":130:1 843 {nop}
     (nil))
(code_label 20 26 21 5 24 (nil) [0 uses])
(note 21 20 28 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(note 28 21 0 NOTE_INSN_DELETED)

;; Function sched_init (sched_init, funcdef_no=4, decl_uid=1301, cgraph_uid=5, symbol_order=13)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=36, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=-16, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) Ts {*leasi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) Ts {*leasi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) Ts {*leasi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) Ts {*leasi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 14:  (0) =r  (1) Ts {*leasi}
      Creating newreg=149 from oldreg=87, assigning class GENERAL_REGS to r149
   14: r149:SI=r109:SI+0x25
      REG_DEAD r109:SI
      REG_EQUAL const(`gdt'+0x25)
    Inserting insn reload after:
  112: r87:SI=r149:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 112:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 16:  (0) =r  (1) Ts {*leasi}
      Creating newreg=150 from oldreg=88, assigning class GENERAL_REGS to r150
   16: r150:SI=r110:SI+0x26
      REG_DEAD r110:SI
      REG_EQUAL const(`gdt'+0x26)
    Inserting insn reload after:
  113: r88:SI=r150:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 113:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) Ts {*leasi}
      Creating newreg=151 from oldreg=87, assigning class GENERAL_REGS to address r151
	   Change to class INDEX_REGS for r151
      Creating newreg=152 from oldreg=88, assigning class GENERAL_REGS to address r152
	   Change to class INDEX_REGS for r152
            0 Small class reload: reject+=3
          alt=0,overall=9,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 19:  (0) a  (1) m  (2) m  (3) m  (4) m  (5) m  (6) m
      Creating newreg=153 from oldreg=83, assigning class AREG to r153
   19: {asm_operands;clobber flags:CC;}
      REG_DEAD r89:SI
      REG_DEAD r88:SI
      REG_DEAD r87:SI
      REG_DEAD r86:SI
      REG_DEAD r85:SI
      REG_DEAD r84:SI
      REG_DEAD r83:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  114: r151:SI=r87:SI
  115: r152:SI=r88:SI
  116: r153:SI=r83:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 114:  (0) =r  (1) g {*movsi_internal}
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 115:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) Ts {*leasi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r  (1) Ts {*leasi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =r  (1) Ts {*leasi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =r  (1) Ts {*leasi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 28:  (0) =r  (1) Ts {*leasi}
      Creating newreg=154 from oldreg=94, assigning class GENERAL_REGS to r154
   28: r154:SI=r115:SI+0x2d
      REG_DEAD r115:SI
      REG_EQUAL const(`gdt'+0x2d)
    Inserting insn reload after:
  117: r94:SI=r154:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 117:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 30:  (0) =r  (1) Ts {*leasi}
      Creating newreg=155 from oldreg=95, assigning class GENERAL_REGS to r155
   30: r155:SI=r116:SI+0x2e
      REG_DEAD r116:SI
      REG_EQUAL const(`gdt'+0x2e)
    Inserting insn reload after:
  118: r95:SI=r155:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 118:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =r  (1) Ts {*leasi}
      Creating newreg=156 from oldreg=94, assigning class GENERAL_REGS to address r156
	   Change to class INDEX_REGS for r156
      Creating newreg=157 from oldreg=95, assigning class GENERAL_REGS to address r157
	   Change to class INDEX_REGS for r157
            0 Small class reload: reject+=3
          alt=0,overall=9,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 33:  (0) a  (1) m  (2) m  (3) m  (4) m  (5) m  (6) m
      Creating newreg=158 from oldreg=90, assigning class AREG to r158
   33: {asm_operands;clobber flags:CC;}
      REG_DEAD r96:SI
      REG_DEAD r95:SI
      REG_DEAD r94:SI
      REG_DEAD r93:SI
      REG_DEAD r92:SI
      REG_DEAD r91:SI
      REG_DEAD r90:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  119: r156:SI=r94:SI
  120: r157:SI=r95:SI
  121: r158:SI=r90:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 119:  (0) =r  (1) g {*movsi_internal}
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 120:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =r  (1) Ts {*leasi}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 36:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 37:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 42:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 44:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 48:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 49:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 51:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 55:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 56:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 57:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) a
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) a
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) a  (1) d
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) a  (1) d
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) a  (1) d
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) =r  (1) Ts {*leasi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) =r  (1) Ts {*leasi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) i  (1) o  (2) o  (3) d  (4) a
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) =r  (1) g {*movsi_internal}
            1 Small class reload: reject+=3
          alt=0,overall=9,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 90:  (0) =a  (1) d
      Creating newreg=159 from oldreg=141, assigning class DREG to r159
   90: {r140:QI=asm_operands;clobber flags:CC;}
      REG_DEAD r141:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  122: r159:SI=r141:SI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=7,overall=27,losers=2 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 88:  (0) m  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 91:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 93:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 95:  (0) a  (1) d
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 97:  (0) =r  (1) Ts {*leasi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (0) =r  (1) Ts {*leasi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (0) i  (1) o  (2) o  (3) d  (4) a
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=160 from oldreg=95, assigning class GENERAL_REGS to inheritance r160
    Original reg change 95->160 (bb2):
  118: r160:SI=r155:SI
    Add original<-inheritance after:
  123: r95:SI=r160:SI

    Inheritance reuse change 95->160 (bb2):
  120: r157:SI=r160:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=161 from oldreg=94, assigning class GENERAL_REGS to inheritance r161
    Original reg change 94->161 (bb2):
  117: r161:SI=r154:SI
    Add original<-inheritance after:
  124: r94:SI=r161:SI

    Inheritance reuse change 94->161 (bb2):
  119: r156:SI=r161:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=162 from oldreg=88, assigning class GENERAL_REGS to inheritance r162
    Original reg change 88->162 (bb2):
  113: r162:SI=r150:SI
    Add original<-inheritance after:
  125: r88:SI=r162:SI

    Inheritance reuse change 88->162 (bb2):
  115: r152:SI=r162:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=163 from oldreg=87, assigning class GENERAL_REGS to inheritance r163
    Original reg change 87->163 (bb2):
  112: r163:SI=r149:SI
    Add original<-inheritance after:
  126: r87:SI=r163:SI

    Inheritance reuse change 87->163 (bb2):
  114: r151:SI=r163:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   123: r95:SI=r160:SI
deleting insn with uid = 123.
	    Removing dead insn:
   124: r94:SI=r161:SI
deleting insn with uid = 124.
	    Removing dead insn:
   125: r88:SI=r162:SI
deleting insn with uid = 125.
	    Removing dead insn:
   126: r87:SI=r163:SI
deleting insn with uid = 126.
EBB 3
EBB 4 5 6

********** Pseudo live ranges #1: **********

  BB 6
   Insn 109: point = 0, n_alt = -1
  BB 5
   Insn 103: point = 0, n_alt = 0
   Insn 102: point = 1, n_alt = 0
   Insn 101: point = 2, n_alt = -2
   Insn 100: point = 4, n_alt = 0
   Insn 99: point = 6, n_alt = 0
   Insn 98: point = 8, n_alt = 0
   Insn 97: point = 9, n_alt = 0
   Insn 96: point = 11, n_alt = 0
   Insn 95: point = 12, n_alt = 0
   Insn 94: point = 13, n_alt = 0
   Insn 93: point = 14, n_alt = 0
   Insn 92: point = 16, n_alt = 0
   Insn 91: point = 18, n_alt = 4
   Insn 88: point = 19, n_alt = 8
   Insn 90: point = 20, n_alt = 0
   Insn 122: point = 22, n_alt = -2
	Hard reg 0 is preferable by r159 with profit 1000
   Insn 89: point = 24, n_alt = 0
   Insn 87: point = 25, n_alt = 0
   Insn 86: point = 26, n_alt = 0
   Insn 85: point = 27, n_alt = -2
   Insn 84: point = 29, n_alt = 0
   Insn 83: point = 30, n_alt = 0
   Insn 82: point = 32, n_alt = 0
   Insn 81: point = 33, n_alt = 0
   Insn 80: point = 35, n_alt = 0
   Insn 79: point = 36, n_alt = 0
   Insn 78: point = 37, n_alt = 0
   Insn 77: point = 38, n_alt = 0
   Insn 76: point = 39, n_alt = 0
   Insn 75: point = 40, n_alt = 0
   Insn 74: point = 41, n_alt = 0
   Insn 73: point = 42, n_alt = 0
   Insn 72: point = 43, n_alt = 0
   Insn 71: point = 44, n_alt = 0
   Insn 70: point = 45, n_alt = 0
   Insn 69: point = 46, n_alt = 0
   Insn 68: point = 47, n_alt = 0
   Insn 67: point = 48, n_alt = 0
   Insn 66: point = 49, n_alt = -1
  BB 4
   Insn 64: point = 50, n_alt = -1
   Insn 63: point = 50, n_alt = 0
  BB 2
   Insn 106: point = 51, n_alt = -1
   Insn 37: point = 51, n_alt = 1
   Insn 36: point = 51, n_alt = 1
   Insn 35: point = 52, n_alt = 0
   Insn 34: point = 54, n_alt = 0
   Insn 33: point = 55, n_alt = 0
   Insn 121: point = 56, n_alt = -2
	Hard reg 3 is preferable by r158 with profit 1000
   Insn 120: point = 58, n_alt = 0
	   Creating copy r157<-r160@1000
   Insn 119: point = 60, n_alt = 0
	   Creating copy r156<-r161@1000
   Insn 32: point = 62, n_alt = 0
   Insn 31: point = 64, n_alt = 0
   Insn 118: point = 65, n_alt = 1
	   Creating copy r155->r160@1000
   Insn 30: point = 67, n_alt = 0
   Insn 29: point = 69, n_alt = 0
   Insn 117: point = 70, n_alt = 1
	   Creating copy r154->r161@1000
   Insn 28: point = 72, n_alt = 0
   Insn 27: point = 74, n_alt = 0
   Insn 26: point = 75, n_alt = 0
   Insn 25: point = 77, n_alt = 0
   Insn 24: point = 78, n_alt = 0
   Insn 23: point = 80, n_alt = 0
   Insn 22: point = 81, n_alt = 0
   Insn 21: point = 83, n_alt = 0
   Insn 20: point = 84, n_alt = 0
   Insn 19: point = 85, n_alt = 0
   Insn 116: point = 86, n_alt = -2
	Hard reg 3 is preferable by r153 with profit 1000
   Insn 115: point = 88, n_alt = 0
	   Creating copy r152<-r162@1000
   Insn 114: point = 90, n_alt = 0
	   Creating copy r151<-r163@1000
   Insn 18: point = 92, n_alt = 0
   Insn 17: point = 94, n_alt = 0
   Insn 113: point = 95, n_alt = 1
	   Creating copy r150->r162@1000
   Insn 16: point = 97, n_alt = 0
   Insn 15: point = 99, n_alt = 0
   Insn 112: point = 100, n_alt = 1
	   Creating copy r149->r163@1000
   Insn 14: point = 102, n_alt = 0
   Insn 13: point = 104, n_alt = 0
   Insn 12: point = 105, n_alt = 0
   Insn 11: point = 107, n_alt = 0
   Insn 10: point = 108, n_alt = 0
   Insn 9: point = 110, n_alt = 0
   Insn 8: point = 111, n_alt = 0
   Insn 7: point = 113, n_alt = 0
   Insn 6: point = 114, n_alt = 0
   Insn 110: point = 115, n_alt = 0
  BB 3
   Insn 57: point = 116, n_alt = 0
   Insn 56: point = 116, n_alt = 0
   Insn 55: point = 116, n_alt = 1
   Insn 54: point = 117, n_alt = 0
   Insn 53: point = 118, n_alt = 0
   Insn 52: point = 120, n_alt = 0
   Insn 51: point = 121, n_alt = 1
   Insn 50: point = 122, n_alt = 0
   Insn 49: point = 123, n_alt = 0
   Insn 48: point = 123, n_alt = 1
   Insn 47: point = 124, n_alt = 0
   Insn 46: point = 125, n_alt = 0
   Insn 45: point = 127, n_alt = 0
   Insn 44: point = 128, n_alt = 1
   Insn 43: point = 129, n_alt = 0
   Insn 42: point = 130, n_alt = 1
   Insn 41: point = 131, n_alt = 0
 r82: [5..132]
 r83: [87..114]
 r84: [85..111]
 r85: [85..108]
 r86: [85..105]
 r89: [85..92]
 r90: [57..84]
 r91: [55..81]
 r92: [55..78]
 r93: [55..75]
 r96: [55..62]
 r97: [123..125]
 r98: [116..118]
 r99: [25..33]
 r100: [25..30]
 r101: [15..16]
 r102: [12..14]
 r103: [0..9]
 r104: [0..6]
 r105: [17..18]
 r106: [112..113]
 r107: [109..110]
 r108: [106..107]
 r109: [103..104]
 r110: [98..99]
 r111: [93..94]
 r112: [82..83]
 r113: [79..80]
 r114: [76..77]
 r115: [73..74]
 r116: [68..69]
 r117: [63..64]
 r118: [51..52]
 r119: [53..54]
 r120: [130..131]
 r121: [128..129]
 r122: [126..127]
 r123: [123..124]
 r124: [121..122]
 r125: [119..120]
 r126: [116..117]
 r127: [47..48]
 r128: [45..46]
 r129: [42..44]
 r130: [42..43]
 r131: [39..41]
 r132: [39..40]
 r133: [36..38]
 r134: [36..37]
 r135: [34..35]
 r136: [31..32]
 r137: [25..27]
 r138: [28..29]
 r139: [25..26]
 r140: [19..20]
 r141: [23..24]
 r142: [12..13]
 r143: [10..11]
 r144: [7..8]
 r145: [0..2]
 r146: [3..4]
 r147: [0..1]
 r149: [101..102]
 r150: [96..97]
 r151: [85..90]
 r152: [85..88]
 r153: [85..86]
 r154: [71..72]
 r155: [66..67]
 r156: [55..60]
 r157: [55..58]
 r158: [55..56]
 r159: [21..22]
 r160: [59..65]
 r161: [61..70]
 r162: [89..95]
 r163: [91..100]
Compressing live ranges: from 133 to 106 - 79%
Ranges after the compression:
 r82: [4..105]
 r83: [70..91]
 r84: [68..89]
 r85: [68..87]
 r86: [68..85]
 r89: [68..75]
 r90: [46..67]
 r91: [44..65]
 r92: [44..63]
 r93: [44..61]
 r96: [44..51]
 r97: [98..99]
 r98: [92..93]
 r99: [22..27]
 r100: [22..25]
 r101: [12..13]
 r102: [10..11]
 r103: [0..7]
 r104: [0..5]
 r105: [14..15]
 r106: [90..91]
 r107: [88..89]
 r108: [86..87]
 r109: [84..85]
 r110: [80..81]
 r111: [76..77]
 r112: [66..67]
 r113: [64..65]
 r114: [62..63]
 r115: [60..61]
 r116: [56..57]
 r117: [52..53]
 r118: [40..41]
 r119: [42..43]
 r120: [104..105]
 r121: [102..103]
 r122: [100..101]
 r123: [98..99]
 r124: [96..97]
 r125: [94..95]
 r126: [92..93]
 r127: [38..39]
 r128: [36..37]
 r129: [34..35]
 r130: [34..35]
 r131: [32..33]
 r132: [32..33]
 r133: [30..31]
 r134: [30..31]
 r135: [28..29]
 r136: [26..27]
 r137: [22..23]
 r138: [24..25]
 r139: [22..23]
 r140: [16..17]
 r141: [20..21]
 r142: [10..11]
 r143: [8..9]
 r144: [6..7]
 r145: [0..1]
 r146: [2..3]
 r147: [0..1]
 r149: [82..83]
 r150: [78..79]
 r151: [68..73]
 r152: [68..71]
 r153: [68..69]
 r154: [58..59]
 r155: [54..55]
 r156: [44..49]
 r157: [44..47]
 r158: [44..45]
 r159: [18..19]
 r160: [48..53]
 r161: [50..57]
 r162: [72..77]
 r163: [74..81]

********** Assignment #1: **********

	 Assigning to 153 (cl=AREG, orig=83, freq=2000, tfirst=153, tfreq=2000)...
	   Assign 0 to reload r153 (freq=2000)
	 Assigning to 158 (cl=AREG, orig=90, freq=2000, tfirst=158, tfreq=2000)...
	   Assign 0 to reload r158 (freq=2000)
	 Assigning to 159 (cl=DREG, orig=141, freq=2000, tfirst=159, tfreq=2000)...
	   Assign 1 to reload r159 (freq=2000)
	 Assigning to 163 (cl=GENERAL_REGS, orig=87, freq=2000, tfirst=149, tfreq=2000)...
	 Assigning to 151 (cl=INDEX_REGS, orig=87, freq=2000, tfirst=149, tfreq=2000)...
	 Trying 1: spill 89(freq=2000) assign 163(cost=-2000)	 Now best 1(cost=-2000, bad_spills=0, insn_pseudos=1)

	 Trying 3: spill 83(freq=2000) assign 163(cost=-2000)	 Now best 3(cost=-2000, bad_spills=0, insn_pseudos=0)

	 Trying 4: spill 84(freq=2000) assign 163(cost=-2000)
	 Trying 5: spill 85(freq=2000) assign 163(cost=-2000)
	 Trying 6: spill 86(freq=2000) assign 163(cost=-2000)
      Spill r83(hr=3, freq=2000) for r151
	   Assign 3 to reload r151 (freq=2000)
	Hard reg 3 is preferable by r163 with profit 1000
	Hard reg 3 is preferable by r149 with profit 500
	 Assigning to 149 (cl=GENERAL_REGS, orig=87, freq=2000, tfirst=149, tfreq=2000)...
	   Assign 3 to reload r149 (freq=2000)
	Hard reg 3 is preferable by r163 with profit 2000
	 Assigning to 162 (cl=GENERAL_REGS, orig=88, freq=2000, tfirst=150, tfreq=2000)...
	 Assigning to 152 (cl=INDEX_REGS, orig=88, freq=2000, tfirst=150, tfreq=2000)...
	 Trying 1: spill 89(freq=2000) assign 162(cost=-2000)	 Now best 1(cost=-2000, bad_spills=0, insn_pseudos=1)

	 Trying 4: spill 84(freq=2000) assign 162(cost=-2000)
	 Trying 5: spill 85(freq=2000) assign 162(cost=-2000)
	 Trying 6: spill 86(freq=2000) assign 162(cost=-2000)
      Spill r89(hr=1, freq=2000) for r152
	   Assign 1 to reload r152 (freq=2000)
	Hard reg 1 is preferable by r162 with profit 1000
	Hard reg 1 is preferable by r150 with profit 500
	 Assigning to 150 (cl=GENERAL_REGS, orig=88, freq=2000, tfirst=150, tfreq=2000)...
	   Assign 1 to reload r150 (freq=2000)
	Hard reg 1 is preferable by r162 with profit 2000
	 Assigning to 161 (cl=GENERAL_REGS, orig=94, freq=2000, tfirst=154, tfreq=2000)...
	 Assigning to 156 (cl=INDEX_REGS, orig=94, freq=2000, tfirst=154, tfreq=2000)...
	 Trying 1: spill 96(freq=2000) assign 161(cost=-2000)	 Now best 1(cost=-2000, bad_spills=0, insn_pseudos=1)

	 Trying 3: spill 90(freq=2000) assign 161(cost=-2000)	 Now best 3(cost=-2000, bad_spills=0, insn_pseudos=0)

	 Trying 4: spill 91(freq=2000) assign 161(cost=-2000)
	 Trying 5: spill 92(freq=2000) assign 161(cost=-2000)
	 Trying 6: spill 93(freq=2000) assign 161(cost=-2000)
      Spill r90(hr=3, freq=2000) for r156
	   Assign 3 to reload r156 (freq=2000)
	Hard reg 3 is preferable by r161 with profit 1000
	Hard reg 3 is preferable by r154 with profit 500
	 Assigning to 154 (cl=GENERAL_REGS, orig=94, freq=2000, tfirst=154, tfreq=2000)...
	   Assign 3 to reload r154 (freq=2000)
	Hard reg 3 is preferable by r161 with profit 2000
	 Assigning to 160 (cl=GENERAL_REGS, orig=95, freq=2000, tfirst=155, tfreq=2000)...
	 Assigning to 157 (cl=INDEX_REGS, orig=95, freq=2000, tfirst=155, tfreq=2000)...
	 Trying 1: spill 96(freq=2000) assign 160(cost=-2000)	 Now best 1(cost=-2000, bad_spills=0, insn_pseudos=1)

	 Trying 4: spill 91(freq=2000) assign 160(cost=-2000)
	 Trying 5: spill 92(freq=2000) assign 160(cost=-2000)
	 Trying 6: spill 93(freq=2000) assign 160(cost=-2000)
      Spill r96(hr=1, freq=2000) for r157
	   Assign 1 to reload r157 (freq=2000)
	Hard reg 1 is preferable by r160 with profit 1000
	Hard reg 1 is preferable by r155 with profit 500
	 Assigning to 155 (cl=GENERAL_REGS, orig=95, freq=2000, tfirst=155, tfreq=2000)...
	   Assign 1 to reload r155 (freq=2000)
	Hard reg 1 is preferable by r160 with profit 2000
  Reassigning non-reload pseudos
	   Assign 1 to inheritance r160 (freq=2000)
	   Assign 3 to inheritance r161 (freq=2000)
	   Assign 1 to inheritance r162 (freq=2000)
	   Assign 3 to inheritance r163 (freq=2000)

********** Undoing inheritance #1: **********

Inherit 4 out of 4 (100.00%)

********** Pseudos coalescing #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 121:  (0) =r  (1) g {*movsi_internal}
            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 116:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=164 from oldreg=96, assigning class GENERAL_REGS to address r164
	   Change to class INDEX_REGS for r164
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) a  (1) m  (2) m  (3) m  (4) m  (5) m  (6) m
   33: {asm_operands;clobber flags:CC;}
      REG_DEAD r156:SI
      REG_DEAD r157:SI
      REG_DEAD r158:SI
      REG_DEAD r96:SI
      REG_DEAD r93:SI
      REG_DEAD r92:SI
      REG_DEAD r91:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  127: r164:SI=r96:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 127:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 32:  (0) =r  (1) Ts {*leasi}
      Creating newreg=165 from oldreg=96, assigning class GENERAL_REGS to r165
   32: r165:SI=r117:SI+0x2f
      REG_DEAD r117:SI
      REG_EQUAL const(`gdt'+0x2f)
    Inserting insn reload after:
  128: r96:SI=r165:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 128:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 20:  (0) =r  (1) Ts {*leasi}
      Creating newreg=166 from oldreg=90, assigning class GENERAL_REGS to r166
   20: r166:SI=r82:SI+const(unspec[`init_task'] 1+0x2d0)
      REG_EQUAL const(`init_task'+0x2d0)
    Inserting insn reload after:
  129: r90:SI=r166:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 129:  (0) m  (1) re {*movsi_internal}
      Creating newreg=167 from oldreg=89, assigning class GENERAL_REGS to address r167
	   Change to class INDEX_REGS for r167
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) a  (1) m  (2) m  (3) m  (4) m  (5) m  (6) m
   19: {asm_operands;clobber flags:CC;}
      REG_DEAD r151:SI
      REG_DEAD r152:SI
      REG_DEAD r153:SI
      REG_DEAD r89:SI
      REG_DEAD r86:SI
      REG_DEAD r85:SI
      REG_DEAD r84:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  130: r167:SI=r89:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 130:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 18:  (0) =r  (1) Ts {*leasi}
      Creating newreg=168 from oldreg=89, assigning class GENERAL_REGS to r168
   18: r168:SI=r111:SI+0x27
      REG_DEAD r111:SI
      REG_EQUAL const(`gdt'+0x27)
    Inserting insn reload after:
  131: r89:SI=r168:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 131:  (0) m  (1) re {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 6:  (0) =r  (1) Ts {*leasi}
      Creating newreg=169 from oldreg=83, assigning class GENERAL_REGS to r169
    6: r169:SI=r82:SI+const(unspec[`init_task'] 1+0x2e8)
      REG_EQUAL const(`init_task'+0x2e8)
    Inserting insn reload after:
  132: r83:SI=r169:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 132:  (0) m  (1) re {*movsi_internal}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #2: **********

EBB 2
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=170 from oldreg=96, assigning class GENERAL_REGS to inheritance r170
    Original reg change 96->170 (bb2):
  128: r170:SI=r165:SI
    Add original<-inheritance after:
  133: r96:SI=r170:SI

    Inheritance reuse change 96->170 (bb2):
  127: r164:SI=r170:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=171 from oldreg=90, assigning class GENERAL_REGS to inheritance r171
    Original reg change 90->171 (bb2):
  129: r171:SI=r166:SI
    Add original<-inheritance after:
  134: r90:SI=r171:SI

    Inheritance reuse change 90->171 (bb2):
  121: r158:SI=r171:SI
      REG_DEAD r171:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=172 from oldreg=89, assigning class GENERAL_REGS to inheritance r172
    Original reg change 89->172 (bb2):
  131: r172:SI=r168:SI
    Add original<-inheritance after:
  135: r89:SI=r172:SI

    Inheritance reuse change 89->172 (bb2):
  130: r167:SI=r172:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=173 from oldreg=83, assigning class GENERAL_REGS to inheritance r173
    Original reg change 83->173 (bb2):
  132: r173:SI=r169:SI
    Add original<-inheritance after:
  136: r83:SI=r173:SI

    Inheritance reuse change 83->173 (bb2):
  116: r153:SI=r173:SI
      REG_DEAD r173:SI
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   133: r96:SI=r170:SI
deleting insn with uid = 133.
	    Removing dead insn:
   134: r90:SI=r171:SI
deleting insn with uid = 134.
	    Removing dead insn:
   135: r89:SI=r172:SI
deleting insn with uid = 135.
	    Removing dead insn:
   136: r83:SI=r173:SI
deleting insn with uid = 136.
EBB 3
EBB 4 5 6

********** Pseudo live ranges #2: **********

  BB 6
   Insn 109: point = 0, n_alt = -1
  BB 5
   Insn 103: point = 0, n_alt = 0
   Insn 102: point = 1, n_alt = 0
   Insn 101: point = 2, n_alt = -2
   Insn 100: point = 4, n_alt = 0
   Insn 99: point = 6, n_alt = 0
   Insn 98: point = 8, n_alt = 0
   Insn 97: point = 9, n_alt = 0
   Insn 96: point = 11, n_alt = 0
   Insn 95: point = 12, n_alt = 0
   Insn 94: point = 13, n_alt = 0
   Insn 93: point = 14, n_alt = 0
   Insn 92: point = 16, n_alt = 0
   Insn 91: point = 18, n_alt = 4
   Insn 88: point = 19, n_alt = 8
   Insn 90: point = 20, n_alt = 0
   Insn 122: point = 22, n_alt = -2
	Hard reg 0 is preferable by r159 with profit 1000
   Insn 89: point = 24, n_alt = 0
   Insn 87: point = 25, n_alt = 0
   Insn 86: point = 26, n_alt = 0
   Insn 85: point = 27, n_alt = -2
   Insn 84: point = 29, n_alt = 0
   Insn 83: point = 30, n_alt = 0
   Insn 82: point = 32, n_alt = 0
   Insn 81: point = 33, n_alt = 0
   Insn 80: point = 35, n_alt = 0
   Insn 79: point = 36, n_alt = 0
   Insn 78: point = 37, n_alt = 0
   Insn 77: point = 38, n_alt = 0
   Insn 76: point = 39, n_alt = 0
   Insn 75: point = 40, n_alt = 0
   Insn 74: point = 41, n_alt = 0
   Insn 73: point = 42, n_alt = 0
   Insn 72: point = 43, n_alt = 0
   Insn 71: point = 44, n_alt = 0
   Insn 70: point = 45, n_alt = 0
   Insn 69: point = 46, n_alt = 0
   Insn 68: point = 47, n_alt = 0
   Insn 67: point = 48, n_alt = 0
   Insn 66: point = 49, n_alt = -1
  BB 4
   Insn 64: point = 50, n_alt = -1
   Insn 63: point = 50, n_alt = 0
  BB 2
   Insn 106: point = 51, n_alt = -1
   Insn 37: point = 51, n_alt = 1
   Insn 36: point = 51, n_alt = 1
   Insn 35: point = 52, n_alt = 0
   Insn 34: point = 54, n_alt = 0
   Insn 33: point = 55, n_alt = 0
   Insn 127: point = 56, n_alt = 0
	   Creating copy r164<-r170@1000
   Insn 121: point = 58, n_alt = 0
	   Creating copy r158<-r171@1000
   Insn 120: point = 60, n_alt = -2
	   Creating copy r157<-r160@1000
   Insn 119: point = 62, n_alt = -2
	   Creating copy r156<-r161@1000
   Insn 128: point = 64, n_alt = 1
	   Creating copy r165->r170@1000
   Insn 32: point = 66, n_alt = 0
   Insn 31: point = 68, n_alt = 0
   Insn 118: point = 69, n_alt = -2
	   Creating copy r155->r160@1000
   Insn 30: point = 71, n_alt = 0
   Insn 29: point = 73, n_alt = 0
   Insn 117: point = 74, n_alt = -2
	   Creating copy r154->r161@1000
   Insn 28: point = 76, n_alt = 0
   Insn 27: point = 78, n_alt = 0
   Insn 26: point = 79, n_alt = 0
   Insn 25: point = 81, n_alt = 0
   Insn 24: point = 82, n_alt = 0
   Insn 23: point = 84, n_alt = 0
   Insn 22: point = 85, n_alt = 0
   Insn 21: point = 87, n_alt = 0
   Insn 129: point = 88, n_alt = 1
	   Creating copy r166->r171@1000
   Insn 20: point = 90, n_alt = 0
   Insn 19: point = 91, n_alt = 0
   Insn 130: point = 92, n_alt = 0
	   Creating copy r167<-r172@1000
   Insn 116: point = 94, n_alt = 0
	   Creating copy r153<-r173@1000
   Insn 115: point = 96, n_alt = -2
	   Creating copy r152<-r162@1000
   Insn 114: point = 98, n_alt = -2
	   Creating copy r151<-r163@1000
   Insn 131: point = 100, n_alt = 1
	   Creating copy r168->r172@1000
   Insn 18: point = 102, n_alt = 0
   Insn 17: point = 104, n_alt = 0
   Insn 113: point = 105, n_alt = -2
	   Creating copy r150->r162@1000
   Insn 16: point = 107, n_alt = 0
   Insn 15: point = 109, n_alt = 0
   Insn 112: point = 110, n_alt = -2
	   Creating copy r149->r163@1000
   Insn 14: point = 112, n_alt = 0
   Insn 13: point = 114, n_alt = 0
   Insn 12: point = 115, n_alt = 0
   Insn 11: point = 117, n_alt = 0
   Insn 10: point = 118, n_alt = 0
   Insn 9: point = 120, n_alt = 0
   Insn 8: point = 121, n_alt = 0
   Insn 7: point = 123, n_alt = 0
   Insn 132: point = 124, n_alt = 1
	   Creating copy r169->r173@1000
   Insn 6: point = 126, n_alt = 0
   Insn 110: point = 127, n_alt = 0
  BB 3
   Insn 57: point = 128, n_alt = 0
   Insn 56: point = 128, n_alt = 0
   Insn 55: point = 128, n_alt = 1
   Insn 54: point = 129, n_alt = 0
   Insn 53: point = 130, n_alt = 0
   Insn 52: point = 132, n_alt = 0
   Insn 51: point = 133, n_alt = 1
   Insn 50: point = 134, n_alt = 0
   Insn 49: point = 135, n_alt = 0
   Insn 48: point = 135, n_alt = 1
   Insn 47: point = 136, n_alt = 0
   Insn 46: point = 137, n_alt = 0
   Insn 45: point = 139, n_alt = 0
   Insn 44: point = 140, n_alt = 1
   Insn 43: point = 141, n_alt = 0
   Insn 42: point = 142, n_alt = 1
   Insn 41: point = 143, n_alt = 0
 r82: [5..144]
 r84: [91..121]
 r85: [91..118]
 r86: [91..115]
 r91: [55..85]
 r92: [55..82]
 r93: [55..79]
 r97: [135..137]
 r98: [128..130]
 r99: [25..33]
 r100: [25..30]
 r101: [15..16]
 r102: [12..14]
 r103: [0..9]
 r104: [0..6]
 r105: [17..18]
 r106: [122..123]
 r107: [119..120]
 r108: [116..117]
 r109: [113..114]
 r110: [108..109]
 r111: [103..104]
 r112: [86..87]
 r113: [83..84]
 r114: [80..81]
 r115: [77..78]
 r116: [72..73]
 r117: [67..68]
 r118: [51..52]
 r119: [53..54]
 r120: [142..143]
 r121: [140..141]
 r122: [138..139]
 r123: [135..136]
 r124: [133..134]
 r125: [131..132]
 r126: [128..129]
 r127: [47..48]
 r128: [45..46]
 r129: [42..44]
 r130: [42..43]
 r131: [39..41]
 r132: [39..40]
 r133: [36..38]
 r134: [36..37]
 r135: [34..35]
 r136: [31..32]
 r137: [25..27]
 r138: [28..29]
 r139: [25..26]
 r140: [19..20]
 r141: [23..24]
 r142: [12..13]
 r143: [10..11]
 r144: [7..8]
 r145: [0..2]
 r146: [3..4]
 r147: [0..1]
 r149: [111..112]
 r150: [106..107]
 r151: [91..98]
 r152: [91..96]
 r153: [91..94]
 r154: [75..76]
 r155: [70..71]
 r156: [55..62]
 r157: [55..60]
 r158: [55..58]
 r159: [21..22]
 r160: [61..69]
 r161: [63..74]
 r162: [97..105]
 r163: [99..110]
 r164: [55..56]
 r165: [65..66]
 r166: [89..90]
 r167: [91..92]
 r168: [101..102]
 r169: [125..126]
 r170: [57..64]
 r171: [59..88]
 r172: [93..100]
 r173: [95..124]
Compressing live ranges: from 145 to 118 - 81%
Ranges after the compression:
 r82: [4..117]
 r84: [74..99]
 r85: [74..97]
 r86: [74..95]
 r91: [44..69]
 r92: [44..67]
 r93: [44..65]
 r97: [110..111]
 r98: [104..105]
 r99: [22..27]
 r100: [22..25]
 r101: [12..13]
 r102: [10..11]
 r103: [0..7]
 r104: [0..5]
 r105: [14..15]
 r106: [100..101]
 r107: [98..99]
 r108: [96..97]
 r109: [94..95]
 r110: [90..91]
 r111: [86..87]
 r112: [70..71]
 r113: [68..69]
 r114: [66..67]
 r115: [64..65]
 r116: [60..61]
 r117: [56..57]
 r118: [40..41]
 r119: [42..43]
 r120: [116..117]
 r121: [114..115]
 r122: [112..113]
 r123: [110..111]
 r124: [108..109]
 r125: [106..107]
 r126: [104..105]
 r127: [38..39]
 r128: [36..37]
 r129: [34..35]
 r130: [34..35]
 r131: [32..33]
 r132: [32..33]
 r133: [30..31]
 r134: [30..31]
 r135: [28..29]
 r136: [26..27]
 r137: [22..23]
 r138: [24..25]
 r139: [22..23]
 r140: [16..17]
 r141: [20..21]
 r142: [10..11]
 r143: [8..9]
 r144: [6..7]
 r145: [0..1]
 r146: [2..3]
 r147: [0..1]
 r149: [92..93]
 r150: [88..89]
 r151: [74..81]
 r152: [74..79]
 r153: [74..77]
 r154: [62..63]
 r155: [58..59]
 r156: [44..51]
 r157: [44..49]
 r158: [44..47]
 r159: [18..19]
 r160: [50..57]
 r161: [52..61]
 r162: [80..87]
 r163: [82..91]
 r164: [44..45]
 r165: [54..55]
 r166: [72..73]
 r167: [74..75]
 r168: [84..85]
 r169: [102..103]
 r170: [46..53]
 r171: [48..71]
 r172: [76..83]
 r173: [78..101]

********** Assignment #2: **********

	 Assigning to 170 (cl=GENERAL_REGS, orig=96, freq=2000, tfirst=165, tfreq=2000)...
	 Assigning to 164 (cl=INDEX_REGS, orig=96, freq=2000, tfirst=165, tfreq=2000)...
	 Trying 4: spill 91(freq=2000) assign 170(cost=-2000)	 Now best 4(cost=-2000, bad_spills=0, insn_pseudos=1)

	 Trying 5: spill 92(freq=2000) assign 170(cost=-2000)
	 Trying 6: spill 93(freq=2000) assign 170(cost=-2000)
      Spill r91(hr=4, freq=2000) for r164
	   Assign 4 to reload r164 (freq=2000)
	Hard reg 4 is preferable by r170 with profit 1000
	Hard reg 4 is preferable by r165 with profit 500
	 Assigning to 165 (cl=GENERAL_REGS, orig=96, freq=2000, tfirst=165, tfreq=2000)...
	   Assign 4 to reload r165 (freq=2000)
	Hard reg 4 is preferable by r170 with profit 2000
	 Assigning to 171 (cl=GENERAL_REGS, orig=90, freq=2000, tfirst=166, tfreq=2000)...
	 Assigning to 166 (cl=GENERAL_REGS, orig=90, freq=2000, tfirst=166, tfreq=2000)...
	   Assign 0 to reload r166 (freq=2000)
	Hard reg 0 is preferable by r171 with profit 1000
	 Assigning to 172 (cl=GENERAL_REGS, orig=89, freq=2000, tfirst=168, tfreq=2000)...
	 Assigning to 167 (cl=INDEX_REGS, orig=89, freq=2000, tfirst=168, tfreq=2000)...
	 Trying 4: spill 84(freq=2000) assign 172(cost=-2000)	 Now best 4(cost=-2000, bad_spills=0, insn_pseudos=1)

	 Trying 5: spill 85(freq=2000) assign 172(cost=-2000)
	 Trying 6: spill 86(freq=2000) assign 172(cost=-2000)
      Spill r84(hr=4, freq=2000) for r167
	   Assign 4 to reload r167 (freq=2000)
	Hard reg 4 is preferable by r172 with profit 1000
	Hard reg 4 is preferable by r168 with profit 500
	 Assigning to 168 (cl=GENERAL_REGS, orig=89, freq=2000, tfirst=168, tfreq=2000)...
	   Assign 4 to reload r168 (freq=2000)
	Hard reg 4 is preferable by r172 with profit 2000
	 Assigning to 173 (cl=GENERAL_REGS, orig=83, freq=2000, tfirst=169, tfreq=2000)...
	 Assigning to 169 (cl=GENERAL_REGS, orig=83, freq=2000, tfirst=169, tfreq=2000)...
	   Assign 0 to reload r169 (freq=2000)
	Hard reg 0 is preferable by r173 with profit 1000
  Reassigning non-reload pseudos
	   Assign 4 to inheritance r170 (freq=2000)
	   Assign 4 to inheritance r172 (freq=2000)

********** Undoing inheritance #2: **********

Inherit 2 out of 4 (50.00%)
   Insn after restoring regs:
  121: r158:SI=r90:SI
      REG_DEAD r90:SI
   Insn after restoring regs:
  129: r90:SI=r166:SI
      REG_DEAD r166:SI
   Insn after restoring regs:
  116: r153:SI=r83:SI
      REG_DEAD r83:SI
   Insn after restoring regs:
  132: r83:SI=r169:SI
      REG_DEAD r169:SI

********** Pseudo live ranges #3: **********

  BB 6
   Insn 109: point = 0, n_alt = -1
  BB 5
   Insn 103: point = 0, n_alt = 0
   Insn 102: point = 1, n_alt = 0
   Insn 101: point = 2, n_alt = -2
   Insn 100: point = 4, n_alt = 0
   Insn 99: point = 6, n_alt = 0
   Insn 98: point = 8, n_alt = 0
   Insn 97: point = 9, n_alt = 0
   Insn 96: point = 11, n_alt = 0
   Insn 95: point = 12, n_alt = 0
   Insn 94: point = 13, n_alt = 0
   Insn 93: point = 14, n_alt = 0
   Insn 92: point = 16, n_alt = 0
   Insn 91: point = 18, n_alt = 4
   Insn 88: point = 19, n_alt = 8
   Insn 90: point = 20, n_alt = 0
   Insn 122: point = 22, n_alt = -2
	Hard reg 0 is preferable by r159 with profit 1000
   Insn 89: point = 24, n_alt = 0
   Insn 87: point = 25, n_alt = 0
   Insn 86: point = 26, n_alt = 0
   Insn 85: point = 27, n_alt = -2
   Insn 84: point = 29, n_alt = 0
   Insn 83: point = 30, n_alt = 0
   Insn 82: point = 32, n_alt = 0
   Insn 81: point = 33, n_alt = 0
   Insn 80: point = 35, n_alt = 0
   Insn 79: point = 36, n_alt = 0
   Insn 78: point = 37, n_alt = 0
   Insn 77: point = 38, n_alt = 0
   Insn 76: point = 39, n_alt = 0
   Insn 75: point = 40, n_alt = 0
   Insn 74: point = 41, n_alt = 0
   Insn 73: point = 42, n_alt = 0
   Insn 72: point = 43, n_alt = 0
   Insn 71: point = 44, n_alt = 0
   Insn 70: point = 45, n_alt = 0
   Insn 69: point = 46, n_alt = 0
   Insn 68: point = 47, n_alt = 0
   Insn 67: point = 48, n_alt = 0
   Insn 66: point = 49, n_alt = -1
  BB 4
   Insn 64: point = 50, n_alt = -1
   Insn 63: point = 50, n_alt = 0
  BB 2
   Insn 106: point = 51, n_alt = -1
   Insn 37: point = 51, n_alt = 1
   Insn 36: point = 51, n_alt = 1
   Insn 35: point = 52, n_alt = 0
   Insn 34: point = 54, n_alt = 0
   Insn 33: point = 55, n_alt = -1
   Insn 127: point = 56, n_alt = -1
	   Creating copy r164<-r170@1000
   Insn 121: point = 58, n_alt = 0
   Insn 120: point = 60, n_alt = -2
	   Creating copy r157<-r160@1000
   Insn 119: point = 62, n_alt = -2
	   Creating copy r156<-r161@1000
   Insn 128: point = 64, n_alt = -1
	   Creating copy r165->r170@1000
   Insn 32: point = 66, n_alt = 0
   Insn 31: point = 68, n_alt = 0
   Insn 118: point = 69, n_alt = -2
	   Creating copy r155->r160@1000
   Insn 30: point = 71, n_alt = 0
   Insn 29: point = 73, n_alt = 0
   Insn 117: point = 74, n_alt = -2
	   Creating copy r154->r161@1000
   Insn 28: point = 76, n_alt = 0
   Insn 27: point = 78, n_alt = 0
   Insn 26: point = 79, n_alt = 0
   Insn 25: point = 81, n_alt = 0
   Insn 24: point = 82, n_alt = 0
   Insn 23: point = 84, n_alt = 0
   Insn 22: point = 85, n_alt = -1
   Insn 21: point = 87, n_alt = 0
   Insn 129: point = 88, n_alt = 1
   Insn 20: point = 90, n_alt = 0
   Insn 19: point = 91, n_alt = -1
   Insn 130: point = 92, n_alt = -1
	   Creating copy r167<-r172@1000
   Insn 116: point = 94, n_alt = 0
   Insn 115: point = 96, n_alt = -2
	   Creating copy r152<-r162@1000
   Insn 114: point = 98, n_alt = -2
	   Creating copy r151<-r163@1000
   Insn 131: point = 100, n_alt = -1
	   Creating copy r168->r172@1000
   Insn 18: point = 102, n_alt = 0
   Insn 17: point = 104, n_alt = 0
   Insn 113: point = 105, n_alt = -2
	   Creating copy r150->r162@1000
   Insn 16: point = 107, n_alt = 0
   Insn 15: point = 109, n_alt = 0
   Insn 112: point = 110, n_alt = -2
	   Creating copy r149->r163@1000
   Insn 14: point = 112, n_alt = 0
   Insn 13: point = 114, n_alt = 0
   Insn 12: point = 115, n_alt = 0
   Insn 11: point = 117, n_alt = 0
   Insn 10: point = 118, n_alt = 0
   Insn 9: point = 120, n_alt = 0
   Insn 8: point = 121, n_alt = -1
   Insn 7: point = 123, n_alt = 0
   Insn 132: point = 124, n_alt = 1
   Insn 6: point = 126, n_alt = 0
   Insn 110: point = 127, n_alt = 0
  BB 3
   Insn 57: point = 128, n_alt = 0
   Insn 56: point = 128, n_alt = 0
   Insn 55: point = 128, n_alt = 1
   Insn 54: point = 129, n_alt = 0
   Insn 53: point = 130, n_alt = 0
   Insn 52: point = 132, n_alt = 0
   Insn 51: point = 133, n_alt = 1
   Insn 50: point = 134, n_alt = 0
   Insn 49: point = 135, n_alt = 0
   Insn 48: point = 135, n_alt = 1
   Insn 47: point = 136, n_alt = 0
   Insn 46: point = 137, n_alt = 0
   Insn 45: point = 139, n_alt = 0
   Insn 44: point = 140, n_alt = 1
   Insn 43: point = 141, n_alt = 0
   Insn 42: point = 142, n_alt = 1
   Insn 41: point = 143, n_alt = 0
 r82: [5..144]
 r83: [95..124]
 r84: [91..121]
 r85: [91..118]
 r86: [91..115]
 r90: [59..88]
 r91: [55..85]
 r92: [55..82]
 r93: [55..79]
 r97: [135..137]
 r98: [128..130]
 r99: [25..33]
 r100: [25..30]
 r101: [15..16]
 r102: [12..14]
 r103: [0..9]
 r104: [0..6]
 r105: [17..18]
 r106: [122..123]
 r107: [119..120]
 r108: [116..117]
 r109: [113..114]
 r110: [108..109]
 r111: [103..104]
 r112: [86..87]
 r113: [83..84]
 r114: [80..81]
 r115: [77..78]
 r116: [72..73]
 r117: [67..68]
 r118: [51..52]
 r119: [53..54]
 r120: [142..143]
 r121: [140..141]
 r122: [138..139]
 r123: [135..136]
 r124: [133..134]
 r125: [131..132]
 r126: [128..129]
 r127: [47..48]
 r128: [45..46]
 r129: [42..44]
 r130: [42..43]
 r131: [39..41]
 r132: [39..40]
 r133: [36..38]
 r134: [36..37]
 r135: [34..35]
 r136: [31..32]
 r137: [25..27]
 r138: [28..29]
 r139: [25..26]
 r140: [19..20]
 r141: [23..24]
 r142: [12..13]
 r143: [10..11]
 r144: [7..8]
 r145: [0..2]
 r146: [3..4]
 r147: [0..1]
 r149: [111..112]
 r150: [106..107]
 r151: [91..98]
 r152: [91..96]
 r153: [91..94]
 r154: [75..76]
 r155: [70..71]
 r156: [55..62]
 r157: [55..60]
 r158: [55..58]
 r159: [21..22]
 r160: [61..69]
 r161: [63..74]
 r162: [97..105]
 r163: [99..110]
 r164: [55..56]
 r165: [65..66]
 r166: [89..90]
 r167: [91..92]
 r168: [101..102]
 r169: [125..126]
 r170: [57..64]
 r172: [93..100]
Compressing live ranges: from 145 to 118 - 81%
Ranges after the compression:
 r82: [4..117]
 r83: [78..101]
 r84: [74..99]
 r85: [74..97]
 r86: [74..95]
 r90: [48..71]
 r91: [44..69]
 r92: [44..67]
 r93: [44..65]
 r97: [110..111]
 r98: [104..105]
 r99: [22..27]
 r100: [22..25]
 r101: [12..13]
 r102: [10..11]
 r103: [0..7]
 r104: [0..5]
 r105: [14..15]
 r106: [100..101]
 r107: [98..99]
 r108: [96..97]
 r109: [94..95]
 r110: [90..91]
 r111: [86..87]
 r112: [70..71]
 r113: [68..69]
 r114: [66..67]
 r115: [64..65]
 r116: [60..61]
 r117: [56..57]
 r118: [40..41]
 r119: [42..43]
 r120: [116..117]
 r121: [114..115]
 r122: [112..113]
 r123: [110..111]
 r124: [108..109]
 r125: [106..107]
 r126: [104..105]
 r127: [38..39]
 r128: [36..37]
 r129: [34..35]
 r130: [34..35]
 r131: [32..33]
 r132: [32..33]
 r133: [30..31]
 r134: [30..31]
 r135: [28..29]
 r136: [26..27]
 r137: [22..23]
 r138: [24..25]
 r139: [22..23]
 r140: [16..17]
 r141: [20..21]
 r142: [10..11]
 r143: [8..9]
 r144: [6..7]
 r145: [0..1]
 r146: [2..3]
 r147: [0..1]
 r149: [92..93]
 r150: [88..89]
 r151: [74..81]
 r152: [74..79]
 r153: [74..77]
 r154: [62..63]
 r155: [58..59]
 r156: [44..51]
 r157: [44..49]
 r158: [44..47]
 r159: [18..19]
 r160: [50..57]
 r161: [52..61]
 r162: [80..87]
 r163: [82..91]
 r164: [44..45]
 r165: [54..55]
 r166: [72..73]
 r167: [74..75]
 r168: [84..85]
 r169: [102..103]
 r170: [46..53]
 r172: [76..83]

********** Pseudos coalescing #2: **********


********** Local #3: **********

	   Spilling non-eliminable hard regs: 7
      Creating newreg=174 from oldreg=91, assigning class GENERAL_REGS to address r174
	   Change to class INDEX_REGS for r174
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) a  (1) m  (2) m  (3) m  (4) m  (5) m  (6) m
   33: {asm_operands;clobber flags:CC;}
      REG_DEAD r164:SI
      REG_DEAD r156:SI
      REG_DEAD r157:SI
      REG_DEAD r158:SI
      REG_DEAD r93:SI
      REG_DEAD r92:SI
      REG_DEAD r91:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  137: r174:SI=r91:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 22:  (0) =r  (1) Ts {*leasi}
      Creating newreg=175 from oldreg=91, assigning class GENERAL_REGS to r175
   22: r175:SI=r112:SI+0x28
      REG_DEAD r112:SI
      REG_EQUAL const(`gdt'+0x28)
    Inserting insn reload after:
  138: r91:SI=r175:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 138:  (0) m  (1) re {*movsi_internal}
      Creating newreg=176 from oldreg=84, assigning class GENERAL_REGS to address r176
	   Change to class INDEX_REGS for r176
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) a  (1) m  (2) m  (3) m  (4) m  (5) m  (6) m
   19: {asm_operands;clobber flags:CC;}
      REG_DEAD r167:SI
      REG_DEAD r151:SI
      REG_DEAD r152:SI
      REG_DEAD r153:SI
      REG_DEAD r86:SI
      REG_DEAD r85:SI
      REG_DEAD r84:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  139: r176:SI=r84:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 139:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 8:  (0) =r  (1) Ts {*leasi}
      Creating newreg=177 from oldreg=84, assigning class GENERAL_REGS to r177
    8: r177:SI=r106:SI+0x20
      REG_DEAD r106:SI
      REG_EQUAL const(`gdt'+0x20)
    Inserting insn reload after:
  140: r84:SI=r177:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 140:  (0) m  (1) re {*movsi_internal}
	   Spilling non-eliminable hard regs: 7

********** Pseudo live ranges #4: **********

  BB 6
   Insn 109: point = 0, n_alt = -1
  BB 5
   Insn 103: point = 0, n_alt = 0
   Insn 102: point = 1, n_alt = 0
   Insn 101: point = 2, n_alt = -2
   Insn 100: point = 4, n_alt = 0
   Insn 99: point = 6, n_alt = 0
   Insn 98: point = 8, n_alt = 0
   Insn 97: point = 9, n_alt = 0
   Insn 96: point = 11, n_alt = 0
   Insn 95: point = 12, n_alt = 0
   Insn 94: point = 13, n_alt = 0
   Insn 93: point = 14, n_alt = 0
   Insn 92: point = 16, n_alt = 0
   Insn 91: point = 18, n_alt = 4
   Insn 88: point = 19, n_alt = 8
   Insn 90: point = 20, n_alt = 0
   Insn 122: point = 22, n_alt = -2
	Hard reg 0 is preferable by r159 with profit 1000
   Insn 89: point = 24, n_alt = 0
   Insn 87: point = 25, n_alt = 0
   Insn 86: point = 26, n_alt = 0
   Insn 85: point = 27, n_alt = -2
   Insn 84: point = 29, n_alt = 0
   Insn 83: point = 30, n_alt = 0
   Insn 82: point = 32, n_alt = 0
   Insn 81: point = 33, n_alt = 0
   Insn 80: point = 35, n_alt = 0
   Insn 79: point = 36, n_alt = 0
   Insn 78: point = 37, n_alt = 0
   Insn 77: point = 38, n_alt = 0
   Insn 76: point = 39, n_alt = 0
   Insn 75: point = 40, n_alt = 0
   Insn 74: point = 41, n_alt = 0
   Insn 73: point = 42, n_alt = 0
   Insn 72: point = 43, n_alt = 0
   Insn 71: point = 44, n_alt = 0
   Insn 70: point = 45, n_alt = 0
   Insn 69: point = 46, n_alt = 0
   Insn 68: point = 47, n_alt = 0
   Insn 67: point = 48, n_alt = 0
   Insn 66: point = 49, n_alt = -1
  BB 4
   Insn 64: point = 50, n_alt = -1
   Insn 63: point = 50, n_alt = 0
  BB 2
   Insn 106: point = 51, n_alt = -1
   Insn 37: point = 51, n_alt = 1
   Insn 36: point = 51, n_alt = 1
   Insn 35: point = 52, n_alt = 0
   Insn 34: point = 54, n_alt = 0
   Insn 33: point = 55, n_alt = 0
   Insn 137: point = 56, n_alt = 0
   Insn 127: point = 58, n_alt = -2
	   Creating copy r164<-r170@1000
   Insn 121: point = 60, n_alt = 0
   Insn 120: point = 62, n_alt = -2
	   Creating copy r157<-r160@1000
   Insn 119: point = 64, n_alt = -2
	   Creating copy r156<-r161@1000
   Insn 128: point = 66, n_alt = -2
	   Creating copy r165->r170@1000
   Insn 32: point = 68, n_alt = 0
   Insn 31: point = 70, n_alt = 0
   Insn 118: point = 71, n_alt = -2
	   Creating copy r155->r160@1000
   Insn 30: point = 73, n_alt = 0
   Insn 29: point = 75, n_alt = 0
   Insn 117: point = 76, n_alt = -2
	   Creating copy r154->r161@1000
   Insn 28: point = 78, n_alt = 0
   Insn 27: point = 80, n_alt = 0
   Insn 26: point = 81, n_alt = 0
   Insn 25: point = 83, n_alt = 0
   Insn 24: point = 84, n_alt = 0
   Insn 23: point = 86, n_alt = 0
   Insn 138: point = 87, n_alt = 1
   Insn 22: point = 89, n_alt = 0
   Insn 21: point = 91, n_alt = 0
   Insn 129: point = 92, n_alt = 1
   Insn 20: point = 94, n_alt = 0
   Insn 19: point = 95, n_alt = 0
   Insn 139: point = 96, n_alt = 0
   Insn 130: point = 98, n_alt = -2
	   Creating copy r167<-r172@1000
   Insn 116: point = 100, n_alt = 0
   Insn 115: point = 102, n_alt = -2
	   Creating copy r152<-r162@1000
   Insn 114: point = 104, n_alt = -2
	   Creating copy r151<-r163@1000
   Insn 131: point = 106, n_alt = -2
	   Creating copy r168->r172@1000
   Insn 18: point = 108, n_alt = 0
   Insn 17: point = 110, n_alt = 0
   Insn 113: point = 111, n_alt = -2
	   Creating copy r150->r162@1000
   Insn 16: point = 113, n_alt = 0
   Insn 15: point = 115, n_alt = 0
   Insn 112: point = 116, n_alt = -2
	   Creating copy r149->r163@1000
   Insn 14: point = 118, n_alt = 0
   Insn 13: point = 120, n_alt = 0
   Insn 12: point = 121, n_alt = 0
   Insn 11: point = 123, n_alt = 0
   Insn 10: point = 124, n_alt = 0
   Insn 9: point = 126, n_alt = 0
   Insn 140: point = 127, n_alt = 1
   Insn 8: point = 129, n_alt = 0
   Insn 7: point = 131, n_alt = 0
   Insn 132: point = 132, n_alt = 1
   Insn 6: point = 134, n_alt = 0
   Insn 110: point = 135, n_alt = 0
  BB 3
   Insn 57: point = 136, n_alt = 0
   Insn 56: point = 136, n_alt = 0
   Insn 55: point = 136, n_alt = 1
   Insn 54: point = 137, n_alt = 0
   Insn 53: point = 138, n_alt = 0
   Insn 52: point = 140, n_alt = 0
   Insn 51: point = 141, n_alt = 1
   Insn 50: point = 142, n_alt = 0
   Insn 49: point = 143, n_alt = 0
   Insn 48: point = 143, n_alt = 1
   Insn 47: point = 144, n_alt = 0
   Insn 46: point = 145, n_alt = 0
   Insn 45: point = 147, n_alt = 0
   Insn 44: point = 148, n_alt = 1
   Insn 43: point = 149, n_alt = 0
   Insn 42: point = 150, n_alt = 1
   Insn 41: point = 151, n_alt = 0
 r82: [5..152]
 r83: [101..132]
 r84: [97..127]
 r85: [95..124]
 r86: [95..121]
 r90: [61..92]
 r91: [57..87]
 r92: [55..84]
 r93: [55..81]
 r97: [143..145]
 r98: [136..138]
 r99: [25..33]
 r100: [25..30]
 r101: [15..16]
 r102: [12..14]
 r103: [0..9]
 r104: [0..6]
 r105: [17..18]
 r106: [130..131]
 r107: [125..126]
 r108: [122..123]
 r109: [119..120]
 r110: [114..115]
 r111: [109..110]
 r112: [90..91]
 r113: [85..86]
 r114: [82..83]
 r115: [79..80]
 r116: [74..75]
 r117: [69..70]
 r118: [51..52]
 r119: [53..54]
 r120: [150..151]
 r121: [148..149]
 r122: [146..147]
 r123: [143..144]
 r124: [141..142]
 r125: [139..140]
 r126: [136..137]
 r127: [47..48]
 r128: [45..46]
 r129: [42..44]
 r130: [42..43]
 r131: [39..41]
 r132: [39..40]
 r133: [36..38]
 r134: [36..37]
 r135: [34..35]
 r136: [31..32]
 r137: [25..27]
 r138: [28..29]
 r139: [25..26]
 r140: [19..20]
 r141: [23..24]
 r142: [12..13]
 r143: [10..11]
 r144: [7..8]
 r145: [0..2]
 r146: [3..4]
 r147: [0..1]
 r149: [117..118]
 r150: [112..113]
 r151: [95..104]
 r152: [95..102]
 r153: [95..100]
 r154: [77..78]
 r155: [72..73]
 r156: [55..64]
 r157: [55..62]
 r158: [55..60]
 r159: [21..22]
 r160: [63..71]
 r161: [65..76]
 r162: [103..111]
 r163: [105..116]
 r164: [55..58]
 r165: [67..68]
 r166: [93..94]
 r167: [95..98]
 r168: [107..108]
 r169: [133..134]
 r170: [59..66]
 r172: [99..106]
 r174: [55..56]
 r175: [88..89]
 r176: [95..96]
 r177: [128..129]
Compressing live ranges: from 153 to 126 - 82%
Ranges after the compression:
 r82: [4..125]
 r83: [84..109]
 r84: [80..105]
 r85: [78..103]
 r86: [78..101]
 r90: [50..75]
 r91: [46..71]
 r92: [44..69]
 r93: [44..67]
 r97: [118..119]
 r98: [112..113]
 r99: [22..27]
 r100: [22..25]
 r101: [12..13]
 r102: [10..11]
 r103: [0..7]
 r104: [0..5]
 r105: [14..15]
 r106: [108..109]
 r107: [104..105]
 r108: [102..103]
 r109: [100..101]
 r110: [96..97]
 r111: [92..93]
 r112: [74..75]
 r113: [70..71]
 r114: [68..69]
 r115: [66..67]
 r116: [62..63]
 r117: [58..59]
 r118: [40..41]
 r119: [42..43]
 r120: [124..125]
 r121: [122..123]
 r122: [120..121]
 r123: [118..119]
 r124: [116..117]
 r125: [114..115]
 r126: [112..113]
 r127: [38..39]
 r128: [36..37]
 r129: [34..35]
 r130: [34..35]
 r131: [32..33]
 r132: [32..33]
 r133: [30..31]
 r134: [30..31]
 r135: [28..29]
 r136: [26..27]
 r137: [22..23]
 r138: [24..25]
 r139: [22..23]
 r140: [16..17]
 r141: [20..21]
 r142: [10..11]
 r143: [8..9]
 r144: [6..7]
 r145: [0..1]
 r146: [2..3]
 r147: [0..1]
 r149: [98..99]
 r150: [94..95]
 r151: [78..87]
 r152: [78..85]
 r153: [78..83]
 r154: [64..65]
 r155: [60..61]
 r156: [44..53]
 r157: [44..51]
 r158: [44..49]
 r159: [18..19]
 r160: [52..59]
 r161: [54..63]
 r162: [86..93]
 r163: [88..97]
 r164: [44..47]
 r165: [56..57]
 r166: [76..77]
 r167: [78..81]
 r168: [90..91]
 r169: [110..111]
 r170: [48..55]
 r172: [82..89]
 r174: [44..45]
 r175: [72..73]
 r176: [78..79]
 r177: [106..107]

********** Assignment #3: **********

	 Assigning to 174 (cl=INDEX_REGS, orig=91, freq=2000, tfirst=174, tfreq=2000)...
	 Trying 5: spill 92(freq=2000)	 Now best 5(cost=0, bad_spills=0, insn_pseudos=1)

	 Trying 6: spill 93(freq=2000)
      Spill r92(hr=5, freq=2000) for r174
	   Assign 5 to reload r174 (freq=2000)
	 Assigning to 175 (cl=GENERAL_REGS, orig=91, freq=2000, tfirst=175, tfreq=2000)...
	   Assign 0 to reload r175 (freq=2000)
	 Assigning to 176 (cl=INDEX_REGS, orig=84, freq=2000, tfirst=176, tfreq=2000)...
	 Trying 5: spill 85(freq=2000)	 Now best 5(cost=0, bad_spills=0, insn_pseudos=1)

	 Trying 6: spill 86(freq=2000)
      Spill r85(hr=5, freq=2000) for r176
	   Assign 5 to reload r176 (freq=2000)
	 Assigning to 177 (cl=GENERAL_REGS, orig=84, freq=2000, tfirst=177, tfreq=2000)...
	   Assign 0 to reload r177 (freq=2000)
  Reassigning non-reload pseudos
	   Assign 5 to r83 (freq=2000)
	   Assign 5 to r90 (freq=2000)

********** Pseudos coalescing #3: **********


********** Local #4: **********

	   Spilling non-eliminable hard regs: 7
      Creating newreg=178 from oldreg=92, assigning class GENERAL_REGS to address r178
	   Change to class INDEX_REGS for r178
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) a  (1) m  (2) m  (3) m  (4) m  (5) m  (6) m
   33: {asm_operands;clobber flags:CC;}
      REG_DEAD r174:SI
      REG_DEAD r164:SI
      REG_DEAD r156:SI
      REG_DEAD r157:SI
      REG_DEAD r158:SI
      REG_DEAD r93:SI
      REG_DEAD r92:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  141: r178:SI=r92:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 141:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 24:  (0) =r  (1) Ts {*leasi}
      Creating newreg=179 from oldreg=92, assigning class GENERAL_REGS to r179
   24: r179:SI=r113:SI+0x2a
      REG_DEAD r113:SI
      REG_EQUAL const(`gdt'+0x2a)
    Inserting insn reload after:
  142: r92:SI=r179:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 142:  (0) m  (1) re {*movsi_internal}
      Creating newreg=180 from oldreg=85, assigning class GENERAL_REGS to address r180
	   Change to class INDEX_REGS for r180
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) a  (1) m  (2) m  (3) m  (4) m  (5) m  (6) m
   19: {asm_operands;clobber flags:CC;}
      REG_DEAD r176:SI
      REG_DEAD r167:SI
      REG_DEAD r151:SI
      REG_DEAD r152:SI
      REG_DEAD r153:SI
      REG_DEAD r86:SI
      REG_DEAD r85:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  143: r180:SI=r85:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 10:  (0) =r  (1) Ts {*leasi}
      Creating newreg=181 from oldreg=85, assigning class GENERAL_REGS to r181
   10: r181:SI=r107:SI+0x22
      REG_DEAD r107:SI
      REG_EQUAL const(`gdt'+0x22)
    Inserting insn reload after:
  144: r85:SI=r181:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 144:  (0) m  (1) re {*movsi_internal}
	   Spilling non-eliminable hard regs: 7

********** Pseudo live ranges #5: **********

  BB 6
   Insn 109: point = 0, n_alt = -1
  BB 5
   Insn 103: point = 0, n_alt = 0
   Insn 102: point = 1, n_alt = 0
   Insn 101: point = 2, n_alt = -2
   Insn 100: point = 4, n_alt = 0
   Insn 99: point = 6, n_alt = 0
   Insn 98: point = 8, n_alt = 0
   Insn 97: point = 9, n_alt = 0
   Insn 96: point = 11, n_alt = 0
   Insn 95: point = 12, n_alt = 0
   Insn 94: point = 13, n_alt = 0
   Insn 93: point = 14, n_alt = 0
   Insn 92: point = 16, n_alt = 0
   Insn 91: point = 18, n_alt = 4
   Insn 88: point = 19, n_alt = 8
   Insn 90: point = 20, n_alt = 0
   Insn 122: point = 22, n_alt = -2
	Hard reg 0 is preferable by r159 with profit 1000
   Insn 89: point = 24, n_alt = 0
   Insn 87: point = 25, n_alt = 0
   Insn 86: point = 26, n_alt = 0
   Insn 85: point = 27, n_alt = -2
   Insn 84: point = 29, n_alt = 0
   Insn 83: point = 30, n_alt = 0
   Insn 82: point = 32, n_alt = 0
   Insn 81: point = 33, n_alt = 0
   Insn 80: point = 35, n_alt = 0
   Insn 79: point = 36, n_alt = 0
   Insn 78: point = 37, n_alt = 0
   Insn 77: point = 38, n_alt = 0
   Insn 76: point = 39, n_alt = 0
   Insn 75: point = 40, n_alt = 0
   Insn 74: point = 41, n_alt = 0
   Insn 73: point = 42, n_alt = 0
   Insn 72: point = 43, n_alt = 0
   Insn 71: point = 44, n_alt = 0
   Insn 70: point = 45, n_alt = 0
   Insn 69: point = 46, n_alt = 0
   Insn 68: point = 47, n_alt = 0
   Insn 67: point = 48, n_alt = 0
   Insn 66: point = 49, n_alt = -1
  BB 4
   Insn 64: point = 50, n_alt = -1
   Insn 63: point = 50, n_alt = 0
  BB 2
   Insn 106: point = 51, n_alt = -1
   Insn 37: point = 51, n_alt = 1
   Insn 36: point = 51, n_alt = 1
   Insn 35: point = 52, n_alt = 0
   Insn 34: point = 54, n_alt = 0
   Insn 33: point = 55, n_alt = 0
   Insn 141: point = 56, n_alt = 0
   Insn 137: point = 58, n_alt = 0
   Insn 127: point = 60, n_alt = -2
	   Creating copy r164<-r170@1000
   Insn 121: point = 62, n_alt = -2
	Hard reg 5 is preferable by r158 with profit 1000
   Insn 120: point = 64, n_alt = -2
	   Creating copy r157<-r160@1000
   Insn 119: point = 66, n_alt = -2
	   Creating copy r156<-r161@1000
   Insn 128: point = 68, n_alt = -2
	   Creating copy r165->r170@1000
   Insn 32: point = 70, n_alt = 0
   Insn 31: point = 72, n_alt = 0
   Insn 118: point = 73, n_alt = -2
	   Creating copy r155->r160@1000
   Insn 30: point = 75, n_alt = 0
   Insn 29: point = 77, n_alt = 0
   Insn 117: point = 78, n_alt = -2
	   Creating copy r154->r161@1000
   Insn 28: point = 80, n_alt = 0
   Insn 27: point = 82, n_alt = 0
   Insn 26: point = 83, n_alt = 0
   Insn 25: point = 85, n_alt = 0
   Insn 142: point = 86, n_alt = 1
   Insn 24: point = 88, n_alt = 0
   Insn 23: point = 90, n_alt = 0
   Insn 138: point = 91, n_alt = 1
   Insn 22: point = 93, n_alt = 0
   Insn 21: point = 95, n_alt = 0
   Insn 129: point = 96, n_alt = -2
	Hard reg 5 is preferable by r166 with profit 1000
   Insn 20: point = 98, n_alt = 0
   Insn 19: point = 99, n_alt = 0
   Insn 143: point = 100, n_alt = 0
   Insn 139: point = 102, n_alt = 0
   Insn 130: point = 104, n_alt = -2
	   Creating copy r167<-r172@1000
   Insn 116: point = 106, n_alt = -2
	Hard reg 5 is preferable by r153 with profit 1000
   Insn 115: point = 108, n_alt = -2
	   Creating copy r152<-r162@1000
   Insn 114: point = 110, n_alt = -2
	   Creating copy r151<-r163@1000
   Insn 131: point = 112, n_alt = -2
	   Creating copy r168->r172@1000
   Insn 18: point = 114, n_alt = 0
   Insn 17: point = 116, n_alt = 0
   Insn 113: point = 117, n_alt = -2
	   Creating copy r150->r162@1000
   Insn 16: point = 119, n_alt = 0
   Insn 15: point = 121, n_alt = 0
   Insn 112: point = 122, n_alt = -2
	   Creating copy r149->r163@1000
   Insn 14: point = 124, n_alt = 0
   Insn 13: point = 126, n_alt = 0
   Insn 12: point = 127, n_alt = 0
   Insn 11: point = 129, n_alt = 0
   Insn 144: point = 130, n_alt = 1
   Insn 10: point = 132, n_alt = 0
   Insn 9: point = 134, n_alt = 0
   Insn 140: point = 135, n_alt = 1
   Insn 8: point = 137, n_alt = 0
   Insn 7: point = 139, n_alt = 0
   Insn 132: point = 140, n_alt = -2
	Hard reg 5 is preferable by r169 with profit 1000
   Insn 6: point = 142, n_alt = 0
   Insn 110: point = 143, n_alt = 0
  BB 3
   Insn 57: point = 144, n_alt = 0
   Insn 56: point = 144, n_alt = 0
   Insn 55: point = 144, n_alt = 1
   Insn 54: point = 145, n_alt = 0
   Insn 53: point = 146, n_alt = 0
   Insn 52: point = 148, n_alt = 0
   Insn 51: point = 149, n_alt = 1
   Insn 50: point = 150, n_alt = 0
   Insn 49: point = 151, n_alt = 0
   Insn 48: point = 151, n_alt = 1
   Insn 47: point = 152, n_alt = 0
   Insn 46: point = 153, n_alt = 0
   Insn 45: point = 155, n_alt = 0
   Insn 44: point = 156, n_alt = 1
   Insn 43: point = 157, n_alt = 0
   Insn 42: point = 158, n_alt = 1
   Insn 41: point = 159, n_alt = 0
 r82: [5..160]
 r83: [107..140]
 r84: [103..135]
 r85: [101..130]
 r86: [99..127]
 r90: [63..96]
 r91: [59..91]
 r92: [57..86]
 r93: [55..83]
 r97: [151..153]
 r98: [144..146]
 r99: [25..33]
 r100: [25..30]
 r101: [15..16]
 r102: [12..14]
 r103: [0..9]
 r104: [0..6]
 r105: [17..18]
 r106: [138..139]
 r107: [133..134]
 r108: [128..129]
 r109: [125..126]
 r110: [120..121]
 r111: [115..116]
 r112: [94..95]
 r113: [89..90]
 r114: [84..85]
 r115: [81..82]
 r116: [76..77]
 r117: [71..72]
 r118: [51..52]
 r119: [53..54]
 r120: [158..159]
 r121: [156..157]
 r122: [154..155]
 r123: [151..152]
 r124: [149..150]
 r125: [147..148]
 r126: [144..145]
 r127: [47..48]
 r128: [45..46]
 r129: [42..44]
 r130: [42..43]
 r131: [39..41]
 r132: [39..40]
 r133: [36..38]
 r134: [36..37]
 r135: [34..35]
 r136: [31..32]
 r137: [25..27]
 r138: [28..29]
 r139: [25..26]
 r140: [19..20]
 r141: [23..24]
 r142: [12..13]
 r143: [10..11]
 r144: [7..8]
 r145: [0..2]
 r146: [3..4]
 r147: [0..1]
 r149: [123..124]
 r150: [118..119]
 r151: [99..110]
 r152: [99..108]
 r153: [99..106]
 r154: [79..80]
 r155: [74..75]
 r156: [55..66]
 r157: [55..64]
 r158: [55..62]
 r159: [21..22]
 r160: [65..73]
 r161: [67..78]
 r162: [109..117]
 r163: [111..122]
 r164: [55..60]
 r165: [69..70]
 r166: [97..98]
 r167: [99..104]
 r168: [113..114]
 r169: [141..142]
 r170: [61..68]
 r172: [105..112]
 r174: [55..58]
 r175: [92..93]
 r176: [99..102]
 r177: [136..137]
 r178: [55..56]
 r179: [87..88]
 r180: [99..100]
 r181: [131..132]
Compressing live ranges: from 161 to 134 - 83%
Ranges after the compression:
 r82: [4..133]
 r83: [90..117]
 r84: [86..113]
 r85: [84..109]
 r86: [82..107]
 r90: [52..79]
 r91: [48..75]
 r92: [46..71]
 r93: [44..69]
 r97: [126..127]
 r98: [120..121]
 r99: [22..27]
 r100: [22..25]
 r101: [12..13]
 r102: [10..11]
 r103: [0..7]
 r104: [0..5]
 r105: [14..15]
 r106: [116..117]
 r107: [112..113]
 r108: [108..109]
 r109: [106..107]
 r110: [102..103]
 r111: [98..99]
 r112: [78..79]
 r113: [74..75]
 r114: [70..71]
 r115: [68..69]
 r116: [64..65]
 r117: [60..61]
 r118: [40..41]
 r119: [42..43]
 r120: [132..133]
 r121: [130..131]
 r122: [128..129]
 r123: [126..127]
 r124: [124..125]
 r125: [122..123]
 r126: [120..121]
 r127: [38..39]
 r128: [36..37]
 r129: [34..35]
 r130: [34..35]
 r131: [32..33]
 r132: [32..33]
 r133: [30..31]
 r134: [30..31]
 r135: [28..29]
 r136: [26..27]
 r137: [22..23]
 r138: [24..25]
 r139: [22..23]
 r140: [16..17]
 r141: [20..21]
 r142: [10..11]
 r143: [8..9]
 r144: [6..7]
 r145: [0..1]
 r146: [2..3]
 r147: [0..1]
 r149: [104..105]
 r150: [100..101]
 r151: [82..93]
 r152: [82..91]
 r153: [82..89]
 r154: [66..67]
 r155: [62..63]
 r156: [44..55]
 r157: [44..53]
 r158: [44..51]
 r159: [18..19]
 r160: [54..61]
 r161: [56..65]
 r162: [92..99]
 r163: [94..103]
 r164: [44..49]
 r165: [58..59]
 r166: [80..81]
 r167: [82..87]
 r168: [96..97]
 r169: [118..119]
 r170: [50..57]
 r172: [88..95]
 r174: [44..47]
 r175: [76..77]
 r176: [82..85]
 r177: [114..115]
 r178: [44..45]
 r179: [72..73]
 r180: [82..83]
 r181: [110..111]

********** Assignment #4: **********

	 Assigning to 178 (cl=INDEX_REGS, orig=92, freq=2000, tfirst=178, tfreq=2000)...
	 Trying 6: spill 93(freq=2000)	 Now best 6(cost=0, bad_spills=0, insn_pseudos=1)

      Spill r93(hr=6, freq=2000) for r178
	   Assign 6 to reload r178 (freq=2000)
	 Assigning to 179 (cl=GENERAL_REGS, orig=92, freq=2000, tfirst=179, tfreq=2000)...
	   Assign 0 to reload r179 (freq=2000)
	 Assigning to 180 (cl=INDEX_REGS, orig=85, freq=2000, tfirst=180, tfreq=2000)...
	 Trying 6: spill 86(freq=2000)	 Now best 6(cost=0, bad_spills=0, insn_pseudos=1)

      Spill r86(hr=6, freq=2000) for r180
	   Assign 6 to reload r180 (freq=2000)
	 Assigning to 181 (cl=GENERAL_REGS, orig=85, freq=2000, tfirst=181, tfreq=2000)...
	   Assign 0 to reload r181 (freq=2000)
  Reassigning non-reload pseudos
	   Assign 6 to r84 (freq=2000)
	   Assign 6 to r91 (freq=2000)

********** Pseudos coalescing #4: **********


********** Local #5: **********

	   Spilling non-eliminable hard regs: 7
      Creating newreg=182 from oldreg=93, assigning class GENERAL_REGS to address r182
	   Change to class INDEX_REGS for r182
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) a  (1) m  (2) m  (3) m  (4) m  (5) m  (6) m
   33: {asm_operands;clobber flags:CC;}
      REG_DEAD r178:SI
      REG_DEAD r174:SI
      REG_DEAD r164:SI
      REG_DEAD r156:SI
      REG_DEAD r157:SI
      REG_DEAD r158:SI
      REG_DEAD r93:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  145: r182:SI=r93:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 145:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 26:  (0) =r  (1) Ts {*leasi}
      Creating newreg=183 from oldreg=93, assigning class GENERAL_REGS to r183
   26: r183:SI=r114:SI+0x2c
      REG_DEAD r114:SI
      REG_EQUAL const(`gdt'+0x2c)
    Inserting insn reload after:
  146: r93:SI=r183:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 146:  (0) m  (1) re {*movsi_internal}
      Creating newreg=184 from oldreg=86, assigning class GENERAL_REGS to address r184
	   Change to class INDEX_REGS for r184
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) a  (1) m  (2) m  (3) m  (4) m  (5) m  (6) m
   19: {asm_operands;clobber flags:CC;}
      REG_DEAD r180:SI
      REG_DEAD r176:SI
      REG_DEAD r167:SI
      REG_DEAD r151:SI
      REG_DEAD r152:SI
      REG_DEAD r153:SI
      REG_DEAD r86:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  147: r184:SI=r86:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 147:  (0) =r  (1) g {*movsi_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 12:  (0) =r  (1) Ts {*leasi}
      Creating newreg=185 from oldreg=86, assigning class GENERAL_REGS to r185
   12: r185:SI=r108:SI+0x24
      REG_DEAD r108:SI
      REG_EQUAL const(`gdt'+0x24)
    Inserting insn reload after:
  148: r86:SI=r185:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 148:  (0) m  (1) re {*movsi_internal}
	   Spilling non-eliminable hard regs: 7

********** Pseudo live ranges #6: **********

  BB 6
   Insn 109: point = 0, n_alt = -1
  BB 5
   Insn 103: point = 0, n_alt = 0
   Insn 102: point = 1, n_alt = 0
   Insn 101: point = 2, n_alt = -2
   Insn 100: point = 4, n_alt = 0
   Insn 99: point = 6, n_alt = 0
   Insn 98: point = 8, n_alt = 0
   Insn 97: point = 9, n_alt = 0
   Insn 96: point = 11, n_alt = 0
   Insn 95: point = 12, n_alt = 0
   Insn 94: point = 13, n_alt = 0
   Insn 93: point = 14, n_alt = 0
   Insn 92: point = 16, n_alt = 0
   Insn 91: point = 18, n_alt = 4
   Insn 88: point = 19, n_alt = 8
   Insn 90: point = 20, n_alt = 0
   Insn 122: point = 22, n_alt = -2
	Hard reg 0 is preferable by r159 with profit 1000
   Insn 89: point = 24, n_alt = 0
   Insn 87: point = 25, n_alt = 0
   Insn 86: point = 26, n_alt = 0
   Insn 85: point = 27, n_alt = -2
   Insn 84: point = 29, n_alt = 0
   Insn 83: point = 30, n_alt = 0
   Insn 82: point = 32, n_alt = 0
   Insn 81: point = 33, n_alt = 0
   Insn 80: point = 35, n_alt = 0
   Insn 79: point = 36, n_alt = 0
   Insn 78: point = 37, n_alt = 0
   Insn 77: point = 38, n_alt = 0
   Insn 76: point = 39, n_alt = 0
   Insn 75: point = 40, n_alt = 0
   Insn 74: point = 41, n_alt = 0
   Insn 73: point = 42, n_alt = 0
   Insn 72: point = 43, n_alt = 0
   Insn 71: point = 44, n_alt = 0
   Insn 70: point = 45, n_alt = 0
   Insn 69: point = 46, n_alt = 0
   Insn 68: point = 47, n_alt = 0
   Insn 67: point = 48, n_alt = 0
   Insn 66: point = 49, n_alt = -1
  BB 4
   Insn 64: point = 50, n_alt = -1
   Insn 63: point = 50, n_alt = 0
  BB 2
   Insn 106: point = 51, n_alt = -1
   Insn 37: point = 51, n_alt = 1
   Insn 36: point = 51, n_alt = 1
   Insn 35: point = 52, n_alt = 0
   Insn 34: point = 54, n_alt = 0
   Insn 33: point = 55, n_alt = 0
   Insn 145: point = 56, n_alt = 0
   Insn 141: point = 58, n_alt = 0
   Insn 137: point = 60, n_alt = -2
	Hard reg 6 is preferable by r174 with profit 1000
   Insn 127: point = 62, n_alt = -2
	   Creating copy r164<-r170@1000
   Insn 121: point = 64, n_alt = -2
	Hard reg 5 is preferable by r158 with profit 1000
   Insn 120: point = 66, n_alt = -2
	   Creating copy r157<-r160@1000
   Insn 119: point = 68, n_alt = -2
	   Creating copy r156<-r161@1000
   Insn 128: point = 70, n_alt = -2
	   Creating copy r165->r170@1000
   Insn 32: point = 72, n_alt = 0
   Insn 31: point = 74, n_alt = 0
   Insn 118: point = 75, n_alt = -2
	   Creating copy r155->r160@1000
   Insn 30: point = 77, n_alt = 0
   Insn 29: point = 79, n_alt = 0
   Insn 117: point = 80, n_alt = -2
	   Creating copy r154->r161@1000
   Insn 28: point = 82, n_alt = 0
   Insn 27: point = 84, n_alt = 0
   Insn 146: point = 85, n_alt = 1
   Insn 26: point = 87, n_alt = 0
   Insn 25: point = 89, n_alt = 0
   Insn 142: point = 90, n_alt = 1
   Insn 24: point = 92, n_alt = 0
   Insn 23: point = 94, n_alt = 0
   Insn 138: point = 95, n_alt = -2
	Hard reg 6 is preferable by r175 with profit 1000
   Insn 22: point = 97, n_alt = 0
   Insn 21: point = 99, n_alt = 0
   Insn 129: point = 100, n_alt = -2
	Hard reg 5 is preferable by r166 with profit 1000
   Insn 20: point = 102, n_alt = 0
   Insn 19: point = 103, n_alt = 0
   Insn 147: point = 104, n_alt = 0
   Insn 143: point = 106, n_alt = 0
   Insn 139: point = 108, n_alt = -2
	Hard reg 6 is preferable by r176 with profit 1000
   Insn 130: point = 110, n_alt = -2
	   Creating copy r167<-r172@1000
   Insn 116: point = 112, n_alt = -2
	Hard reg 5 is preferable by r153 with profit 1000
   Insn 115: point = 114, n_alt = -2
	   Creating copy r152<-r162@1000
   Insn 114: point = 116, n_alt = -2
	   Creating copy r151<-r163@1000
   Insn 131: point = 118, n_alt = -2
	   Creating copy r168->r172@1000
   Insn 18: point = 120, n_alt = 0
   Insn 17: point = 122, n_alt = 0
   Insn 113: point = 123, n_alt = -2
	   Creating copy r150->r162@1000
   Insn 16: point = 125, n_alt = 0
   Insn 15: point = 127, n_alt = 0
   Insn 112: point = 128, n_alt = -2
	   Creating copy r149->r163@1000
   Insn 14: point = 130, n_alt = 0
   Insn 13: point = 132, n_alt = 0
   Insn 148: point = 133, n_alt = 1
   Insn 12: point = 135, n_alt = 0
   Insn 11: point = 137, n_alt = 0
   Insn 144: point = 138, n_alt = 1
   Insn 10: point = 140, n_alt = 0
   Insn 9: point = 142, n_alt = 0
   Insn 140: point = 143, n_alt = -2
	Hard reg 6 is preferable by r177 with profit 1000
   Insn 8: point = 145, n_alt = 0
   Insn 7: point = 147, n_alt = 0
   Insn 132: point = 148, n_alt = -2
	Hard reg 5 is preferable by r169 with profit 1000
   Insn 6: point = 150, n_alt = 0
   Insn 110: point = 151, n_alt = 0
  BB 3
   Insn 57: point = 152, n_alt = 0
   Insn 56: point = 152, n_alt = 0
   Insn 55: point = 152, n_alt = 1
   Insn 54: point = 153, n_alt = 0
   Insn 53: point = 154, n_alt = 0
   Insn 52: point = 156, n_alt = 0
   Insn 51: point = 157, n_alt = 1
   Insn 50: point = 158, n_alt = 0
   Insn 49: point = 159, n_alt = 0
   Insn 48: point = 159, n_alt = 1
   Insn 47: point = 160, n_alt = 0
   Insn 46: point = 161, n_alt = 0
   Insn 45: point = 163, n_alt = 0
   Insn 44: point = 164, n_alt = 1
   Insn 43: point = 165, n_alt = 0
   Insn 42: point = 166, n_alt = 1
   Insn 41: point = 167, n_alt = 0
 r82: [5..168]
 r83: [113..148]
 r84: [109..143]
 r85: [107..138]
 r86: [105..133]
 r90: [65..100]
 r91: [61..95]
 r92: [59..90]
 r93: [57..85]
 r97: [159..161]
 r98: [152..154]
 r99: [25..33]
 r100: [25..30]
 r101: [15..16]
 r102: [12..14]
 r103: [0..9]
 r104: [0..6]
 r105: [17..18]
 r106: [146..147]
 r107: [141..142]
 r108: [136..137]
 r109: [131..132]
 r110: [126..127]
 r111: [121..122]
 r112: [98..99]
 r113: [93..94]
 r114: [88..89]
 r115: [83..84]
 r116: [78..79]
 r117: [73..74]
 r118: [51..52]
 r119: [53..54]
 r120: [166..167]
 r121: [164..165]
 r122: [162..163]
 r123: [159..160]
 r124: [157..158]
 r125: [155..156]
 r126: [152..153]
 r127: [47..48]
 r128: [45..46]
 r129: [42..44]
 r130: [42..43]
 r131: [39..41]
 r132: [39..40]
 r133: [36..38]
 r134: [36..37]
 r135: [34..35]
 r136: [31..32]
 r137: [25..27]
 r138: [28..29]
 r139: [25..26]
 r140: [19..20]
 r141: [23..24]
 r142: [12..13]
 r143: [10..11]
 r144: [7..8]
 r145: [0..2]
 r146: [3..4]
 r147: [0..1]
 r149: [129..130]
 r150: [124..125]
 r151: [103..116]
 r152: [103..114]
 r153: [103..112]
 r154: [81..82]
 r155: [76..77]
 r156: [55..68]
 r157: [55..66]
 r158: [55..64]
 r159: [21..22]
 r160: [67..75]
 r161: [69..80]
 r162: [115..123]
 r163: [117..128]
 r164: [55..62]
 r165: [71..72]
 r166: [101..102]
 r167: [103..110]
 r168: [119..120]
 r169: [149..150]
 r170: [63..70]
 r172: [111..118]
 r174: [55..60]
 r175: [96..97]
 r176: [103..108]
 r177: [144..145]
 r178: [55..58]
 r179: [91..92]
 r180: [103..106]
 r181: [139..140]
 r182: [55..56]
 r183: [86..87]
 r184: [103..104]
 r185: [134..135]
Compressing live ranges: from 169 to 142 - 84%
Ranges after the compression:
 r82: [4..141]
 r83: [96..125]
 r84: [92..121]
 r85: [90..117]
 r86: [88..113]
 r90: [54..83]
 r91: [50..79]
 r92: [48..75]
 r93: [46..71]
 r97: [134..135]
 r98: [128..129]
 r99: [22..27]
 r100: [22..25]
 r101: [12..13]
 r102: [10..11]
 r103: [0..7]
 r104: [0..5]
 r105: [14..15]
 r106: [124..125]
 r107: [120..121]
 r108: [116..117]
 r109: [112..113]
 r110: [108..109]
 r111: [104..105]
 r112: [82..83]
 r113: [78..79]
 r114: [74..75]
 r115: [70..71]
 r116: [66..67]
 r117: [62..63]
 r118: [40..41]
 r119: [42..43]
 r120: [140..141]
 r121: [138..139]
 r122: [136..137]
 r123: [134..135]
 r124: [132..133]
 r125: [130..131]
 r126: [128..129]
 r127: [38..39]
 r128: [36..37]
 r129: [34..35]
 r130: [34..35]
 r131: [32..33]
 r132: [32..33]
 r133: [30..31]
 r134: [30..31]
 r135: [28..29]
 r136: [26..27]
 r137: [22..23]
 r138: [24..25]
 r139: [22..23]
 r140: [16..17]
 r141: [20..21]
 r142: [10..11]
 r143: [8..9]
 r144: [6..7]
 r145: [0..1]
 r146: [2..3]
 r147: [0..1]
 r149: [110..111]
 r150: [106..107]
 r151: [86..99]
 r152: [86..97]
 r153: [86..95]
 r154: [68..69]
 r155: [64..65]
 r156: [44..57]
 r157: [44..55]
 r158: [44..53]
 r159: [18..19]
 r160: [56..63]
 r161: [58..67]
 r162: [98..105]
 r163: [100..109]
 r164: [44..51]
 r165: [60..61]
 r166: [84..85]
 r167: [86..93]
 r168: [102..103]
 r169: [126..127]
 r170: [52..59]
 r172: [94..101]
 r174: [44..49]
 r175: [80..81]
 r176: [86..91]
 r177: [122..123]
 r178: [44..47]
 r179: [76..77]
 r180: [86..89]
 r181: [118..119]
 r182: [44..45]
 r183: [72..73]
 r184: [86..87]
 r185: [114..115]

********** Assignment #5: **********

	 Assigning to 182 (cl=INDEX_REGS, orig=93, freq=2000, tfirst=182, tfreq=2000)...
	 Assigning to 183 (cl=GENERAL_REGS, orig=93, freq=2000, tfirst=183, tfreq=2000)...
	   Assign 0 to reload r183 (freq=2000)
	 Assigning to 184 (cl=INDEX_REGS, orig=86, freq=2000, tfirst=184, tfreq=2000)...
	 Assigning to 185 (cl=GENERAL_REGS, orig=86, freq=2000, tfirst=185, tfreq=2000)...
	   Assign 0 to reload r185 (freq=2000)
  2nd iter for reload pseudo assignments:
	 Reload r182 assignment failure
	 Reload r184 assignment failure
	  Spill  r82(hr=2, freq=23000)
	  Spill reload  r156(hr=3, freq=2000)
	  Spill reload  r157(hr=1, freq=2000)
	  Spill reload  r158(hr=0, freq=2000)
	  Spill reload  r164(hr=4, freq=2000)
	  Spill reload  r174(hr=5, freq=2000)
	  Spill reload  r178(hr=6, freq=2000)
	  Spill reload  r151(hr=3, freq=2000)
	  Spill reload  r152(hr=1, freq=2000)
	  Spill reload  r153(hr=0, freq=2000)
	  Spill reload  r167(hr=4, freq=2000)
	  Spill reload  r176(hr=5, freq=2000)
	  Spill reload  r180(hr=6, freq=2000)
	 Assigning to 153 (cl=AREG, orig=83, freq=2000, tfirst=153, tfreq=2000)...
	   Assign 0 to reload r153 (freq=2000)
	 Assigning to 158 (cl=AREG, orig=90, freq=2000, tfirst=158, tfreq=2000)...
	   Assign 0 to reload r158 (freq=2000)
	 Assigning to 151 (cl=INDEX_REGS, orig=87, freq=2000, tfirst=151, tfreq=2000)...
	   Assign 2 to reload r151 (freq=2000)
	 Assigning to 152 (cl=INDEX_REGS, orig=88, freq=2000, tfirst=152, tfreq=2000)...
	   Assign 1 to reload r152 (freq=2000)
	 Assigning to 156 (cl=INDEX_REGS, orig=94, freq=2000, tfirst=156, tfreq=2000)...
	   Assign 2 to reload r156 (freq=2000)
	 Assigning to 157 (cl=INDEX_REGS, orig=95, freq=2000, tfirst=157, tfreq=2000)...
	   Assign 1 to reload r157 (freq=2000)
	 Assigning to 164 (cl=INDEX_REGS, orig=96, freq=2000, tfirst=164, tfreq=2000)...
	   Assign 3 to reload r164 (freq=2000)
	 Assigning to 167 (cl=INDEX_REGS, orig=89, freq=2000, tfirst=167, tfreq=2000)...
	   Assign 3 to reload r167 (freq=2000)
	 Assigning to 174 (cl=INDEX_REGS, orig=91, freq=2000, tfirst=174, tfreq=2000)...
	   Assign 4 to reload r174 (freq=2000)
	 Assigning to 176 (cl=INDEX_REGS, orig=84, freq=2000, tfirst=176, tfreq=2000)...
	   Assign 4 to reload r176 (freq=2000)
	 Assigning to 178 (cl=INDEX_REGS, orig=92, freq=2000, tfirst=178, tfreq=2000)...
	   Assign 5 to reload r178 (freq=2000)
	 Assigning to 180 (cl=INDEX_REGS, orig=85, freq=2000, tfirst=180, tfreq=2000)...
	   Assign 5 to reload r180 (freq=2000)
	 Assigning to 182 (cl=INDEX_REGS, orig=93, freq=2000, tfirst=182, tfreq=2000)...
	   Assign 6 to reload r182 (freq=2000)
	 Assigning to 184 (cl=INDEX_REGS, orig=86, freq=2000, tfirst=184, tfreq=2000)...
	   Assign 6 to reload r184 (freq=2000)
  Reassigning non-reload pseudos

********** Pseudos coalescing #5: **********


********** Local #6: **********

	   Spilling non-eliminable hard regs: 7
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 110:  (0) =r {*set_got}
      Creating newreg=186 from oldreg=82, assigning class GENERAL_REGS to r186
  110: {r186:SI=unspec[0] 14;clobber flags:CC;}
      REG_UNUSED flags:CC
      REG_CFA_FLUSH_QUEUE (nil)
    Inserting insn reload after:
  149: r82:SI=r186:SI

            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=1,overall=2,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 149:  (0) m  (1) re {*movsi_internal}
      Creating newreg=187 from oldreg=82, assigning class GENERAL_REGS to address r187
	   Change to class INDEX_REGS for r187
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =r  (1) g {*movsi_internal}
  100: r146:SI=[r187:SI+const(unspec[`system_call'] 0)]
      REG_DEAD r82:SI
    Inserting insn reload before:
  150: r187:SI=r82:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 150:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=188 from oldreg=82, assigning class GENERAL_REGS to address r188
	   Change to class INDEX_REGS for r188
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =r  (1) g {*movsi_internal}
   98: r144:SI=[r188:SI+const(unspec[`idt'] 0)]
    Inserting insn reload before:
  151: r188:SI=r82:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 151:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=189 from oldreg=82, assigning class GENERAL_REGS to address r189
	   Change to class INDEX_REGS for r189
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) =r  (1) g {*movsi_internal}
   96: r143:SI=[r189:SI+const(unspec[`idt'] 0)]
    Inserting insn reload before:
  152: r189:SI=r82:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 152:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=190 from oldreg=82, assigning class GENERAL_REGS to address r190
	   Change to class INDEX_REGS for r190
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) =r  (1) g {*movsi_internal}
   84: r138:SI=[r190:SI+const(unspec[`timer_interrupt'] 0)]
    Inserting insn reload before:
  153: r190:SI=r82:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 153:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=191 from oldreg=82, assigning class GENERAL_REGS to address r191
	   Change to class INDEX_REGS for r191
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) =r  (1) g {*movsi_internal}
   82: r136:SI=[r191:SI+const(unspec[`idt'] 0)]
    Inserting insn reload before:
  154: r191:SI=r82:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 154:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=192 from oldreg=82, assigning class GENERAL_REGS to address r192
	   Change to class INDEX_REGS for r192
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) =r  (1) g {*movsi_internal}
   80: r135:SI=[r192:SI+const(unspec[`idt'] 0)]
    Inserting insn reload before:
  155: r192:SI=r82:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 155:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=193 from oldreg=82, assigning class GENERAL_REGS to address r193
	   Change to class INDEX_REGS for r193
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 42:  (0) m  (1) re {*movsi_internal}
   42: [r120:SI*0x4+r193:SI+const(unspec[`task'] 1)]=0
      REG_DEAD r120:SI
    Inserting insn reload before:
  156: r193:SI=r82:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 156:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=194 from oldreg=82, assigning class GENERAL_REGS to address r194
	   Change to class INDEX_REGS for r194
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =r  (1) g {*movsi_internal}
   34: r119:SI=[r194:SI+const(unspec[`gdt'] 0)]
    Inserting insn reload before:
  157: r194:SI=r82:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 157:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=195 from oldreg=82, assigning class GENERAL_REGS to address r195
	   Change to class INDEX_REGS for r195
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) g {*movsi_internal}
   31: r117:SI=[r195:SI+const(unspec[`gdt'] 0)]
    Inserting insn reload before:
  158: r195:SI=r82:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 158:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=196 from oldreg=82, assigning class GENERAL_REGS to address r196
	   Change to class INDEX_REGS for r196
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
   29: r116:SI=[r196:SI+const(unspec[`gdt'] 0)]
    Inserting insn reload before:
  159: r196:SI=r82:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 159:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=197 from oldreg=82, assigning class GENERAL_REGS to address r197
	   Change to class INDEX_REGS for r197
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =r  (1) g {*movsi_internal}
   27: r115:SI=[r197:SI+const(unspec[`gdt'] 0)]
    Inserting insn reload before:
  160: r197:SI=r82:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 160:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=198 from oldreg=82, assigning class GENERAL_REGS to address r198
	   Change to class INDEX_REGS for r198
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) g {*movsi_internal}
   25: r114:SI=[r198:SI+const(unspec[`gdt'] 0)]
    Inserting insn reload before:
  161: r198:SI=r82:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 161:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=199 from oldreg=82, assigning class GENERAL_REGS to address r199
	   Change to class INDEX_REGS for r199
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =r  (1) g {*movsi_internal}
   23: r113:SI=[r199:SI+const(unspec[`gdt'] 0)]
    Inserting insn reload before:
  162: r199:SI=r82:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 162:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=200 from oldreg=82, assigning class GENERAL_REGS to address r200
	   Change to class INDEX_REGS for r200
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r  (1) g {*movsi_internal}
   21: r112:SI=[r200:SI+const(unspec[`gdt'] 0)]
    Inserting insn reload before:
  163: r200:SI=r82:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 163:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=201 from oldreg=82, assigning class GENERAL_REGS to address r201
	   Change to class INDEX_REGS for r201
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) Ts {*leasi}
   20: r166:SI=r201:SI+const(unspec[`init_task'] 1+0x2d0)
      REG_EQUAL const(`init_task'+0x2d0)
    Inserting insn reload before:
  164: r201:SI=r82:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 164:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=202 from oldreg=82, assigning class GENERAL_REGS to address r202
	   Change to class INDEX_REGS for r202
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) g {*movsi_internal}
   17: r111:SI=[r202:SI+const(unspec[`gdt'] 0)]
    Inserting insn reload before:
  165: r202:SI=r82:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 165:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=203 from oldreg=82, assigning class GENERAL_REGS to address r203
	   Change to class INDEX_REGS for r203
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) g {*movsi_internal}
   15: r110:SI=[r203:SI+const(unspec[`gdt'] 0)]
    Inserting insn reload before:
  166: r203:SI=r82:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 166:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=204 from oldreg=82, assigning class GENERAL_REGS to address r204
	   Change to class INDEX_REGS for r204
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) g {*movsi_internal}
   13: r109:SI=[r204:SI+const(unspec[`gdt'] 0)]
    Inserting insn reload before:
  167: r204:SI=r82:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 167:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=205 from oldreg=82, assigning class GENERAL_REGS to address r205
	   Change to class INDEX_REGS for r205
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
   11: r108:SI=[r205:SI+const(unspec[`gdt'] 0)]
    Inserting insn reload before:
  168: r205:SI=r82:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 168:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=206 from oldreg=82, assigning class GENERAL_REGS to address r206
	   Change to class INDEX_REGS for r206
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
    9: r107:SI=[r206:SI+const(unspec[`gdt'] 0)]
    Inserting insn reload before:
  169: r206:SI=r82:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 169:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=207 from oldreg=82, assigning class GENERAL_REGS to address r207
	   Change to class INDEX_REGS for r207
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
    7: r106:SI=[r207:SI+const(unspec[`gdt'] 0)]
    Inserting insn reload before:
  170: r207:SI=r82:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 170:  (0) =r  (1) g {*movsi_internal}
      Creating newreg=208 from oldreg=82, assigning class GENERAL_REGS to address r208
	   Change to class INDEX_REGS for r208
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) Ts {*leasi}
    6: r169:SI=r208:SI+const(unspec[`init_task'] 1+0x2e8)
      REG_EQUAL const(`init_task'+0x2e8)
    Inserting insn reload before:
  171: r208:SI=r82:SI

            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 171:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 7

********** Pseudo live ranges #7: **********

  BB 6
   Insn 109: point = 0, n_alt = -1
  BB 5
   Insn 103: point = 0, n_alt = 0
   Insn 102: point = 1, n_alt = 0
   Insn 101: point = 2, n_alt = -2
   Insn 100: point = 4, n_alt = 0
   Insn 150: point = 6, n_alt = 0
   Insn 99: point = 8, n_alt = 0
   Insn 98: point = 10, n_alt = 0
   Insn 151: point = 12, n_alt = 0
   Insn 97: point = 13, n_alt = 0
   Insn 96: point = 15, n_alt = 0
   Insn 152: point = 17, n_alt = 0
   Insn 95: point = 18, n_alt = 0
   Insn 94: point = 19, n_alt = 0
   Insn 93: point = 20, n_alt = 0
   Insn 92: point = 22, n_alt = 0
   Insn 91: point = 24, n_alt = 4
   Insn 88: point = 25, n_alt = 8
   Insn 90: point = 26, n_alt = 0
   Insn 122: point = 28, n_alt = -2
	Hard reg 0 is preferable by r159 with profit 1000
   Insn 89: point = 30, n_alt = 0
   Insn 87: point = 31, n_alt = 0
   Insn 86: point = 32, n_alt = 0
   Insn 85: point = 33, n_alt = -2
   Insn 84: point = 35, n_alt = 0
   Insn 153: point = 37, n_alt = 0
   Insn 83: point = 38, n_alt = 0
   Insn 82: point = 40, n_alt = 0
   Insn 154: point = 42, n_alt = 0
   Insn 81: point = 43, n_alt = 0
   Insn 80: point = 45, n_alt = 0
   Insn 155: point = 47, n_alt = 0
   Insn 79: point = 48, n_alt = 0
   Insn 78: point = 49, n_alt = 0
   Insn 77: point = 50, n_alt = 0
   Insn 76: point = 51, n_alt = 0
   Insn 75: point = 52, n_alt = 0
   Insn 74: point = 53, n_alt = 0
   Insn 73: point = 54, n_alt = 0
   Insn 72: point = 55, n_alt = 0
   Insn 71: point = 56, n_alt = 0
   Insn 70: point = 57, n_alt = 0
   Insn 69: point = 58, n_alt = 0
   Insn 68: point = 59, n_alt = 0
   Insn 67: point = 60, n_alt = 0
   Insn 66: point = 61, n_alt = -1
  BB 4
   Insn 64: point = 62, n_alt = -1
   Insn 63: point = 62, n_alt = 0
  BB 2
   Insn 106: point = 63, n_alt = -1
   Insn 37: point = 63, n_alt = 1
   Insn 36: point = 63, n_alt = 1
   Insn 35: point = 64, n_alt = 0
   Insn 34: point = 66, n_alt = 0
   Insn 157: point = 68, n_alt = 0
   Insn 33: point = 69, n_alt = 0
   Insn 145: point = 70, n_alt = 0
   Insn 141: point = 72, n_alt = 0
   Insn 137: point = 74, n_alt = -2
	Hard reg 6 is preferable by r174 with profit 1000
   Insn 127: point = 76, n_alt = -2
	   Creating copy r164<-r170@1000
   Insn 121: point = 78, n_alt = -2
	Hard reg 5 is preferable by r158 with profit 1000
   Insn 120: point = 80, n_alt = -2
	   Creating copy r157<-r160@1000
   Insn 119: point = 82, n_alt = -2
	   Creating copy r156<-r161@1000
   Insn 128: point = 84, n_alt = -2
	   Creating copy r165->r170@1000
   Insn 32: point = 86, n_alt = 0
   Insn 31: point = 88, n_alt = 0
   Insn 158: point = 90, n_alt = 0
   Insn 118: point = 91, n_alt = -2
	   Creating copy r155->r160@1000
   Insn 30: point = 93, n_alt = 0
   Insn 29: point = 95, n_alt = 0
   Insn 159: point = 97, n_alt = 0
   Insn 117: point = 98, n_alt = -2
	   Creating copy r154->r161@1000
   Insn 28: point = 100, n_alt = 0
   Insn 27: point = 102, n_alt = 0
   Insn 160: point = 104, n_alt = 0
   Insn 146: point = 105, n_alt = 1
   Insn 26: point = 107, n_alt = 0
   Insn 25: point = 109, n_alt = 0
   Insn 161: point = 111, n_alt = 0
   Insn 142: point = 112, n_alt = 1
   Insn 24: point = 114, n_alt = 0
   Insn 23: point = 116, n_alt = 0
   Insn 162: point = 118, n_alt = 0
   Insn 138: point = 119, n_alt = -2
	Hard reg 6 is preferable by r175 with profit 1000
   Insn 22: point = 121, n_alt = 0
   Insn 21: point = 123, n_alt = 0
   Insn 163: point = 125, n_alt = 0
   Insn 129: point = 126, n_alt = -2
	Hard reg 5 is preferable by r166 with profit 1000
   Insn 20: point = 128, n_alt = 0
   Insn 164: point = 130, n_alt = 0
   Insn 19: point = 131, n_alt = 0
   Insn 147: point = 132, n_alt = 0
   Insn 143: point = 134, n_alt = 0
   Insn 139: point = 136, n_alt = -2
	Hard reg 6 is preferable by r176 with profit 1000
   Insn 130: point = 138, n_alt = -2
	   Creating copy r167<-r172@1000
   Insn 116: point = 140, n_alt = -2
	Hard reg 5 is preferable by r153 with profit 1000
   Insn 115: point = 142, n_alt = -2
	   Creating copy r152<-r162@1000
   Insn 114: point = 144, n_alt = -2
	   Creating copy r151<-r163@1000
   Insn 131: point = 146, n_alt = -2
	   Creating copy r168->r172@1000
   Insn 18: point = 148, n_alt = 0
   Insn 17: point = 150, n_alt = 0
   Insn 165: point = 152, n_alt = 0
   Insn 113: point = 153, n_alt = -2
	   Creating copy r150->r162@1000
   Insn 16: point = 155, n_alt = 0
   Insn 15: point = 157, n_alt = 0
   Insn 166: point = 159, n_alt = 0
   Insn 112: point = 160, n_alt = -2
	   Creating copy r149->r163@1000
   Insn 14: point = 162, n_alt = 0
   Insn 13: point = 164, n_alt = 0
   Insn 167: point = 166, n_alt = 0
   Insn 148: point = 167, n_alt = 1
   Insn 12: point = 169, n_alt = 0
   Insn 11: point = 171, n_alt = 0
   Insn 168: point = 173, n_alt = 0
   Insn 144: point = 174, n_alt = 1
   Insn 10: point = 176, n_alt = 0
   Insn 9: point = 178, n_alt = 0
   Insn 169: point = 180, n_alt = 0
   Insn 140: point = 181, n_alt = -2
	Hard reg 6 is preferable by r177 with profit 1000
   Insn 8: point = 183, n_alt = 0
   Insn 7: point = 185, n_alt = 0
   Insn 170: point = 187, n_alt = 0
   Insn 132: point = 188, n_alt = -2
	Hard reg 5 is preferable by r169 with profit 1000
   Insn 6: point = 190, n_alt = 0
   Insn 171: point = 192, n_alt = 0
   Insn 149: point = 193, n_alt = 1
   Insn 110: point = 195, n_alt = 0
  BB 3
   Insn 57: point = 196, n_alt = 0
   Insn 56: point = 196, n_alt = 0
   Insn 55: point = 196, n_alt = 1
   Insn 54: point = 197, n_alt = 0
   Insn 53: point = 198, n_alt = 0
   Insn 52: point = 200, n_alt = 0
   Insn 51: point = 201, n_alt = 1
   Insn 50: point = 202, n_alt = 0
   Insn 49: point = 203, n_alt = 0
   Insn 48: point = 203, n_alt = 1
   Insn 47: point = 204, n_alt = 0
   Insn 46: point = 205, n_alt = 0
   Insn 45: point = 207, n_alt = 0
   Insn 44: point = 208, n_alt = 1
   Insn 43: point = 209, n_alt = 0
   Insn 42: point = 210, n_alt = 1
   Insn 156: point = 211, n_alt = 0
   Insn 41: point = 212, n_alt = 0
 r82: [196..213] [7..193]
 r83: [141..188]
 r84: [137..181]
 r85: [135..174]
 r86: [133..167]
 r90: [79..126]
 r91: [75..119]
 r92: [73..112]
 r93: [71..105]
 r97: [203..205]
 r98: [196..198]
 r99: [31..43]
 r100: [31..38]
 r101: [21..22]
 r102: [18..20]
 r103: [0..13]
 r104: [0..8]
 r105: [23..24]
 r106: [184..185]
 r107: [177..178]
 r108: [170..171]
 r109: [163..164]
 r110: [156..157]
 r111: [149..150]
 r112: [122..123]
 r113: [115..116]
 r114: [108..109]
 r115: [101..102]
 r116: [94..95]
 r117: [87..88]
 r118: [63..64]
 r119: [65..66]
 r120: [210..212]
 r121: [208..209]
 r122: [206..207]
 r123: [203..204]
 r124: [201..202]
 r125: [199..200]
 r126: [196..197]
 r127: [59..60]
 r128: [57..58]
 r129: [54..56]
 r130: [54..55]
 r131: [51..53]
 r132: [51..52]
 r133: [48..50]
 r134: [48..49]
 r135: [44..45]
 r136: [39..40]
 r137: [31..33]
 r138: [34..35]
 r139: [31..32]
 r140: [25..26]
 r141: [29..30]
 r142: [18..19]
 r143: [14..15]
 r144: [9..10]
 r145: [0..2]
 r146: [3..4]
 r147: [0..1]
 r149: [161..162]
 r150: [154..155]
 r151: [131..144]
 r152: [131..142]
 r153: [131..140]
 r154: [99..100]
 r155: [92..93]
 r156: [69..82]
 r157: [69..80]
 r158: [69..78]
 r159: [27..28]
 r160: [81..91]
 r161: [83..98]
 r162: [143..153]
 r163: [145..160]
 r164: [69..76]
 r165: [85..86]
 r166: [127..128]
 r167: [131..138]
 r168: [147..148]
 r169: [189..190]
 r170: [77..84]
 r172: [139..146]
 r174: [69..74]
 r175: [120..121]
 r176: [131..136]
 r177: [182..183]
 r178: [69..72]
 r179: [113..114]
 r180: [131..134]
 r181: [175..176]
 r182: [69..70]
 r183: [106..107]
 r184: [131..132]
 r185: [168..169]
 r186: [194..195]
 r187: [5..6]
 r188: [11..12]
 r189: [16..17]
 r190: [36..37]
 r191: [41..42]
 r192: [46..47]
 r193: [210..211]
 r194: [67..68]
 r195: [89..90]
 r196: [96..97]
 r197: [103..104]
 r198: [110..111]
 r199: [117..118]
 r200: [124..125]
 r201: [129..130]
 r202: [151..152]
 r203: [158..159]
 r204: [165..166]
 r205: [172..173]
 r206: [179..180]
 r207: [186..187]
 r208: [191..192]
Compressing live ranges: from 214 to 186 - 86%
Ranges after the compression:
 r82: [172..185] [6..169]
 r83: [124..165]
 r84: [120..159]
 r85: [118..153]
 r86: [116..147]
 r90: [68..109]
 r91: [64..103]
 r92: [62..97]
 r93: [60..91]
 r97: [178..179]
 r98: [172..173]
 r99: [28..37]
 r100: [28..33]
 r101: [18..19]
 r102: [16..17]
 r103: [0..11]
 r104: [0..7]
 r105: [20..21]
 r106: [162..163]
 r107: [156..157]
 r108: [150..151]
 r109: [144..145]
 r110: [138..139]
 r111: [132..133]
 r112: [106..107]
 r113: [100..101]
 r114: [94..95]
 r115: [88..89]
 r116: [82..83]
 r117: [76..77]
 r118: [52..53]
 r119: [54..55]
 r120: [184..185]
 r121: [182..183]
 r122: [180..181]
 r123: [178..179]
 r124: [176..177]
 r125: [174..175]
 r126: [172..173]
 r127: [50..51]
 r128: [48..49]
 r129: [46..47]
 r130: [46..47]
 r131: [44..45]
 r132: [44..45]
 r133: [42..43]
 r134: [42..43]
 r135: [38..39]
 r136: [34..35]
 r137: [28..29]
 r138: [30..31]
 r139: [28..29]
 r140: [22..23]
 r141: [26..27]
 r142: [16..17]
 r143: [12..13]
 r144: [8..9]
 r145: [0..1]
 r146: [2..3]
 r147: [0..1]
 r149: [142..143]
 r150: [136..137]
 r151: [114..127]
 r152: [114..125]
 r153: [114..123]
 r154: [86..87]
 r155: [80..81]
 r156: [58..71]
 r157: [58..69]
 r158: [58..67]
 r159: [24..25]
 r160: [70..79]
 r161: [72..85]
 r162: [126..135]
 r163: [128..141]
 r164: [58..65]
 r165: [74..75]
 r166: [110..111]
 r167: [114..121]
 r168: [130..131]
 r169: [166..167]
 r170: [66..73]
 r172: [122..129]
 r174: [58..63]
 r175: [104..105]
 r176: [114..119]
 r177: [160..161]
 r178: [58..61]
 r179: [98..99]
 r180: [114..117]
 r181: [154..155]
 r182: [58..59]
 r183: [92..93]
 r184: [114..115]
 r185: [148..149]
 r186: [170..171]
 r187: [4..5]
 r188: [10..11]
 r189: [14..15]
 r190: [32..33]
 r191: [36..37]
 r192: [40..41]
 r193: [184..185]
 r194: [56..57]
 r195: [78..79]
 r196: [84..85]
 r197: [90..91]
 r198: [96..97]
 r199: [102..103]
 r200: [108..109]
 r201: [112..113]
 r202: [134..135]
 r203: [140..141]
 r204: [146..147]
 r205: [152..153]
 r206: [158..159]
 r207: [164..165]
 r208: [168..169]

********** Assignment #6: **********

	 Assigning to 186 (cl=GENERAL_REGS, orig=82, freq=2000, tfirst=186, tfreq=2000)...
	   Assign 0 to reload r186 (freq=2000)
	 Assigning to 187 (cl=INDEX_REGS, orig=82, freq=2000, tfirst=187, tfreq=2000)...
	   Assign 0 to reload r187 (freq=2000)
	 Assigning to 188 (cl=INDEX_REGS, orig=82, freq=2000, tfirst=188, tfreq=2000)...
	   Assign 0 to reload r188 (freq=2000)
	 Assigning to 189 (cl=INDEX_REGS, orig=82, freq=2000, tfirst=189, tfreq=2000)...
	   Assign 0 to reload r189 (freq=2000)
	 Assigning to 190 (cl=INDEX_REGS, orig=82, freq=2000, tfirst=190, tfreq=2000)...
	   Assign 0 to reload r190 (freq=2000)
	 Assigning to 191 (cl=INDEX_REGS, orig=82, freq=2000, tfirst=191, tfreq=2000)...
	   Assign 0 to reload r191 (freq=2000)
	 Assigning to 192 (cl=INDEX_REGS, orig=82, freq=2000, tfirst=192, tfreq=2000)...
	   Assign 0 to reload r192 (freq=2000)
	 Assigning to 193 (cl=INDEX_REGS, orig=82, freq=2000, tfirst=193, tfreq=2000)...
	   Assign 2 to reload r193 (freq=2000)
	 Assigning to 194 (cl=INDEX_REGS, orig=82, freq=2000, tfirst=194, tfreq=2000)...
	   Assign 0 to reload r194 (freq=2000)
	 Assigning to 195 (cl=INDEX_REGS, orig=82, freq=2000, tfirst=195, tfreq=2000)...
	   Assign 0 to reload r195 (freq=2000)
	 Assigning to 196 (cl=INDEX_REGS, orig=82, freq=2000, tfirst=196, tfreq=2000)...
	   Assign 0 to reload r196 (freq=2000)
	 Assigning to 197 (cl=INDEX_REGS, orig=82, freq=2000, tfirst=197, tfreq=2000)...
	   Assign 0 to reload r197 (freq=2000)
	 Assigning to 198 (cl=INDEX_REGS, orig=82, freq=2000, tfirst=198, tfreq=2000)...
	   Assign 0 to reload r198 (freq=2000)
	 Assigning to 199 (cl=INDEX_REGS, orig=82, freq=2000, tfirst=199, tfreq=2000)...
	   Assign 0 to reload r199 (freq=2000)
	 Assigning to 200 (cl=INDEX_REGS, orig=82, freq=2000, tfirst=200, tfreq=2000)...
	   Assign 0 to reload r200 (freq=2000)
	 Assigning to 201 (cl=INDEX_REGS, orig=82, freq=2000, tfirst=201, tfreq=2000)...
	   Assign 0 to reload r201 (freq=2000)
	 Assigning to 202 (cl=INDEX_REGS, orig=82, freq=2000, tfirst=202, tfreq=2000)...
	   Assign 0 to reload r202 (freq=2000)
	 Assigning to 203 (cl=INDEX_REGS, orig=82, freq=2000, tfirst=203, tfreq=2000)...
	   Assign 0 to reload r203 (freq=2000)
	 Assigning to 204 (cl=INDEX_REGS, orig=82, freq=2000, tfirst=204, tfreq=2000)...
	   Assign 0 to reload r204 (freq=2000)
	 Assigning to 205 (cl=INDEX_REGS, orig=82, freq=2000, tfirst=205, tfreq=2000)...
	   Assign 0 to reload r205 (freq=2000)
	 Assigning to 206 (cl=INDEX_REGS, orig=82, freq=2000, tfirst=206, tfreq=2000)...
	   Assign 0 to reload r206 (freq=2000)
	 Assigning to 207 (cl=INDEX_REGS, orig=82, freq=2000, tfirst=207, tfreq=2000)...
	   Assign 0 to reload r207 (freq=2000)
	 Assigning to 208 (cl=INDEX_REGS, orig=82, freq=2000, tfirst=208, tfreq=2000)...
	   Assign 0 to reload r208 (freq=2000)
  Reassigning non-reload pseudos

********** Local #7: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
  Slot 0 regnos (width = 0):	 82
  Slot 1 regnos (width = 0):	 85	 92
  Slot 2 regnos (width = 0):	 86	 93
Changing spilled pseudos to memory in insn #149
Changing spilled pseudos to memory in insn #171
Changing spilled pseudos to memory in insn #170
Changing spilled pseudos to memory in insn #169
Changing spilled pseudos to memory in insn #144
Changing spilled pseudos to memory in insn #168
Changing spilled pseudos to memory in insn #148
Changing spilled pseudos to memory in insn #167
Changing spilled pseudos to memory in insn #166
Changing spilled pseudos to memory in insn #165
Changing spilled pseudos to memory in insn #143
Changing spilled pseudos to memory in insn #147
Changing spilled pseudos to memory in insn #164
Changing spilled pseudos to memory in insn #163
Changing spilled pseudos to memory in insn #162
Changing spilled pseudos to memory in insn #142
Changing spilled pseudos to memory in insn #161
Changing spilled pseudos to memory in insn #146
Changing spilled pseudos to memory in insn #160
Changing spilled pseudos to memory in insn #159
Changing spilled pseudos to memory in insn #158
Changing spilled pseudos to memory in insn #141
Changing spilled pseudos to memory in insn #145
Changing spilled pseudos to memory in insn #157
Changing spilled pseudos to memory in insn #156
Changing spilled pseudos to memory in insn #155
Changing spilled pseudos to memory in insn #154
Changing spilled pseudos to memory in insn #153
Changing spilled pseudos to memory in insn #152
Changing spilled pseudos to memory in insn #151
Changing spilled pseudos to memory in insn #150
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=48, prev_offset=36)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=28, prev_offset=16)
Can eliminate 19 to 6 (offset=-16, prev_offset=0)

********** Local #8: **********

	   Spilling non-eliminable hard regs: 7
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 91:  (0) q  (1) m {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=7,overall=27,losers=2 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 88:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 57:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 56:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 49:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 37:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 36:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 150:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 151:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 152:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 153:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 154:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 155:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 156:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 157:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 145:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 141:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 158:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 159:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 160:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 146:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 161:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 142:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 162:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 163:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 164:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 147:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 165:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 166:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 167:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 148:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 168:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 144:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 169:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 170:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 171:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 149:  (0) m  (1) re {*movsi_internal}
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=48, prev_offset=48)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=28, prev_offset=28)
Can eliminate 19 to 6 (offset=-16, prev_offset=0)
changing reg in insn 46
changing reg in insn 48
changing reg in insn 53
changing reg in insn 55
changing reg in insn 81
changing reg in insn 87
changing reg in insn 83
changing reg in insn 87
changing reg in insn 92
changing reg in insn 93
changing reg in insn 93
changing reg in insn 95
changing reg in insn 97
changing reg in insn 103
changing reg in insn 99
changing reg in insn 103
changing reg in insn 91
changing reg in insn 92
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 21
changing reg in insn 22
changing reg in insn 23
changing reg in insn 24
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 29
changing reg in insn 30
changing reg in insn 31
changing reg in insn 32
changing reg in insn 35
changing reg in insn 36
changing reg in insn 34
changing reg in insn 35
changing reg in insn 41
changing reg in insn 42
changing reg in insn 43
changing reg in insn 44
changing reg in insn 45
changing reg in insn 46
changing reg in insn 47
changing reg in insn 48
changing reg in insn 50
changing reg in insn 51
changing reg in insn 52
changing reg in insn 53
changing reg in insn 54
changing reg in insn 55
changing reg in insn 67
changing reg in insn 68
changing reg in insn 69
changing reg in insn 70
changing reg in insn 71
changing reg in insn 73
changing reg in insn 72
changing reg in insn 73
changing reg in insn 74
changing reg in insn 76
changing reg in insn 75
changing reg in insn 76
changing reg in insn 77
changing reg in insn 79
changing reg in insn 78
changing reg in insn 79
changing reg in insn 80
changing reg in insn 81
changing reg in insn 82
changing reg in insn 83
changing reg in insn 85
changing reg in insn 87
changing reg in insn 84
changing reg in insn 85
changing reg in insn 86
changing reg in insn 87
changing reg in insn 90
changing reg in insn 88
changing reg in insn 89
changing reg in insn 94
changing reg in insn 95
changing reg in insn 96
changing reg in insn 97
changing reg in insn 98
changing reg in insn 99
changing reg in insn 101
changing reg in insn 103
changing reg in insn 100
changing reg in insn 101
changing reg in insn 102
changing reg in insn 103
deleting insn with uid = 112.
deleting insn with uid = 113.
deleting insn with uid = 131.
deleting insn with uid = 115.
deleting insn with uid = 117.
deleting insn with uid = 118.
deleting insn with uid = 128.
deleting insn with uid = 120.
starting the processing of deferred insns
ending the processing of deferred insns


sched_init

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 17 [flags]
;;  ref usage 	r0={72d,71u} r1={12d,11u} r2={4d,3u} r3={6d,6u} r4={6d,6u} r5={4d,4u} r6={4d,4u} r7={1d,55u} r17={18d,1u} 
;;    total ref usage 288{127d,161u,0e} in 136{136 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 110 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 110 3 149 2 (parallel [
            (set (reg:SI 0 ax [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(insn 149 110 2 2 (set (mem/c:SI (reg/f:SI 7 sp) [25 %sfp+-28 S4 A32])
        (reg:SI 0 ax [82])) 75 {*movsi_internal}
     (nil))
(note 2 149 171 2 NOTE_INSN_FUNCTION_BEG)
(insn 171 2 6 2 (set (reg:SI 0 ax [82])
        (mem/c:SI (reg/f:SI 7 sp) [25 %sfp+-28 S4 A32])) "kernel/sched.c":148:5 75 {*movsi_internal}
     (nil))
(insn 6 171 132 2 (set (reg:SI 0 ax [orig:83 _1 ] [83])
        (plus:SI (reg:SI 0 ax [82])
            (const:SI (plus:SI (unspec:SI [
                            (symbol_ref:SI ("init_task") [flags 0x2]  <var_decl 0x731e0292e990 init_task>)
                        ] UNSPEC_GOTOFF)
                    (const_int 744 [0x2e8]))))) "kernel/sched.c":148:5 205 {*leasi}
     (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("init_task") [flags 0x2]  <var_decl 0x731e0292e990 init_task>)
                (const_int 744 [0x2e8])))
        (nil)))
(insn 132 6 136 2 (set (reg:SI 5 di [orig:83 _1 ] [83])
        (reg:SI 0 ax [orig:83 _1 ] [83])) "kernel/sched.c":148:5 75 {*movsi_internal}
     (nil))
(note 136 132 170 2 NOTE_INSN_DELETED)
(insn 170 136 7 2 (set (reg:SI 0 ax [82])
        (mem/c:SI (reg/f:SI 7 sp) [25 %sfp+-28 S4 A32])) "kernel/sched.c":148:5 75 {*movsi_internal}
     (nil))
(insn 7 170 8 2 (set (reg:SI 0 ax [106])
        (mem/u/c:SI (plus:SI (reg:SI 0 ax [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("gdt") [flags 0x40]  <var_decl 0x731e03ddfc60 gdt>)
                        ] UNSPEC_GOT))) [24  S4 A8])) "kernel/sched.c":148:5 75 {*movsi_internal}
     (nil))
(insn 8 7 140 2 (set (reg/f:SI 0 ax [orig:84 _2 ] [84])
        (plus:SI (reg:SI 0 ax [106])
            (const_int 32 [0x20]))) "kernel/sched.c":148:5 205 {*leasi}
     (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("gdt") [flags 0x40]  <var_decl 0x731e03ddfc60 gdt>)
                (const_int 32 [0x20])))
        (nil)))
(insn 140 8 169 2 (set (reg/f:SI 6 bp [orig:84 _2 ] [84])
        (reg/f:SI 0 ax [orig:84 _2 ] [84])) "kernel/sched.c":148:5 75 {*movsi_internal}
     (nil))
(insn 169 140 9 2 (set (reg:SI 0 ax [82])
        (mem/c:SI (reg/f:SI 7 sp) [25 %sfp+-28 S4 A32])) "kernel/sched.c":148:5 75 {*movsi_internal}
     (nil))
(insn 9 169 10 2 (set (reg:SI 0 ax [107])
        (mem/u/c:SI (plus:SI (reg:SI 0 ax [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("gdt") [flags 0x40]  <var_decl 0x731e03ddfc60 gdt>)
                        ] UNSPEC_GOT))) [24  S4 A8])) "kernel/sched.c":148:5 75 {*movsi_internal}
     (nil))
(insn 10 9 144 2 (set (reg/f:SI 0 ax [orig:85 _3 ] [85])
        (plus:SI (reg:SI 0 ax [107])
            (const_int 34 [0x22]))) "kernel/sched.c":148:5 205 {*leasi}
     (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("gdt") [flags 0x40]  <var_decl 0x731e03ddfc60 gdt>)
                (const_int 34 [0x22])))
        (nil)))
(insn 144 10 168 2 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [25 %sfp+-24 S4 A32])
        (reg/f:SI 0 ax [orig:85 _3 ] [85])) "kernel/sched.c":148:5 75 {*movsi_internal}
     (nil))
(insn 168 144 11 2 (set (reg:SI 0 ax [82])
        (mem/c:SI (reg/f:SI 7 sp) [25 %sfp+-28 S4 A32])) "kernel/sched.c":148:5 75 {*movsi_internal}
     (nil))
(insn 11 168 12 2 (set (reg:SI 0 ax [108])
        (mem/u/c:SI (plus:SI (reg:SI 0 ax [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("gdt") [flags 0x40]  <var_decl 0x731e03ddfc60 gdt>)
                        ] UNSPEC_GOT))) [24  S4 A8])) "kernel/sched.c":148:5 75 {*movsi_internal}
     (nil))
(insn 12 11 148 2 (set (reg/f:SI 0 ax [orig:86 _4 ] [86])
        (plus:SI (reg:SI 0 ax [108])
            (const_int 36 [0x24]))) "kernel/sched.c":148:5 205 {*leasi}
     (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("gdt") [flags 0x40]  <var_decl 0x731e03ddfc60 gdt>)
                (const_int 36 [0x24])))
        (nil)))
(insn 148 12 167 2 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [25 %sfp+-20 S4 A32])
        (reg/f:SI 0 ax [orig:86 _4 ] [86])) "kernel/sched.c":148:5 75 {*movsi_internal}
     (nil))
(insn 167 148 13 2 (set (reg:SI 0 ax [82])
        (mem/c:SI (reg/f:SI 7 sp) [25 %sfp+-28 S4 A32])) "kernel/sched.c":148:5 75 {*movsi_internal}
     (nil))
(insn 13 167 14 2 (set (reg:SI 0 ax [109])
        (mem/u/c:SI (plus:SI (reg:SI 0 ax [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("gdt") [flags 0x40]  <var_decl 0x731e03ddfc60 gdt>)
                        ] UNSPEC_GOT))) [24  S4 A8])) "kernel/sched.c":148:5 75 {*movsi_internal}
     (nil))
(insn 14 13 126 2 (set (reg/f:SI 3 bx [orig:87 _5 ] [87])
        (plus:SI (reg:SI 0 ax [109])
            (const_int 37 [0x25]))) "kernel/sched.c":148:5 205 {*leasi}
     (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("gdt") [flags 0x40]  <var_decl 0x731e03ddfc60 gdt>)
                (const_int 37 [0x25])))
        (nil)))
(note 126 14 166 2 NOTE_INSN_DELETED)
(insn 166 126 15 2 (set (reg:SI 0 ax [82])
        (mem/c:SI (reg/f:SI 7 sp) [25 %sfp+-28 S4 A32])) "kernel/sched.c":148:5 75 {*movsi_internal}
     (nil))
(insn 15 166 16 2 (set (reg:SI 0 ax [110])
        (mem/u/c:SI (plus:SI (reg:SI 0 ax [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("gdt") [flags 0x40]  <var_decl 0x731e03ddfc60 gdt>)
                        ] UNSPEC_GOT))) [24  S4 A8])) "kernel/sched.c":148:5 75 {*movsi_internal}
     (nil))
(insn 16 15 125 2 (set (reg/f:SI 1 dx [orig:88 _6 ] [88])
        (plus:SI (reg:SI 0 ax [110])
            (const_int 38 [0x26]))) "kernel/sched.c":148:5 205 {*leasi}
     (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("gdt") [flags 0x40]  <var_decl 0x731e03ddfc60 gdt>)
                (const_int 38 [0x26])))
        (nil)))
(note 125 16 165 2 NOTE_INSN_DELETED)
(insn 165 125 17 2 (set (reg:SI 0 ax [82])
        (mem/c:SI (reg/f:SI 7 sp) [25 %sfp+-28 S4 A32])) "kernel/sched.c":148:5 75 {*movsi_internal}
     (nil))
(insn 17 165 18 2 (set (reg:SI 0 ax [111])
        (mem/u/c:SI (plus:SI (reg:SI 0 ax [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("gdt") [flags 0x40]  <var_decl 0x731e03ddfc60 gdt>)
                        ] UNSPEC_GOT))) [24  S4 A8])) "kernel/sched.c":148:5 75 {*movsi_internal}
     (nil))
(insn 18 17 135 2 (set (reg/f:SI 4 si [orig:89 _7 ] [89])
        (plus:SI (reg:SI 0 ax [111])
            (const_int 39 [0x27]))) "kernel/sched.c":148:5 205 {*leasi}
     (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("gdt") [flags 0x40]  <var_decl 0x731e03ddfc60 gdt>)
                (const_int 39 [0x27])))
        (nil)))
(note 135 18 114 2 NOTE_INSN_DELETED)
(insn 114 135 116 2 (set (reg/f:SI 2 cx [orig:87 _5 ] [87])
        (reg/f:SI 3 bx [orig:87 _5 ] [87])) "kernel/sched.c":148:5 75 {*movsi_internal}
     (nil))
(insn 116 114 130 2 (set (reg:SI 0 ax [orig:83 _1 ] [83])
        (reg:SI 5 di [orig:83 _1 ] [83])) "kernel/sched.c":148:5 75 {*movsi_internal}
     (nil))
(insn 130 116 139 2 (set (reg/f:SI 3 bx [orig:89 _7 ] [89])
        (reg/f:SI 4 si [orig:89 _7 ] [89])) "kernel/sched.c":148:5 75 {*movsi_internal}
     (nil))
(insn 139 130 143 2 (set (reg/f:SI 4 si [orig:84 _2 ] [84])
        (reg/f:SI 6 bp [orig:84 _2 ] [84])) "kernel/sched.c":148:5 75 {*movsi_internal}
     (nil))
(insn 143 139 147 2 (set (reg/f:SI 5 di [orig:85 _3 ] [85])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [25 %sfp+-24 S4 A32])) "kernel/sched.c":148:5 75 {*movsi_internal}
     (nil))
(insn 147 143 19 2 (set (reg/f:SI 6 bp [orig:86 _4 ] [86])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [25 %sfp+-20 S4 A32])) "kernel/sched.c":148:5 75 {*movsi_internal}
     (nil))
(insn 19 147 164 2 (parallel [
            (asm_operands/v ("movw $104, %1
	movw %%ax, %2
	rorl $16, %%eax
	movb %%al, %3
	movb $0x89, %4
	movb $0x00, %5
	movb %%ah, %6
	rorl $16, %%eax") ("") 0 [
                    (reg:SI 0 ax [orig:83 _1 ] [83])
                    (mem:QI (reg/f:SI 4 si [orig:84 _2 ] [84]) [0 *_2+0 S1 A8])
                    (mem:QI (reg/f:SI 5 di [orig:85 _3 ] [85]) [0 *_3+0 S1 A8])
                    (mem:QI (reg/f:SI 6 bp [orig:86 _4 ] [86]) [0 *_4+0 S1 A8])
                    (mem:QI (reg/f:SI 2 cx [orig:87 _5 ] [87]) [0 *_5+0 S1 A8])
                    (mem:QI (reg/f:SI 1 dx [orig:88 _6 ] [88]) [0 *_6+0 S1 A8])
                    (mem:QI (reg/f:SI 3 bx [orig:89 _7 ] [89]) [0 *_7+0 S1 A8])
                ]
                 [
                    (asm_input:SI ("a") kernel/sched.c:148)
                    (asm_input:QI ("m") kernel/sched.c:148)
                    (asm_input:QI ("m") kernel/sched.c:148)
                    (asm_input:QI ("m") kernel/sched.c:148)
                    (asm_input:QI ("m") kernel/sched.c:148)
                    (asm_input:QI ("m") kernel/sched.c:148)
                    (asm_input:QI ("m") kernel/sched.c:148)
                ]
                 [] kernel/sched.c:148)
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":148:5 -1
     (nil))
(insn 164 19 20 2 (set (reg:SI 0 ax [82])
        (mem/c:SI (reg/f:SI 7 sp) [25 %sfp+-28 S4 A32])) "kernel/sched.c":149:5 75 {*movsi_internal}
     (nil))
(insn 20 164 129 2 (set (reg:SI 0 ax [orig:90 _8 ] [90])
        (plus:SI (reg:SI 0 ax [82])
            (const:SI (plus:SI (unspec:SI [
                            (symbol_ref:SI ("init_task") [flags 0x2]  <var_decl 0x731e0292e990 init_task>)
                        ] UNSPEC_GOTOFF)
                    (const_int 720 [0x2d0]))))) "kernel/sched.c":149:5 205 {*leasi}
     (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("init_task") [flags 0x2]  <var_decl 0x731e0292e990 init_task>)
                (const_int 720 [0x2d0])))
        (nil)))
(insn 129 20 134 2 (set (reg:SI 5 di [orig:90 _8 ] [90])
        (reg:SI 0 ax [orig:90 _8 ] [90])) "kernel/sched.c":149:5 75 {*movsi_internal}
     (nil))
(note 134 129 163 2 NOTE_INSN_DELETED)
(insn 163 134 21 2 (set (reg:SI 0 ax [82])
        (mem/c:SI (reg/f:SI 7 sp) [25 %sfp+-28 S4 A32])) "kernel/sched.c":149:5 75 {*movsi_internal}
     (nil))
(insn 21 163 22 2 (set (reg:SI 0 ax [112])
        (mem/u/c:SI (plus:SI (reg:SI 0 ax [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("gdt") [flags 0x40]  <var_decl 0x731e03ddfc60 gdt>)
                        ] UNSPEC_GOT))) [24  S4 A8])) "kernel/sched.c":149:5 75 {*movsi_internal}
     (nil))
(insn 22 21 138 2 (set (reg/f:SI 0 ax [orig:91 _9 ] [91])
        (plus:SI (reg:SI 0 ax [112])
            (const_int 40 [0x28]))) "kernel/sched.c":149:5 205 {*leasi}
     (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("gdt") [flags 0x40]  <var_decl 0x731e03ddfc60 gdt>)
                (const_int 40 [0x28])))
        (nil)))
(insn 138 22 162 2 (set (reg/f:SI 6 bp [orig:91 _9 ] [91])
        (reg/f:SI 0 ax [orig:91 _9 ] [91])) "kernel/sched.c":149:5 75 {*movsi_internal}
     (nil))
(insn 162 138 23 2 (set (reg:SI 0 ax [82])
        (mem/c:SI (reg/f:SI 7 sp) [25 %sfp+-28 S4 A32])) "kernel/sched.c":149:5 75 {*movsi_internal}
     (nil))
(insn 23 162 24 2 (set (reg:SI 0 ax [113])
        (mem/u/c:SI (plus:SI (reg:SI 0 ax [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("gdt") [flags 0x40]  <var_decl 0x731e03ddfc60 gdt>)
                        ] UNSPEC_GOT))) [24  S4 A8])) "kernel/sched.c":149:5 75 {*movsi_internal}
     (nil))
(insn 24 23 142 2 (set (reg/f:SI 0 ax [orig:92 _10 ] [92])
        (plus:SI (reg:SI 0 ax [113])
            (const_int 42 [0x2a]))) "kernel/sched.c":149:5 205 {*leasi}
     (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("gdt") [flags 0x40]  <var_decl 0x731e03ddfc60 gdt>)
                (const_int 42 [0x2a])))
        (nil)))
(insn 142 24 161 2 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [25 %sfp+-24 S4 A32])
        (reg/f:SI 0 ax [orig:92 _10 ] [92])) "kernel/sched.c":149:5 75 {*movsi_internal}
     (nil))
(insn 161 142 25 2 (set (reg:SI 0 ax [82])
        (mem/c:SI (reg/f:SI 7 sp) [25 %sfp+-28 S4 A32])) "kernel/sched.c":149:5 75 {*movsi_internal}
     (nil))
(insn 25 161 26 2 (set (reg:SI 0 ax [114])
        (mem/u/c:SI (plus:SI (reg:SI 0 ax [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("gdt") [flags 0x40]  <var_decl 0x731e03ddfc60 gdt>)
                        ] UNSPEC_GOT))) [24  S4 A8])) "kernel/sched.c":149:5 75 {*movsi_internal}
     (nil))
(insn 26 25 146 2 (set (reg/f:SI 0 ax [orig:93 _11 ] [93])
        (plus:SI (reg:SI 0 ax [114])
            (const_int 44 [0x2c]))) "kernel/sched.c":149:5 205 {*leasi}
     (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("gdt") [flags 0x40]  <var_decl 0x731e03ddfc60 gdt>)
                (const_int 44 [0x2c])))
        (nil)))
(insn 146 26 160 2 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [25 %sfp+-20 S4 A32])
        (reg/f:SI 0 ax [orig:93 _11 ] [93])) "kernel/sched.c":149:5 75 {*movsi_internal}
     (nil))
(insn 160 146 27 2 (set (reg:SI 0 ax [82])
        (mem/c:SI (reg/f:SI 7 sp) [25 %sfp+-28 S4 A32])) "kernel/sched.c":149:5 75 {*movsi_internal}
     (nil))
(insn 27 160 28 2 (set (reg:SI 0 ax [115])
        (mem/u/c:SI (plus:SI (reg:SI 0 ax [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("gdt") [flags 0x40]  <var_decl 0x731e03ddfc60 gdt>)
                        ] UNSPEC_GOT))) [24  S4 A8])) "kernel/sched.c":149:5 75 {*movsi_internal}
     (nil))
(insn 28 27 124 2 (set (reg/f:SI 3 bx [orig:94 _12 ] [94])
        (plus:SI (reg:SI 0 ax [115])
            (const_int 45 [0x2d]))) "kernel/sched.c":149:5 205 {*leasi}
     (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("gdt") [flags 0x40]  <var_decl 0x731e03ddfc60 gdt>)
                (const_int 45 [0x2d])))
        (nil)))
(note 124 28 159 2 NOTE_INSN_DELETED)
(insn 159 124 29 2 (set (reg:SI 0 ax [82])
        (mem/c:SI (reg/f:SI 7 sp) [25 %sfp+-28 S4 A32])) "kernel/sched.c":149:5 75 {*movsi_internal}
     (nil))
(insn 29 159 30 2 (set (reg:SI 0 ax [116])
        (mem/u/c:SI (plus:SI (reg:SI 0 ax [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("gdt") [flags 0x40]  <var_decl 0x731e03ddfc60 gdt>)
                        ] UNSPEC_GOT))) [24  S4 A8])) "kernel/sched.c":149:5 75 {*movsi_internal}
     (nil))
(insn 30 29 123 2 (set (reg/f:SI 1 dx [orig:95 _13 ] [95])
        (plus:SI (reg:SI 0 ax [116])
            (const_int 46 [0x2e]))) "kernel/sched.c":149:5 205 {*leasi}
     (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("gdt") [flags 0x40]  <var_decl 0x731e03ddfc60 gdt>)
                (const_int 46 [0x2e])))
        (nil)))
(note 123 30 158 2 NOTE_INSN_DELETED)
(insn 158 123 31 2 (set (reg:SI 0 ax [82])
        (mem/c:SI (reg/f:SI 7 sp) [25 %sfp+-28 S4 A32])) "kernel/sched.c":149:5 75 {*movsi_internal}
     (nil))
(insn 31 158 32 2 (set (reg:SI 0 ax [117])
        (mem/u/c:SI (plus:SI (reg:SI 0 ax [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("gdt") [flags 0x40]  <var_decl 0x731e03ddfc60 gdt>)
                        ] UNSPEC_GOT))) [24  S4 A8])) "kernel/sched.c":149:5 75 {*movsi_internal}
     (nil))
(insn 32 31 133 2 (set (reg/f:SI 4 si [orig:96 _14 ] [96])
        (plus:SI (reg:SI 0 ax [117])
            (const_int 47 [0x2f]))) "kernel/sched.c":149:5 205 {*leasi}
     (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("gdt") [flags 0x40]  <var_decl 0x731e03ddfc60 gdt>)
                (const_int 47 [0x2f])))
        (nil)))
(note 133 32 119 2 NOTE_INSN_DELETED)
(insn 119 133 121 2 (set (reg/f:SI 2 cx [orig:94 _12 ] [94])
        (reg/f:SI 3 bx [orig:94 _12 ] [94])) "kernel/sched.c":149:5 75 {*movsi_internal}
     (nil))
(insn 121 119 127 2 (set (reg:SI 0 ax [orig:90 _8 ] [90])
        (reg:SI 5 di [orig:90 _8 ] [90])) "kernel/sched.c":149:5 75 {*movsi_internal}
     (nil))
(insn 127 121 137 2 (set (reg/f:SI 3 bx [orig:96 _14 ] [96])
        (reg/f:SI 4 si [orig:96 _14 ] [96])) "kernel/sched.c":149:5 75 {*movsi_internal}
     (nil))
(insn 137 127 141 2 (set (reg/f:SI 4 si [orig:91 _9 ] [91])
        (reg/f:SI 6 bp [orig:91 _9 ] [91])) "kernel/sched.c":149:5 75 {*movsi_internal}
     (nil))
(insn 141 137 145 2 (set (reg/f:SI 5 di [orig:92 _10 ] [92])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [25 %sfp+-24 S4 A32])) "kernel/sched.c":149:5 75 {*movsi_internal}
     (nil))
(insn 145 141 33 2 (set (reg/f:SI 6 bp [orig:93 _11 ] [93])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [25 %sfp+-20 S4 A32])) "kernel/sched.c":149:5 75 {*movsi_internal}
     (nil))
(insn 33 145 157 2 (parallel [
            (asm_operands/v ("movw $104, %1
	movw %%ax, %2
	rorl $16, %%eax
	movb %%al, %3
	movb $0x82, %4
	movb $0x00, %5
	movb %%ah, %6
	rorl $16, %%eax") ("") 0 [
                    (reg:SI 0 ax [orig:90 _8 ] [90])
                    (mem:QI (reg/f:SI 4 si [orig:91 _9 ] [91]) [0 *_9+0 S1 A8])
                    (mem:QI (reg/f:SI 5 di [orig:92 _10 ] [92]) [0 *_10+0 S1 A8])
                    (mem:QI (reg/f:SI 6 bp [orig:93 _11 ] [93]) [0 *_11+0 S1 A8])
                    (mem:QI (reg/f:SI 2 cx [orig:94 _12 ] [94]) [0 *_12+0 S1 A8])
                    (mem:QI (reg/f:SI 1 dx [orig:95 _13 ] [95]) [0 *_13+0 S1 A8])
                    (mem:QI (reg/f:SI 3 bx [orig:96 _14 ] [96]) [0 *_14+0 S1 A8])
                ]
                 [
                    (asm_input:SI ("a") kernel/sched.c:149)
                    (asm_input:QI ("m") kernel/sched.c:149)
                    (asm_input:QI ("m") kernel/sched.c:149)
                    (asm_input:QI ("m") kernel/sched.c:149)
                    (asm_input:QI ("m") kernel/sched.c:149)
                    (asm_input:QI ("m") kernel/sched.c:149)
                    (asm_input:QI ("m") kernel/sched.c:149)
                ]
                 [] kernel/sched.c:149)
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":149:5 -1
     (nil))
(insn 157 33 34 2 (set (reg:SI 0 ax [82])
        (mem/c:SI (reg/f:SI 7 sp) [25 %sfp+-28 S4 A32])) "kernel/sched.c":150:7 75 {*movsi_internal}
     (nil))
(insn 34 157 35 2 (set (reg:SI 0 ax [119])
        (mem/u/c:SI (plus:SI (reg:SI 0 ax [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("gdt") [flags 0x40]  <var_decl 0x731e03ddfc60 gdt>)
                        ] UNSPEC_GOT))) [24  S4 A8])) "kernel/sched.c":150:7 75 {*movsi_internal}
     (nil))
(insn 35 34 36 2 (set (reg/f:SI 0 ax [118])
        (plus:SI (reg:SI 0 ax [119])
            (const_int 48 [0x30]))) "kernel/sched.c":150:7 205 {*leasi}
     (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("gdt") [flags 0x40]  <var_decl 0x731e03ddfc60 gdt>)
                (const_int 48 [0x30])))
        (nil)))
(insn 36 35 37 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [23 p+0 S4 A32])
        (reg/f:SI 0 ax [118])) "kernel/sched.c":150:7 75 {*movsi_internal}
     (nil))
(insn 37 36 106 2 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [5 i+0 S4 A32])
        (const_int 1 [0x1])) "kernel/sched.c":153:12 75 {*movsi_internal}
     (nil))
(jump_insn 106 37 107 2 (set (pc)
        (label_ref 58)) "kernel/sched.c":153:5 807 {jump}
     (nil)
 -> 58)
(barrier 107 106 60)
(code_label 60 107 40 3 29 (nil) [1 uses])
(note 40 60 41 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 41 40 156 3 (set (reg:SI 0 ax [120])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [5 i+0 S4 A32])) "kernel/sched.c":154:17 75 {*movsi_internal}
     (nil))
(insn 156 41 42 3 (set (reg:SI 2 cx [82])
        (mem/c:SI (reg/f:SI 7 sp) [25 %sfp+-28 S4 A32])) "kernel/sched.c":154:17 75 {*movsi_internal}
     (nil))
(insn 42 156 43 3 (set (mem/f:SI (plus:SI (plus:SI (mult:SI (reg:SI 0 ax [120])
                        (const_int 4 [0x4]))
                    (reg:SI 2 cx [82]))
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("task") [flags 0x2]  <var_decl 0x731e0292e1b0 task>)
                        ] UNSPEC_GOTOFF))) [13 task[i_23]+0 S4 A32])
        (const_int 0 [0])) "kernel/sched.c":154:17 75 {*movsi_internal}
     (nil))
(insn 43 42 44 3 (set (reg/f:SI 0 ax [121])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [23 p+0 S4 A32])) "kernel/sched.c":155:21 75 {*movsi_internal}
     (nil))
(insn 44 43 45 3 (set (mem:SI (plus:SI (reg/f:SI 0 ax [121])
                (const_int 4 [0x4])) [2 p_24->b+0 S4 A32])
        (const_int 0 [0])) "kernel/sched.c":155:21 75 {*movsi_internal}
     (nil))
(insn 45 44 46 3 (set (reg/f:SI 0 ax [122])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [23 p+0 S4 A32])) "kernel/sched.c":155:17 75 {*movsi_internal}
     (nil))
(insn 46 45 47 3 (set (reg:SI 1 dx [orig:97 _15 ] [97])
        (mem:SI (plus:SI (reg/f:SI 0 ax [122])
                (const_int 4 [0x4])) [2 p_24->b+0 S4 A32])) "kernel/sched.c":155:17 75 {*movsi_internal}
     (nil))
(insn 47 46 48 3 (set (reg/f:SI 0 ax [123])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [23 p+0 S4 A32])) "kernel/sched.c":155:14 75 {*movsi_internal}
     (nil))
(insn 48 47 49 3 (set (mem:SI (reg/f:SI 0 ax [123]) [2 p_24->a+0 S4 A32])
        (reg:SI 1 dx [orig:97 _15 ] [97])) "kernel/sched.c":155:14 75 {*movsi_internal}
     (nil))
(insn 49 48 50 3 (parallel [
            (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 20 [0x14])) [23 p+0 S4 A32])
                (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 20 [0x14])) [23 p+0 S4 A32])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":156:10 209 {*addsi_1}
     (nil))
(insn 50 49 51 3 (set (reg/f:SI 0 ax [124])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [23 p+0 S4 A32])) "kernel/sched.c":157:21 75 {*movsi_internal}
     (nil))
(insn 51 50 52 3 (set (mem:SI (plus:SI (reg/f:SI 0 ax [124])
                (const_int 4 [0x4])) [2 p_35->b+0 S4 A32])
        (const_int 0 [0])) "kernel/sched.c":157:21 75 {*movsi_internal}
     (nil))
(insn 52 51 53 3 (set (reg/f:SI 0 ax [125])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [23 p+0 S4 A32])) "kernel/sched.c":157:17 75 {*movsi_internal}
     (nil))
(insn 53 52 54 3 (set (reg:SI 1 dx [orig:98 _16 ] [98])
        (mem:SI (plus:SI (reg/f:SI 0 ax [125])
                (const_int 4 [0x4])) [2 p_35->b+0 S4 A32])) "kernel/sched.c":157:17 75 {*movsi_internal}
     (nil))
(insn 54 53 55 3 (set (reg/f:SI 0 ax [126])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [23 p+0 S4 A32])) "kernel/sched.c":157:14 75 {*movsi_internal}
     (nil))
(insn 55 54 56 3 (set (mem:SI (reg/f:SI 0 ax [126]) [2 p_35->a+0 S4 A32])
        (reg:SI 1 dx [orig:98 _16 ] [98])) "kernel/sched.c":157:14 75 {*movsi_internal}
     (nil))
(insn 56 55 57 3 (parallel [
            (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 20 [0x14])) [23 p+0 S4 A32])
                (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 20 [0x14])) [23 p+0 S4 A32])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":158:10 209 {*addsi_1}
     (nil))
(insn 57 56 58 3 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 24 [0x18])) [5 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 24 [0x18])) [5 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":153:32 209 {*addsi_1}
     (nil))
(code_label 58 57 59 4 28 (nil) [1 uses])
(note 59 58 63 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 63 59 64 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 24 [0x18])) [5 i+0 S4 A32])
            (const_int 63 [0x3f]))) "kernel/sched.c":153:19 11 {*cmpsi_1}
     (nil))
(jump_insn 64 63 65 4 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 60)
            (pc))) "kernel/sched.c":153:19 806 {*jcc}
     (nil)
 -> 60)
(note 65 64 66 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 66 65 67 5 (parallel [
            (asm_input/v ("pushfl ; andl $0xffffbfff, (%esp) ; popfl") kernel/sched.c:166)
            (clobber (mem:BLK (scratch) [0  A8]))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":166:5 -1
     (nil))
(insn 67 66 68 5 (set (reg:SI 0 ax [127])
        (const_int 32 [0x20])) "kernel/sched.c":168:5 75 {*movsi_internal}
     (nil))
(insn 68 67 69 5 (parallel [
            (asm_operands/v ("ltr %%ax") ("") 0 [
                    (reg:SI 0 ax [127])
                ]
                 [
                    (asm_input:SI ("a") kernel/sched.c:168)
                ]
                 [] kernel/sched.c:168)
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":168:5 -1
     (nil))
(insn 69 68 70 5 (set (reg:SI 0 ax [128])
        (const_int 40 [0x28])) "kernel/sched.c":169:5 75 {*movsi_internal}
     (nil))
(insn 70 69 71 5 (parallel [
            (asm_operands/v ("lldt %%ax") ("") 0 [
                    (reg:SI 0 ax [128])
                ]
                 [
                    (asm_input:SI ("a") kernel/sched.c:169)
                ]
                 [] kernel/sched.c:169)
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":169:5 -1
     (nil))
(insn 71 70 72 5 (set (reg:SI 0 ax [129])
        (const_int 54 [0x36])) "kernel/sched.c":173:5 75 {*movsi_internal}
     (nil))
(insn 72 71 73 5 (set (reg:SI 1 dx [130])
        (const_int 67 [0x43])) "kernel/sched.c":173:5 75 {*movsi_internal}
     (nil))
(insn 73 72 74 5 (parallel [
            (asm_operands/v ("outb %%al, %%dx
	jmp 1f
1:	jmp 1f
1:") ("") 0 [
                    (reg:SI 0 ax [129])
                    (reg:SI 1 dx [130])
                ]
                 [
                    (asm_input:SI ("a") kernel/sched.c:173)
                    (asm_input:SI ("d") kernel/sched.c:173)
                ]
                 [] kernel/sched.c:173)
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":173:5 -1
     (nil))
(insn 74 73 75 5 (set (reg:SI 0 ax [131])
        (const_int 155 [0x9b])) "kernel/sched.c":174:5 75 {*movsi_internal}
     (nil))
(insn 75 74 76 5 (set (reg:SI 1 dx [132])
        (const_int 64 [0x40])) "kernel/sched.c":174:5 75 {*movsi_internal}
     (nil))
(insn 76 75 77 5 (parallel [
            (asm_operands/v ("outb %%al, %%dx
	jmp 1f
1:	jmp 1f
1:") ("") 0 [
                    (reg:SI 0 ax [131])
                    (reg:SI 1 dx [132])
                ]
                 [
                    (asm_input:SI ("a") kernel/sched.c:174)
                    (asm_input:SI ("d") kernel/sched.c:174)
                ]
                 [] kernel/sched.c:174)
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":174:5 -1
     (nil))
(insn 77 76 78 5 (set (reg:SI 0 ax [133])
        (const_int 46 [0x2e])) "kernel/sched.c":175:5 75 {*movsi_internal}
     (nil))
(insn 78 77 79 5 (set (reg:SI 1 dx [134])
        (const_int 64 [0x40])) "kernel/sched.c":175:5 75 {*movsi_internal}
     (nil))
(insn 79 78 155 5 (parallel [
            (asm_operands/v ("outb %%al, %%dx") ("") 0 [
                    (reg:SI 0 ax [133])
                    (reg:SI 1 dx [134])
                ]
                 [
                    (asm_input:SI ("a") kernel/sched.c:175)
                    (asm_input:SI ("d") kernel/sched.c:175)
                ]
                 [] kernel/sched.c:175)
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":175:5 -1
     (nil))
(insn 155 79 80 5 (set (reg:SI 0 ax [82])
        (mem/c:SI (reg/f:SI 7 sp) [25 %sfp+-28 S4 A32])) "kernel/sched.c":177:5 75 {*movsi_internal}
     (nil))
(insn 80 155 81 5 (set (reg:SI 0 ax [135])
        (mem/u/c:SI (plus:SI (reg:SI 0 ax [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("idt") [flags 0x40]  <var_decl 0x731e03ddfbd0 idt>)
                        ] UNSPEC_GOT))) [24  S4 A8])) "kernel/sched.c":177:5 75 {*movsi_internal}
     (nil))
(insn 81 80 154 5 (set (reg/f:SI 3 bx [orig:99 _17 ] [99])
        (plus:SI (reg:SI 0 ax [135])
            (const_int 256 [0x100]))) "kernel/sched.c":177:5 205 {*leasi}
     (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("idt") [flags 0x40]  <var_decl 0x731e03ddfbd0 idt>)
                (const_int 256 [0x100])))
        (nil)))
(insn 154 81 82 5 (set (reg:SI 0 ax [82])
        (mem/c:SI (reg/f:SI 7 sp) [25 %sfp+-28 S4 A32])) "kernel/sched.c":177:5 75 {*movsi_internal}
     (nil))
(insn 82 154 83 5 (set (reg:SI 0 ax [136])
        (mem/u/c:SI (plus:SI (reg:SI 0 ax [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("idt") [flags 0x40]  <var_decl 0x731e03ddfbd0 idt>)
                        ] UNSPEC_GOT))) [24  S4 A8])) "kernel/sched.c":177:5 75 {*movsi_internal}
     (nil))
(insn 83 82 153 5 (set (reg/f:SI 4 si [orig:100 _18 ] [100])
        (plus:SI (reg:SI 0 ax [136])
            (const_int 260 [0x104]))) "kernel/sched.c":177:5 205 {*leasi}
     (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("idt") [flags 0x40]  <var_decl 0x731e03ddfbd0 idt>)
                (const_int 260 [0x104])))
        (nil)))
(insn 153 83 84 5 (set (reg:SI 0 ax [82])
        (mem/c:SI (reg/f:SI 7 sp) [25 %sfp+-28 S4 A32])) "kernel/sched.c":177:5 75 {*movsi_internal}
     (nil))
(insn 84 153 85 5 (set (reg:SI 0 ax [138])
        (mem/u/c:SI (plus:SI (reg:SI 0 ax [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("timer_interrupt") [flags 0x41]  <function_decl 0x731e02944c00 timer_interrupt>)
                        ] UNSPEC_GOT))) [24  S4 A8])) "kernel/sched.c":177:5 75 {*movsi_internal}
     (nil))
(insn 85 84 86 5 (set (reg/f:SI 1 dx [137])
        (reg:SI 0 ax [138])) "kernel/sched.c":177:5 75 {*movsi_internal}
     (expr_list:REG_EQUAL (symbol_ref:SI ("timer_interrupt") [flags 0x41]  <function_decl 0x731e02944c00 timer_interrupt>)
        (nil)))
(insn 86 85 87 5 (set (reg:SI 0 ax [139])
        (const_int 524288 [0x80000])) "kernel/sched.c":177:5 75 {*movsi_internal}
     (nil))
(insn 87 86 89 5 (parallel [
            (asm_operands/v ("movw %%dx, %%ax
	movw %0, %%dx
	movl %%eax, %1
	movl %%edx, %2") ("") 0 [
                    (const_int -29184 [0xffffffffffff8e00])
                    (mem:QI (reg/f:SI 3 bx [orig:99 _17 ] [99]) [0 MEM[(char *)_17]+0 S1 A8])
                    (mem:QI (reg/f:SI 4 si [orig:100 _18 ] [100]) [0 *_18+0 S1 A8])
                    (reg/f:SI 1 dx [137])
                    (reg:SI 0 ax [139])
                ]
                 [
                    (asm_input:HI ("i") kernel/sched.c:177)
                    (asm_input:QI ("o") kernel/sched.c:177)
                    (asm_input:QI ("o") kernel/sched.c:177)
                    (asm_input:SI ("d") kernel/sched.c:177)
                    (asm_input:SI ("a") kernel/sched.c:177)
                ]
                 [] kernel/sched.c:177)
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":177:5 -1
     (nil))
(insn 89 87 122 5 (set (reg:SI 0 ax [141])
        (const_int 33 [0x21])) "kernel/sched.c":178:5 75 {*movsi_internal}
     (nil))
(insn 122 89 90 5 (set (reg:SI 1 dx [141])
        (reg:SI 0 ax [141])) "kernel/sched.c":178:5 75 {*movsi_internal}
     (nil))
(insn 90 122 88 5 (parallel [
            (set (reg:QI 0 ax [orig:140 _v ] [140])
                (asm_operands/v:QI ("inb %%dx, %%al
	jmp 1f
1:	jmp 1f
1:") ("=a") 0 [
                        (reg:SI 1 dx [141])
                    ]
                     [
                        (asm_input:SI ("d") kernel/sched.c:178)
                    ]
                     [] kernel/sched.c:178))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":178:5 -1
     (nil))
(insn 88 90 91 5 (set (mem/c:QI (plus:SI (reg/f:SI 7 sp)
                (const_int 19 [0x13])) [0 _v+0 S1 A8])
        (reg:QI 0 ax [orig:140 _v ] [140])) "kernel/sched.c":178:5 77 {*movqi_internal}
     (nil))
(insn 91 88 92 5 (set (reg:QI 0 ax [orig:105 _31 ] [105])
        (mem/c:QI (plus:SI (reg/f:SI 7 sp)
                (const_int 19 [0x13])) [0 _v+0 S1 A8])) "kernel/sched.c":178:5 77 {*movqi_internal}
     (nil))
(insn 92 91 93 5 (set (reg:SI 0 ax [orig:101 _19 ] [101])
        (zero_extend:SI (reg:QI 0 ax [orig:105 _31 ] [105]))) "kernel/sched.c":178:5 143 {*zero_extendqisi2}
     (nil))
(insn 93 92 94 5 (parallel [
            (set (reg:SI 0 ax [orig:102 _20 ] [102])
                (and:SI (reg:SI 0 ax [orig:101 _19 ] [101])
                    (const_int -2 [0xfffffffffffffffe])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":178:5 490 {*andsi_1}
     (nil))
(insn 94 93 95 5 (set (reg:SI 1 dx [142])
        (const_int 33 [0x21])) "kernel/sched.c":178:5 75 {*movsi_internal}
     (nil))
(insn 95 94 152 5 (parallel [
            (asm_operands/v ("outb %%al, %%dx") ("") 0 [
                    (reg:SI 0 ax [orig:102 _20 ] [102])
                    (reg:SI 1 dx [142])
                ]
                 [
                    (asm_input:SI ("a") kernel/sched.c:178)
                    (asm_input:SI ("d") kernel/sched.c:178)
                ]
                 [] kernel/sched.c:178)
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":178:5 -1
     (nil))
(insn 152 95 96 5 (set (reg:SI 0 ax [82])
        (mem/c:SI (reg/f:SI 7 sp) [25 %sfp+-28 S4 A32])) "kernel/sched.c":179:5 75 {*movsi_internal}
     (nil))
(insn 96 152 97 5 (set (reg:SI 0 ax [143])
        (mem/u/c:SI (plus:SI (reg:SI 0 ax [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("idt") [flags 0x40]  <var_decl 0x731e03ddfbd0 idt>)
                        ] UNSPEC_GOT))) [24  S4 A8])) "kernel/sched.c":179:5 75 {*movsi_internal}
     (nil))
(insn 97 96 151 5 (set (reg/f:SI 3 bx [orig:103 _21 ] [103])
        (plus:SI (reg:SI 0 ax [143])
            (const_int 1024 [0x400]))) "kernel/sched.c":179:5 205 {*leasi}
     (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("idt") [flags 0x40]  <var_decl 0x731e03ddfbd0 idt>)
                (const_int 1024 [0x400])))
        (nil)))
(insn 151 97 98 5 (set (reg:SI 0 ax [82])
        (mem/c:SI (reg/f:SI 7 sp) [25 %sfp+-28 S4 A32])) "kernel/sched.c":179:5 75 {*movsi_internal}
     (nil))
(insn 98 151 99 5 (set (reg:SI 0 ax [144])
        (mem/u/c:SI (plus:SI (reg:SI 0 ax [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("idt") [flags 0x40]  <var_decl 0x731e03ddfbd0 idt>)
                        ] UNSPEC_GOT))) [24  S4 A8])) "kernel/sched.c":179:5 75 {*movsi_internal}
     (nil))
(insn 99 98 150 5 (set (reg/f:SI 4 si [orig:104 _22 ] [104])
        (plus:SI (reg:SI 0 ax [144])
            (const_int 1028 [0x404]))) "kernel/sched.c":179:5 205 {*leasi}
     (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("idt") [flags 0x40]  <var_decl 0x731e03ddfbd0 idt>)
                (const_int 1028 [0x404])))
        (nil)))
(insn 150 99 100 5 (set (reg:SI 0 ax [82])
        (mem/c:SI (reg/f:SI 7 sp) [25 %sfp+-28 S4 A32])) "kernel/sched.c":179:5 75 {*movsi_internal}
     (nil))
(insn 100 150 101 5 (set (reg:SI 0 ax [146])
        (mem/u/c:SI (plus:SI (reg:SI 0 ax [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("system_call") [flags 0x41]  <function_decl 0x731e02944d00 system_call>)
                        ] UNSPEC_GOT))) [24  S4 A8])) "kernel/sched.c":179:5 75 {*movsi_internal}
     (nil))
(insn 101 100 102 5 (set (reg/f:SI 1 dx [145])
        (reg:SI 0 ax [146])) "kernel/sched.c":179:5 75 {*movsi_internal}
     (expr_list:REG_EQUAL (symbol_ref:SI ("system_call") [flags 0x41]  <function_decl 0x731e02944d00 system_call>)
        (nil)))
(insn 102 101 103 5 (set (reg:SI 0 ax [147])
        (const_int 524288 [0x80000])) "kernel/sched.c":179:5 75 {*movsi_internal}
     (nil))
(insn 103 102 108 5 (parallel [
            (asm_operands/v ("movw %%dx, %%ax
	movw %0, %%dx
	movl %%eax, %1
	movl %%edx, %2") ("") 0 [
                    (const_int -4352 [0xffffffffffffef00])
                    (mem:QI (reg/f:SI 3 bx [orig:103 _21 ] [103]) [0 MEM[(char *)_21]+0 S1 A8])
                    (mem:QI (reg/f:SI 4 si [orig:104 _22 ] [104]) [0 *_22+0 S1 A8])
                    (reg/f:SI 1 dx [145])
                    (reg:SI 0 ax [147])
                ]
                 [
                    (asm_input:HI ("i") kernel/sched.c:179)
                    (asm_input:QI ("o") kernel/sched.c:179)
                    (asm_input:QI ("o") kernel/sched.c:179)
                    (asm_input:SI ("d") kernel/sched.c:179)
                    (asm_input:SI ("a") kernel/sched.c:179)
                ]
                 [] kernel/sched.c:179)
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":179:5 -1
     (nil))
(note 108 103 109 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 109 108 111 6 (const_int 0 [0]) "kernel/sched.c":180:1 843 {nop}
     (nil))
(note 111 109 0 NOTE_INSN_DELETED)

;; Function add_timer (add_timer, funcdef_no=5, decl_uid=1305, cgraph_uid=6, symbol_order=16)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 147:  (0) =r {*set_got}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 5:  (0) ?mr {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 15:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) lBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =r  (1) Ts {*leasi}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 25:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 38:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) Ts {*leasi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =r  (1) Ts {*leasi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 51:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =r  (1) Ts {*leasi} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 56:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 61:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 64:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 67:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 69:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) =rm  (1) 0  (2) re {*subsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 80:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 83:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 88:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 92:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 95:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 97:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 100:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 104:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 106:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 107:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 115:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 116:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 117:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 118:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 119:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 121:  (0) rm  (1) re {*cmpsi_1}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2 3 4
EBB 5
EBB 6 7
EBB 8 18
EBB 19
EBB 9 10
EBB 11
EBB 12
EBB 13 14
EBB 15
EBB 17
EBB 16

********** Pseudo live ranges #1: **********

  BB 16
  BB 15
   Insn 136: point = 0, n_alt = -1
   Insn 125: point = 0, n_alt = -1
  BB 4
   Insn 130: point = 0, n_alt = -1
   Insn 19: point = 0, n_alt = 0
   Insn 18: point = 1, n_alt = 0
  BB 14
   Insn 122: point = 2, n_alt = -1
   Insn 121: point = 2, n_alt = 0
   Insn 119: point = 3, n_alt = 0
   Insn 118: point = 5, n_alt = 0
   Insn 117: point = 6, n_alt = 0
   Insn 116: point = 8, n_alt = 0
   Insn 115: point = 10, n_alt = 0
  BB 13
   Insn 113: point = 11, n_alt = -1
   Insn 112: point = 11, n_alt = 0
   Insn 111: point = 12, n_alt = 0
   Insn 110: point = 14, n_alt = 0
  BB 11
   Insn 134: point = 15, n_alt = -1
   Insn 69: point = 15, n_alt = 1
   Insn 68: point = 16, n_alt = 0
   Insn 67: point = 17, n_alt = 1
   Insn 66: point = 18, n_alt = 0
   Insn 65: point = 19, n_alt = 0
   Insn 64: point = 20, n_alt = 1
   Insn 63: point = 21, n_alt = 0
   Insn 62: point = 22, n_alt = 0
   Insn 61: point = 23, n_alt = 1
   Insn 60: point = 24, n_alt = 0
   Insn 59: point = 25, n_alt = 0
  BB 10
   Insn 56: point = 27, n_alt = 0
   Insn 55: point = 27, n_alt = 0
   Insn 54: point = 27, n_alt = -2
   Insn 53: point = 27, n_alt = 0
   Insn 52: point = 28, n_alt = 0
   Insn 51: point = 29, n_alt = 0
  BB 9
   Insn 49: point = 30, n_alt = -1
   Insn 48: point = 30, n_alt = 0
   Insn 47: point = 31, n_alt = 0
  BB 18
   Insn 142: point = 33, n_alt = -1
  BB 19
   Insn 146: point = 34, n_alt = -1
  BB 6
   Insn 32: point = 35, n_alt = -1
   Insn 31: point = 35, n_alt = 0
   Insn 30: point = 36, n_alt = 0
   Insn 29: point = 38, n_alt = 0
  BB 8
   Insn 44: point = 40, n_alt = -1
   Insn 43: point = 40, n_alt = 0
   Insn 41: point = 41, n_alt = 0
  BB 5
   Insn 132: point = 43, n_alt = -1
   Insn 25: point = 43, n_alt = 1
   Insn 24: point = 44, n_alt = 0
  BB 3
   Insn 16: point = 46, n_alt = -1
   Insn 15: point = 46, n_alt = 1
   Insn 12: point = 46, n_alt = -1
  BB 7
   Insn 38: point = 47, n_alt = 0
  BB 12
   Insn 107: point = 48, n_alt = 1
   Insn 106: point = 49, n_alt = 0
   Insn 105: point = 51, n_alt = 0
   Insn 104: point = 52, n_alt = 1
   Insn 103: point = 53, n_alt = 0
   Insn 102: point = 54, n_alt = 0
   Insn 101: point = 56, n_alt = 0
   Insn 100: point = 57, n_alt = 1
   Insn 99: point = 58, n_alt = 0
   Insn 98: point = 59, n_alt = 0
   Insn 97: point = 61, n_alt = 0
   Insn 96: point = 63, n_alt = 0
   Insn 95: point = 64, n_alt = 1
   Insn 94: point = 65, n_alt = 0
   Insn 93: point = 67, n_alt = 0
   Insn 92: point = 68, n_alt = 1
   Insn 91: point = 69, n_alt = 0
   Insn 90: point = 70, n_alt = 0
   Insn 89: point = 72, n_alt = 0
   Insn 88: point = 73, n_alt = 1
   Insn 87: point = 74, n_alt = 0
   Insn 86: point = 75, n_alt = 0
   Insn 85: point = 77, n_alt = 0
   Insn 84: point = 79, n_alt = 0
   Insn 83: point = 80, n_alt = 1
   Insn 82: point = 81, n_alt = 0
   Insn 81: point = 83, n_alt = 0
   Insn 80: point = 84, n_alt = 1
   Insn 79: point = 85, n_alt = 0
   Insn 78: point = 86, n_alt = 0
   Insn 77: point = 88, n_alt = 0
   Insn 76: point = 90, n_alt = 0
   Insn 75: point = 92, n_alt = 0
   Insn 74: point = 93, n_alt = 0
   Insn 73: point = 95, n_alt = 0
  BB 17
   Insn 140: point = 96, n_alt = -1
  BB 2
   Insn 6: point = 96, n_alt = -1
   Insn 5: point = 96, n_alt = 1
   Insn 147: point = 96, n_alt = 0
 r82: [96..96] [15..47]
 r83: [35..36]
 r84: [40..41]
 r85: [30..31]
 r86: [17..19]
 r87: [87..93]
 r88: [89..90]
 r89: [87..88]
 r90: [84..86]
 r91: [76..77]
 r92: [73..75]
 r93: [68..70]
 r94: [60..61]
 r95: [57..59]
 r96: [52..54]
 r97: [11..12]
 r98: [7..8]
 r99: [2..6]
 r100: [2..3]
 r101: [0..1]
 r102: [43..44]
 r103: [37..38]
 r104: [27..28]
 r105: [23..25]
 r106: [23..24]
 r107: [20..22]
 r108: [20..21]
 r109: [17..18]
 r110: [15..16]
 r111: [94..95]
 r112: [91..92]
 r113: [84..85]
 r114: [82..83]
 r115: [80..81]
 r116: [78..79]
 r117: [73..74]
 r118: [71..72]
 r119: [68..69]
 r120: [66..67]
 r121: [64..65]
 r122: [62..63]
 r123: [57..58]
 r124: [55..56]
 r125: [52..53]
 r126: [50..51]
 r127: [48..49]
 r128: [13..14]
 r129: [9..10]
 r130: [4..5]
Compressing live ranges: from 97 to 77 - 79%
Ranges after the compression:
 r82: [76..76] [14..33]
 r83: [26..27]
 r84: [30..31]
 r85: [24..25]
 r86: [16..17]
 r87: [68..73]
 r88: [70..71]
 r89: [68..69]
 r90: [66..67]
 r91: [58..59]
 r92: [56..57]
 r93: [52..53]
 r94: [44..45]
 r95: [42..43]
 r96: [38..39]
 r97: [10..11]
 r98: [6..7]
 r99: [2..5]
 r100: [2..3]
 r101: [0..1]
 r102: [32..33]
 r103: [28..29]
 r104: [22..23]
 r105: [20..21]
 r106: [20..21]
 r107: [18..19]
 r108: [18..19]
 r109: [16..17]
 r110: [14..15]
 r111: [74..75]
 r112: [72..73]
 r113: [66..67]
 r114: [64..65]
 r115: [62..63]
 r116: [60..61]
 r117: [56..57]
 r118: [54..55]
 r119: [52..53]
 r120: [50..51]
 r121: [48..49]
 r122: [46..47]
 r123: [42..43]
 r124: [40..41]
 r125: [38..39]
 r126: [36..37]
 r127: [34..35]
 r128: [12..13]
 r129: [8..9]
 r130: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=32)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=16)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
changing reg in insn 147
changing reg in insn 69
changing reg in insn 65
changing reg in insn 54
changing reg in insn 52
changing reg in insn 47
changing reg in insn 41
changing reg in insn 24
changing reg in insn 30
changing reg in insn 31
changing reg in insn 41
changing reg in insn 43
changing reg in insn 47
changing reg in insn 48
changing reg in insn 65
changing reg in insn 67
changing reg in insn 74
changing reg in insn 78
changing reg in insn 76
changing reg in insn 77
changing reg in insn 77
changing reg in insn 78
changing reg in insn 78
changing reg in insn 80
changing reg in insn 85
changing reg in insn 86
changing reg in insn 86
changing reg in insn 88
changing reg in insn 90
changing reg in insn 92
changing reg in insn 97
changing reg in insn 98
changing reg in insn 98
changing reg in insn 100
changing reg in insn 102
changing reg in insn 104
changing reg in insn 111
changing reg in insn 112
changing reg in insn 116
changing reg in insn 117
changing reg in insn 117
changing reg in insn 121
changing reg in insn 119
changing reg in insn 121
changing reg in insn 18
changing reg in insn 19
changing reg in insn 24
changing reg in insn 25
changing reg in insn 29
changing reg in insn 30
changing reg in insn 52
changing reg in insn 53
changing reg in insn 59
changing reg in insn 61
changing reg in insn 60
changing reg in insn 61
changing reg in insn 62
changing reg in insn 64
changing reg in insn 63
changing reg in insn 64
changing reg in insn 66
changing reg in insn 67
changing reg in insn 68
changing reg in insn 69
changing reg in insn 73
changing reg in insn 74
changing reg in insn 75
changing reg in insn 76
changing reg in insn 79
changing reg in insn 80
changing reg in insn 81
changing reg in insn 82
changing reg in insn 82
changing reg in insn 83
changing reg in insn 84
changing reg in insn 85
changing reg in insn 87
changing reg in insn 88
changing reg in insn 89
changing reg in insn 90
changing reg in insn 91
changing reg in insn 92
changing reg in insn 93
changing reg in insn 94
changing reg in insn 94
changing reg in insn 95
changing reg in insn 96
changing reg in insn 97
changing reg in insn 99
changing reg in insn 100
changing reg in insn 101
changing reg in insn 102
changing reg in insn 103
changing reg in insn 104
changing reg in insn 105
changing reg in insn 106
changing reg in insn 106
changing reg in insn 107
changing reg in insn 110
changing reg in insn 111
changing reg in insn 115
changing reg in insn 116
changing reg in insn 118
changing reg in insn 119
deleting insn with uid = 54.
starting the processing of deferred insns
ending the processing of deferred insns
rescanning insn with uid = 19.
verify found no changes in insn with uid = 55.


add_timer

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 17 [flags]
;;  ref usage 	r0={41d,38u} r1={13d,10u} r2={3d} r3={1d,7u} r7={4d,61u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={16d,7u} r18={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} 
;;    total ref usage 331{208d,123u,0e} in 91{89 regular + 2 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 147 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 147 3 2 2 (parallel [
            (set (reg:SI 3 bx [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 147 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 36 [0x24])) [6 fn+0 S4 A32])
            (const_int 0 [0]))) "kernel/sched.c":194:5 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 6 5 11 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 139)
            (pc))) "kernel/sched.c":194:5 806 {*jcc}
     (nil)
 -> 139)
(note 11 6 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 12 11 15 3 (parallel [
            (asm_operands/v ("cli") ("") 0 []
                 []
                 [] kernel/sched.c:196)
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":196:2 -1
     (nil))
(insn 15 12 16 3 (set (reg:CCNO 17 flags)
        (compare:CCNO (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 32 [0x20])) [2 jiffies+0 S4 A32])
            (const_int 0 [0]))) "kernel/sched.c":197:5 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 16 15 17 3 (set (pc)
        (if_then_else (gt (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 22)
            (pc))) "kernel/sched.c":197:5 806 {*jcc}
     (nil)
 -> 22)
(note 17 16 18 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 4 (set (reg/f:SI 0 ax [101])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 36 [0x24])) [6 fn+0 S4 A32])) "kernel/sched.c":198:3 75 {*movsi_internal}
     (nil))
(call_insn 19 18 130 4 (call (mem:QI (reg/f:SI 0 ax [101]) [0 *fn_25(D) S1 A8])
        (const_int 0 [0])) "kernel/sched.c":198:3 812 {*call}
     (nil)
    (nil))
(jump_insn 130 19 131 4 (set (pc)
        (label_ref 123)) 807 {jump}
     (nil)
 -> 123)
(barrier 131 130 22)
(code_label 22 131 23 5 33 (nil) [1 uses])
(note 23 22 24 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 25 5 (set (reg/f:SI 0 ax [102])
        (plus:SI (reg:SI 3 bx [82])
            (const:SI (unspec:SI [
                        (symbol_ref:SI ("timer_list") [flags 0x2]  <var_decl 0x731e0292ed80 timer_list>)
                    ] UNSPEC_GOTOFF)))) "kernel/sched.c":200:10 205 {*leasi}
     (expr_list:REG_EQUAL (symbol_ref:SI ("timer_list") [flags 0x2]  <var_decl 0x731e0292ed80 timer_list>)
        (nil)))
(insn 25 24 132 5 (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [14 p+0 S4 A32])
        (reg/f:SI 0 ax [102])) "kernel/sched.c":200:10 75 {*movsi_internal}
     (nil))
(jump_insn 132 25 133 5 (set (pc)
        (label_ref 39)) "kernel/sched.c":200:3 807 {jump}
     (nil)
 -> 39)
(barrier 133 132 42)
(code_label 42 133 28 6 38 (nil) [1 uses])
(note 28 42 29 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 30 6 (set (reg/f:SI 0 ax [103])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [14 p+0 S4 A32])) "kernel/sched.c":201:10 75 {*movsi_internal}
     (nil))
(insn 30 29 31 6 (set (reg/f:SI 0 ax [orig:83 _1 ] [83])
        (mem/f:SI (plus:SI (reg/f:SI 0 ax [103])
                (const_int 4 [0x4])) [6 p_19->fn+0 S4 A32])) "kernel/sched.c":201:10 75 {*movsi_internal}
     (nil))
(insn 31 30 32 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:SI 0 ax [orig:83 _1 ] [83])
            (const_int 0 [0]))) "kernel/sched.c":201:7 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 32 31 37 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 145)
            (pc))) "kernel/sched.c":201:7 806 {*jcc}
     (nil)
 -> 145)
(note 37 32 38 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 38 37 39 7 (parallel [
            (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 12 [0xc])) [14 p+0 S4 A32])
                (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 12 [0xc])) [14 p+0 S4 A32])
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":200:57 209 {*addsi_1}
     (nil))
(code_label 39 38 40 8 35 (nil) [1 uses])
(note 40 39 41 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 41 40 43 8 (set (reg/f:SI 0 ax [orig:84 _2 ] [84])
        (plus:SI (reg:SI 3 bx [82])
            (const:SI (plus:SI (unspec:SI [
                            (symbol_ref:SI ("timer_list") [flags 0x2]  <var_decl 0x731e0292ed80 timer_list>)
                        ] UNSPEC_GOTOFF)
                    (const_int 768 [0x300]))))) "kernel/sched.c":200:39 205 {*leasi}
     (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("timer_list") [flags 0x2]  <var_decl 0x731e0292ed80 timer_list>)
                (const_int 768 [0x300])))
        (nil)))
(insn 43 41 44 8 (set (reg:CC 17 flags)
        (compare:CC (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 12 [0xc])) [14 p+0 S4 A32])
            (reg/f:SI 0 ax [orig:84 _2 ] [84]))) "kernel/sched.c":200:26 11 {*cmpsi_1}
     (nil))
(jump_insn 44 43 141 8 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 42)
            (pc))) "kernel/sched.c":200:26 806 {*jcc}
     (nil)
 -> 42)
(note 141 44 142 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(jump_insn 142 141 143 18 (set (pc)
        (label_ref 45)) 807 {jump}
     (nil)
 -> 45)
(barrier 143 142 145)
(code_label 145 143 144 19 43 (nil) [1 uses])
(note 144 145 146 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 146 144 45 19 (const_int 0 [0]) "kernel/sched.c":202:5 843 {nop}
     (nil))
(code_label 45 146 46 9 37 (nil) [1 uses])
(note 46 45 47 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 47 46 48 9 (set (reg/f:SI 0 ax [orig:85 _3 ] [85])
        (plus:SI (reg:SI 3 bx [82])
            (const:SI (plus:SI (unspec:SI [
                            (symbol_ref:SI ("timer_list") [flags 0x2]  <var_decl 0x731e0292ed80 timer_list>)
                        ] UNSPEC_GOTOFF)
                    (const_int 768 [0x300]))))) "kernel/sched.c":203:23 205 {*leasi}
     (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("timer_list") [flags 0x2]  <var_decl 0x731e0292ed80 timer_list>)
                (const_int 768 [0x300])))
        (nil)))
(insn 48 47 49 9 (set (reg:CC 17 flags)
        (compare:CC (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 12 [0xc])) [14 p+0 S4 A32])
            (reg/f:SI 0 ax [orig:85 _3 ] [85]))) "kernel/sched.c":203:6 11 {*cmpsi_1}
     (nil))
(jump_insn 49 48 50 9 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 57)
            (pc))) "kernel/sched.c":203:6 806 {*jcc}
     (nil)
 -> 57)
(note 50 49 51 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 51 50 52 10 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":204:4 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 52 51 53 10 (set (reg/f:SI 0 ax [104])
        (plus:SI (reg:SI 3 bx [82])
            (const:SI (unspec:SI [
                        (symbol_ref/f:SI ("*.LC1") [flags 0x2]  <var_decl 0x731e029da870 *.LC1>)
                    ] UNSPEC_GOTOFF)))) "kernel/sched.c":204:4 205 {*leasi}
     (expr_list:REG_EQUAL (symbol_ref/f:SI ("*.LC1") [flags 0x2]  <var_decl 0x731e029da870 *.LC1>)
        (nil)))
(insn 53 52 55 10 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [22  S4 A32])
        (reg/f:SI 0 ax [104])) "kernel/sched.c":204:4 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 55 53 56 10 (call (mem:QI (symbol_ref:SI ("panic") [flags 0x41]  <function_decl 0x731e02938700 panic>) [0 panic S1 A8])
        (const_int 16 [0x10])) "kernel/sched.c":204:4 812 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 56 55 57 10 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":204:4 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(code_label 57 56 58 11 39 (nil) [1 uses])
(note 58 57 59 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 59 58 60 11 (set (reg/f:SI 0 ax [105])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [14 p+0 S4 A32])) "kernel/sched.c":205:9 75 {*movsi_internal}
     (nil))
(insn 60 59 61 11 (set (reg/f:SI 1 dx [106])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 36 [0x24])) [6 fn+0 S4 A32])) "kernel/sched.c":205:9 75 {*movsi_internal}
     (nil))
(insn 61 60 62 11 (set (mem/f:SI (plus:SI (reg/f:SI 0 ax [105])
                (const_int 4 [0x4])) [6 p_19->fn+0 S4 A32])
        (reg/f:SI 1 dx [106])) "kernel/sched.c":205:9 75 {*movsi_internal}
     (nil))
(insn 62 61 63 11 (set (reg/f:SI 0 ax [107])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [14 p+0 S4 A32])) "kernel/sched.c":206:14 75 {*movsi_internal}
     (nil))
(insn 63 62 64 11 (set (reg:SI 1 dx [108])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 32 [0x20])) [2 jiffies+0 S4 A32])) "kernel/sched.c":206:14 75 {*movsi_internal}
     (nil))
(insn 64 63 65 11 (set (mem:SI (reg/f:SI 0 ax [107]) [2 p_19->jiffies+0 S4 A32])
        (reg:SI 1 dx [108])) "kernel/sched.c":206:14 75 {*movsi_internal}
     (nil))
(insn 65 64 66 11 (set (reg/f:SI 1 dx [orig:86 next_timer.6_4 ] [86])
        (mem/f/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("next_timer") [flags 0x2]  <var_decl 0x731e02967000 next_timer>)
                        ] UNSPEC_GOTOFF))) [14 next_timer+0 S4 A32])) "kernel/sched.c":207:11 75 {*movsi_internal}
     (nil))
(insn 66 65 67 11 (set (reg/f:SI 0 ax [109])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [14 p+0 S4 A32])) "kernel/sched.c":207:11 75 {*movsi_internal}
     (nil))
(insn 67 66 68 11 (set (mem/f:SI (plus:SI (reg/f:SI 0 ax [109])
                (const_int 8 [0x8])) [14 p_19->next+0 S4 A32])
        (reg/f:SI 1 dx [orig:86 next_timer.6_4 ] [86])) "kernel/sched.c":207:11 75 {*movsi_internal}
     (nil))
(insn 68 67 69 11 (set (reg/f:SI 0 ax [110])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [14 p+0 S4 A32])) "kernel/sched.c":208:14 75 {*movsi_internal}
     (nil))
(insn 69 68 134 11 (set (mem/f/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("next_timer") [flags 0x2]  <var_decl 0x731e02967000 next_timer>)
                        ] UNSPEC_GOTOFF))) [14 next_timer+0 S4 A32])
        (reg/f:SI 0 ax [110])) "kernel/sched.c":208:14 75 {*movsi_internal}
     (nil))
(jump_insn 134 69 135 11 (set (pc)
        (label_ref 108)) "kernel/sched.c":210:9 807 {jump}
     (nil)
 -> 108)
(barrier 135 134 120)
(code_label 120 135 72 12 41 (nil) [1 uses])
(note 72 120 73 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 73 72 74 12 (set (reg/f:SI 0 ax [111])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [14 p+0 S4 A32])) "kernel/sched.c":211:15 75 {*movsi_internal}
     (nil))
(insn 74 73 75 12 (set (reg:SI 1 dx [orig:87 _5 ] [87])
        (mem:SI (reg/f:SI 0 ax [111]) [2 p_20->jiffies+0 S4 A32])) "kernel/sched.c":211:15 75 {*movsi_internal}
     (nil))
(insn 75 74 76 12 (set (reg/f:SI 0 ax [112])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [14 p+0 S4 A32])) "kernel/sched.c":211:19 75 {*movsi_internal}
     (nil))
(insn 76 75 77 12 (set (reg/f:SI 0 ax [orig:88 _6 ] [88])
        (mem/f:SI (plus:SI (reg/f:SI 0 ax [112])
                (const_int 8 [0x8])) [14 p_20->next+0 S4 A32])) "kernel/sched.c":211:19 75 {*movsi_internal}
     (nil))
(insn 77 76 78 12 (set (reg:SI 0 ax [orig:89 _7 ] [89])
        (mem:SI (reg/f:SI 0 ax [orig:88 _6 ] [88]) [2 _6->jiffies+0 S4 A32])) "kernel/sched.c":211:25 75 {*movsi_internal}
     (nil))
(insn 78 77 79 12 (parallel [
            (set (reg:SI 1 dx [orig:90 _8 ] [90])
                (minus:SI (reg:SI 1 dx [orig:87 _5 ] [87])
                    (reg:SI 0 ax [orig:89 _7 ] [89])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":211:15 282 {*subsi_1}
     (nil))
(insn 79 78 80 12 (set (reg/f:SI 0 ax [113])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [14 p+0 S4 A32])) "kernel/sched.c":211:15 75 {*movsi_internal}
     (nil))
(insn 80 79 81 12 (set (mem:SI (reg/f:SI 0 ax [113]) [2 p_20->jiffies+0 S4 A32])
        (reg:SI 1 dx [orig:90 _8 ] [90])) "kernel/sched.c":211:15 75 {*movsi_internal}
     (nil))
(insn 81 80 82 12 (set (reg/f:SI 0 ax [114])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [14 p+0 S4 A32])) "kernel/sched.c":212:7 75 {*movsi_internal}
     (nil))
(insn 82 81 83 12 (set (reg/f:SI 0 ax [115])
        (mem/f:SI (plus:SI (reg/f:SI 0 ax [114])
                (const_int 4 [0x4])) [6 p_20->fn+0 S4 A32])) "kernel/sched.c":212:7 75 {*movsi_internal}
     (nil))
(insn 83 82 84 12 (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 36 [0x24])) [6 fn+0 S4 A32])
        (reg/f:SI 0 ax [115])) "kernel/sched.c":212:7 75 {*movsi_internal}
     (nil))
(insn 84 83 85 12 (set (reg/f:SI 0 ax [116])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [14 p+0 S4 A32])) "kernel/sched.c":213:13 75 {*movsi_internal}
     (nil))
(insn 85 84 86 12 (set (reg/f:SI 0 ax [orig:91 _9 ] [91])
        (mem/f:SI (plus:SI (reg/f:SI 0 ax [116])
                (const_int 8 [0x8])) [14 p_20->next+0 S4 A32])) "kernel/sched.c":213:13 75 {*movsi_internal}
     (nil))
(insn 86 85 87 12 (set (reg/f:SI 1 dx [orig:92 _10 ] [92])
        (mem/f:SI (plus:SI (reg/f:SI 0 ax [orig:91 _9 ] [91])
                (const_int 4 [0x4])) [6 _9->fn+0 S4 A32])) "kernel/sched.c":213:19 75 {*movsi_internal}
     (nil))
(insn 87 86 88 12 (set (reg/f:SI 0 ax [117])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [14 p+0 S4 A32])) "kernel/sched.c":213:10 75 {*movsi_internal}
     (nil))
(insn 88 87 89 12 (set (mem/f:SI (plus:SI (reg/f:SI 0 ax [117])
                (const_int 4 [0x4])) [6 p_20->fn+0 S4 A32])
        (reg/f:SI 1 dx [orig:92 _10 ] [92])) "kernel/sched.c":213:10 75 {*movsi_internal}
     (nil))
(insn 89 88 90 12 (set (reg/f:SI 0 ax [118])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [14 p+0 S4 A32])) "kernel/sched.c":214:5 75 {*movsi_internal}
     (nil))
(insn 90 89 91 12 (set (reg/f:SI 0 ax [orig:93 _11 ] [93])
        (mem/f:SI (plus:SI (reg/f:SI 0 ax [118])
                (const_int 8 [0x8])) [14 p_20->next+0 S4 A32])) "kernel/sched.c":214:5 75 {*movsi_internal}
     (nil))
(insn 91 90 92 12 (set (reg/f:SI 1 dx [119])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 36 [0x24])) [6 fn+0 S4 A32])) "kernel/sched.c":214:16 75 {*movsi_internal}
     (nil))
(insn 92 91 93 12 (set (mem/f:SI (plus:SI (reg/f:SI 0 ax [orig:93 _11 ] [93])
                (const_int 4 [0x4])) [6 _11->fn+0 S4 A32])
        (reg/f:SI 1 dx [119])) "kernel/sched.c":214:16 75 {*movsi_internal}
     (nil))
(insn 93 92 94 12 (set (reg/f:SI 0 ax [120])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [14 p+0 S4 A32])) "kernel/sched.c":215:12 75 {*movsi_internal}
     (nil))
(insn 94 93 95 12 (set (reg:SI 0 ax [121])
        (mem:SI (reg/f:SI 0 ax [120]) [2 p_20->jiffies+0 S4 A32])) "kernel/sched.c":215:12 75 {*movsi_internal}
     (nil))
(insn 95 94 96 12 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 32 [0x20])) [2 jiffies+0 S4 A32])
        (reg:SI 0 ax [121])) "kernel/sched.c":215:12 75 {*movsi_internal}
     (nil))
(insn 96 95 97 12 (set (reg/f:SI 0 ax [122])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [14 p+0 S4 A32])) "kernel/sched.c":216:18 75 {*movsi_internal}
     (nil))
(insn 97 96 98 12 (set (reg/f:SI 0 ax [orig:94 _12 ] [94])
        (mem/f:SI (plus:SI (reg/f:SI 0 ax [122])
                (const_int 8 [0x8])) [14 p_20->next+0 S4 A32])) "kernel/sched.c":216:18 75 {*movsi_internal}
     (nil))
(insn 98 97 99 12 (set (reg:SI 1 dx [orig:95 _13 ] [95])
        (mem:SI (reg/f:SI 0 ax [orig:94 _12 ] [94]) [2 _12->jiffies+0 S4 A32])) "kernel/sched.c":216:24 75 {*movsi_internal}
     (nil))
(insn 99 98 100 12 (set (reg/f:SI 0 ax [123])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [14 p+0 S4 A32])) "kernel/sched.c":216:15 75 {*movsi_internal}
     (nil))
(insn 100 99 101 12 (set (mem:SI (reg/f:SI 0 ax [123]) [2 p_20->jiffies+0 S4 A32])
        (reg:SI 1 dx [orig:95 _13 ] [95])) "kernel/sched.c":216:15 75 {*movsi_internal}
     (nil))
(insn 101 100 102 12 (set (reg/f:SI 0 ax [124])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [14 p+0 S4 A32])) "kernel/sched.c":217:5 75 {*movsi_internal}
     (nil))
(insn 102 101 103 12 (set (reg/f:SI 0 ax [orig:96 _14 ] [96])
        (mem/f:SI (plus:SI (reg/f:SI 0 ax [124])
                (const_int 8 [0x8])) [14 p_20->next+0 S4 A32])) "kernel/sched.c":217:5 75 {*movsi_internal}
     (nil))
(insn 103 102 104 12 (set (reg:SI 1 dx [125])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 32 [0x20])) [2 jiffies+0 S4 A32])) "kernel/sched.c":217:21 75 {*movsi_internal}
     (nil))
(insn 104 103 105 12 (set (mem:SI (reg/f:SI 0 ax [orig:96 _14 ] [96]) [2 _14->jiffies+0 S4 A32])
        (reg:SI 1 dx [125])) "kernel/sched.c":217:21 75 {*movsi_internal}
     (nil))
(insn 105 104 106 12 (set (reg/f:SI 0 ax [126])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [14 p+0 S4 A32])) "kernel/sched.c":218:6 75 {*movsi_internal}
     (nil))
(insn 106 105 107 12 (set (reg/f:SI 0 ax [127])
        (mem/f:SI (plus:SI (reg/f:SI 0 ax [126])
                (const_int 8 [0x8])) [14 p_20->next+0 S4 A32])) "kernel/sched.c":218:6 75 {*movsi_internal}
     (nil))
(insn 107 106 108 12 (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [14 p+0 S4 A32])
        (reg/f:SI 0 ax [127])) "kernel/sched.c":218:6 75 {*movsi_internal}
     (nil))
(code_label 108 107 109 13 40 (nil) [1 uses])
(note 109 108 110 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 110 109 111 13 (set (reg/f:SI 0 ax [128])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [14 p+0 S4 A32])) "kernel/sched.c":210:11 75 {*movsi_internal}
     (nil))
(insn 111 110 112 13 (set (reg/f:SI 0 ax [orig:97 _15 ] [97])
        (mem/f:SI (plus:SI (reg/f:SI 0 ax [128])
                (const_int 8 [0x8])) [14 p_20->next+0 S4 A32])) "kernel/sched.c":210:11 75 {*movsi_internal}
     (nil))
(insn 112 111 113 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:SI 0 ax [orig:97 _15 ] [97])
            (const_int 0 [0]))) "kernel/sched.c":210:18 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 113 112 114 13 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 123)
            (pc))) "kernel/sched.c":210:18 806 {*jcc}
     (nil)
 -> 123)
(note 114 113 115 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 115 114 116 14 (set (reg/f:SI 0 ax [129])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [14 p+0 S4 A32])) "kernel/sched.c":210:22 75 {*movsi_internal}
     (nil))
(insn 116 115 117 14 (set (reg/f:SI 0 ax [orig:98 _16 ] [98])
        (mem/f:SI (plus:SI (reg/f:SI 0 ax [129])
                (const_int 8 [0x8])) [14 p_20->next+0 S4 A32])) "kernel/sched.c":210:22 75 {*movsi_internal}
     (nil))
(insn 117 116 118 14 (set (reg:SI 1 dx [orig:99 _17 ] [99])
        (mem:SI (reg/f:SI 0 ax [orig:98 _16 ] [98]) [2 _16->jiffies+0 S4 A32])) "kernel/sched.c":210:28 75 {*movsi_internal}
     (nil))
(insn 118 117 119 14 (set (reg/f:SI 0 ax [130])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [14 p+0 S4 A32])) "kernel/sched.c":210:41 75 {*movsi_internal}
     (nil))
(insn 119 118 121 14 (set (reg:SI 0 ax [orig:100 _18 ] [100])
        (mem:SI (reg/f:SI 0 ax [130]) [2 p_20->jiffies+0 S4 A32])) "kernel/sched.c":210:41 75 {*movsi_internal}
     (nil))
(insn 121 119 122 14 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 1 dx [orig:99 _17 ] [99])
            (reg:SI 0 ax [orig:100 _18 ] [100]))) "kernel/sched.c":210:18 11 {*cmpsi_1}
     (nil))
(jump_insn 122 121 123 14 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 120)
            (pc))) "kernel/sched.c":210:18 806 {*jcc}
     (nil)
 -> 120)
(code_label 123 122 124 15 34 (nil) [2 uses])
(note 124 123 125 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 125 124 136 15 (parallel [
            (asm_operands/v ("sti") ("") 0 []
                 []
                 [] kernel/sched.c:221)
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":221:2 -1
     (nil))
(jump_insn 136 125 137 15 (set (pc)
        (label_ref 128)) 807 {jump}
     (nil)
 -> 128)
(barrier 137 136 139)
(code_label 139 137 138 17 42 (nil) [1 uses])
(note 138 139 140 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 140 138 128 17 (const_int 0 [0]) "kernel/sched.c":195:3 843 {nop}
     (nil))
(code_label 128 140 129 16 30 (nil) [1 uses])
(note 129 128 148 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(note 148 129 0 NOTE_INSN_DELETED)

;; Function sleep_on (sleep_on, funcdef_no=6, decl_uid=1287, cgraph_uid=7, symbol_order=17)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =r {*set_got}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 5:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) Ts {*leasi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 17:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) Ts {*leasi} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 22:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 30:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 32:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) lBwBz {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 34:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 38:  (0) m  (1) re {*movsi_internal}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2 3 4
EBB 5 6
EBB 8
EBB 7

********** Pseudo live ranges #1: **********

  BB 7
  BB 6
   Insn 43: point = 0, n_alt = -1
   Insn 38: point = 0, n_alt = 1
   Insn 37: point = 1, n_alt = 0
  BB 8
   Insn 47: point = 2, n_alt = -1
  BB 5
   Insn 35: point = 2, n_alt = -1
   Insn 34: point = 2, n_alt = 1
   Insn 33: point = 2, n_alt = 0
   Insn 32: point = 2, n_alt = 1
   Insn 31: point = 3, n_alt = 0
   Insn 30: point = 5, n_alt = 1
   Insn 29: point = 6, n_alt = 0
   Insn 28: point = 7, n_alt = 0
   Insn 27: point = 8, n_alt = 1
   Insn 26: point = 9, n_alt = 0
   Insn 25: point = 11, n_alt = 0
  BB 4
   Insn 22: point = 13, n_alt = 0
   Insn 21: point = 13, n_alt = 0
   Insn 20: point = 13, n_alt = -2
   Insn 19: point = 13, n_alt = 0
   Insn 18: point = 14, n_alt = 0
   Insn 17: point = 15, n_alt = 0
  BB 3
   Insn 15: point = 16, n_alt = -1
   Insn 14: point = 16, n_alt = 0
   Insn 13: point = 17, n_alt = 0
   Insn 12: point = 18, n_alt = 0
  BB 2
   Insn 6: point = 20, n_alt = -1
   Insn 5: point = 20, n_alt = 1
   Insn 48: point = 20, n_alt = 0
 r82: [4..20]
 r83: [16..18]
 r84: [5..7]
 r85: [2..3]
 r86: [16..17]
 r87: [13..14]
 r88: [10..11]
 r89: [8..9]
 r90: [5..6]
 r91: [0..1]
Compressing live ranges: from 21 to 14 - 66%
Ranges after the compression:
 r82: [4..13]
 r83: [12..13]
 r84: [4..5]
 r85: [2..3]
 r86: [12..13]
 r87: [10..11]
 r88: [8..9]
 r89: [6..7]
 r90: [4..5]
 r91: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=32)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=16)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
changing reg in insn 48
changing reg in insn 31
changing reg in insn 28
changing reg in insn 20
changing reg in insn 18
changing reg in insn 13
changing reg in insn 12
changing reg in insn 12
changing reg in insn 14
changing reg in insn 28
changing reg in insn 30
changing reg in insn 31
changing reg in insn 32
changing reg in insn 13
changing reg in insn 14
changing reg in insn 18
changing reg in insn 19
changing reg in insn 25
changing reg in insn 26
changing reg in insn 26
changing reg in insn 27
changing reg in insn 29
changing reg in insn 30
changing reg in insn 37
changing reg in insn 38
deleting insn with uid = 20.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 21.
verify found no changes in insn with uid = 33.


sleep_on

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 17 [flags]
;;  ref usage 	r0={10d,7u} r1={5d,2u} r2={3d} r3={1d,6u} r7={4d,21u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={8d,3u} r18={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} 
;;    total ref usage 200{161d,39u,0e} in 27{25 regular + 2 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 48 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 48 3 2 2 (parallel [
            (set (reg:SI 3 bx [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 48 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 32 [0x20])) [20 p+0 S4 A32])
            (const_int 0 [0]))) "kernel/sched.c":228:8 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 6 5 11 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 46)
            (pc))) "kernel/sched.c":228:8 806 {*jcc}
     (nil)
 -> 46)
(note 11 6 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 12 11 13 3 (set (reg/f:SI 1 dx [orig:83 current.7_1 ] [83])
        (mem/f/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x2]  <var_decl 0x731e0292e120 current>)
                        ] UNSPEC_GOTOFF))) [13 current+0 S4 A32])) "kernel/sched.c":231:17 75 {*movsi_internal}
     (nil))
(insn 13 12 14 3 (set (reg:SI 0 ax [86])
        (plus:SI (reg:SI 3 bx [82])
            (const:SI (unspec:SI [
                        (symbol_ref:SI ("init_task") [flags 0x2]  <var_decl 0x731e0292e990 init_task>)
                    ] UNSPEC_GOTOFF)))) "kernel/sched.c":231:8 205 {*leasi}
     (expr_list:REG_EQUAL (symbol_ref:SI ("init_task") [flags 0x2]  <var_decl 0x731e0292e990 init_task>)
        (nil)))
(insn 14 13 15 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:SI 1 dx [orig:83 current.7_1 ] [83])
            (reg:SI 0 ax [86]))) "kernel/sched.c":231:8 11 {*cmpsi_1}
     (nil))
(jump_insn 15 14 16 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 23)
            (pc))) "kernel/sched.c":231:8 806 {*jcc}
     (nil)
 -> 23)
(note 16 15 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 4 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":232:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 18 17 19 4 (set (reg/f:SI 0 ax [87])
        (plus:SI (reg:SI 3 bx [82])
            (const:SI (unspec:SI [
                        (symbol_ref/f:SI ("*.LC0") [flags 0x2]  <var_decl 0x731e029da5a0 *.LC0>)
                    ] UNSPEC_GOTOFF)))) "kernel/sched.c":232:9 205 {*leasi}
     (expr_list:REG_EQUAL (symbol_ref/f:SI ("*.LC0") [flags 0x2]  <var_decl 0x731e029da5a0 *.LC0>)
        (nil)))
(insn 19 18 21 4 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [22  S4 A32])
        (reg/f:SI 0 ax [87])) "kernel/sched.c":232:9 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 21 19 22 4 (call (mem:QI (symbol_ref:SI ("panic") [flags 0x41]  <function_decl 0x731e02938700 panic>) [0 panic S1 A8])
        (const_int 16 [0x10])) "kernel/sched.c":232:9 812 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 22 21 23 4 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":232:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(code_label 23 22 24 5 47 (nil) [1 uses])
(note 24 23 25 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 25 24 26 5 (set (reg/f:SI 0 ax [88])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 32 [0x20])) [20 p+0 S4 A32])) "kernel/sched.c":233:9 75 {*movsi_internal}
     (nil))
(insn 26 25 27 5 (set (reg/f:SI 0 ax [89])
        (mem/f:SI (reg/f:SI 0 ax [88]) [13 *p_6(D)+0 S4 A32])) "kernel/sched.c":233:9 75 {*movsi_internal}
     (nil))
(insn 27 26 28 5 (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [13 tmp+0 S4 A32])
        (reg/f:SI 0 ax [89])) "kernel/sched.c":233:9 75 {*movsi_internal}
     (nil))
(insn 28 27 29 5 (set (reg/f:SI 1 dx [orig:84 current.8_2 ] [84])
        (mem/f/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x2]  <var_decl 0x731e0292e120 current>)
                        ] UNSPEC_GOTOFF))) [13 current+0 S4 A32])) "kernel/sched.c":234:8 75 {*movsi_internal}
     (nil))
(insn 29 28 30 5 (set (reg/f:SI 0 ax [90])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 32 [0x20])) [20 p+0 S4 A32])) "kernel/sched.c":234:8 75 {*movsi_internal}
     (nil))
(insn 30 29 31 5 (set (mem/f:SI (reg/f:SI 0 ax [90]) [13 *p_6(D)+0 S4 A32])
        (reg/f:SI 1 dx [orig:84 current.8_2 ] [84])) "kernel/sched.c":234:8 75 {*movsi_internal}
     (nil))
(insn 31 30 32 5 (set (reg/f:SI 0 ax [orig:85 current.9_3 ] [85])
        (mem/f/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x2]  <var_decl 0x731e0292e120 current>)
                        ] UNSPEC_GOTOFF))) [13 current+0 S4 A32])) "kernel/sched.c":235:12 75 {*movsi_internal}
     (nil))
(insn 32 31 33 5 (set (mem:SI (reg/f:SI 0 ax [orig:85 current.9_3 ] [85]) [2 current.9_3->state+0 S4 A32])
        (const_int 2 [0x2])) "kernel/sched.c":235:20 75 {*movsi_internal}
     (nil))
(call_insn 33 32 34 5 (call (mem:QI (symbol_ref:SI ("schedule") [flags 0x3]  <function_decl 0x731e02915c00 schedule>) [0 schedule S1 A8])
        (const_int 0 [0])) "kernel/sched.c":236:5 812 {*call}
     (nil)
    (nil))
(insn 34 33 35 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 12 [0xc])) [13 tmp+0 S4 A32])
            (const_int 0 [0]))) "kernel/sched.c":237:8 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 35 34 36 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 41)
            (pc))) "kernel/sched.c":237:8 806 {*jcc}
     (nil)
 -> 41)
(note 36 35 37 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 37 36 38 6 (set (reg/f:SI 0 ax [91])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [13 tmp+0 S4 A32])) "kernel/sched.c":238:20 75 {*movsi_internal}
     (nil))
(insn 38 37 43 6 (set (mem:SI (reg/f:SI 0 ax [91]) [2 tmp_9->state+0 S4 A32])
        (const_int 0 [0])) "kernel/sched.c":238:20 75 {*movsi_internal}
     (nil))
(jump_insn 43 38 44 6 (set (pc)
        (label_ref 41)) 807 {jump}
     (nil)
 -> 41)
(barrier 44 43 46)
(code_label 46 44 45 8 48 (nil) [1 uses])
(note 45 46 47 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 47 45 41 8 (const_int 0 [0]) "kernel/sched.c":229:9 843 {nop}
     (nil))
(code_label 41 47 42 7 44 (nil) [2 uses])
(note 42 41 49 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(note 49 42 0 NOTE_INSN_DELETED)

;; Function ticks_to_floppy_on (ticks_to_floppy_on, funcdef_no=7, decl_uid=1487, cgraph_uid=8, symbol_order=22)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
            2 Small class reload: reject+=3
          alt=0,overall=15,losers=2,rld_nregs=2
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 7:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
      Creating newreg=110 from oldreg=96, assigning class GENERAL_REGS to r110
      Creating newreg=111, assigning class CREG to r111
    7: {r110:SI=r110:SI<<r111:QI;clobber flags:CC;}
      REG_DEAD r96:SI
      REG_DEAD r95:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
   89: r110:SI=r96:SI
   91: r111:QI=r95:SI#0
    Inserting insn reload after:
   90: r83:SI=r110:SI

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (0) =Q  (1) Q {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=7,overall=27,losers=2 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 8:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 14:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) Ts {*leasi} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 19:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 23:  (0) m  (1) re {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 25:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=12,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 26:  (0) =qm  (1) %0  (2) qn {*iorqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 28:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 32:  (0) =qm  (1) %0  (2) qn {*andqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =Q  (1) Q {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=12,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 35:  (0) =qm  (1) %0  (2) qn {*iorqi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 38:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) qm  (1) qn {*cmpqi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 42:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) a  (1) d
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 45:  (0) q  (1) m {*movqi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 46:  (0) q  (1) 0  (2) m {*xorqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 48:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 53:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 66:  (0) m  (1) re {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 69:  (0) q  (1) m {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=7,overall=27,losers=2 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 70:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2 3
EBB 4 5
EBB 6 7 8
EBB 9 10
EBB 11
EBB 12

********** Pseudo live ranges #1: **********

  BB 12
   Insn 83: point = 0, n_alt = -1
   Insn 82: point = 0, n_alt = -2
   Insn 78: point = 1, n_alt = -2
   Insn 75: point = 3, n_alt = 0
   Insn 74: point = 5, n_alt = 0
   Insn 73: point = 6, n_alt = -1
  BB 11
   Insn 70: point = 7, n_alt = 8
   Insn 69: point = 8, n_alt = 4
  BB 8
   Insn 85: point = 10, n_alt = -1
   Insn 53: point = 10, n_alt = 1
   Insn 52: point = 11, n_alt = 0
  BB 10
   Insn 66: point = 13, n_alt = 1
   Insn 65: point = 14, n_alt = 0
  BB 9
   Insn 63: point = 16, n_alt = -1
   Insn 62: point = 16, n_alt = 0
   Insn 59: point = 17, n_alt = 0
   Insn 58: point = 19, n_alt = 0
  BB 7
   Insn 50: point = 21, n_alt = -1
   Insn 49: point = 21, n_alt = 0
   Insn 48: point = 22, n_alt = 0
   Insn 47: point = 24, n_alt = 0
   Insn 46: point = 26, n_alt = 1
   Insn 45: point = 28, n_alt = 4
   Insn 44: point = 29, n_alt = 0
   Insn 43: point = 30, n_alt = 0
   Insn 42: point = 31, n_alt = 4
  BB 6
   Insn 40: point = 33, n_alt = -1
   Insn 39: point = 33, n_alt = 0
   Insn 38: point = 34, n_alt = 4
  BB 5
   Insn 35: point = 36, n_alt = 0
   Insn 34: point = 37, n_alt = 0
   Insn 33: point = 39, n_alt = 0
   Insn 32: point = 40, n_alt = 0
  BB 4
   Insn 30: point = 41, n_alt = -1
   Insn 29: point = 41, n_alt = 0
   Insn 28: point = 42, n_alt = 4
   Insn 27: point = 44, n_alt = 0
   Insn 26: point = 45, n_alt = 0
   Insn 25: point = 46, n_alt = 4
   Insn 24: point = 47, n_alt = -1
   Insn 23: point = 47, n_alt = 1
   Insn 22: point = 48, n_alt = 0
  BB 3
   Insn 19: point = 50, n_alt = 0
   Insn 18: point = 50, n_alt = 0
   Insn 17: point = 50, n_alt = -2
   Insn 16: point = 50, n_alt = 0
   Insn 15: point = 51, n_alt = 0
   Insn 14: point = 52, n_alt = 0
  BB 2
   Insn 12: point = 53, n_alt = -1
   Insn 11: point = 53, n_alt = 0
   Insn 8: point = 53, n_alt = 8
   Insn 90: point = 54, n_alt = -2
	Hard reg 0 is preferable by r110 with profit 1000
   Insn 7: point = 56, n_alt = 0
   Insn 91: point = 58, n_alt = 0
   Insn 89: point = 60, n_alt = -2
	Hard reg 0 is preferable by r110 with profit 1000
	Hard reg 1 is preferable by r110 with profit 1000
   Insn 6: point = 62, n_alt = 0
   Insn 5: point = 63, n_alt = 0
   Insn 87: point = 64, n_alt = 0
 r82: [4..64]
 r83: [53..54]
 r84: [45..46]
 r85: [41..42]
 r86: [36..37]
 r87: [33..34]
 r88: [27..28]
 r89: [25..26]
 r90: [23..24]
 r91: [21..22]
 r92: [16..17]
 r93: [2..3]
 r94: [0..1]
 r95: [59..63]
 r96: [61..62]
 r97: [50..51]
 r98: [47..48]
 r99: [43..44]
 r100: [38..39]
 r101: [29..31]
 r102: [29..30]
 r103: [10..11]
 r104: [18..19]
 r105: [13..14]
 r106: [7..8]
 r107: [4..5]
 r110: [55..60]
 r111: [57..58]
Compressing live ranges: from 65 to 50 - 76%
Ranges after the compression:
 r82: [4..49]
 r83: [42..43]
 r84: [36..37]
 r85: [32..33]
 r86: [28..29]
 r87: [26..27]
 r88: [22..23]
 r89: [20..21]
 r90: [18..19]
 r91: [16..17]
 r92: [12..13]
 r93: [2..3]
 r94: [0..1]
 r95: [46..49]
 r96: [48..49]
 r97: [40..41]
 r98: [38..39]
 r99: [34..35]
 r100: [30..31]
 r101: [24..25]
 r102: [24..25]
 r103: [8..9]
 r104: [14..15]
 r105: [10..11]
 r106: [6..7]
 r107: [4..5]
 r110: [44..47]
 r111: [44..45]

********** Assignment #1: **********

	 Assigning to 111 (cl=CREG, orig=111, freq=2000, tfirst=111, tfreq=2000)...
	   Assign 2 to reload r111 (freq=2000)
	 Assigning to 110 (cl=GENERAL_REGS, orig=96, freq=3000, tfirst=110, tfreq=3000)...
	   Assign 1 to reload r110 (freq=3000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=32)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=16)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
changing reg in insn 87
changing reg in insn 75
changing reg in insn 70
changing reg in insn 66
changing reg in insn 59
changing reg in insn 53
changing reg in insn 45
changing reg in insn 38
changing reg in insn 27
changing reg in insn 25
changing reg in insn 23
changing reg in insn 17
changing reg in insn 15
changing reg in insn 25
changing reg in insn 26
changing reg in insn 28
changing reg in insn 29
changing reg in insn 34
changing reg in insn 35
changing reg in insn 38
changing reg in insn 39
changing reg in insn 45
changing reg in insn 46
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 48
changing reg in insn 48
changing reg in insn 49
changing reg in insn 59
changing reg in insn 62
changing reg in insn 75
changing reg in insn 78
changing reg in insn 78
changing reg in insn 82
changing reg in insn 5
changing reg in insn 6
changing reg in insn 15
changing reg in insn 16
changing reg in insn 22
changing reg in insn 23
changing reg in insn 27
changing reg in insn 28
changing reg in insn 33
changing reg in insn 42
changing reg in insn 44
changing reg in insn 43
changing reg in insn 44
changing reg in insn 52
changing reg in insn 53
changing reg in insn 58
changing reg in insn 59
changing reg in insn 65
changing reg in insn 66
changing reg in insn 69
changing reg in insn 70
changing reg in insn 74
changing reg in insn 75
deleting insn with uid = 89.
deleting insn with uid = 17.
deleting insn with uid = 34.
deleting insn with uid = 78.
deleting insn with uid = 82.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 18.


ticks_to_floppy_on

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 17 [flags]
;;  ref usage 	r0={23d,22u} r1={5d,3u} r2={3d,1u} r3={1d,12u} r7={4d,37u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={18d,5u} r18={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} 
;;    total ref usage 199{119d,80u,0e} in 53{52 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 87 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 87 3 2 2 (parallel [
            (set (reg:SI 3 bx [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 87 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:SI 0 ax [95])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 32 [0x20])) [5 nr+0 S4 A32])) "kernel/sched.c":255:28 75 {*movsi_internal}
     (nil))
(insn 6 5 91 2 (set (reg:SI 1 dx [96])
        (const_int 16 [0x10])) "kernel/sched.c":255:28 75 {*movsi_internal}
     (nil))
(insn 91 6 7 2 (set (reg:QI 2 cx [111])
        (reg:QI 0 ax [95])) "kernel/sched.c":255:28 77 {*movqi_internal}
     (nil))
(insn 7 91 90 2 (parallel [
            (set (reg:SI 1 dx [96])
                (ashift:SI (reg:SI 1 dx [96])
                    (reg:QI 2 cx [111])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":255:28 655 {*ashlsi3_1}
     (nil))
(insn 90 7 8 2 (set (reg:SI 0 ax [orig:83 _1 ] [83])
        (reg:SI 1 dx [96])) "kernel/sched.c":255:28 75 {*movsi_internal}
     (nil))
(insn 8 90 11 2 (set (mem/c:QI (plus:SI (reg/f:SI 7 sp)
                (const_int 15 [0xf])) [0 mask+0 S1 A8])
        (reg:QI 0 ax [orig:83 _1 ] [83])) "kernel/sched.c":255:16 77 {*movqi_internal}
     (nil))
(insn 11 8 12 2 (set (reg:CC 17 flags)
        (compare:CC (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 32 [0x20])) [5 nr+0 S4 A32])
            (const_int 3 [0x3]))) "kernel/sched.c":257:5 11 {*cmpsi_1}
     (nil))
(jump_insn 12 11 13 2 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 20)
            (pc))) "kernel/sched.c":257:5 806 {*jcc}
     (nil)
 -> 20)
(note 13 12 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 3 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":258:3 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 15 14 16 3 (set (reg/f:SI 0 ax [97])
        (plus:SI (reg:SI 3 bx [82])
            (const:SI (unspec:SI [
                        (symbol_ref/f:SI ("*.LC2") [flags 0x2]  <var_decl 0x731e029daab0 *.LC2>)
                    ] UNSPEC_GOTOFF)))) "kernel/sched.c":258:3 205 {*leasi}
     (expr_list:REG_EQUAL (symbol_ref/f:SI ("*.LC2") [flags 0x2]  <var_decl 0x731e029daab0 *.LC2>)
        (nil)))
(insn 16 15 18 3 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [22  S4 A32])
        (reg/f:SI 0 ax [97])) "kernel/sched.c":258:3 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 18 16 19 3 (call (mem:QI (symbol_ref:SI ("panic") [flags 0x41]  <function_decl 0x731e02938700 panic>) [0 panic S1 A8])
        (const_int 16 [0x10])) "kernel/sched.c":258:3 812 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 19 18 20 3 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":258:3 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(code_label 20 19 21 4 50 (nil) [1 uses])
(note 21 20 22 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 4 (set (reg:SI 0 ax [98])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 32 [0x20])) [5 nr+0 S4 A32])) "kernel/sched.c":259:17 75 {*movsi_internal}
     (nil))
(insn 23 22 24 4 (set (mem:SI (plus:SI (plus:SI (mult:SI (reg:SI 0 ax [98])
                        (const_int 4 [0x4]))
                    (reg:SI 3 bx [82]))
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("moff_timer") [flags 0x2]  <var_decl 0x731e029672d0 moff_timer>)
                        ] UNSPEC_GOTOFF))) [5 moff_timer[nr_15(D)]+0 S4 A32])
        (const_int 10000 [0x2710])) "kernel/sched.c":259:17 75 {*movsi_internal}
     (nil))
(insn 24 23 25 4 (parallel [
            (asm_operands/v ("cli") ("") 0 []
                 []
                 [] kernel/sched.c:260)
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":260:2 -1
     (nil))
(insn 25 24 26 4 (set (reg:QI 0 ax [orig:84 current_DOR.10_2 ] [84])
        (mem/c:QI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current_DOR") [flags 0x2]  <var_decl 0x731e02967360 current_DOR>)
                        ] UNSPEC_GOTOFF))) [0 current_DOR+0 S1 A8])) "kernel/sched.c":261:7 77 {*movqi_internal}
     (nil))
(insn 26 25 27 4 (parallel [
            (set (mem/c:QI (plus:SI (reg/f:SI 7 sp)
                        (const_int 15 [0xf])) [0 mask+0 S1 A8])
                (ior:QI (mem/c:QI (plus:SI (reg/f:SI 7 sp)
                            (const_int 15 [0xf])) [0 mask+0 S1 A8])
                    (reg:QI 0 ax [orig:84 current_DOR.10_2 ] [84])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":261:7 530 {*iorqi_1}
     (nil))
(insn 27 26 28 4 (set (reg/f:SI 0 ax [99])
        (mem/u/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("selected") [flags 0x40]  <var_decl 0x731e029673f0 selected>)
                        ] UNSPEC_GOT))) [24  S4 A8])) "kernel/sched.c":262:6 75 {*movsi_internal}
     (nil))
(insn 28 27 29 4 (set (reg:QI 0 ax [orig:85 selected.11_3 ] [85])
        (mem/c:QI (reg/f:SI 0 ax [99]) [0 selected+0 S1 A8])) "kernel/sched.c":262:6 77 {*movqi_internal}
     (nil))
(insn 29 28 30 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:85 selected.11_3 ] [85])
            (const_int 0 [0]))) "kernel/sched.c":262:5 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 30 29 31 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 36)
            (pc))) "kernel/sched.c":262:5 806 {*jcc}
     (nil)
 -> 36)
(note 31 30 32 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 32 31 33 5 (parallel [
            (set (mem/c:QI (plus:SI (reg/f:SI 7 sp)
                        (const_int 15 [0xf])) [0 mask+0 S1 A8])
                (and:QI (mem/c:QI (plus:SI (reg/f:SI 7 sp)
                            (const_int 15 [0xf])) [0 mask+0 S1 A8])
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":263:8 491 {*andqi_1}
     (nil))
(insn 33 32 35 5 (set (reg:SI 0 ax [100])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 32 [0x20])) [5 nr+0 S4 A32])) "kernel/sched.c":264:8 75 {*movsi_internal}
     (nil))
(insn 35 33 36 5 (parallel [
            (set (mem/c:QI (plus:SI (reg/f:SI 7 sp)
                        (const_int 15 [0xf])) [0 mask+0 S1 A8])
                (ior:QI (mem/c:QI (plus:SI (reg/f:SI 7 sp)
                            (const_int 15 [0xf])) [0 mask+0 S1 A8])
                    (reg:QI 0 ax [orig:86 _4 ] [86])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":264:8 530 {*iorqi_1}
     (nil))
(code_label 36 35 37 6 51 (nil) [1 uses])
(note 37 36 38 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 38 37 39 6 (set (reg:QI 0 ax [orig:87 current_DOR.12_5 ] [87])
        (mem/c:QI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current_DOR") [flags 0x2]  <var_decl 0x731e02967360 current_DOR>)
                        ] UNSPEC_GOTOFF))) [0 current_DOR+0 S1 A8])) "kernel/sched.c":266:11 77 {*movqi_internal}
     (nil))
(insn 39 38 40 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:SI (reg/f:SI 7 sp)
                    (const_int 15 [0xf])) [0 mask+0 S1 A8])
            (reg:QI 0 ax [orig:87 current_DOR.12_5 ] [87]))) "kernel/sched.c":266:5 9 {*cmpqi_1}
     (nil))
(jump_insn 40 39 41 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 71)
            (pc))) "kernel/sched.c":266:5 806 {*jcc}
     (nil)
 -> 71)
(note 41 40 42 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 42 41 43 7 (set (reg:QI 0 ax [101])
        (mem/c:QI (plus:SI (reg/f:SI 7 sp)
                (const_int 15 [0xf])) [0 mask+0 S1 A8])) "kernel/sched.c":267:3 77 {*movqi_internal}
     (nil))
(insn 43 42 44 7 (set (reg:SI 1 dx [102])
        (const_int 1010 [0x3f2])) "kernel/sched.c":267:3 75 {*movsi_internal}
     (nil))
(insn 44 43 45 7 (parallel [
            (asm_operands/v ("outb %%al, %%dx") ("") 0 [
                    (reg:QI 0 ax [101])
                    (reg:SI 1 dx [102])
                ]
                 [
                    (asm_input:QI ("a") kernel/sched.c:267)
                    (asm_input:SI ("d") kernel/sched.c:267)
                ]
                 [] kernel/sched.c:267)
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":267:3 -1
     (nil))
(insn 45 44 46 7 (set (reg:QI 0 ax [orig:88 current_DOR.13_6 ] [88])
        (mem/c:QI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current_DOR") [flags 0x2]  <var_decl 0x731e02967360 current_DOR>)
                        ] UNSPEC_GOTOFF))) [0 current_DOR+0 S1 A8])) "kernel/sched.c":268:28 77 {*movqi_internal}
     (nil))
(insn 46 45 47 7 (parallel [
            (set (reg:QI 0 ax [orig:89 _7 ] [89])
                (xor:QI (reg:QI 0 ax [orig:88 current_DOR.13_6 ] [88])
                    (mem/c:QI (plus:SI (reg/f:SI 7 sp)
                            (const_int 15 [0xf])) [0 mask+0 S1 A8])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":268:28 531 {*xorqi_1}
     (nil))
(insn 47 46 48 7 (set (reg:SI 0 ax [orig:90 _8 ] [90])
        (zero_extend:SI (reg:QI 0 ax [orig:89 _7 ] [89]))) "kernel/sched.c":268:28 143 {*zero_extendqisi2}
     (nil))
(insn 48 47 49 7 (parallel [
            (set (reg:SI 0 ax [orig:91 _9 ] [91])
                (and:SI (reg:SI 0 ax [orig:90 _8 ] [90])
                    (const_int 240 [0xf0])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":268:28 490 {*andsi_1}
     (nil))
(insn 49 48 50 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:91 _9 ] [91])
            (const_int 0 [0]))) "kernel/sched.c":268:6 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 50 49 51 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 56)
            (pc))) "kernel/sched.c":268:6 806 {*jcc}
     (nil)
 -> 56)
(note 51 50 52 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 52 51 53 8 (set (reg:SI 0 ax [103])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 32 [0x20])) [5 nr+0 S4 A32])) "kernel/sched.c":269:18 75 {*movsi_internal}
     (nil))
(insn 53 52 85 8 (set (mem:SI (plus:SI (plus:SI (mult:SI (reg:SI 0 ax [103])
                        (const_int 4 [0x4]))
                    (reg:SI 3 bx [82]))
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("mon_timer") [flags 0x2]  <var_decl 0x731e02967240 mon_timer>)
                        ] UNSPEC_GOTOFF))) [5 mon_timer[nr_15(D)]+0 S4 A32])
        (const_int 50 [0x32])) "kernel/sched.c":269:18 75 {*movsi_internal}
     (nil))
(jump_insn 85 53 86 8 (set (pc)
        (label_ref 67)) 807 {jump}
     (nil)
 -> 67)
(barrier 86 85 56)
(code_label 56 86 57 9 53 (nil) [1 uses])
(note 57 56 58 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 58 57 59 9 (set (reg:SI 0 ax [104])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 32 [0x20])) [5 nr+0 S4 A32])) "kernel/sched.c":270:21 75 {*movsi_internal}
     (nil))
(insn 59 58 62 9 (set (reg:SI 0 ax [orig:92 _10 ] [92])
        (mem:SI (plus:SI (plus:SI (mult:SI (reg:SI 0 ax [104])
                        (const_int 4 [0x4]))
                    (reg:SI 3 bx [82]))
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("mon_timer") [flags 0x2]  <var_decl 0x731e02967240 mon_timer>)
                        ] UNSPEC_GOTOFF))) [5 mon_timer[nr_15(D)]+0 S4 A32])) "kernel/sched.c":270:21 75 {*movsi_internal}
     (nil))
(insn 62 59 63 9 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:92 _10 ] [92])
            (const_int 1 [0x1]))) "kernel/sched.c":270:11 11 {*cmpsi_1}
     (nil))
(jump_insn 63 62 64 9 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 67)
            (pc))) "kernel/sched.c":270:11 806 {*jcc}
     (nil)
 -> 67)
(note 64 63 65 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 65 64 66 10 (set (reg:SI 0 ax [105])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 32 [0x20])) [5 nr+0 S4 A32])) "kernel/sched.c":271:18 75 {*movsi_internal}
     (nil))
(insn 66 65 67 10 (set (mem:SI (plus:SI (plus:SI (mult:SI (reg:SI 0 ax [105])
                        (const_int 4 [0x4]))
                    (reg:SI 3 bx [82]))
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("mon_timer") [flags 0x2]  <var_decl 0x731e02967240 mon_timer>)
                        ] UNSPEC_GOTOFF))) [5 mon_timer[nr_15(D)]+0 S4 A32])
        (const_int 2 [0x2])) "kernel/sched.c":271:18 75 {*movsi_internal}
     (nil))
(code_label 67 66 68 11 54 (nil) [2 uses])
(note 68 67 69 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 69 68 70 11 (set (reg:QI 0 ax [106])
        (mem/c:QI (plus:SI (reg/f:SI 7 sp)
                (const_int 15 [0xf])) [0 mask+0 S1 A8])) "kernel/sched.c":272:15 77 {*movqi_internal}
     (nil))
(insn 70 69 71 11 (set (mem/c:QI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current_DOR") [flags 0x2]  <var_decl 0x731e02967360 current_DOR>)
                        ] UNSPEC_GOTOFF))) [0 current_DOR+0 S1 A8])
        (reg:QI 0 ax [106])) "kernel/sched.c":272:15 77 {*movqi_internal}
     (nil))
(code_label 71 70 72 12 52 (nil) [1 uses])
(note 72 71 73 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 73 72 74 12 (parallel [
            (asm_operands/v ("sti") ("") 0 []
                 []
                 [] kernel/sched.c:274)
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":274:2 -1
     (nil))
(insn 74 73 75 12 (set (reg:SI 0 ax [107])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 32 [0x20])) [5 nr+0 S4 A32])) "kernel/sched.c":275:18 75 {*movsi_internal}
     (nil))
(insn 75 74 83 12 (set (reg:SI 0 ax [orig:93 _26 ] [93])
        (mem:SI (plus:SI (plus:SI (mult:SI (reg:SI 0 ax [107])
                        (const_int 4 [0x4]))
                    (reg:SI 3 bx [82]))
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("mon_timer") [flags 0x2]  <var_decl 0x731e02967240 mon_timer>)
                        ] UNSPEC_GOTOFF))) [5 mon_timer[nr_15(D)]+0 S4 A32])) "kernel/sched.c":275:18 75 {*movsi_internal}
     (nil))
(insn 83 75 88 12 (use (reg/i:SI 0 ax)) "kernel/sched.c":276:1 -1
     (nil))
(note 88 83 0 NOTE_INSN_DELETED)

;; Function floppy_on (floppy_on, funcdef_no=8, decl_uid=1489, cgraph_uid=9, symbol_order=23)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) r  (1) l  (2) M {*ashlsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) Ts {*leasi}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 12
	 Choosing alt 0 in insn 12:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 13:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 16:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 19:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 22:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) r {*cmpsi_ccno_1}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4 5 6

********** Pseudo live ranges #1: **********

  BB 6
   Insn 34: point = 0, n_alt = -1
  BB 5
   Insn 28: point = 0, n_alt = -1
  BB 4
   Insn 26: point = 0, n_alt = -1
   Insn 25: point = 0, n_alt = 0
   Insn 23: point = 1, n_alt = -2
   Insn 22: point = 2, n_alt = 0
   Insn 21: point = 2, n_alt = 0
   Insn 20: point = 2, n_alt = 0
   Insn 19: point = 2, n_alt = 0
  BB 2
   Insn 31: point = 3, n_alt = -1
   Insn 5: point = 3, n_alt = -1
   Insn 35: point = 3, n_alt = 0
  BB 3
   Insn 16: point = 4, n_alt = 0
   Insn 15: point = 4, n_alt = 0
   Insn 14: point = 4, n_alt = 0
   Insn 13: point = 5, n_alt = 0
   Insn 12: point = 5, n_alt = 0
   Insn 11: point = 7, n_alt = 0
   Insn 10: point = 8, n_alt = 1
   Insn 9: point = 10, n_alt = 0
 r82: [0..11]
 r83: [6..8]
 r84: [4..5]
 r85: [0..1]
 r86: [9..10]
 r87: [6..7]
Compressing live ranges: from 12 to 8 - 66%
Ranges after the compression:
 r82: [0..7]
 r83: [4..5]
 r84: [2..3]
 r85: [0..1]
 r86: [6..7]
 r87: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=16)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
changing reg in insn 35
changing reg in insn 11
changing reg in insn 10
changing reg in insn 12
changing reg in insn 14
changing reg in insn 23
changing reg in insn 25
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
deleting insn with uid = 23.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 15.
verify found no changes in insn with uid = 21.


floppy_on

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 17 [flags]
;;  ref usage 	r0={6d,4u} r1={4d,1u} r2={3d} r3={1d,1u} r7={7d,20u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r16={1e} r17={12d,1u} r18={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} 
;;    total ref usage 191{163d,27u,1e} in 19{17 regular + 2 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 35 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 35 3 2 2 (parallel [
            (set (reg:SI 3 bx [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 35 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 31 2 (parallel [
            (asm_operands/v ("cli") ("") 0 []
                 []
                 [] kernel/sched.c:280)
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":280:2 -1
     (nil))
(jump_insn 31 5 32 2 (set (pc)
        (label_ref 17)) "kernel/sched.c":281:8 807 {jump}
     (nil)
 -> 17)
(barrier 32 31 24)
(code_label 24 32 8 3 58 (nil) [1 uses])
(note 8 24 9 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 9 8 10 3 (set (reg:SI 0 ax [86])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [5 nr+0 S4 A32])) "kernel/sched.c":282:15 75 {*movsi_internal}
     (nil))
(insn 10 9 11 3 (parallel [
            (set (reg:SI 1 dx [orig:83 _1 ] [83])
                (ashift:SI (reg:SI 0 ax [86])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":282:15 655 {*ashlsi3_1}
     (expr_list:REG_EQUAL (ashift:SI (mem/c:SI (reg/f:SI 16 argp) [5 nr+0 S4 A32])
            (const_int 2 [0x2]))
        (nil)))
(insn 11 10 12 3 (set (reg:SI 0 ax [87])
        (plus:SI (reg:SI 3 bx [82])
            (const:SI (unspec:SI [
                        (symbol_ref:SI ("wait_motor") [flags 0x2]  <var_decl 0x731e029671b0 wait_motor>)
                    ] UNSPEC_GOTOFF)))) "kernel/sched.c":282:3 205 {*leasi}
     (expr_list:REG_EQUAL (symbol_ref:SI ("wait_motor") [flags 0x2]  <var_decl 0x731e029671b0 wait_motor>)
        (nil)))
(insn 12 11 13 3 (parallel [
            (set (reg/f:SI 0 ax [orig:84 _2 ] [84])
                (plus:SI (reg:SI 0 ax [87])
                    (reg:SI 1 dx [orig:83 _1 ] [83])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":282:3 209 {*addsi_1}
     (nil))
(insn 13 12 14 3 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":282:3 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 14 13 15 3 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [20  S4 A32])
        (reg/f:SI 0 ax [orig:84 _2 ] [84])) "kernel/sched.c":282:3 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 15 14 16 3 (call (mem:QI (symbol_ref:SI ("sleep_on") [flags 0x3]  <function_decl 0x731e02915b00 sleep_on>) [0 sleep_on S1 A8])
        (const_int 16 [0x10])) "kernel/sched.c":282:3 812 {*call}
     (nil)
    (nil))
(insn 16 15 17 3 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":282:3 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(code_label 17 16 18 4 57 (nil) [1 uses])
(note 18 17 19 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 19 18 20 4 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":281:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 20 19 21 4 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [5  S4 A32])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [5 nr+0 S4 A32])) "kernel/sched.c":281:9 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 21 20 22 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("ticks_to_floppy_on") [flags 0x3]  <function_decl 0x731e02944700 ticks_to_floppy_on>) [0 ticks_to_floppy_on S1 A8])
            (const_int 16 [0x10]))) "kernel/sched.c":281:9 823 {*call_value}
     (nil)
    (nil))
(insn 22 21 25 4 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":281:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 25 22 26 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:85 _3 ] [85])
            (const_int 0 [0]))) "kernel/sched.c":281:9 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 26 25 27 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 24)
            (pc))) "kernel/sched.c":281:9 806 {*jcc}
     (nil)
 -> 24)
(note 27 26 28 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 33 5 (parallel [
            (asm_operands/v ("sti") ("") 0 []
                 []
                 [] kernel/sched.c:283)
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":283:2 -1
     (nil))
(note 33 28 34 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 34 33 36 6 (const_int 0 [0]) "kernel/sched.c":284:1 843 {nop}
     (nil))
(note 36 34 0 NOTE_INSN_DELETED)

;; Function floppy_off (floppy_off, funcdef_no=9, decl_uid=1491, cgraph_uid=10, symbol_order=24)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=4, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) m  (1) re {*movsi_internal}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2 3

********** Pseudo live ranges #1: **********

  BB 3
   Insn 10: point = 0, n_alt = -1
  BB 2
   Insn 6: point = 0, n_alt = 1
   Insn 5: point = 1, n_alt = 0
   Insn 11: point = 2, n_alt = 0
 r82: [0..2]
 r83: [0..1]
Compressing live ranges: from 3 to 2 - 66%
Ranges after the compression:
 r82: [0..1]
 r83: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=4, prev_offset=4)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 11
changing reg in insn 6
changing reg in insn 5
changing reg in insn 6
starting the processing of deferred insns
ending the processing of deferred insns


floppy_off

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 17 [flags]
;;  ref usage 	r0={2d,1u} r1={2d,1u} r2={1d} r7={1d,4u} r17={1d} 
;;    total ref usage 13{7d,6u,0e} in 4{4 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 11 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 11 3 2 2 (parallel [
            (set (reg:SI 0 ax [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 11 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:SI 1 dx [83])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [5 nr+0 S4 A32])) "kernel/sched.c":288:17 75 {*movsi_internal}
     (nil))
(insn 6 5 9 2 (set (mem:SI (plus:SI (plus:SI (mult:SI (reg:SI 1 dx [83])
                        (const_int 4 [0x4]))
                    (reg:SI 0 ax [82]))
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("moff_timer") [flags 0x2]  <var_decl 0x731e029672d0 moff_timer>)
                        ] UNSPEC_GOTOFF))) [5 moff_timer[nr_2(D)]+0 S4 A32])
        (const_int 300 [0x12c])) "kernel/sched.c":288:17 75 {*movsi_internal}
     (nil))
(note 9 6 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 12 3 (const_int 0 [0]) "kernel/sched.c":289:1 843 {nop}
     (nil))
(note 12 10 0 NOTE_INSN_DELETED)

;; Function math_state_restore (math_state_restore, funcdef_no=10, decl_uid=1602, cgraph_uid=11, symbol_order=25)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=4, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) m
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 26:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) r {*cmphi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) m
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 38:  (0) m  (1) rn {*movhi_internal}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2 3 4
EBB 5 6
EBB 7
EBB 9
EBB 8

********** Pseudo live ranges #1: **********

  BB 8
  BB 7
   Insn 45: point = 0, n_alt = -1
   Insn 38: point = 0, n_alt = 3
   Insn 37: point = 1, n_alt = 0
   Insn 36: point = 3, n_alt = -1
  BB 9
   Insn 49: point = 4, n_alt = -1
  BB 6
   Insn 43: point = 4, n_alt = -1
   Insn 31: point = 4, n_alt = 0
   Insn 30: point = 5, n_alt = 0
  BB 5
   Insn 28: point = 8, n_alt = -1
   Insn 27: point = 8, n_alt = 0
   Insn 26: point = 9, n_alt = 2
   Insn 25: point = 11, n_alt = 0
   Insn 24: point = 12, n_alt = 1
   Insn 23: point = 13, n_alt = 0
  BB 4
   Insn 20: point = 15, n_alt = 0
   Insn 19: point = 16, n_alt = 0
  BB 3
   Insn 17: point = 18, n_alt = -1
   Insn 16: point = 18, n_alt = 0
   Insn 15: point = 19, n_alt = 0
   Insn 14: point = 20, n_alt = -1
  BB 2
   Insn 8: point = 21, n_alt = -1
   Insn 7: point = 21, n_alt = 0
   Insn 6: point = 22, n_alt = 0
   Insn 5: point = 23, n_alt = 0
   Insn 50: point = 24, n_alt = 0
 r82: [6..24] [2..3]
 r83: [21..23]
 r84: [21..22]
 r85: [18..19]
 r86: [15..16]
 r87: [12..13]
 r88: [10..11]
 r89: [8..9]
 r90: [4..5]
 r91: [0..1]
Compressing live ranges: from 25 to 18 - 72%
Ranges after the compression:
 r82: [6..17] [2..3]
 r83: [16..17]
 r84: [16..17]
 r85: [14..15]
 r86: [12..13]
 r87: [10..11]
 r88: [8..9]
 r89: [6..7]
 r90: [4..5]
 r91: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=4, prev_offset=4)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 50
changing reg in insn 37
changing reg in insn 30
changing reg in insn 25
changing reg in insn 24
changing reg in insn 23
changing reg in insn 19
changing reg in insn 15
changing reg in insn 6
changing reg in insn 5
changing reg in insn 5
changing reg in insn 7
changing reg in insn 6
changing reg in insn 7
changing reg in insn 15
changing reg in insn 16
changing reg in insn 19
changing reg in insn 20
changing reg in insn 23
changing reg in insn 24
changing reg in insn 25
changing reg in insn 26
changing reg in insn 26
changing reg in insn 27
changing reg in insn 30
changing reg in insn 31
changing reg in insn 37
changing reg in insn 38
starting the processing of deferred insns
ending the processing of deferred insns


math_state_restore

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 17 [flags]
;;  ref usage 	r0={4d,11u} r1={7d,6u} r2={2d,1u} r7={1d,9u} r17={8d,3u} 
;;    total ref usage 52{22d,30u,0e} in 25{25 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 50 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 50 3 2 2 (parallel [
            (set (reg:SI 0 ax [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 50 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 2 cx [orig:83 last_task_used_math.14_1 ] [83])
        (mem/f/c:SI (plus:SI (reg:SI 0 ax [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("last_task_used_math") [flags 0x2]  <var_decl 0x731e0292e240 last_task_used_math>)
                        ] UNSPEC_GOTOFF))) [13 last_task_used_math+0 S4 A32])) "kernel/sched.c":297:26 75 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (reg/f:SI 1 dx [orig:84 current.15_2 ] [84])
        (mem/f/c:SI (plus:SI (reg:SI 0 ax [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x2]  <var_decl 0x731e0292e120 current>)
                        ] UNSPEC_GOTOFF))) [13 current+0 S4 A32])) "kernel/sched.c":297:26 75 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:SI 2 cx [orig:83 last_task_used_math.14_1 ] [83])
            (reg/f:SI 1 dx [orig:84 current.15_2 ] [84]))) "kernel/sched.c":297:5 11 {*cmpsi_1}
     (nil))
(jump_insn 8 7 13 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 48)
            (pc))) "kernel/sched.c":297:5 806 {*jcc}
     (nil)
 -> 48)
(note 13 8 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 3 (parallel [
            (asm_input/v ("fwait") kernel/sched.c:299)
            (clobber (mem:BLK (scratch) [0  A8]))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":299:2 -1
     (nil))
(insn 15 14 16 3 (set (reg/f:SI 1 dx [orig:85 last_task_used_math.16_3 ] [85])
        (mem/f/c:SI (plus:SI (reg:SI 0 ax [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("last_task_used_math") [flags 0x2]  <var_decl 0x731e0292e240 last_task_used_math>)
                        ] UNSPEC_GOTOFF))) [13 last_task_used_math+0 S4 A32])) "kernel/sched.c":300:6 75 {*movsi_internal}
     (nil))
(insn 16 15 17 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:SI 1 dx [orig:85 last_task_used_math.16_3 ] [85])
            (const_int 0 [0]))) "kernel/sched.c":300:5 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 17 16 18 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 21)
            (pc))) "kernel/sched.c":300:5 806 {*jcc}
     (nil)
 -> 21)
(note 18 17 19 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 19 18 20 4 (set (reg/f:SI 1 dx [orig:86 last_task_used_math.17_4 ] [86])
        (mem/f/c:SI (plus:SI (reg:SI 0 ax [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("last_task_used_math") [flags 0x2]  <var_decl 0x731e0292e240 last_task_used_math>)
                        ] UNSPEC_GOTOFF))) [13 last_task_used_math+0 S4 A32])) "kernel/sched.c":301:50 75 {*movsi_internal}
     (nil))
(insn 20 19 21 4 (parallel [
            (asm_operands/v ("fnsave %0") ("") 0 [
                    (mem:BLK (plus:SI (reg/f:SI 1 dx [orig:86 last_task_used_math.17_4 ] [86])
                            (const_int 848 [0x350])) [12 last_task_used_math.17_4->tss.i387+0 S108 A32])
                ]
                 [
                    (asm_input:BLK ("m") kernel/sched.c:301)
                ]
                 [] kernel/sched.c:301)
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":301:3 -1
     (nil))
(code_label 21 20 22 5 63 (nil) [1 uses])
(note 22 21 23 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 5 (set (reg/f:SI 1 dx [orig:87 current.18_5 ] [87])
        (mem/f/c:SI (plus:SI (reg:SI 0 ax [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x2]  <var_decl 0x731e0292e120 current>)
                        ] UNSPEC_GOTOFF))) [13 current+0 S4 A32])) "kernel/sched.c":303:22 75 {*movsi_internal}
     (nil))
(insn 24 23 25 5 (set (mem/f/c:SI (plus:SI (reg:SI 0 ax [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("last_task_used_math") [flags 0x2]  <var_decl 0x731e0292e240 last_task_used_math>)
                        ] UNSPEC_GOTOFF))) [13 last_task_used_math+0 S4 A32])
        (reg/f:SI 1 dx [orig:87 current.18_5 ] [87])) "kernel/sched.c":303:22 75 {*movsi_internal}
     (nil))
(insn 25 24 26 5 (set (reg/f:SI 1 dx [orig:88 current.19_6 ] [88])
        (mem/f/c:SI (plus:SI (reg:SI 0 ax [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x2]  <var_decl 0x731e0292e120 current>)
                        ] UNSPEC_GOTOFF))) [13 current+0 S4 A32])) "kernel/sched.c":304:13 75 {*movsi_internal}
     (nil))
(insn 26 25 27 5 (set (reg:HI 1 dx [orig:89 _7 ] [89])
        (mem:HI (plus:SI (reg/f:SI 1 dx [orig:88 current.19_6 ] [88])
                (const_int 612 [0x264])) [7 current.19_6->used_math+0 S2 A32])) "kernel/sched.c":304:13 76 {*movhi_internal}
     (nil))
(insn 27 26 28 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:HI 1 dx [orig:89 _7 ] [89])
            (const_int 0 [0]))) "kernel/sched.c":304:5 6 {*cmphi_ccno_1}
     (nil))
(jump_insn 28 27 29 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 34)
            (pc))) "kernel/sched.c":304:5 806 {*jcc}
     (nil)
 -> 34)
(note 29 28 30 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 30 29 31 6 (set (reg/f:SI 0 ax [orig:90 current.20_8 ] [90])
        (mem/f/c:SI (plus:SI (reg:SI 0 ax [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x2]  <var_decl 0x731e0292e120 current>)
                        ] UNSPEC_GOTOFF))) [13 current+0 S4 A32])) "kernel/sched.c":305:38 75 {*movsi_internal}
     (nil))
(insn 31 30 43 6 (parallel [
            (asm_operands/v ("frstor %0") ("") 0 [
                    (mem:BLK (plus:SI (reg/f:SI 0 ax [orig:90 current.20_8 ] [90])
                            (const_int 848 [0x350])) [12 current.20_8->tss.i387+0 S108 A32])
                ]
                 [
                    (asm_input:BLK ("m") kernel/sched.c:305)
                ]
                 [] kernel/sched.c:305)
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":305:3 -1
     (nil))
(jump_insn 43 31 44 6 (set (pc)
        (label_ref 41)) 807 {jump}
     (nil)
 -> 41)
(barrier 44 43 34)
(code_label 34 44 35 7 64 (nil) [1 uses])
(note 35 34 36 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 36 35 37 7 (parallel [
            (asm_operands/v ("fninit") ("") 0 []
                 []
                 [] kernel/sched.c:307)
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":307:3 -1
     (nil))
(insn 37 36 38 7 (set (reg/f:SI 0 ax [orig:91 current.21_9 ] [91])
        (mem/f/c:SI (plus:SI (reg:SI 0 ax [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x2]  <var_decl 0x731e0292e120 current>)
                        ] UNSPEC_GOTOFF))) [13 current+0 S4 A32])) "kernel/sched.c":308:10 75 {*movsi_internal}
     (nil))
(insn 38 37 45 7 (set (mem:HI (plus:SI (reg/f:SI 0 ax [orig:91 current.21_9 ] [91])
                (const_int 612 [0x264])) [7 current.21_9->used_math+0 S2 A32])
        (const_int 1 [0x1])) "kernel/sched.c":308:22 76 {*movhi_internal}
     (nil))
(jump_insn 45 38 46 7 (set (pc)
        (label_ref 41)) 807 {jump}
     (nil)
 -> 41)
(barrier 46 45 48)
(code_label 48 46 47 9 65 (nil) [1 uses])
(note 47 48 49 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 49 47 41 9 (const_int 0 [0]) "kernel/sched.c":298:3 843 {nop}
     (nil))
(code_label 41 49 42 8 60 (nil) [2 uses])
(note 42 41 51 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(note 51 42 0 NOTE_INSN_DELETED)

;; Function do_floppy_timer (do_floppy_timer, funcdef_no=11, decl_uid=1605, cgraph_uid=12, symbol_order=26)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=24, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=-4, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =r {*set_got}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 5:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) m  (1) re {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 10:  (0) q  (1) m {*movqi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=3: Bad operand -- refuse
	 Choosing alt 1 in insn 11:  (0) q  (1) 0  (2) m {*andqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 26:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 28:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) r  (1) l  (2) M {*ashlsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r  (1) Ts {*leasi}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 37
	 Choosing alt 0 in insn 37:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =<  (1) ri*m {*pushsi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) lBwBz {*call} (sp_off=-4)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 40:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-4)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) r {*cmpsi_ccno_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 50:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 51:  (0) =qm  (1) 0 {*one_cmplqi2_1}
      Creating newreg=112 from oldreg=93, assigning class Q_REGS to r112
   51: r112:QI=~r112:QI
      REG_DEAD r93:QI
    Inserting insn reload before:
  100: r112:QI=r93:QI
    Inserting insn reload after:
  101: r94:QI=r112:QI

            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 52:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            alt=3: Bad operand -- refuse
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 54
	 Choosing alt 0 in insn 54:  (0) =qm  (1) %0  (2) qn {*andqi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=7,overall=27,losers=2 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 56:  (0) m  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 57:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) a  (1) d
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 66:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 68:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 71:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =qm  (1) 0  (2) cI {*ashlqi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) rm  (1) re {*cmpsi_1}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2
EBB 3 4 5 6
EBB 7 8
EBB 9
EBB 13
EBB 10
EBB 11 14 12 15

********** Pseudo live ranges #1: **********

  BB 15
   Insn 97: point = 0, n_alt = -1
  BB 12
  BB 14
   Insn 95: point = 0, n_alt = -1
  BB 11
   Insn 79: point = 0, n_alt = -1
   Insn 78: point = 0, n_alt = 0
  BB 2
   Insn 83: point = 1, n_alt = -1
   Insn 6: point = 1, n_alt = 1
   Insn 5: point = 1, n_alt = 8
   Insn 98: point = 1, n_alt = 0
  BB 10
   Insn 72: point = 2, n_alt = 0
   Insn 71: point = 2, n_alt = 0
  BB 9
   Insn 89: point = 3, n_alt = -1
   Insn 68: point = 3, n_alt = 1
   Insn 67: point = 4, n_alt = 0
   Insn 66: point = 5, n_alt = 3
   Insn 65: point = 7, n_alt = 0
   Insn 64: point = 9, n_alt = 0
  BB 8
   Insn 87: point = 11, n_alt = -1
   Insn 59: point = 11, n_alt = 0
   Insn 58: point = 12, n_alt = 0
   Insn 57: point = 13, n_alt = 4
   Insn 56: point = 14, n_alt = 8
   Insn 55: point = 15, n_alt = -2
   Insn 54: point = 17, n_alt = 0
   Insn 53: point = 19, n_alt = -2
   Insn 52: point = 21, n_alt = 4
   Insn 101: point = 22, n_alt = -2
	Hard reg 1 is preferable by r112 with profit 1000
   Insn 51: point = 24, n_alt = 0
   Insn 100: point = 25, n_alt = -2
	Hard reg 1 is preferable by r112 with profit 1000
	Hard reg 0 is preferable by r112 with profit 1000
   Insn 50: point = 27, n_alt = 4
  BB 7
   Insn 48: point = 29, n_alt = -1
   Insn 47: point = 29, n_alt = 0
   Insn 46: point = 30, n_alt = 0
   Insn 45: point = 32, n_alt = 0
  BB 6
   Insn 85: point = 34, n_alt = -1
   Insn 40: point = 34, n_alt = 0
   Insn 39: point = 34, n_alt = 0
   Insn 38: point = 34, n_alt = 0
   Insn 37: point = 35, n_alt = 0
   Insn 36: point = 37, n_alt = 0
   Insn 35: point = 38, n_alt = 1
   Insn 34: point = 40, n_alt = 0
  BB 5
   Insn 32: point = 42, n_alt = -1
   Insn 31: point = 42, n_alt = 0
   Insn 30: point = 43, n_alt = 0
   Insn 29: point = 45, n_alt = 0
   Insn 28: point = 46, n_alt = 1
   Insn 27: point = 47, n_alt = 0
   Insn 26: point = 48, n_alt = 3
   Insn 25: point = 50, n_alt = 0
   Insn 24: point = 52, n_alt = 0
  BB 4
   Insn 22: point = 54, n_alt = -1
   Insn 21: point = 54, n_alt = 0
   Insn 20: point = 55, n_alt = 0
   Insn 19: point = 57, n_alt = 0
  BB 13
   Insn 93: point = 59, n_alt = -1
  BB 3
   Insn 13: point = 60, n_alt = -1
   Insn 12: point = 60, n_alt = 0
   Insn 11: point = 61, n_alt = 1
   Insn 10: point = 63, n_alt = 4
 r82: [0..64]
 r83: [62..63]
 r84: [60..61]
 r85: [54..55]
 r86: [49..50]
 r87: [46..48]
 r88: [42..43]
 r89: [39..40]
 r90: [36..38]
 r91: [34..35]
 r92: [29..30]
 r93: [26..27]
 r94: [18..22]
 r95: [20..21]
 r96: [18..19]
 r97: [16..17]
 r98: [14..15]
 r99: [11..13]
 r100: [6..7]
 r101: [3..5]
 r102: [56..57]
 r103: [51..52]
 r104: [46..47]
 r105: [44..45]
 r106: [36..37]
 r107: [31..32]
 r108: [11..12]
 r109: [8..9]
 r110: [3..4]
 r112: [23..25]
Compressing live ranges: from 65 to 48 - 73%
Ranges after the compression:
 r82: [0..47]
 r83: [46..47]
 r84: [44..45]
 r85: [40..41]
 r86: [36..37]
 r87: [34..35]
 r88: [30..31]
 r89: [28..29]
 r90: [26..27]
 r91: [24..25]
 r92: [20..21]
 r93: [18..19]
 r94: [12..15]
 r95: [14..15]
 r96: [12..13]
 r97: [10..11]
 r98: [8..9]
 r99: [6..7]
 r100: [2..3]
 r101: [0..1]
 r102: [42..43]
 r103: [38..39]
 r104: [34..35]
 r105: [32..33]
 r106: [26..27]
 r107: [22..23]
 r108: [6..7]
 r109: [4..5]
 r110: [0..1]
 r112: [16..17]

********** Assignment #1: **********

	 Assigning to 112 (cl=Q_REGS, orig=93, freq=3000, tfirst=112, tfreq=3000)...
	   Assign 0 to reload r112 (freq=3000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=24, prev_offset=24)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=16)
Can eliminate 19 to 6 (offset=-4, prev_offset=0)
changing reg in insn 98
changing reg in insn 68
changing reg in insn 65
changing reg in insn 57
changing reg in insn 56
changing reg in insn 52
changing reg in insn 46
changing reg in insn 36
changing reg in insn 30
changing reg in insn 28
changing reg in insn 25
changing reg in insn 20
changing reg in insn 10
changing reg in insn 10
changing reg in insn 11
changing reg in insn 11
changing reg in insn 12
changing reg in insn 20
changing reg in insn 21
changing reg in insn 25
changing reg in insn 26
changing reg in insn 26
changing reg in insn 28
changing reg in insn 30
changing reg in insn 31
changing reg in insn 34
changing reg in insn 35
changing reg in insn 35
changing reg in insn 37
changing reg in insn 38
changing reg in insn 46
changing reg in insn 47
changing reg in insn 50
changing reg in insn 52
changing reg in insn 53
changing reg in insn 53
changing reg in insn 54
changing reg in insn 55
changing reg in insn 55
changing reg in insn 56
changing reg in insn 57
changing reg in insn 59
changing reg in insn 65
changing reg in insn 66
changing reg in insn 66
changing reg in insn 68
changing reg in insn 19
changing reg in insn 20
changing reg in insn 24
changing reg in insn 25
changing reg in insn 27
changing reg in insn 28
changing reg in insn 29
changing reg in insn 30
changing reg in insn 36
changing reg in insn 45
changing reg in insn 46
changing reg in insn 58
changing reg in insn 59
changing reg in insn 64
changing reg in insn 65
changing reg in insn 67
changing reg in insn 68
deleting insn with uid = 100.
deleting insn with uid = 53.
deleting insn with uid = 55.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 39.


do_floppy_timer

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 17 [flags]
;;  ref usage 	r0={24d,22u} r1={7d,5u} r2={2d} r3={1d,12u} r7={3d,36u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={17d,5u} r18={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} 
;;    total ref usage 199{119d,80u,0e} in 56{55 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 98 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 98 3 2 2 (parallel [
            (set (reg:SI 3 bx [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 98 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (mem/c:QI (plus:SI (reg/f:SI 7 sp)
                (const_int 11 [0xb])) [0 mask+0 S1 A8])
        (const_int 16 [0x10])) "kernel/sched.c":315:16 77 {*movqi_internal}
     (nil))
(insn 6 5 83 2 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [5 i+0 S4 A32])
        (const_int 0 [0])) "kernel/sched.c":317:9 75 {*movsi_internal}
     (nil))
(jump_insn 83 6 84 2 (set (pc)
        (label_ref 73)) "kernel/sched.c":317:2 807 {jump}
     (nil)
 -> 73)
(barrier 84 83 75)
(code_label 75 84 9 3 72 (nil) [1 uses])
(note 9 75 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 3 (set (reg:QI 0 ax [orig:83 current_DOR.22_1 ] [83])
        (mem/c:QI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current_DOR") [flags 0x2]  <var_decl 0x731e02967360 current_DOR>)
                        ] UNSPEC_GOTOFF))) [0 current_DOR+0 S1 A8])) "kernel/sched.c":318:7 77 {*movqi_internal}
     (nil))
(insn 11 10 12 3 (parallel [
            (set (reg:QI 0 ax [orig:84 _2 ] [84])
                (and:QI (reg:QI 0 ax [orig:83 current_DOR.22_1 ] [83])
                    (mem/c:QI (plus:SI (reg/f:SI 7 sp)
                            (const_int 11 [0xb])) [0 mask+0 S1 A8])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":318:7 491 {*andqi_1}
     (nil))
(insn 12 11 13 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:84 _2 ] [84])
            (const_int 0 [0]))) "kernel/sched.c":318:6 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 13 12 18 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 92)
            (pc))) "kernel/sched.c":318:6 806 {*jcc}
     (nil)
 -> 92)
(note 18 13 19 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 19 18 20 4 (set (reg:SI 0 ax [102])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [5 i+0 S4 A32])) "kernel/sched.c":320:16 75 {*movsi_internal}
     (nil))
(insn 20 19 21 4 (set (reg:SI 0 ax [orig:85 _3 ] [85])
        (mem:SI (plus:SI (plus:SI (mult:SI (reg:SI 0 ax [102])
                        (const_int 4 [0x4]))
                    (reg:SI 3 bx [82]))
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("mon_timer") [flags 0x2]  <var_decl 0x731e02967240 mon_timer>)
                        ] UNSPEC_GOTOFF))) [5 mon_timer[i_20]+0 S4 A32])) "kernel/sched.c":320:16 75 {*movsi_internal}
     (nil))
(insn 21 20 22 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:85 _3 ] [85])
            (const_int 0 [0]))) "kernel/sched.c":320:6 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 22 21 23 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 43)
            (pc))) "kernel/sched.c":320:6 806 {*jcc}
     (nil)
 -> 43)
(note 23 22 24 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 25 5 (set (reg:SI 0 ax [103])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [5 i+0 S4 A32])) "kernel/sched.c":321:20 75 {*movsi_internal}
     (nil))
(insn 25 24 26 5 (set (reg:SI 0 ax [orig:86 _4 ] [86])
        (mem:SI (plus:SI (plus:SI (mult:SI (reg:SI 0 ax [103])
                        (const_int 4 [0x4]))
                    (reg:SI 3 bx [82]))
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("mon_timer") [flags 0x2]  <var_decl 0x731e02967240 mon_timer>)
                        ] UNSPEC_GOTOFF))) [5 mon_timer[i_20]+0 S4 A32])) "kernel/sched.c":321:20 75 {*movsi_internal}
     (nil))
(insn 26 25 27 5 (parallel [
            (set (reg:SI 1 dx [orig:87 _5 ] [87])
                (plus:SI (reg:SI 0 ax [orig:86 _4 ] [86])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":321:9 209 {*addsi_1}
     (nil))
(insn 27 26 28 5 (set (reg:SI 0 ax [104])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [5 i+0 S4 A32])) "kernel/sched.c":321:7 75 {*movsi_internal}
     (nil))
(insn 28 27 29 5 (set (mem:SI (plus:SI (plus:SI (mult:SI (reg:SI 0 ax [104])
                        (const_int 4 [0x4]))
                    (reg:SI 3 bx [82]))
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("mon_timer") [flags 0x2]  <var_decl 0x731e02967240 mon_timer>)
                        ] UNSPEC_GOTOFF))) [5 mon_timer[i_20]+0 S4 A32])
        (reg:SI 1 dx [orig:87 _5 ] [87])) "kernel/sched.c":321:7 75 {*movsi_internal}
     (nil))
(insn 29 28 30 5 (set (reg:SI 0 ax [105])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [5 i+0 S4 A32])) "kernel/sched.c":321:20 75 {*movsi_internal}
     (nil))
(insn 30 29 31 5 (set (reg:SI 0 ax [orig:88 _6 ] [88])
        (mem:SI (plus:SI (plus:SI (mult:SI (reg:SI 0 ax [105])
                        (const_int 4 [0x4]))
                    (reg:SI 3 bx [82]))
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("mon_timer") [flags 0x2]  <var_decl 0x731e02967240 mon_timer>)
                        ] UNSPEC_GOTOFF))) [5 mon_timer[i_20]+0 S4 A32])) "kernel/sched.c":321:20 75 {*movsi_internal}
     (nil))
(insn 31 30 32 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:88 _6 ] [88])
            (const_int 0 [0]))) "kernel/sched.c":321:7 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 32 31 33 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 69)
            (pc))) "kernel/sched.c":321:7 806 {*jcc}
     (nil)
 -> 69)
(note 33 32 34 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 34 33 35 6 (set (reg:SI 0 ax [orig:89 i.23_7 ] [89])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [5 i+0 S4 A32])) "kernel/sched.c":322:15 75 {*movsi_internal}
     (nil))
(insn 35 34 36 6 (parallel [
            (set (reg:SI 1 dx [orig:90 _8 ] [90])
                (ashift:SI (reg:SI 0 ax [orig:89 i.23_7 ] [89])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":322:15 655 {*ashlsi3_1}
     (nil))
(insn 36 35 37 6 (set (reg:SI 0 ax [106])
        (plus:SI (reg:SI 3 bx [82])
            (const:SI (unspec:SI [
                        (symbol_ref:SI ("wait_motor") [flags 0x2]  <var_decl 0x731e029671b0 wait_motor>)
                    ] UNSPEC_GOTOFF)))) "kernel/sched.c":322:5 205 {*leasi}
     (expr_list:REG_EQUAL (symbol_ref:SI ("wait_motor") [flags 0x2]  <var_decl 0x731e029671b0 wait_motor>)
        (nil)))
(insn 37 36 38 6 (parallel [
            (set (reg/f:SI 0 ax [orig:91 _9 ] [91])
                (plus:SI (reg:SI 0 ax [106])
                    (reg:SI 1 dx [orig:90 _8 ] [90])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":322:5 209 {*addsi_1}
     (nil))
(insn 38 37 39 6 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [20  S4 A32])
        (reg/f:SI 0 ax [orig:91 _9 ] [91])) "kernel/sched.c":322:5 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 4 [0x4])
        (nil)))
(call_insn 39 38 40 6 (call (mem:QI (symbol_ref:SI ("wake_up") [flags 0x3]  <function_decl 0x731e02915f00 wake_up>) [0 wake_up S1 A8])
        (const_int 4 [0x4])) "kernel/sched.c":322:5 812 {*call}
     (nil)
    (nil))
(insn 40 39 85 6 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":322:5 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(jump_insn 85 40 86 6 (set (pc)
        (label_ref 69)) 807 {jump}
     (nil)
 -> 69)
(barrier 86 85 43)
(code_label 43 86 44 7 70 (nil) [1 uses])
(note 44 43 45 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 45 44 46 7 (set (reg:SI 0 ax [107])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [5 i+0 S4 A32])) "kernel/sched.c":323:25 75 {*movsi_internal}
     (nil))
(insn 46 45 47 7 (set (reg:SI 0 ax [orig:92 _10 ] [92])
        (mem:SI (plus:SI (plus:SI (mult:SI (reg:SI 0 ax [107])
                        (const_int 4 [0x4]))
                    (reg:SI 3 bx [82]))
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("moff_timer") [flags 0x2]  <var_decl 0x731e029672d0 moff_timer>)
                        ] UNSPEC_GOTOFF))) [5 moff_timer[i_20]+0 S4 A32])) "kernel/sched.c":323:25 75 {*movsi_internal}
     (nil))
(insn 47 46 48 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:92 _10 ] [92])
            (const_int 0 [0]))) "kernel/sched.c":323:13 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 48 47 49 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 62)
            (pc))) "kernel/sched.c":323:13 806 {*jcc}
     (nil)
 -> 62)
(note 49 48 50 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 50 49 51 8 (set (reg:QI 0 ax [orig:93 mask.24_11 ] [93])
        (mem/c:QI (plus:SI (reg/f:SI 7 sp)
                (const_int 11 [0xb])) [0 mask+0 S1 A8])) "kernel/sched.c":324:16 77 {*movqi_internal}
     (nil))
(insn 51 50 101 8 (set (reg:QI 0 ax [orig:93 mask.24_11 ] [93])
        (not:QI (reg:QI 0 ax [orig:93 mask.24_11 ] [93]))) "kernel/sched.c":324:16 635 {*one_cmplqi2_1}
     (nil))
(insn 101 51 52 8 (set (reg:QI 1 dx [orig:94 _12 ] [94])
        (reg:QI 0 ax [orig:93 mask.24_11 ] [93])) "kernel/sched.c":324:16 77 {*movqi_internal}
     (nil))
(insn 52 101 54 8 (set (reg:QI 0 ax [orig:95 current_DOR.25_13 ] [95])
        (mem/c:QI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current_DOR") [flags 0x2]  <var_decl 0x731e02967360 current_DOR>)
                        ] UNSPEC_GOTOFF))) [0 current_DOR+0 S1 A8])) "kernel/sched.c":324:16 77 {*movqi_internal}
     (nil))
(insn 54 52 56 8 (parallel [
            (set (reg:QI 0 ax [orig:97 _15 ] [97])
                (and:QI (reg:QI 0 ax [orig:96 current_DOR.26_14 ] [96])
                    (reg:QI 1 dx [orig:94 _12 ] [94])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":324:16 491 {*andqi_1}
     (nil))
(insn 56 54 57 8 (set (mem/c:QI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current_DOR") [flags 0x2]  <var_decl 0x731e02967360 current_DOR>)
                        ] UNSPEC_GOTOFF))) [0 current_DOR+0 S1 A8])
        (reg:QI 0 ax [orig:98 _16 ] [98])) "kernel/sched.c":324:16 77 {*movqi_internal}
     (nil))
(insn 57 56 58 8 (set (reg:QI 0 ax [orig:99 current_DOR.27_17 ] [99])
        (mem/c:QI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current_DOR") [flags 0x2]  <var_decl 0x731e02967360 current_DOR>)
                        ] UNSPEC_GOTOFF))) [0 current_DOR+0 S1 A8])) "kernel/sched.c":325:4 77 {*movqi_internal}
     (nil))
(insn 58 57 59 8 (set (reg:SI 1 dx [108])
        (const_int 1010 [0x3f2])) "kernel/sched.c":325:4 75 {*movsi_internal}
     (nil))
(insn 59 58 87 8 (parallel [
            (asm_operands/v ("outb %%al, %%dx") ("") 0 [
                    (reg:QI 0 ax [orig:99 current_DOR.27_17 ] [99])
                    (reg:SI 1 dx [108])
                ]
                 [
                    (asm_input:QI ("a") kernel/sched.c:325)
                    (asm_input:SI ("d") kernel/sched.c:325)
                ]
                 [] kernel/sched.c:325)
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":325:4 -1
     (nil))
(jump_insn 87 59 88 8 (set (pc)
        (label_ref 69)) 807 {jump}
     (nil)
 -> 69)
(barrier 88 87 62)
(code_label 62 88 63 9 71 (nil) [1 uses])
(note 63 62 64 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 64 63 65 9 (set (reg:SI 0 ax [109])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [5 i+0 S4 A32])) "kernel/sched.c":327:14 75 {*movsi_internal}
     (nil))
(insn 65 64 66 9 (set (reg:SI 0 ax [orig:100 _18 ] [100])
        (mem:SI (plus:SI (plus:SI (mult:SI (reg:SI 0 ax [109])
                        (const_int 4 [0x4]))
                    (reg:SI 3 bx [82]))
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("moff_timer") [flags 0x2]  <var_decl 0x731e029672d0 moff_timer>)
                        ] UNSPEC_GOTOFF))) [5 moff_timer[i_20]+0 S4 A32])) "kernel/sched.c":327:14 75 {*movsi_internal}
     (nil))
(insn 66 65 67 9 (parallel [
            (set (reg:SI 1 dx [orig:101 _19 ] [101])
                (plus:SI (reg:SI 0 ax [orig:100 _18 ] [100])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":327:17 209 {*addsi_1}
     (nil))
(insn 67 66 68 9 (set (reg:SI 0 ax [110])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [5 i+0 S4 A32])) "kernel/sched.c":327:17 75 {*movsi_internal}
     (nil))
(insn 68 67 89 9 (set (mem:SI (plus:SI (plus:SI (mult:SI (reg:SI 0 ax [110])
                        (const_int 4 [0x4]))
                    (reg:SI 3 bx [82]))
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("moff_timer") [flags 0x2]  <var_decl 0x731e029672d0 moff_timer>)
                        ] UNSPEC_GOTOFF))) [5 moff_timer[i_20]+0 S4 A32])
        (reg:SI 1 dx [orig:101 _19 ] [101])) "kernel/sched.c":327:17 75 {*movsi_internal}
     (nil))
(jump_insn 89 68 90 9 (set (pc)
        (label_ref 69)) 807 {jump}
     (nil)
 -> 69)
(barrier 90 89 92)
(code_label 92 90 91 13 73 (nil) [1 uses])
(note 91 92 93 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 93 91 69 13 (const_int 0 [0]) "kernel/sched.c":319:4 843 {nop}
     (nil))
(code_label 69 93 70 10 69 (nil) [4 uses])
(note 70 69 71 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 71 70 72 10 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 12 [0xc])) [5 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 12 [0xc])) [5 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":317:22 209 {*addsi_1}
     (nil))
(insn 72 71 73 10 (parallel [
            (set (mem/c:QI (plus:SI (reg/f:SI 7 sp)
                        (const_int 11 [0xb])) [0 mask+0 S1 A8])
                (ashift:QI (mem/c:QI (plus:SI (reg/f:SI 7 sp)
                            (const_int 11 [0xb])) [0 mask+0 S1 A8])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":317:31 660 {*ashlqi3_1}
     (nil))
(code_label 73 72 74 11 67 (nil) [1 uses])
(note 74 73 78 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 78 74 79 11 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 12 [0xc])) [5 i+0 S4 A32])
            (const_int 3 [0x3]))) "kernel/sched.c":317:16 11 {*cmpsi_1}
     (nil))
(jump_insn 79 78 94 11 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 75)
            (pc))) "kernel/sched.c":317:16 806 {*jcc}
     (nil)
 -> 75)
(note 94 79 95 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 95 94 80 14 (const_int 0 [0]) "kernel/sched.c":329:1 843 {nop}
     (nil))
(note 80 95 96 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(note 96 80 97 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 97 96 99 15 (const_int 0 [0]) "kernel/sched.c":329:1 843 {nop}
     (nil))
(note 99 97 0 NOTE_INSN_DELETED)

;; Function do_timer (do_timer, funcdef_no=12, decl_uid=1614, cgraph_uid=13, symbol_order=27)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 128:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 12:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) lBwBz {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 29:  (0) =rm  (1) %0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 30:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 37:  (0) =rm  (1) %0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 38:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 47:  (0) =rm  (1) %0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 48:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 54:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 56:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 59:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) lBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) r {*cmpsi_ccno_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 77:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 79:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) lBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 88:  (0) =rm  (1) %0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 89:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 101:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 102:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 109:  (0) lBwBz {*call}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2 3 4
EBB 5 6
EBB 7
EBB 8 9
EBB 10
EBB 11 12
EBB 13 14
EBB 15 16 17
EBB 19
EBB 20
EBB 18

********** Pseudo live ranges #1: **********

  BB 18
  BB 19
   Insn 123: point = 0, n_alt = -1
   Insn 122: point = 0, n_alt = -1
  BB 17
   Insn 118: point = 0, n_alt = -1
   Insn 109: point = 0, n_alt = 0
  BB 20
   Insn 127: point = 0, n_alt = -1
  BB 16
   Insn 103: point = 0, n_alt = -1
   Insn 102: point = 0, n_alt = 1
   Insn 101: point = 0, n_alt = 1
   Insn 100: point = 1, n_alt = 0
  BB 15
   Insn 94: point = 4, n_alt = -1
   Insn 93: point = 4, n_alt = 0
   Insn 90: point = 5, n_alt = 0
   Insn 89: point = 7, n_alt = 1
   Insn 88: point = 8, n_alt = 0
   Insn 87: point = 10, n_alt = 0
   Insn 86: point = 11, n_alt = 0
  BB 14
   Insn 83: point = 13, n_alt = 0
  BB 13
   Insn 81: point = 14, n_alt = -1
   Insn 80: point = 14, n_alt = 0
   Insn 79: point = 15, n_alt = 0
   Insn 78: point = 17, n_alt = 0
   Insn 77: point = 19, n_alt = 4
  BB 11
   Insn 66: point = 21, n_alt = -1
   Insn 65: point = 21, n_alt = 0
   Insn 64: point = 22, n_alt = 0
  BB 9
   Insn 116: point = 24, n_alt = -1
   Insn 48: point = 24, n_alt = 1
   Insn 47: point = 25, n_alt = 0
   Insn 46: point = 27, n_alt = 0
   Insn 45: point = 28, n_alt = 0
  BB 10
   Insn 61: point = 30, n_alt = 0
   Insn 60: point = 31, n_alt = 0
   Insn 59: point = 32, n_alt = 1
   Insn 58: point = 33, n_alt = 0
   Insn 57: point = 35, n_alt = 0
   Insn 56: point = 36, n_alt = 1
   Insn 55: point = 37, n_alt = 0
   Insn 54: point = 38, n_alt = 1
   Insn 53: point = 39, n_alt = 0
   Insn 52: point = 41, n_alt = 0
  BB 12
   Insn 74: point = 43, n_alt = -1
   Insn 73: point = 43, n_alt = 0
   Insn 69: point = 44, n_alt = 0
   Insn 68: point = 46, n_alt = 0
  BB 8
   Insn 43: point = 48, n_alt = -1
   Insn 42: point = 48, n_alt = 0
   Insn 41: point = 49, n_alt = 0
  BB 6
   Insn 114: point = 51, n_alt = -1
   Insn 30: point = 51, n_alt = 1
   Insn 29: point = 52, n_alt = 0
   Insn 28: point = 54, n_alt = 0
   Insn 27: point = 55, n_alt = 0
  BB 7
   Insn 38: point = 57, n_alt = 1
   Insn 37: point = 58, n_alt = 0
   Insn 36: point = 60, n_alt = 0
   Insn 35: point = 61, n_alt = 0
  BB 5
   Insn 25: point = 63, n_alt = -1
   Insn 24: point = 63, n_alt = 1
  BB 4
   Insn 21: point = 64, n_alt = 0
   Insn 20: point = 64, n_alt = -2
  BB 3
   Insn 18: point = 65, n_alt = -1
   Insn 17: point = 65, n_alt = 0
   Insn 16: point = 66, n_alt = 0
   Insn 15: point = 68, n_alt = 0
   Insn 14: point = 69, n_alt = 1
   Insn 13: point = 70, n_alt = 0
   Insn 12: point = 71, n_alt = 3
   Insn 11: point = 73, n_alt = 0
   Insn 10: point = 75, n_alt = 0
  BB 2
   Insn 8: point = 77, n_alt = -1
   Insn 7: point = 77, n_alt = 0
   Insn 6: point = 78, n_alt = 0
   Insn 5: point = 80, n_alt = 0
   Insn 128: point = 81, n_alt = 0
 r82: [2..81]
 r83: [77..78]
 r84: [72..73]
 r85: [69..71]
 r86: [65..66]
 r87: [51..55]
 r88: [53..54]
 r89: [51..52]
 r90: [57..61]
 r91: [59..60]
 r92: [57..58]
 r93: [48..49]
 r94: [24..28]
 r95: [26..27]
 r96: [24..25]
 r97: [40..41]
 r98: [36..37]
 r99: [34..35]
 r100: [32..33]
 r101: [21..22]
 r102: [45..46]
 r103: [43..44]
 r104: [18..19]
 r105: [16..17]
 r106: [14..15]
 r107: [6..11]
 r108: [9..10]
 r109: [7..8]
 r110: [4..5]
 r111: [0..1]
 r112: [79..80]
 r113: [74..75]
 r114: [69..70]
 r115: [67..68]
 r116: [38..39]
 r117: [30..31]
Compressing live ranges: from 82 to 60 - 73%
Ranges after the compression:
 r82: [2..59]
 r83: [56..57]
 r84: [52..53]
 r85: [50..51]
 r86: [46..47]
 r87: [38..41]
 r88: [40..41]
 r89: [38..39]
 r90: [42..45]
 r91: [44..45]
 r92: [42..43]
 r93: [36..37]
 r94: [16..19]
 r95: [18..19]
 r96: [16..17]
 r97: [30..31]
 r98: [26..27]
 r99: [24..25]
 r100: [22..23]
 r101: [14..15]
 r102: [34..35]
 r103: [32..33]
 r104: [12..13]
 r105: [10..11]
 r106: [8..9]
 r107: [4..7]
 r108: [6..7]
 r109: [4..5]
 r110: [2..3]
 r111: [0..1]
 r112: [58..59]
 r113: [54..55]
 r114: [50..51]
 r115: [48..49]
 r116: [28..29]
 r117: [20..21]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=32)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=16)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
changing reg in insn 128
changing reg in insn 100
changing reg in insn 86
changing reg in insn 77
changing reg in insn 68
changing reg in insn 64
changing reg in insn 59
changing reg in insn 57
changing reg in insn 55
changing reg in insn 52
changing reg in insn 45
changing reg in insn 41
changing reg in insn 35
changing reg in insn 27
changing reg in insn 20
changing reg in insn 15
changing reg in insn 13
changing reg in insn 10
changing reg in insn 5
changing reg in insn 6
changing reg in insn 7
changing reg in insn 11
changing reg in insn 12
changing reg in insn 12
changing reg in insn 14
changing reg in insn 16
changing reg in insn 17
changing reg in insn 27
changing reg in insn 30
changing reg in insn 28
changing reg in insn 28
changing reg in insn 29
changing reg in insn 29
changing reg in insn 30
changing reg in insn 35
changing reg in insn 38
changing reg in insn 36
changing reg in insn 36
changing reg in insn 37
changing reg in insn 37
changing reg in insn 38
changing reg in insn 41
changing reg in insn 42
changing reg in insn 45
changing reg in insn 48
changing reg in insn 46
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 48
changing reg in insn 52
changing reg in insn 53
changing reg in insn 55
changing reg in insn 56
changing reg in insn 57
changing reg in insn 58
changing reg in insn 58
changing reg in insn 59
changing reg in insn 64
changing reg in insn 65
changing reg in insn 68
changing reg in insn 69
changing reg in insn 69
changing reg in insn 73
changing reg in insn 77
changing reg in insn 78
changing reg in insn 78
changing reg in insn 79
changing reg in insn 79
changing reg in insn 80
changing reg in insn 86
changing reg in insn 90
changing reg in insn 89
changing reg in insn 87
changing reg in insn 87
changing reg in insn 88
changing reg in insn 88
changing reg in insn 89
changing reg in insn 90
changing reg in insn 93
changing reg in insn 100
changing reg in insn 101
changing reg in insn 5
changing reg in insn 6
changing reg in insn 10
changing reg in insn 11
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 16
changing reg in insn 53
changing reg in insn 54
changing reg in insn 60
changing reg in insn 61
deleting insn with uid = 20.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 21.
rescanning insn with uid = 61.
verify found no changes in insn with uid = 83.
verify found no changes in insn with uid = 109.


do_timer

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 17 [flags]
;;  ref usage 	r0={31d,31u} r1={14d,9u} r2={5d} r3={1d,18u} r7={1d,28u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={20d,9u} r18={4d} r20={4d} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={4d} r38={4d} r39={4d} r40={4d} r41={4d} r42={4d} r43={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} 
;;    total ref usage 427{332d,95u,0e} in 73{69 regular + 4 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 128 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 128 3 2 2 (parallel [
            (set (reg:SI 3 bx [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 128 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 0 ax [112])
        (mem/u/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("beepcount") [flags 0x40]  <var_decl 0x731e029676c0 beepcount>)
                        ] UNSPEC_GOT))) [24  S4 A8])) "kernel/sched.c":336:9 75 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (reg:SI 0 ax [orig:83 beepcount.28_1 ] [83])
        (mem/c:SI (reg/f:SI 0 ax [112]) [5 beepcount+0 S4 A32])) "kernel/sched.c":336:9 75 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:83 beepcount.28_1 ] [83])
            (const_int 0 [0]))) "kernel/sched.c":336:8 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 8 7 9 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 22)
            (pc))) "kernel/sched.c":336:8 806 {*jcc}
     (nil)
 -> 22)
(note 9 8 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 3 (set (reg/f:SI 0 ax [113])
        (mem/u/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("beepcount") [flags 0x40]  <var_decl 0x731e029676c0 beepcount>)
                        ] UNSPEC_GOT))) [24  S4 A8])) "kernel/sched.c":337:14 75 {*movsi_internal}
     (nil))
(insn 11 10 12 3 (set (reg:SI 0 ax [orig:84 beepcount.29_2 ] [84])
        (mem/c:SI (reg/f:SI 0 ax [113]) [5 beepcount+0 S4 A32])) "kernel/sched.c":337:14 75 {*movsi_internal}
     (nil))
(insn 12 11 13 3 (parallel [
            (set (reg:SI 1 dx [orig:85 _3 ] [85])
                (plus:SI (reg:SI 0 ax [orig:84 beepcount.29_2 ] [84])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":337:14 209 {*addsi_1}
     (nil))
(insn 13 12 14 3 (set (reg/f:SI 0 ax [114])
        (mem/u/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("beepcount") [flags 0x40]  <var_decl 0x731e029676c0 beepcount>)
                        ] UNSPEC_GOT))) [24  S4 A8])) "kernel/sched.c":337:12 75 {*movsi_internal}
     (nil))
(insn 14 13 15 3 (set (mem/c:SI (reg/f:SI 0 ax [114]) [5 beepcount+0 S4 A32])
        (reg:SI 1 dx [orig:85 _3 ] [85])) "kernel/sched.c":337:12 75 {*movsi_internal}
     (nil))
(insn 15 14 16 3 (set (reg/f:SI 0 ax [115])
        (mem/u/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("beepcount") [flags 0x40]  <var_decl 0x731e029676c0 beepcount>)
                        ] UNSPEC_GOT))) [24  S4 A8])) "kernel/sched.c":337:14 75 {*movsi_internal}
     (nil))
(insn 16 15 17 3 (set (reg:SI 0 ax [orig:86 beepcount.30_4 ] [86])
        (mem/c:SI (reg/f:SI 0 ax [115]) [5 beepcount+0 S4 A32])) "kernel/sched.c":337:14 75 {*movsi_internal}
     (nil))
(insn 17 16 18 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:86 beepcount.30_4 ] [86])
            (const_int 0 [0]))) "kernel/sched.c":337:12 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 18 17 19 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 22)
            (pc))) "kernel/sched.c":337:12 806 {*jcc}
     (nil)
 -> 22)
(note 19 18 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(call_insn 21 19 22 4 (call (mem:QI (symbol_ref:SI ("sysbeepstop") [flags 0x41]  <function_decl 0x731e02974000 sysbeepstop>) [0 sysbeepstop S1 A8])
        (const_int 0 [0])) "kernel/sched.c":338:13 812 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(code_label 22 21 23 5 75 (nil) [2 uses])
(note 23 22 24 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 25 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 32 [0x20])) [2 cpl+0 S4 A32])
            (const_int 0 [0]))) "kernel/sched.c":340:8 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 25 24 26 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 33)
            (pc))) "kernel/sched.c":340:8 806 {*jcc}
     (nil)
 -> 33)
(note 26 25 27 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 27 26 28 6 (set (reg/f:SI 0 ax [orig:87 current.31_5 ] [87])
        (mem/f/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x2]  <var_decl 0x731e0292e120 current>)
                        ] UNSPEC_GOTOFF))) [13 current+0 S4 A32])) "kernel/sched.c":341:16 75 {*movsi_internal}
     (nil))
(insn 28 27 29 6 (set (reg:SI 1 dx [orig:88 _6 ] [88])
        (mem:SI (plus:SI (reg/f:SI 0 ax [orig:87 current.31_5 ] [87])
                (const_int 592 [0x250])) [2 current.31_5->utime+0 S4 A32])) "kernel/sched.c":341:16 75 {*movsi_internal}
     (nil))
(insn 29 28 30 6 (parallel [
            (set (reg:SI 1 dx [orig:89 _7 ] [89])
                (plus:SI (reg:SI 1 dx [orig:88 _6 ] [88])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":341:23 209 {*addsi_1}
     (nil))
(insn 30 29 114 6 (set (mem:SI (plus:SI (reg/f:SI 0 ax [orig:87 current.31_5 ] [87])
                (const_int 592 [0x250])) [2 current.31_5->utime+0 S4 A32])
        (reg:SI 1 dx [orig:89 _7 ] [89])) "kernel/sched.c":341:23 75 {*movsi_internal}
     (nil))
(jump_insn 114 30 115 6 (set (pc)
        (label_ref 39)) 807 {jump}
     (nil)
 -> 39)
(barrier 115 114 33)
(code_label 33 115 34 7 76 (nil) [1 uses])
(note 34 33 35 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 35 34 36 7 (set (reg/f:SI 0 ax [orig:90 current.32_8 ] [90])
        (mem/f/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x2]  <var_decl 0x731e0292e120 current>)
                        ] UNSPEC_GOTOFF))) [13 current+0 S4 A32])) "kernel/sched.c":343:16 75 {*movsi_internal}
     (nil))
(insn 36 35 37 7 (set (reg:SI 1 dx [orig:91 _9 ] [91])
        (mem:SI (plus:SI (reg/f:SI 0 ax [orig:90 current.32_8 ] [90])
                (const_int 596 [0x254])) [2 current.32_8->stime+0 S4 A32])) "kernel/sched.c":343:16 75 {*movsi_internal}
     (nil))
(insn 37 36 38 7 (parallel [
            (set (reg:SI 1 dx [orig:92 _10 ] [92])
                (plus:SI (reg:SI 1 dx [orig:91 _9 ] [91])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":343:23 209 {*addsi_1}
     (nil))
(insn 38 37 39 7 (set (mem:SI (plus:SI (reg/f:SI 0 ax [orig:90 current.32_8 ] [90])
                (const_int 596 [0x254])) [2 current.32_8->stime+0 S4 A32])
        (reg:SI 1 dx [orig:92 _10 ] [92])) "kernel/sched.c":343:23 75 {*movsi_internal}
     (nil))
(code_label 39 38 40 8 77 (nil) [1 uses])
(note 40 39 41 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 41 40 42 8 (set (reg/f:SI 0 ax [orig:93 next_timer.33_11 ] [93])
        (mem/f/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("next_timer") [flags 0x2]  <var_decl 0x731e02967000 next_timer>)
                        ] UNSPEC_GOTOFF))) [14 next_timer+0 S4 A32])) "kernel/sched.c":345:9 75 {*movsi_internal}
     (nil))
(insn 42 41 43 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:SI 0 ax [orig:93 next_timer.33_11 ] [93])
            (const_int 0 [0]))) "kernel/sched.c":345:8 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 43 42 44 8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 75)
            (pc))) "kernel/sched.c":345:8 806 {*jcc}
     (nil)
 -> 75)
(note 44 43 45 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 45 44 46 9 (set (reg/f:SI 0 ax [orig:94 next_timer.34_12 ] [94])
        (mem/f/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("next_timer") [flags 0x2]  <var_decl 0x731e02967000 next_timer>)
                        ] UNSPEC_GOTOFF))) [14 next_timer+0 S4 A32])) "kernel/sched.c":346:19 75 {*movsi_internal}
     (nil))
(insn 46 45 47 9 (set (reg:SI 1 dx [orig:95 _13 ] [95])
        (mem:SI (reg/f:SI 0 ax [orig:94 next_timer.34_12 ] [94]) [2 next_timer.34_12->jiffies+0 S4 A32])) "kernel/sched.c":346:19 75 {*movsi_internal}
     (nil))
(insn 47 46 48 9 (parallel [
            (set (reg:SI 1 dx [orig:96 _14 ] [96])
                (plus:SI (reg:SI 1 dx [orig:95 _13 ] [95])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":346:28 209 {*addsi_1}
     (nil))
(insn 48 47 116 9 (set (mem:SI (reg/f:SI 0 ax [orig:94 next_timer.34_12 ] [94]) [2 next_timer.34_12->jiffies+0 S4 A32])
        (reg:SI 1 dx [orig:96 _14 ] [96])) "kernel/sched.c":346:28 75 {*movsi_internal}
     (nil))
(jump_insn 116 48 117 9 (set (pc)
        (label_ref 62)) "kernel/sched.c":347:15 807 {jump}
     (nil)
 -> 62)
(barrier 117 116 70)
(code_label 70 117 51 10 80 (nil) [1 uses])
(note 51 70 52 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 52 51 53 10 (set (reg/f:SI 0 ax [orig:97 next_timer.35_15 ] [97])
        (mem/f/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("next_timer") [flags 0x2]  <var_decl 0x731e02967000 next_timer>)
                        ] UNSPEC_GOTOFF))) [14 next_timer+0 S4 A32])) "kernel/sched.c":350:28 75 {*movsi_internal}
     (nil))
(insn 53 52 54 10 (set (reg/f:SI 0 ax [116])
        (mem/f:SI (plus:SI (reg/f:SI 0 ax [orig:97 next_timer.35_15 ] [97])
                (const_int 4 [0x4])) [6 next_timer.35_15->fn+0 S4 A32])) "kernel/sched.c":350:16 75 {*movsi_internal}
     (nil))
(insn 54 53 55 10 (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [6 fn+0 S4 A32])
        (reg/f:SI 0 ax [116])) "kernel/sched.c":350:16 75 {*movsi_internal}
     (nil))
(insn 55 54 56 10 (set (reg/f:SI 0 ax [orig:98 next_timer.36_16 ] [98])
        (mem/f/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("next_timer") [flags 0x2]  <var_decl 0x731e02967000 next_timer>)
                        ] UNSPEC_GOTOFF))) [14 next_timer+0 S4 A32])) "kernel/sched.c":351:23 75 {*movsi_internal}
     (nil))
(insn 56 55 57 10 (set (mem/f:SI (plus:SI (reg/f:SI 0 ax [orig:98 next_timer.36_16 ] [98])
                (const_int 4 [0x4])) [6 next_timer.36_16->fn+0 S4 A32])
        (const_int 0 [0])) "kernel/sched.c":351:28 75 {*movsi_internal}
     (nil))
(insn 57 56 58 10 (set (reg/f:SI 0 ax [orig:99 next_timer.37_17 ] [99])
        (mem/f/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("next_timer") [flags 0x2]  <var_decl 0x731e02967000 next_timer>)
                        ] UNSPEC_GOTOFF))) [14 next_timer+0 S4 A32])) "kernel/sched.c":352:36 75 {*movsi_internal}
     (nil))
(insn 58 57 59 10 (set (reg/f:SI 0 ax [orig:100 _18 ] [100])
        (mem/f:SI (plus:SI (reg/f:SI 0 ax [orig:99 next_timer.37_17 ] [99])
                (const_int 8 [0x8])) [14 next_timer.37_17->next+0 S4 A32])) "kernel/sched.c":352:36 75 {*movsi_internal}
     (nil))
(insn 59 58 60 10 (set (mem/f/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("next_timer") [flags 0x2]  <var_decl 0x731e02967000 next_timer>)
                        ] UNSPEC_GOTOFF))) [14 next_timer+0 S4 A32])
        (reg/f:SI 0 ax [orig:100 _18 ] [100])) "kernel/sched.c":352:24 75 {*movsi_internal}
     (nil))
(insn 60 59 61 10 (set (reg/f:SI 0 ax [117])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [6 fn+0 S4 A32])) "kernel/sched.c":353:13 75 {*movsi_internal}
     (nil))
(call_insn 61 60 62 10 (call (mem:QI (reg/f:SI 0 ax [117]) [0 *fn_43 S1 A8])
        (const_int 0 [0])) "kernel/sched.c":353:13 812 {*call}
     (nil)
    (nil))
(code_label 62 61 63 11 79 (nil) [1 uses])
(note 63 62 64 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 64 63 65 11 (set (reg/f:SI 0 ax [orig:101 next_timer.38_19 ] [101])
        (mem/f/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("next_timer") [flags 0x2]  <var_decl 0x731e02967000 next_timer>)
                        ] UNSPEC_GOTOFF))) [14 next_timer+0 S4 A32])) "kernel/sched.c":347:16 75 {*movsi_internal}
     (nil))
(insn 65 64 66 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:SI 0 ax [orig:101 next_timer.38_19 ] [101])
            (const_int 0 [0]))) "kernel/sched.c":347:27 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 66 65 67 11 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 75)
            (pc))) "kernel/sched.c":347:27 806 {*jcc}
     (nil)
 -> 75)
(note 67 66 68 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 68 67 69 12 (set (reg/f:SI 0 ax [orig:102 next_timer.39_20 ] [102])
        (mem/f/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("next_timer") [flags 0x2]  <var_decl 0x731e02967000 next_timer>)
                        ] UNSPEC_GOTOFF))) [14 next_timer+0 S4 A32])) "kernel/sched.c":347:40 75 {*movsi_internal}
     (nil))
(insn 69 68 73 12 (set (reg:SI 0 ax [orig:103 _21 ] [103])
        (mem:SI (reg/f:SI 0 ax [orig:102 next_timer.39_20 ] [102]) [2 next_timer.39_20->jiffies+0 S4 A32])) "kernel/sched.c":347:40 75 {*movsi_internal}
     (nil))
(insn 73 69 74 12 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:SI 0 ax [orig:103 _21 ] [103])
            (const_int 0 [0]))) "kernel/sched.c":347:27 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 74 73 75 12 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 70)
            (pc))) "kernel/sched.c":347:27 806 {*jcc}
     (nil)
 -> 70)
(code_label 75 74 76 13 78 (nil) [2 uses])
(note 76 75 77 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 77 76 78 13 (set (reg:QI 0 ax [orig:104 current_DOR.40_22 ] [104])
        (mem/c:QI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current_DOR") [flags 0x2]  <var_decl 0x731e02967360 current_DOR>)
                        ] UNSPEC_GOTOFF))) [0 current_DOR+0 S1 A8])) "kernel/sched.c":356:21 77 {*movqi_internal}
     (nil))
(insn 78 77 79 13 (set (reg:SI 0 ax [orig:105 _23 ] [105])
        (zero_extend:SI (reg:QI 0 ax [orig:104 current_DOR.40_22 ] [104]))) "kernel/sched.c":356:21 143 {*zero_extendqisi2}
     (nil))
(insn 79 78 80 13 (parallel [
            (set (reg:SI 0 ax [orig:106 _24 ] [106])
                (and:SI (reg:SI 0 ax [orig:105 _23 ] [105])
                    (const_int 240 [0xf0])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":356:21 490 {*andsi_1}
     (nil))
(insn 80 79 81 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:106 _24 ] [106])
            (const_int 0 [0]))) "kernel/sched.c":356:8 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 81 80 82 13 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 84)
            (pc))) "kernel/sched.c":356:8 806 {*jcc}
     (nil)
 -> 84)
(note 82 81 83 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(call_insn 83 82 84 14 (call (mem:QI (symbol_ref:SI ("do_floppy_timer") [flags 0x3]  <function_decl 0x731e0295e900 do_floppy_timer>) [0 do_floppy_timer S1 A8])
        (const_int 0 [0])) "kernel/sched.c":357:9 812 {*call}
     (nil)
    (nil))
(code_label 84 83 85 15 81 (nil) [1 uses])
(note 85 84 86 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 86 85 87 15 (set (reg/f:SI 0 ax [orig:107 current.41_25 ] [107])
        (mem/f/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x2]  <var_decl 0x731e0292e120 current>)
                        ] UNSPEC_GOTOFF))) [13 current+0 S4 A32])) "kernel/sched.c":358:19 75 {*movsi_internal}
     (nil))
(insn 87 86 88 15 (set (reg:SI 1 dx [orig:108 _26 ] [108])
        (mem:SI (plus:SI (reg/f:SI 0 ax [orig:107 current.41_25 ] [107])
                (const_int 4 [0x4])) [2 current.41_25->counter+0 S4 A32])) "kernel/sched.c":358:19 75 {*movsi_internal}
     (nil))
(insn 88 87 89 15 (parallel [
            (set (reg:SI 1 dx [orig:109 _27 ] [109])
                (plus:SI (reg:SI 1 dx [orig:108 _26 ] [108])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":358:10 209 {*addsi_1}
     (nil))
(insn 89 88 90 15 (set (mem:SI (plus:SI (reg/f:SI 0 ax [orig:107 current.41_25 ] [107])
                (const_int 4 [0x4])) [2 current.41_25->counter+0 S4 A32])
        (reg:SI 1 dx [orig:109 _27 ] [109])) "kernel/sched.c":358:8 75 {*movsi_internal}
     (nil))
(insn 90 89 93 15 (set (reg:SI 0 ax [orig:110 _28 ] [110])
        (mem:SI (plus:SI (reg/f:SI 0 ax [orig:107 current.41_25 ] [107])
                (const_int 4 [0x4])) [2 current.41_25->counter+0 S4 A32])) "kernel/sched.c":358:19 75 {*movsi_internal}
     (nil))
(insn 93 90 94 15 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:SI 0 ax [orig:110 _28 ] [110])
            (const_int 0 [0]))) "kernel/sched.c":358:8 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 94 93 99 15 (set (pc)
        (if_then_else (gt (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 121)
            (pc))) "kernel/sched.c":358:8 806 {*jcc}
     (nil)
 -> 121)
(note 99 94 100 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 100 99 101 16 (set (reg/f:SI 0 ax [orig:111 current.42_29 ] [111])
        (mem/f/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x2]  <var_decl 0x731e0292e120 current>)
                        ] UNSPEC_GOTOFF))) [13 current+0 S4 A32])) "kernel/sched.c":360:12 75 {*movsi_internal}
     (nil))
(insn 101 100 102 16 (set (mem:SI (plus:SI (reg/f:SI 0 ax [orig:111 current.42_29 ] [111])
                (const_int 4 [0x4])) [2 current.42_29->counter+0 S4 A32])
        (const_int 0 [0])) "kernel/sched.c":360:22 75 {*movsi_internal}
     (nil))
(insn 102 101 103 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 32 [0x20])) [2 cpl+0 S4 A32])
            (const_int 0 [0]))) "kernel/sched.c":361:8 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 103 102 108 16 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 126)
            (pc))) "kernel/sched.c":361:8 806 {*jcc}
     (nil)
 -> 126)
(note 108 103 109 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(call_insn 109 108 118 17 (call (mem:QI (symbol_ref:SI ("schedule") [flags 0x3]  <function_decl 0x731e02915c00 schedule>) [0 schedule S1 A8])
        (const_int 0 [0])) "kernel/sched.c":363:5 812 {*call}
     (nil)
    (nil))
(jump_insn 118 109 119 17 (set (pc)
        (label_ref 112)) 807 {jump}
     (nil)
 -> 112)
(barrier 119 118 121)
(code_label 121 119 120 19 85 (nil) [1 uses])
(note 120 121 122 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 122 120 123 19 (const_int 0 [0]) "kernel/sched.c":359:9 843 {nop}
     (nil))
(jump_insn 123 122 124 19 (set (pc)
        (label_ref 112)) 807 {jump}
     (nil)
 -> 112)
(barrier 124 123 126)
(code_label 126 124 125 20 86 (nil) [1 uses])
(note 125 126 127 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 127 125 112 20 (const_int 0 [0]) "kernel/sched.c":362:9 843 {nop}
     (nil))
(code_label 112 127 113 18 74 (nil) [2 uses])
(note 113 112 129 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(note 129 113 0 NOTE_INSN_DELETED)

;; Function show_task (show_task, funcdef_no=13, decl_uid=1628, cgraph_uid=14, symbol_order=28)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =r {*set_got}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 5:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =<  (1) ri*m {*pushsi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-4)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) Ts {*leasi} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 17:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 22:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 30:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 32
	 Choosing alt 0 in insn 32:  (0) =rm  (1) %0  (2) re {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 33:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 39:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-4)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) Ts {*leasi} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 46:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4 5
EBB 6 7

********** Pseudo live ranges #1: **********

  BB 7
   Insn 52: point = 0, n_alt = -1
  BB 6
   Insn 46: point = 0, n_alt = 0
   Insn 45: point = 0, n_alt = 0
   Insn 44: point = 0, n_alt = -2
   Insn 43: point = 1, n_alt = 0
   Insn 42: point = 2, n_alt = 0
   Insn 41: point = 3, n_alt = 0
   Insn 40: point = 3, n_alt = 0
   Insn 39: point = 3, n_alt = 0
  BB 4
   Insn 27: point = 4, n_alt = -1
   Insn 26: point = 4, n_alt = 1
   Insn 25: point = 5, n_alt = 0
  BB 2
   Insn 49: point = 7, n_alt = -1
   Insn 18: point = 7, n_alt = 1
   Insn 17: point = 7, n_alt = 0
   Insn 16: point = 7, n_alt = 0
   Insn 15: point = 7, n_alt = -2
   Insn 14: point = 7, n_alt = 0
   Insn 13: point = 8, n_alt = 0
   Insn 12: point = 9, n_alt = 0
   Insn 11: point = 9, n_alt = 0
   Insn 10: point = 10, n_alt = 0
   Insn 9: point = 11, n_alt = 0
   Insn 8: point = 13, n_alt = 0
   Insn 7: point = 14, n_alt = 0
   Insn 6: point = 16, n_alt = 0
   Insn 5: point = 17, n_alt = 1
   Insn 53: point = 17, n_alt = 0
  BB 3
   Insn 22: point = 18, n_alt = 0
  BB 5
   Insn 36: point = 19, n_alt = -1
   Insn 35: point = 19, n_alt = 0
   Insn 33: point = 20, n_alt = 4
   Insn 32: point = 22, n_alt = 0
   Insn 31: point = 24, n_alt = 0
   Insn 30: point = 25, n_alt = 3
   Insn 29: point = 27, n_alt = 0
 r82: [0..28]
 r83: [10..14]
 r84: [9..11]
 r85: [26..27]
 r86: [23..25]
 r87: [21..22]
 r88: [19..20]
 r89: [15..16]
 r90: [12..13]
 r91: [7..8]
 r92: [4..5]
 r93: [23..24]
 r94: [1..2]
Compressing live ranges: from 29 to 20 - 68%
Ranges after the compression:
 r82: [0..19]
 r83: [6..9]
 r84: [6..7]
 r85: [18..19]
 r86: [16..17]
 r87: [14..15]
 r88: [12..13]
 r89: [10..11]
 r90: [8..9]
 r91: [4..5]
 r92: [2..3]
 r93: [16..17]
 r94: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=32)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=16)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
changing reg in insn 53
changing reg in insn 44
changing reg in insn 42
changing reg in insn 15
changing reg in insn 13
changing reg in insn 7
changing reg in insn 10
changing reg in insn 9
changing reg in insn 11
changing reg in insn 29
changing reg in insn 30
changing reg in insn 30
changing reg in insn 32
changing reg in insn 32
changing reg in insn 33
changing reg in insn 33
changing reg in insn 35
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 13
changing reg in insn 14
changing reg in insn 25
changing reg in insn 26
changing reg in insn 31
changing reg in insn 42
changing reg in insn 43
deleting insn with uid = 15.
deleting insn with uid = 44.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 16.
verify found no changes in insn with uid = 45.


show_task

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 17 [flags]
;;  ref usage 	r0={13d,10u} r1={5d,2u,1e} r2={3d} r3={1d,4u} r7={11d,35u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r16={1e} r17={11d,2u} r18={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} 
;;    total ref usage 229{174d,53u,2e} in 34{32 regular + 2 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 53 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 53 3 2 2 (parallel [
            (set (reg:SI 3 bx [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 53 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [5 j+0 S4 A32])
        (const_int 3140 [0xc44])) "kernel/sched.c":368:12 75 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (reg/f:SI 0 ax [89])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 36 [0x24])) [13 p+0 S4 A32])) "kernel/sched.c":370:5 75 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:SI 1 dx [orig:83 _1 ] [83])
        (mem:SI (reg/f:SI 0 ax [89]) [2 p_10(D)->state+0 S4 A32])) "kernel/sched.c":370:5 75 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (reg/f:SI 0 ax [90])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 36 [0x24])) [13 p+0 S4 A32])) "kernel/sched.c":370:5 75 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:SI 0 ax [orig:84 _2 ] [84])
        (mem:SI (plus:SI (reg/f:SI 0 ax [90])
                (const_int 556 [0x22c])) [2 p_10(D)->pid+0 S4 A32])) "kernel/sched.c":370:5 75 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (reg:SI 1 dx [orig:83 _1 ] [83])) "kernel/sched.c":370:5 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 4 [0x4])
        (nil)))
(insn 11 10 12 2 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (reg:SI 0 ax [orig:84 _2 ] [84])) "kernel/sched.c":370:5 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 12 11 13 2 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [5  S4 A32])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 40 [0x28])) [5 nr+0 S4 A32])) "kernel/sched.c":370:5 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 13 12 14 2 (set (reg/f:SI 0 ax [91])
        (plus:SI (reg:SI 3 bx [82])
            (const:SI (unspec:SI [
                        (symbol_ref/f:SI ("*.LC3") [flags 0x2]  <var_decl 0x731e029dad80 *.LC3>)
                    ] UNSPEC_GOTOFF)))) "kernel/sched.c":370:5 205 {*leasi}
     (expr_list:REG_EQUAL (symbol_ref/f:SI ("*.LC3") [flags 0x2]  <var_decl 0x731e029dad80 *.LC3>)
        (nil)))
(insn 14 13 16 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [22  S4 A32])
        (reg/f:SI 0 ax [91])) "kernel/sched.c":370:5 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 16 14 17 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("printk") [flags 0x41]  <function_decl 0x731e02938e00 printk>) [0 printk S1 A8])
            (const_int 16 [0x10]))) "kernel/sched.c":370:5 823 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 17 16 18 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":370:5 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 18 17 49 2 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [5 i+0 S4 A32])
        (const_int 0 [0])) "kernel/sched.c":371:7 75 {*movsi_internal}
     (nil))
(jump_insn 49 18 50 2 (set (pc)
        (label_ref 23)) "kernel/sched.c":372:11 807 {jump}
     (nil)
 -> 23)
(barrier 50 49 34)
(code_label 34 50 21 3 90 (nil) [1 uses])
(note 21 34 22 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 3 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 12 [0xc])) [5 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 12 [0xc])) [5 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":373:10 209 {*addsi_1}
     (nil))
(code_label 23 22 24 4 88 (nil) [1 uses])
(note 24 23 25 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 25 24 26 4 (set (reg:SI 0 ax [92])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [5 i+0 S4 A32])) "kernel/sched.c":372:18 75 {*movsi_internal}
     (nil))
(insn 26 25 27 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [92])
            (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 8 [0x8])) [5 j+0 S4 A32]))) "kernel/sched.c":372:18 11 {*cmpsi_1}
     (nil))
(jump_insn 27 26 28 4 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 37)
            (pc))) "kernel/sched.c":372:18 806 {*jcc}
     (nil)
 -> 37)
(note 28 27 29 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 30 5 (set (reg:SI 0 ax [orig:85 i.43_3 ] [85])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [5 i+0 S4 A32])) "kernel/sched.c":372:37 75 {*movsi_internal}
     (nil))
(insn 30 29 31 5 (parallel [
            (set (reg:SI 1 dx [orig:86 _4 ] [86])
                (plus:SI (reg:SI 0 ax [orig:85 i.43_3 ] [85])
                    (const_int 956 [0x3bc])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":372:37 209 {*addsi_1}
     (nil))
(insn 31 30 32 5 (set (reg/f:SI 0 ax [93])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 36 [0x24])) [13 p+0 S4 A32])) "kernel/sched.c":372:37 75 {*movsi_internal}
     (nil))
(insn 32 31 33 5 (parallel [
            (set (reg/f:SI 0 ax [orig:87 _5 ] [87])
                (plus:SI (reg/f:SI 0 ax [93])
                    (reg:SI 1 dx [orig:86 _4 ] [86])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":372:37 209 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 16 argp)
                    (const_int 4 [0x4])) [13 p+0 S4 A32])
            (reg:SI 1 dx [orig:86 _4 ] [86]))
        (nil)))
(insn 33 32 35 5 (set (reg:QI 0 ax [orig:88 _6 ] [88])
        (mem:QI (reg/f:SI 0 ax [orig:87 _5 ] [87]) [0 MEM[(char *)_5]+0 S1 A8])) "kernel/sched.c":372:37 77 {*movqi_internal}
     (nil))
(insn 35 33 36 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:88 _6 ] [88])
            (const_int 0 [0]))) "kernel/sched.c":372:18 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 36 35 37 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 34)
            (pc))) "kernel/sched.c":372:18 806 {*jcc}
     (nil)
 -> 34)
(code_label 37 36 38 6 89 (nil) [1 uses])
(note 38 37 39 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 39 38 40 6 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":374:5 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 4 [0x4])
        (nil)))
(insn 40 39 41 6 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [5  S4 A32])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [5 j+0 S4 A32])) "kernel/sched.c":374:5 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 41 40 42 6 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [5  S4 A32])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [5 i+0 S4 A32])) "kernel/sched.c":374:5 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 42 41 43 6 (set (reg/f:SI 0 ax [94])
        (plus:SI (reg:SI 3 bx [82])
            (const:SI (unspec:SI [
                        (symbol_ref/f:SI ("*.LC4") [flags 0x2]  <var_decl 0x731e029dae10 *.LC4>)
                    ] UNSPEC_GOTOFF)))) "kernel/sched.c":374:5 205 {*leasi}
     (expr_list:REG_EQUAL (symbol_ref/f:SI ("*.LC4") [flags 0x2]  <var_decl 0x731e029dae10 *.LC4>)
        (nil)))
(insn 43 42 45 6 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [22  S4 A32])
        (reg/f:SI 0 ax [94])) "kernel/sched.c":374:5 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 45 43 46 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("printk") [flags 0x41]  <function_decl 0x731e02938e00 printk>) [0 printk S1 A8])
            (const_int 16 [0x10]))) "kernel/sched.c":374:5 823 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 46 45 51 6 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":374:5 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(note 51 46 52 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 52 51 54 7 (const_int 0 [0]) "kernel/sched.c":375:1 843 {nop}
     (nil))
(note 54 52 0 NOTE_INSN_DELETED)

;; Function show_stat (show_stat, funcdef_no=14, decl_uid=1636, cgraph_uid=15, symbol_order=29)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r {*set_got}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 5:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 16:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 20:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 23:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) rm  (1) re {*cmpsi_1}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2
EBB 3 4
EBB 5
EBB 6 8 7 9

********** Pseudo live ranges #1: **********

  BB 9
   Insn 39: point = 0, n_alt = -1
  BB 7
  BB 8
   Insn 37: point = 0, n_alt = -1
  BB 6
   Insn 30: point = 0, n_alt = -1
   Insn 29: point = 0, n_alt = 0
  BB 2
   Insn 34: point = 1, n_alt = -1
   Insn 5: point = 1, n_alt = 1
   Insn 40: point = 1, n_alt = 0
  BB 5
   Insn 23: point = 2, n_alt = 0
  BB 4
   Insn 20: point = 3, n_alt = 0
   Insn 19: point = 3, n_alt = 0
   Insn 18: point = 3, n_alt = 0
   Insn 17: point = 3, n_alt = 0
   Insn 16: point = 4, n_alt = 0
   Insn 15: point = 4, n_alt = 0
   Insn 14: point = 6, n_alt = 0
  BB 3
   Insn 12: point = 8, n_alt = -1
   Insn 11: point = 8, n_alt = 0
   Insn 10: point = 9, n_alt = 0
   Insn 9: point = 11, n_alt = 0
 r82: [0..12]
 r83: [8..9]
 r84: [3..4]
 r85: [10..11]
 r86: [5..6]
Compressing live ranges: from 13 to 8 - 61%
Ranges after the compression:
 r82: [0..7]
 r83: [4..5]
 r84: [0..1]
 r85: [6..7]
 r86: [2..3]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=32)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=16)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
changing reg in insn 40
changing reg in insn 15
changing reg in insn 10
changing reg in insn 10
changing reg in insn 11
changing reg in insn 15
changing reg in insn 17
changing reg in insn 9
changing reg in insn 10
changing reg in insn 14
changing reg in insn 15
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 19.


show_stat

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0 [ax] 3 [bx] 7 [sp] 17 [flags]
;;  ref usage 	r0={6d,4u} r1={2d} r2={2d} r3={1d,2u} r7={5d,23u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={7d,2u} r18={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} 
;;    total ref usage 119{88d,31u,0e} in 19{18 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 40 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 40 3 2 2 (parallel [
            (set (reg:SI 3 bx [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 40 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 34 2 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [5 i+0 S4 A32])
        (const_int 0 [0])) "kernel/sched.c":381:12 75 {*movsi_internal}
     (nil))
(jump_insn 34 5 35 2 (set (pc)
        (label_ref 24)) "kernel/sched.c":381:5 807 {jump}
     (nil)
 -> 24)
(barrier 35 34 26)
(code_label 26 35 8 3 94 (nil) [1 uses])
(note 8 26 9 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 9 8 10 3 (set (reg:SI 0 ax [85])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [5 i+0 S4 A32])) "kernel/sched.c":382:17 75 {*movsi_internal}
     (nil))
(insn 10 9 11 3 (set (reg/f:SI 0 ax [orig:83 _1 ] [83])
        (mem/f:SI (plus:SI (plus:SI (mult:SI (reg:SI 0 ax [85])
                        (const_int 4 [0x4]))
                    (reg:SI 3 bx [82]))
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("task") [flags 0x2]  <var_decl 0x731e0292e1b0 task>)
                        ] UNSPEC_GOTOFF))) [13 task[i_3]+0 S4 A32])) "kernel/sched.c":382:17 75 {*movsi_internal}
     (nil))
(insn 11 10 12 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:SI 0 ax [orig:83 _1 ] [83])
            (const_int 0 [0]))) "kernel/sched.c":382:12 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 12 11 13 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 21)
            (pc))) "kernel/sched.c":382:12 806 {*jcc}
     (nil)
 -> 21)
(note 13 12 14 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 4 (set (reg:SI 0 ax [86])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [5 i+0 S4 A32])) "kernel/sched.c":383:13 75 {*movsi_internal}
     (nil))
(insn 15 14 16 4 (set (reg/f:SI 0 ax [orig:84 _2 ] [84])
        (mem/f:SI (plus:SI (plus:SI (mult:SI (reg:SI 0 ax [86])
                        (const_int 4 [0x4]))
                    (reg:SI 3 bx [82]))
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("task") [flags 0x2]  <var_decl 0x731e0292e1b0 task>)
                        ] UNSPEC_GOTOFF))) [13 task[i_3]+0 S4 A32])) "kernel/sched.c":383:13 75 {*movsi_internal}
     (nil))
(insn 16 15 17 4 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":383:13 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 17 16 18 4 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [13  S4 A32])
        (reg/f:SI 0 ax [orig:84 _2 ] [84])) "kernel/sched.c":383:13 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 18 17 19 4 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [5  S4 A32])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [5 i+0 S4 A32])) "kernel/sched.c":383:13 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 19 18 20 4 (call (mem:QI (symbol_ref:SI ("show_task") [flags 0x3]  <function_decl 0x731e02974200 show_task>) [0 show_task S1 A8])
        (const_int 16 [0x10])) "kernel/sched.c":383:13 812 {*call}
     (nil)
    (nil))
(insn 20 19 21 4 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":383:13 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(code_label 21 20 22 5 93 (nil) [1 uses])
(note 22 21 23 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 5 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 12 [0xc])) [5 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 12 [0xc])) [5 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":381:32 209 {*addsi_1}
     (nil))
(code_label 24 23 25 6 92 (nil) [1 uses])
(note 25 24 29 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 29 25 30 6 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 12 [0xc])) [5 i+0 S4 A32])
            (const_int 63 [0x3f]))) "kernel/sched.c":381:19 11 {*cmpsi_1}
     (nil))
(jump_insn 30 29 36 6 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 26)
            (pc))) "kernel/sched.c":381:19 806 {*jcc}
     (nil)
 -> 26)
(note 36 30 37 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 37 36 31 8 (const_int 0 [0]) "kernel/sched.c":384:1 843 {nop}
     (nil))
(note 31 37 38 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(note 38 31 39 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 39 38 41 9 (const_int 0 [0]) "kernel/sched.c":384:1 843 {nop}
     (nil))
(note 41 39 0 NOTE_INSN_DELETED)

;; Function sys_getpid (sys_getpid, funcdef_no=15, decl_uid=1384, cgraph_uid=16, symbol_order=30)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=4, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 14: point = 0, n_alt = -1
   Insn 13: point = 0, n_alt = -2
   Insn 9: point = 1, n_alt = -2
   Insn 6: point = 3, n_alt = 0
   Insn 5: point = 5, n_alt = 0
   Insn 16: point = 7, n_alt = 0
 r82: [6..7]
 r83: [4..5]
 r84: [2..3]
 r85: [0..1]
Compressing live ranges: from 8 to 8 - 100%
Ranges after the compression:
 r82: [6..7]
 r83: [4..5]
 r84: [2..3]
 r85: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=4, prev_offset=4)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 16
changing reg in insn 5
changing reg in insn 5
changing reg in insn 6
changing reg in insn 6
changing reg in insn 9
changing reg in insn 9
changing reg in insn 13
deleting insn with uid = 9.
deleting insn with uid = 13.
starting the processing of deferred insns
ending the processing of deferred insns


sys_getpid

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0 [ax] 17 [flags]
;;  ref usage 	r0={4d,4u} r1={1d} r2={1d} r7={1d,2u} r17={1d} 
;;    total ref usage 14{8d,6u,0e} in 4{4 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 16 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 16 3 2 2 (parallel [
            (set (reg:SI 0 ax [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 16 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 0 ax [orig:83 current.44_1 ] [83])
        (mem/f/c:SI (plus:SI (reg:SI 0 ax [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x2]  <var_decl 0x731e0292e120 current>)
                        ] UNSPEC_GOTOFF))) [13 current+0 S4 A32])) "kernel/sched.c":388:19 75 {*movsi_internal}
     (nil))
(insn 6 5 14 2 (set (reg:SI 0 ax [orig:84 _3 ] [84])
        (mem:SI (plus:SI (reg/f:SI 0 ax [orig:83 current.44_1 ] [83])
                (const_int 556 [0x22c])) [2 current.44_1->pid+0 S4 A32])) "kernel/sched.c":388:19 75 {*movsi_internal}
     (nil))
(insn 14 6 17 2 (use (reg/i:SI 0 ax)) "kernel/sched.c":389:1 -1
     (nil))
(note 17 14 0 NOTE_INSN_DELETED)

;; Function sys_getuid (sys_getuid, funcdef_no=16, decl_uid=1392, cgraph_uid=17, symbol_order=31)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=4, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 6:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) rm {*zero_extendhisi2}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 15: point = 0, n_alt = -1
   Insn 14: point = 0, n_alt = -2
   Insn 10: point = 1, n_alt = -2
   Insn 7: point = 3, n_alt = 0
   Insn 6: point = 5, n_alt = 2
   Insn 5: point = 7, n_alt = 0
   Insn 17: point = 9, n_alt = 0
 r82: [8..9]
 r83: [6..7]
 r84: [4..5]
 r85: [2..3]
 r86: [0..1]
Compressing live ranges: from 10 to 10 - 100%
Ranges after the compression:
 r82: [8..9]
 r83: [6..7]
 r84: [4..5]
 r85: [2..3]
 r86: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=4, prev_offset=4)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 17
changing reg in insn 5
changing reg in insn 5
changing reg in insn 6
changing reg in insn 6
changing reg in insn 7
changing reg in insn 7
changing reg in insn 10
changing reg in insn 10
changing reg in insn 14
deleting insn with uid = 10.
deleting insn with uid = 14.
starting the processing of deferred insns
ending the processing of deferred insns


sys_getuid

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0 [ax] 17 [flags]
;;  ref usage 	r0={5d,5u} r1={1d} r2={1d} r7={1d,2u} r17={1d} 
;;    total ref usage 16{9d,7u,0e} in 5{5 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 17 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 17 3 2 2 (parallel [
            (set (reg:SI 0 ax [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 17 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 0 ax [orig:83 current.45_1 ] [83])
        (mem/f/c:SI (plus:SI (reg:SI 0 ax [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x2]  <var_decl 0x731e0292e120 current>)
                        ] UNSPEC_GOTOFF))) [13 current+0 S4 A32])) "kernel/sched.c":393:19 75 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (reg:HI 0 ax [orig:84 _2 ] [84])
        (mem:HI (plus:SI (reg/f:SI 0 ax [orig:83 current.45_1 ] [83])
                (const_int 576 [0x240])) [7 current.45_1->uid+0 S2 A32])) "kernel/sched.c":393:19 76 {*movhi_internal}
     (nil))
(insn 7 6 15 2 (set (reg:SI 0 ax [orig:85 _4 ] [85])
        (zero_extend:SI (reg:HI 0 ax [orig:84 _2 ] [84]))) "kernel/sched.c":393:19 144 {*zero_extendhisi2}
     (nil))
(insn 15 7 18 2 (use (reg/i:SI 0 ax)) "kernel/sched.c":394:1 -1
     (nil))
(note 18 15 0 NOTE_INSN_DELETED)

;; Function sys_alarm (sys_alarm, funcdef_no=17, decl_uid=1397, cgraph_uid=18, symbol_order=32)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=24, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=-4, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
	 Choosing alt 0 in insn 13:  (0) =rm  (1) 0  (2) re {*subsi_1}
      Creating newreg=103 from oldreg=93, assigning class GENERAL_REGS to r103
   13: {r103:SI=r103:SI-r84:SI;clobber flags:CC;}
      REG_DEAD r93:SI
      REG_DEAD r84:SI
      REG_UNUSED flags:CC
      REG_EQUAL [frame:SI-0x4]-r84:SI
    Inserting insn reload before:
   54: r103:SI=r93:SI
    Inserting insn reload after:
   55: r85:SI=r103:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) g {*movsi_internal}
            1 Small class reload: reject+=3
            3 Matching alt: reject+=2
            3 Small class reload: reject+=3
            3 Non input pseudo reload: reject++
          alt=0,overall=21,losers=2,rld_nregs=2
            1 Small class reload: reject+=3
            3 Matching alt: reject+=2
            3 Small class reload: reject+=3
            3 Non input pseudo reload: reject++
          alt=0,overall=21,losers=2,rld_nregs=2
	 Choosing alt 0 in insn 15:  (0) =d  (1) %a  (2) rm  (3) =1 {*smulsi3_highpart_1}
      Creating newreg=104 from oldreg=101, assigning class AREG to r104
   15: {r94:SI=trunc(sign_extend(r104:SI)*sign_extend(r95:SI) 0>>0x20);clobber r104:SI;clobber flags:CC;}
      REG_DEAD r95:SI
      REG_UNUSED r101:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
   56: r104:SI=r85:SI

          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 16:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
      Creating newreg=105 from oldreg=94, assigning class GENERAL_REGS to r105
   16: {r105:SI=r105:SI>>0x5;clobber flags:CC;}
      REG_DEAD r94:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
   57: r105:SI=r94:SI
    Inserting insn reload after:
   58: r96:SI=r105:SI

            0 Costly set: reject++
            1 Costly loser: reject++
            1 Small class reload: reject+=3
          alt=0,overall=11,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 1 in insn 17:  (0) rm  (1) 0 {ashrsi3_cvt}
      Creating newreg=106 from oldreg=85, assigning class GENERAL_REGS to r106
   17: {r106:SI=r106:SI>>0x1f;clobber flags:CC;}
      REG_DEAD r85:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
   59: r106:SI=r85:SI
    Inserting insn reload after:
   60: r97:SI=r106:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =rm  (1) 0  (2) re {*subsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 28:  (0) =r  (1) %rm  (2) K {*mulsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 39:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2 3
EBB 4 5
EBB 6
EBB 7

********** Pseudo live ranges #1: **********

  BB 7
   Insn 48: point = 0, n_alt = -1
   Insn 47: point = 0, n_alt = -2
   Insn 43: point = 1, n_alt = -2
   Insn 40: point = 3, n_alt = 0
   Insn 39: point = 4, n_alt = 1
   Insn 38: point = 5, n_alt = 0
  BB 5
   Insn 50: point = 8, n_alt = -1
   Insn 30: point = 8, n_alt = 0
   Insn 29: point = 10, n_alt = 0
   Insn 28: point = 11, n_alt = 0
   Insn 27: point = 13, n_alt = 0
  BB 6
   Insn 35: point = 15, n_alt = 0
  BB 4
   Insn 25: point = 17, n_alt = -1
   Insn 24: point = 17, n_alt = 1
  BB 3
   Insn 19: point = 18, n_alt = 1
   Insn 18: point = 19, n_alt = 0
   Insn 60: point = 21, n_alt = -2
	Hard reg 1 is preferable by r106 with profit 1000
   Insn 17: point = 23, n_alt = 1
   Insn 59: point = 24, n_alt = -2
	Hard reg 1 is preferable by r106 with profit 1000
	Hard reg 3 is preferable by r106 with profit 1000
   Insn 58: point = 26, n_alt = -2
	Hard reg 0 is preferable by r105 with profit 1000
   Insn 16: point = 28, n_alt = 0
   Insn 57: point = 29, n_alt = -2
	Hard reg 0 is preferable by r105 with profit 1000
	Hard reg 1 is preferable by r105 with profit 1000
   Insn 15: point = 31, n_alt = 0
   Insn 56: point = 33, n_alt = -2
	Hard reg 3 is preferable by r104 with profit 1000
   Insn 14: point = 34, n_alt = 0
   Insn 55: point = 35, n_alt = -2
	Hard reg 3 is preferable by r103 with profit 1000
   Insn 13: point = 37, n_alt = 0
   Insn 54: point = 39, n_alt = -2
	Hard reg 3 is preferable by r103 with profit 1000
	Hard reg 0 is preferable by r103 with profit 1000
   Insn 12: point = 41, n_alt = 0
   Insn 11: point = 42, n_alt = 0
  BB 2
   Insn 9: point = 44, n_alt = -1
   Insn 8: point = 44, n_alt = 1
   Insn 7: point = 44, n_alt = 1
   Insn 6: point = 45, n_alt = 0
   Insn 5: point = 47, n_alt = 0
   Insn 52: point = 48, n_alt = 0
 r82: [6..48]
 r83: [46..47]
 r84: [38..42]
 r85: [25..35]
 r86: [9..11]
 r87: [9..10]
 r88: [4..5]
 r89: [15..15] [4..8]
 r90: [2..3]
 r91: [0..1]
 r92: [44..45]
 r93: [40..41]
 r94: [30..31]
 r95: [32..34]
 r96: [20..26]
 r97: [20..21]
 r98: [18..19]
 r99: [12..13]
 r103: [36..39]
 r104: [31..33]
 r105: [27..29]
 r106: [22..24]
Compressing live ranges: from 49 to 35 - 71%
Ranges after the compression:
 r82: [6..34]
 r83: [33..34]
 r84: [27..30]
 r85: [19..26]
 r86: [8..9]
 r87: [8..9]
 r88: [4..5]
 r89: [12..12] [4..7]
 r90: [2..3]
 r91: [0..1]
 r92: [31..32]
 r93: [29..30]
 r94: [23..24]
 r95: [25..26]
 r96: [15..20]
 r97: [15..16]
 r98: [13..14]
 r99: [10..11]
 r103: [27..28]
 r104: [24..26]
 r105: [21..22]
 r106: [17..18]

********** Assignment #1: **********

	 Assigning to 104 (cl=AREG, orig=101, freq=2000, tfirst=104, tfreq=2000)...
	   Assign 0 to reload r104 (freq=2000)
	 Assigning to 103 (cl=GENERAL_REGS, orig=93, freq=3000, tfirst=103, tfreq=3000)...
	   Assign 0 to reload r103 (freq=3000)
	 Assigning to 105 (cl=GENERAL_REGS, orig=94, freq=3000, tfirst=105, tfreq=3000)...
	   Assign 0 to reload r105 (freq=3000)
	 Assigning to 106 (cl=GENERAL_REGS, orig=85, freq=3000, tfirst=106, tfreq=3000)...
	   Assign 3 to reload r106 (freq=3000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=24, prev_offset=24)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=16)
Can eliminate 19 to 6 (offset=-4, prev_offset=0)
changing reg in insn 52
changing reg in insn 38
changing reg in insn 29
changing reg in insn 11
changing reg in insn 5
changing reg in insn 5
changing reg in insn 6
changing reg in insn 11
changing reg in insn 13
changing reg in insn 13
changing reg in insn 28
changing reg in insn 30
changing reg in insn 29
changing reg in insn 30
changing reg in insn 38
changing reg in insn 39
changing reg in insn 35
changing reg in insn 30
changing reg in insn 39
changing reg in insn 40
changing reg in insn 43
changing reg in insn 43
changing reg in insn 47
changing reg in insn 6
changing reg in insn 7
changing reg in insn 12
changing reg in insn 15
changing reg in insn 14
changing reg in insn 15
changing reg in insn 18
changing reg in insn 18
changing reg in insn 18
changing reg in insn 19
changing reg in insn 27
changing reg in insn 28
deleting insn with uid = 54.
deleting insn with uid = 58.
deleting insn with uid = 59.
deleting insn with uid = 43.
deleting insn with uid = 47.
starting the processing of deferred insns
ending the processing of deferred insns


sys_alarm

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 17 [flags]
;;  ref usage 	r0={14d,13u} r1={8d,6u,1e} r2={2d,4u} r3={2d,3u} r7={1d,14u} r17={10d,2u} r19={1e} 
;;    total ref usage 81{37d,42u,2e} in 31{31 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 52 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 52 3 2 2 (parallel [
            (set (reg:SI 2 cx [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 52 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 0 ax [orig:83 current.46_1 ] [83])
        (mem/f/c:SI (plus:SI (reg:SI 2 cx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x2]  <var_decl 0x731e0292e120 current>)
                        ] UNSPEC_GOTOFF))) [13 current+0 S4 A32])) "kernel/sched.c":398:22 75 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (reg:SI 0 ax [92])
        (mem:SI (plus:SI (reg/f:SI 0 ax [orig:83 current.46_1 ] [83])
                (const_int 588 [0x24c])) [2 current.46_1->alarm+0 S4 A32])) "kernel/sched.c":398:9 75 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [5 old+0 S4 A32])
        (reg:SI 0 ax [92])) "kernel/sched.c":398:9 75 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 12 [0xc])) [5 old+0 S4 A32])
            (const_int 0 [0]))) "kernel/sched.c":400:8 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 9 8 10 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 20)
            (pc))) "kernel/sched.c":400:8 806 {*jcc}
     (nil)
 -> 20)
(note 10 9 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (reg:SI 1 dx [orig:84 jiffies.47_2 ] [84])
        (mem/v/c:SI (plus:SI (reg:SI 2 cx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("jiffies") [flags 0x2]  <var_decl 0x731e0292e360 jiffies>)
                        ] UNSPEC_GOTOFF))) [2 jiffies+0 S4 A32])) "kernel/sched.c":401:20 75 {*movsi_internal}
     (nil))
(insn 12 11 13 3 (set (reg:SI 0 ax [93])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [5 old+0 S4 A32])) "kernel/sched.c":401:20 75 {*movsi_internal}
     (nil))
(insn 13 12 55 3 (parallel [
            (set (reg:SI 0 ax [93])
                (minus:SI (reg:SI 0 ax [93])
                    (reg:SI 1 dx [orig:84 jiffies.47_2 ] [84])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":401:20 282 {*subsi_1}
     (expr_list:REG_EQUAL (minus:SI (mem/c:SI (plus:SI (reg/f:SI 19 frame)
                    (const_int -4 [0xfffffffffffffffc])) [5 old+0 S4 A32])
            (reg:SI 1 dx [orig:84 jiffies.47_2 ] [84]))
        (nil)))
(insn 55 13 14 3 (set (reg:SI 3 bx [orig:85 _3 ] [85])
        (reg:SI 0 ax [93])) "kernel/sched.c":401:20 75 {*movsi_internal}
     (nil))
(insn 14 55 56 3 (set (reg:SI 1 dx [95])
        (const_int 1374389535 [0x51eb851f])) "kernel/sched.c":401:13 75 {*movsi_internal}
     (nil))
(insn 56 14 15 3 (set (reg:SI 0 ax [101])
        (reg:SI 3 bx [orig:85 _3 ] [85])) "kernel/sched.c":401:13 75 {*movsi_internal}
     (nil))
(insn 15 56 57 3 (parallel [
            (set (reg:SI 1 dx [94])
                (truncate:SI (lshiftrt:DI (mult:DI (sign_extend:DI (reg:SI 0 ax [101]))
                            (sign_extend:DI (reg:SI 1 dx [95])))
                        (const_int 32 [0x20]))))
            (clobber (reg:SI 0 ax [101]))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":401:13 435 {*smulsi3_highpart_1}
     (nil))
(insn 57 15 16 3 (set (reg:SI 0 ax [94])
        (reg:SI 1 dx [94])) "kernel/sched.c":401:13 75 {*movsi_internal}
     (nil))
(insn 16 57 17 3 (parallel [
            (set (reg:SI 0 ax [94])
                (ashiftrt:SI (reg:SI 0 ax [94])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":401:13 702 {*ashrsi3_1}
     (nil))
(insn 17 16 60 3 (parallel [
            (set (reg:SI 3 bx [orig:85 _3 ] [85])
                (ashiftrt:SI (reg:SI 3 bx [orig:85 _3 ] [85])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":401:13 694 {ashrsi3_cvt}
     (nil))
(insn 60 17 18 3 (set (reg:SI 1 dx [97])
        (reg:SI 3 bx [orig:85 _3 ] [85])) "kernel/sched.c":401:13 75 {*movsi_internal}
     (nil))
(insn 18 60 19 3 (parallel [
            (set (reg:SI 0 ax [98])
                (minus:SI (reg:SI 0 ax [96])
                    (reg:SI 1 dx [97])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":401:13 282 {*subsi_1}
     (nil))
(insn 19 18 20 3 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [5 old+0 S4 A32])
        (reg:SI 0 ax [98])) "kernel/sched.c":401:13 75 {*movsi_internal}
     (nil))
(code_label 20 19 21 4 100 (nil) [1 uses])
(note 21 20 24 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 24 21 25 4 (set (reg:CCNO 17 flags)
        (compare:CCNO (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 24 [0x18])) [2 seconds+0 S4 A32])
            (const_int 0 [0]))) "kernel/sched.c":402:63 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 25 24 26 4 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 33)
            (pc))) "kernel/sched.c":402:63 806 {*jcc}
     (nil)
 -> 33)
(note 26 25 27 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 27 26 28 5 (set (reg:SI 0 ax [99])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [2 seconds+0 S4 A32])) "kernel/sched.c":402:52 75 {*movsi_internal}
     (nil))
(insn 28 27 29 5 (parallel [
            (set (reg:SI 1 dx [orig:86 _4 ] [86])
                (mult:SI (reg:SI 0 ax [99])
                    (const_int 100 [0x64])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":402:52 408 {*mulsi3_1}
     (nil))
(insn 29 28 30 5 (set (reg:SI 0 ax [orig:87 jiffies.49_5 ] [87])
        (mem/v/c:SI (plus:SI (reg:SI 2 cx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("jiffies") [flags 0x2]  <var_decl 0x731e0292e360 jiffies>)
                        ] UNSPEC_GOTOFF))) [2 jiffies+0 S4 A32])) "kernel/sched.c":402:47 75 {*movsi_internal}
     (nil))
(insn 30 29 50 5 (parallel [
            (set (reg:SI 1 dx [orig:89 iftmp.48_8 ] [89])
                (plus:SI (reg:SI 1 dx [orig:86 _4 ] [86])
                    (reg:SI 0 ax [orig:87 jiffies.49_5 ] [87])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":402:63 209 {*addsi_1}
     (nil))
(jump_insn 50 30 51 5 (set (pc)
        (label_ref 36)) 807 {jump}
     (nil)
 -> 36)
(barrier 51 50 33)
(code_label 33 51 34 6 101 (nil) [1 uses])
(note 34 33 35 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 35 34 36 6 (set (reg:SI 1 dx [orig:89 iftmp.48_8 ] [89])
        (const_int 0 [0])) "kernel/sched.c":402:63 75 {*movsi_internal}
     (nil))
(code_label 36 35 37 7 102 (nil) [1 uses])
(note 37 36 38 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 38 37 39 7 (set (reg/f:SI 0 ax [orig:88 current.50_6 ] [88])
        (mem/f/c:SI (plus:SI (reg:SI 2 cx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x2]  <var_decl 0x731e0292e120 current>)
                        ] UNSPEC_GOTOFF))) [13 current+0 S4 A32])) "kernel/sched.c":402:12 75 {*movsi_internal}
     (nil))
(insn 39 38 40 7 (set (mem:SI (plus:SI (reg/f:SI 0 ax [orig:88 current.50_6 ] [88])
                (const_int 588 [0x24c])) [2 current.50_6->alarm+0 S4 A32])
        (reg:SI 1 dx [orig:89 iftmp.48_8 ] [89])) "kernel/sched.c":402:20 75 {*movsi_internal}
     (nil))
(insn 40 39 48 7 (set (reg:SI 0 ax [orig:90 _16 ] [90])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [5 old+0 S4 A32])) "kernel/sched.c":403:12 75 {*movsi_internal}
     (nil))
(insn 48 40 53 7 (use (reg/i:SI 0 ax)) "kernel/sched.c":404:1 -1
     (nil))
(note 53 48 0 NOTE_INSN_DELETED)

;; Function sys_pause (sys_pause, funcdef_no=18, decl_uid=1401, cgraph_uid=19, symbol_order=33)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=4, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) lBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 16: point = 0, n_alt = -1
   Insn 15: point = 0, n_alt = -2
   Insn 11: point = 1, n_alt = -2
   Insn 8: point = 3, n_alt = 0
   Insn 7: point = 4, n_alt = 0
   Insn 6: point = 4, n_alt = 1
   Insn 5: point = 5, n_alt = 0
   Insn 18: point = 7, n_alt = 0
 r82: [6..7]
 r83: [4..5]
 r84: [2..3]
 r85: [0..1]
Compressing live ranges: from 8 to 8 - 100%
Ranges after the compression:
 r82: [6..7]
 r83: [4..5]
 r84: [2..3]
 r85: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=4, prev_offset=4)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 18
changing reg in insn 5
changing reg in insn 5
changing reg in insn 6
changing reg in insn 8
changing reg in insn 11
changing reg in insn 11
changing reg in insn 15
deleting insn with uid = 11.
deleting insn with uid = 15.
starting the processing of deferred insns
ending the processing of deferred insns


sys_pause

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0 [ax] 7 [sp] 17 [flags]
;;  ref usage 	r0={5d,4u} r1={2d} r2={2d} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={2d} r18={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} 
;;    total ref usage 84{77d,7u,0e} in 6{5 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 18 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 18 3 2 2 (parallel [
            (set (reg:SI 0 ax [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 18 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 0 ax [orig:83 current.51_1 ] [83])
        (mem/f/c:SI (plus:SI (reg:SI 0 ax [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x2]  <var_decl 0x731e0292e120 current>)
                        ] UNSPEC_GOTOFF))) [13 current+0 S4 A32])) "kernel/sched.c":408:12 75 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (mem:SI (reg/f:SI 0 ax [orig:83 current.51_1 ] [83]) [2 current.51_1->state+0 S4 A32])
        (const_int 1 [0x1])) "kernel/sched.c":408:20 75 {*movsi_internal}
     (nil))
(call_insn 7 6 8 2 (call (mem:QI (symbol_ref:SI ("schedule") [flags 0x3]  <function_decl 0x731e02915c00 schedule>) [0 schedule S1 A8])
        (const_int 0 [0])) "kernel/sched.c":409:5 812 {*call}
     (nil)
    (nil))
(insn 8 7 16 2 (set (reg:SI 0 ax [orig:84 _5 ] [84])
        (const_int 0 [0])) "kernel/sched.c":410:12 75 {*movsi_internal}
     (nil))
(insn 16 8 19 2 (use (reg/i:SI 0 ax)) "kernel/sched.c":411:1 -1
     (nil))
(note 19 16 0 NOTE_INSN_DELETED)

;; Function sys_nice (sys_nice, funcdef_no=19, decl_uid=1410, cgraph_uid=20, symbol_order=34)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=4, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) r  (1) 0  (2) m {*subsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) g {*movsi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) r  (1) 0  (2) m {*subsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2 3
EBB 4

********** Pseudo live ranges #1: **********

  BB 4
   Insn 28: point = 0, n_alt = -1
   Insn 27: point = 0, n_alt = -2
   Insn 23: point = 1, n_alt = -2
   Insn 20: point = 3, n_alt = 0
  BB 3
   Insn 17: point = 4, n_alt = 1
   Insn 16: point = 5, n_alt = 1
   Insn 15: point = 7, n_alt = 0
   Insn 14: point = 9, n_alt = 0
   Insn 13: point = 11, n_alt = 0
  BB 2
   Insn 11: point = 13, n_alt = -1
   Insn 10: point = 13, n_alt = 0
   Insn 7: point = 14, n_alt = 1
   Insn 6: point = 16, n_alt = 0
   Insn 5: point = 18, n_alt = 0
   Insn 30: point = 19, n_alt = 0
 r82: [8..19]
 r83: [17..18]
 r84: [15..16]
 r85: [13..14]
 r86: [10..11]
 r87: [6..9]
 r88: [4..7]
 r89: [4..5]
 r90: [2..3]
 r91: [0..1]
Compressing live ranges: from 20 to 18 - 90%
Ranges after the compression:
 r82: [8..17]
 r83: [16..17]
 r84: [14..15]
 r85: [12..13]
 r86: [10..11]
 r87: [6..9]
 r88: [4..7]
 r89: [4..5]
 r90: [2..3]
 r91: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=4, prev_offset=4)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 30
changing reg in insn 15
changing reg in insn 13
changing reg in insn 5
changing reg in insn 5
changing reg in insn 6
changing reg in insn 6
changing reg in insn 7
changing reg in insn 7
changing reg in insn 10
changing reg in insn 13
changing reg in insn 14
changing reg in insn 14
changing reg in insn 16
changing reg in insn 15
changing reg in insn 17
changing reg in insn 16
changing reg in insn 17
changing reg in insn 20
changing reg in insn 23
changing reg in insn 23
changing reg in insn 27
deleting insn with uid = 23.
deleting insn with uid = 27.
starting the processing of deferred insns
ending the processing of deferred insns


sys_nice

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 17 [flags]
;;  ref usage 	r0={4d,6u} r1={7d,6u} r2={1d} r7={1d,6u} r17={4d,1u} 
;;    total ref usage 36{17d,19u,0e} in 13{13 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 30 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 30 3 2 2 (parallel [
            (set (reg:SI 0 ax [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 30 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 1 dx [orig:83 current.52_1 ] [83])
        (mem/f/c:SI (plus:SI (reg:SI 0 ax [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x2]  <var_decl 0x731e0292e120 current>)
                        ] UNSPEC_GOTOFF))) [13 current+0 S4 A32])) "kernel/sched.c":415:16 75 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (reg:SI 1 dx [orig:84 _2 ] [84])
        (mem:SI (plus:SI (reg/f:SI 1 dx [orig:83 current.52_1 ] [83])
                (const_int 8 [0x8])) [2 current.52_1->priority+0 S4 A32])) "kernel/sched.c":415:16 75 {*movsi_internal}
     (nil))
(insn 7 6 10 2 (parallel [
            (set (reg:SI 1 dx [orig:85 _3 ] [85])
                (minus:SI (reg:SI 1 dx [orig:84 _2 ] [84])
                    (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 4 [0x4])) [2 increment+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":415:27 282 {*subsi_1}
     (nil))
(insn 10 7 11 2 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:SI 1 dx [orig:85 _3 ] [85])
            (const_int 0 [0]))) "kernel/sched.c":415:8 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 11 10 12 2 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 18)
            (pc))) "kernel/sched.c":415:8 806 {*jcc}
     (nil)
 -> 18)
(note 12 11 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 3 (set (reg/f:SI 1 dx [orig:86 current.53_4 ] [86])
        (mem/f/c:SI (plus:SI (reg:SI 0 ax [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x2]  <var_decl 0x731e0292e120 current>)
                        ] UNSPEC_GOTOFF))) [13 current+0 S4 A32])) "kernel/sched.c":416:27 75 {*movsi_internal}
     (nil))
(insn 14 13 15 3 (set (reg:SI 1 dx [orig:87 _5 ] [87])
        (mem:SI (plus:SI (reg/f:SI 1 dx [orig:86 current.53_4 ] [86])
                (const_int 8 [0x8])) [2 current.53_4->priority+0 S4 A32])) "kernel/sched.c":416:27 75 {*movsi_internal}
     (nil))
(insn 15 14 16 3 (set (reg/f:SI 0 ax [orig:88 current.54_6 ] [88])
        (mem/f/c:SI (plus:SI (reg:SI 0 ax [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x2]  <var_decl 0x731e0292e120 current>)
                        ] UNSPEC_GOTOFF))) [13 current+0 S4 A32])) "kernel/sched.c":416:27 75 {*movsi_internal}
     (nil))
(insn 16 15 17 3 (parallel [
            (set (reg:SI 1 dx [orig:89 _7 ] [89])
                (minus:SI (reg:SI 1 dx [orig:87 _5 ] [87])
                    (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 4 [0x4])) [2 increment+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/sched.c":416:27 282 {*subsi_1}
     (nil))
(insn 17 16 18 3 (set (mem:SI (plus:SI (reg/f:SI 0 ax [orig:88 current.54_6 ] [88])
                (const_int 8 [0x8])) [2 current.54_6->priority+0 S4 A32])
        (reg:SI 1 dx [orig:89 _7 ] [89])) "kernel/sched.c":416:27 75 {*movsi_internal}
     (nil))
(code_label 18 17 19 4 107 (nil) [1 uses])
(note 19 18 20 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 28 4 (set (reg:SI 0 ax [orig:90 _12 ] [90])
        (const_int 0 [0])) "kernel/sched.c":417:12 75 {*movsi_internal}
     (nil))
(insn 28 20 31 4 (use (reg/i:SI 0 ax)) "kernel/sched.c":418:1 -1
     (nil))
(note 31 28 0 NOTE_INSN_DELETED)

;; Function sys_getgid (sys_getgid, funcdef_no=20, decl_uid=1436, cgraph_uid=21, symbol_order=35)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=4, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 6:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) rm {*zero_extendhisi2}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 15: point = 0, n_alt = -1
   Insn 14: point = 0, n_alt = -2
   Insn 10: point = 1, n_alt = -2
   Insn 7: point = 3, n_alt = 0
   Insn 6: point = 5, n_alt = 2
   Insn 5: point = 7, n_alt = 0
   Insn 17: point = 9, n_alt = 0
 r82: [8..9]
 r83: [6..7]
 r84: [4..5]
 r85: [2..3]
 r86: [0..1]
Compressing live ranges: from 10 to 10 - 100%
Ranges after the compression:
 r82: [8..9]
 r83: [6..7]
 r84: [4..5]
 r85: [2..3]
 r86: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=4, prev_offset=4)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 17
changing reg in insn 5
changing reg in insn 5
changing reg in insn 6
changing reg in insn 6
changing reg in insn 7
changing reg in insn 7
changing reg in insn 10
changing reg in insn 10
changing reg in insn 14
deleting insn with uid = 10.
deleting insn with uid = 14.
starting the processing of deferred insns
ending the processing of deferred insns


sys_getgid

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0 [ax] 17 [flags]
;;  ref usage 	r0={5d,5u} r1={1d} r2={1d} r7={1d,2u} r17={1d} 
;;    total ref usage 16{9d,7u,0e} in 5{5 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 17 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 17 3 2 2 (parallel [
            (set (reg:SI 0 ax [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 17 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 0 ax [orig:83 current.55_1 ] [83])
        (mem/f/c:SI (plus:SI (reg:SI 0 ax [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x2]  <var_decl 0x731e0292e120 current>)
                        ] UNSPEC_GOTOFF))) [13 current+0 S4 A32])) "kernel/sched.c":422:19 75 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (reg:HI 0 ax [orig:84 _2 ] [84])
        (mem:HI (plus:SI (reg/f:SI 0 ax [orig:83 current.55_1 ] [83])
                (const_int 582 [0x246])) [7 current.55_1->gid+0 S2 A16])) "kernel/sched.c":422:19 76 {*movhi_internal}
     (nil))
(insn 7 6 15 2 (set (reg:SI 0 ax [orig:85 _4 ] [85])
        (zero_extend:SI (reg:HI 0 ax [orig:84 _2 ] [84]))) "kernel/sched.c":422:19 144 {*zero_extendhisi2}
     (nil))
(insn 15 7 18 2 (use (reg/i:SI 0 ax)) "kernel/sched.c":423:1 -1
     (nil))
(note 18 15 0 NOTE_INSN_DELETED)

;; Function sys_geteuid (sys_geteuid, funcdef_no=21, decl_uid=1440, cgraph_uid=22, symbol_order=36)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=4, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 6:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) rm {*zero_extendhisi2}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 15: point = 0, n_alt = -1
   Insn 14: point = 0, n_alt = -2
   Insn 10: point = 1, n_alt = -2
   Insn 7: point = 3, n_alt = 0
   Insn 6: point = 5, n_alt = 2
   Insn 5: point = 7, n_alt = 0
   Insn 17: point = 9, n_alt = 0
 r82: [8..9]
 r83: [6..7]
 r84: [4..5]
 r85: [2..3]
 r86: [0..1]
Compressing live ranges: from 10 to 10 - 100%
Ranges after the compression:
 r82: [8..9]
 r83: [6..7]
 r84: [4..5]
 r85: [2..3]
 r86: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=4, prev_offset=4)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 17
changing reg in insn 5
changing reg in insn 5
changing reg in insn 6
changing reg in insn 6
changing reg in insn 7
changing reg in insn 7
changing reg in insn 10
changing reg in insn 10
changing reg in insn 14
deleting insn with uid = 10.
deleting insn with uid = 14.
starting the processing of deferred insns
ending the processing of deferred insns


sys_geteuid

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0 [ax] 17 [flags]
;;  ref usage 	r0={5d,5u} r1={1d} r2={1d} r7={1d,2u} r17={1d} 
;;    total ref usage 16{9d,7u,0e} in 5{5 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 17 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 17 3 2 2 (parallel [
            (set (reg:SI 0 ax [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 17 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 0 ax [orig:83 current.56_1 ] [83])
        (mem/f/c:SI (plus:SI (reg:SI 0 ax [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x2]  <var_decl 0x731e0292e120 current>)
                        ] UNSPEC_GOTOFF))) [13 current+0 S4 A32])) "kernel/sched.c":427:19 75 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (reg:HI 0 ax [orig:84 _2 ] [84])
        (mem:HI (plus:SI (reg/f:SI 0 ax [orig:83 current.56_1 ] [83])
                (const_int 578 [0x242])) [7 current.56_1->euid+0 S2 A16])) "kernel/sched.c":427:19 76 {*movhi_internal}
     (nil))
(insn 7 6 15 2 (set (reg:SI 0 ax [orig:85 _4 ] [85])
        (zero_extend:SI (reg:HI 0 ax [orig:84 _2 ] [84]))) "kernel/sched.c":427:19 144 {*zero_extendhisi2}
     (nil))
(insn 15 7 18 2 (use (reg/i:SI 0 ax)) "kernel/sched.c":428:1 -1
     (nil))
(note 18 15 0 NOTE_INSN_DELETED)

;; Function sys_getegid (sys_getegid, funcdef_no=22, decl_uid=1442, cgraph_uid=23, symbol_order=37)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=4, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 6:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) rm {*zero_extendhisi2}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 15: point = 0, n_alt = -1
   Insn 14: point = 0, n_alt = -2
   Insn 10: point = 1, n_alt = -2
   Insn 7: point = 3, n_alt = 0
   Insn 6: point = 5, n_alt = 2
   Insn 5: point = 7, n_alt = 0
   Insn 17: point = 9, n_alt = 0
 r82: [8..9]
 r83: [6..7]
 r84: [4..5]
 r85: [2..3]
 r86: [0..1]
Compressing live ranges: from 10 to 10 - 100%
Ranges after the compression:
 r82: [8..9]
 r83: [6..7]
 r84: [4..5]
 r85: [2..3]
 r86: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=4, prev_offset=4)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 17
changing reg in insn 5
changing reg in insn 5
changing reg in insn 6
changing reg in insn 6
changing reg in insn 7
changing reg in insn 7
changing reg in insn 10
changing reg in insn 10
changing reg in insn 14
deleting insn with uid = 10.
deleting insn with uid = 14.
starting the processing of deferred insns
ending the processing of deferred insns


sys_getegid

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0 [ax] 17 [flags]
;;  ref usage 	r0={5d,5u} r1={1d} r2={1d} r7={1d,2u} r17={1d} 
;;    total ref usage 16{9d,7u,0e} in 5{5 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 17 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 17 3 2 2 (parallel [
            (set (reg:SI 0 ax [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 17 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 0 ax [orig:83 current.57_1 ] [83])
        (mem/f/c:SI (plus:SI (reg:SI 0 ax [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x2]  <var_decl 0x731e0292e120 current>)
                        ] UNSPEC_GOTOFF))) [13 current+0 S4 A32])) "kernel/sched.c":432:19 75 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (reg:HI 0 ax [orig:84 _2 ] [84])
        (mem:HI (plus:SI (reg/f:SI 0 ax [orig:83 current.57_1 ] [83])
                (const_int 584 [0x248])) [7 current.57_1->egid+0 S2 A32])) "kernel/sched.c":432:19 76 {*movhi_internal}
     (nil))
(insn 7 6 15 2 (set (reg:SI 0 ax [orig:85 _4 ] [85])
        (zero_extend:SI (reg:HI 0 ax [orig:84 _2 ] [84]))) "kernel/sched.c":432:19 144 {*zero_extendhisi2}
     (nil))
(insn 15 7 18 2 (use (reg/i:SI 0 ax)) "kernel/sched.c":433:1 -1
     (nil))
(note 18 15 0 NOTE_INSN_DELETED)

;; Function sys_getppid (sys_getppid, funcdef_no=23, decl_uid=1470, cgraph_uid=24, symbol_order=38)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=4, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 14: point = 0, n_alt = -1
   Insn 13: point = 0, n_alt = -2
   Insn 9: point = 1, n_alt = -2
   Insn 6: point = 3, n_alt = 0
   Insn 5: point = 5, n_alt = 0
   Insn 16: point = 7, n_alt = 0
 r82: [6..7]
 r83: [4..5]
 r84: [2..3]
 r85: [0..1]
Compressing live ranges: from 8 to 8 - 100%
Ranges after the compression:
 r82: [6..7]
 r83: [4..5]
 r84: [2..3]
 r85: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=4, prev_offset=4)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 16
changing reg in insn 5
changing reg in insn 5
changing reg in insn 6
changing reg in insn 6
changing reg in insn 9
changing reg in insn 9
changing reg in insn 13
deleting insn with uid = 9.
deleting insn with uid = 13.
starting the processing of deferred insns
ending the processing of deferred insns


sys_getppid

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0 [ax] 17 [flags]
;;  ref usage 	r0={4d,4u} r1={1d} r2={1d} r7={1d,2u} r17={1d} 
;;    total ref usage 14{8d,6u,0e} in 4{4 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 16 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 16 3 2 2 (parallel [
            (set (reg:SI 0 ax [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 16 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 0 ax [orig:83 current.58_1 ] [83])
        (mem/f/c:SI (plus:SI (reg:SI 0 ax [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x2]  <var_decl 0x731e0292e120 current>)
                        ] UNSPEC_GOTOFF))) [13 current+0 S4 A32])) "kernel/sched.c":437:19 75 {*movsi_internal}
     (nil))
(insn 6 5 14 2 (set (reg:SI 0 ax [orig:84 _3 ] [84])
        (mem:SI (plus:SI (reg/f:SI 0 ax [orig:83 current.58_1 ] [83])
                (const_int 560 [0x230])) [2 current.58_1->father+0 S4 A32])) "kernel/sched.c":437:19 75 {*movsi_internal}
     (nil))
(insn 14 6 17 2 (use (reg/i:SI 0 ax)) "kernel/sched.c":438:1 -1
     (nil))
(note 17 14 0 NOTE_INSN_DELETED)
