
;; Function get_fs_byte (get_fs_byte, funcdef_no=0, decl_uid=1005, cgraph_uid=1, symbol_order=0)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-4, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) m
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 16: point = 0, n_alt = -1
   Insn 15: point = 0, n_alt = -2
   Insn 11: point = 1, n_alt = -2
   Insn 8: point = 3, n_alt = -2
   Insn 5: point = 5, n_alt = -2
   Insn 7: point = 7, n_alt = 0
   Insn 6: point = 9, n_alt = 0
   Insn 18: point = 10, n_alt = 0
 r82: [10..10]
 r83: [4..5]
 r84: [2..3]
 r85: [0..1]
 r86: [6..7]
 r87: [8..9]
Compressing live ranges: from 11 to 11 - 100%
Ranges after the compression:
 r82: [10..10]
 r83: [4..5]
 r84: [2..3]
 r85: [0..1]
 r86: [6..7]
 r87: [8..9]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=8)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-4, prev_offset=0)
changing reg in insn 18
changing reg in insn 5
changing reg in insn 8
changing reg in insn 8
changing reg in insn 11
changing reg in insn 11
changing reg in insn 15
changing reg in insn 7
changing reg in insn 5
changing reg in insn 6
changing reg in insn 7
deleting insn with uid = 11.
deleting insn with uid = 15.
starting the processing of deferred insns
ending the processing of deferred insns


get_fs_byte

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0 [ax] 3 [bx] 17 [flags]
;;  ref usage 	r0={5d,4u} r1={1d} r2={1d} r3={1d,1u} r7={1d,3u} r17={2d} 
;;    total ref usage 19{11d,8u,0e} in 6{6 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 18 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 18 3 2 2 (parallel [
            (set (reg:SI 0 ax [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 18 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 2 7 2 (set (reg/f:SI 0 ax [87])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [14 addr+0 S4 A32])) "include/asm/segment.h":8:5 75 {*movsi_internal}
     (nil))
(insn 7 6 5 2 (parallel [
            (set (reg:QI 0 ax [orig:86 _v ] [86])
                (asm_operands:QI ("movb %%fs:%1, %0") ("=r") 0 [
                        (mem:QI (reg/f:SI 0 ax [87]) [0 *addr_2(D)+0 S1 A8])
                    ]
                     [
                        (asm_input:QI ("m") include/asm/segment.h:8)
                    ]
                     [] include/asm/segment.h:8))
            (clobber (reg:CC 17 flags))
        ]) "include/asm/segment.h":8:5 -1
     (nil))
(insn 5 7 8 2 (set (reg/v:QI 3 bx [orig:83 _v ] [83])
        (reg:QI 0 ax [orig:86 _v ] [86])) "include/asm/segment.h":8:5 77 {*movqi_internal}
     (nil))
(insn 8 5 16 2 (set (reg:QI 0 ax [orig:84 _4 ] [84])
        (reg/v:QI 3 bx [orig:83 _v ] [83])) "include/asm/segment.h":9:12 77 {*movqi_internal}
     (nil))
(insn 16 8 19 2 (use (reg/i:QI 0 ax)) "include/asm/segment.h":10:1 -1
     (nil))
(note 19 16 0 NOTE_INSN_DELETED)

;; Function put_fs_byte (put_fs_byte, funcdef_no=1, decl_uid=1010, cgraph_uid=2, symbol_order=1)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=4, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 2:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 3:  (0) =Q  (1) Q {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=7,overall=27,losers=2 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 4:  (0) m  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 8:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) r  (1) m
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2 3

********** Pseudo live ranges #1: **********

  BB 3
   Insn 14: point = 0, n_alt = -1
  BB 2
   Insn 10: point = 0, n_alt = 0
   Insn 9: point = 1, n_alt = 0
   Insn 8: point = 2, n_alt = 4
   Insn 4: point = 3, n_alt = 8
   Insn 3: point = 4, n_alt = 0
   Insn 2: point = 6, n_alt = 0
   Insn 15: point = 7, n_alt = 0
 r82: [7..7]
 r83: [5..6]
 r84: [3..4]
 r85: [0..2]
 r86: [0..1]
Compressing live ranges: from 8 to 7 - 87%
Ranges after the compression:
 r82: [6..6]
 r83: [4..5]
 r84: [2..3]
 r85: [0..1]
 r86: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=8)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=4, prev_offset=4)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 15
changing reg in insn 2
changing reg in insn 3
changing reg in insn 4
changing reg in insn 8
changing reg in insn 10
changing reg in insn 9
changing reg in insn 10
deleting insn with uid = 3.
starting the processing of deferred insns
ending the processing of deferred insns


put_fs_byte

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 17 [flags]
;;  ref usage 	r0={4d,2u} r1={2d,1u} r2={1d} r7={1d,7u} r17={2d} 
;;    total ref usage 20{10d,10u,0e} in 7{7 regular + 0 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
(note 6 1 15 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 15 6 2 2 (parallel [
            (set (reg:SI 0 ax [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(insn 2 15 4 2 (set (reg:SI 0 ax [83])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 val+0 S4 A32])) "include/asm/segment.h":13:1 75 {*movsi_internal}
     (nil))
(insn 4 2 5 2 (set (mem/c:QI (reg/f:SI 7 sp) [0 val+0 S1 A32])
        (reg:QI 0 ax [84])) "include/asm/segment.h":13:1 77 {*movqi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:QI 0 ax [85])
        (mem/c:QI (reg/f:SI 7 sp) [0 val+0 S1 A32])) "include/asm/segment.h":14:5 77 {*movqi_internal}
     (nil))
(insn 9 8 10 2 (set (reg/f:SI 1 dx [86])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [14 addr+0 S4 A32])) "include/asm/segment.h":14:5 75 {*movsi_internal}
     (nil))
(insn 10 9 13 2 (parallel [
            (asm_operands/v ("movb %0, %%fs:%1") ("") 0 [
                    (reg:QI 0 ax [85])
                    (mem:QI (reg/f:SI 1 dx [86]) [0 *addr_3(D)+0 S1 A8])
                ]
                 [
                    (asm_input:QI ("r") include/asm/segment.h:14)
                    (asm_input:QI ("m") include/asm/segment.h:14)
                ]
                 [] include/asm/segment.h:14)
            (clobber (reg:CC 17 flags))
        ]) "include/asm/segment.h":14:5 -1
     (nil))
(note 13 10 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 16 3 (const_int 0 [0]) "include/asm/segment.h":15:1 843 {nop}
     (nil))
(note 16 14 0 NOTE_INSN_DELETED)

;; Function put_fs_long (put_fs_long, funcdef_no=2, decl_uid=1014, cgraph_uid=3, symbol_order=2)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=4, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) r  (1) m
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2 3

********** Pseudo live ranges #1: **********

  BB 3
   Insn 11: point = 0, n_alt = -1
  BB 2
   Insn 7: point = 0, n_alt = 0
   Insn 6: point = 1, n_alt = 0
   Insn 5: point = 2, n_alt = 0
   Insn 12: point = 3, n_alt = 0
 r82: [3..3]
 r83: [0..2]
 r84: [0..1]
Compressing live ranges: from 4 to 3 - 75%
Ranges after the compression:
 r82: [2..2]
 r83: [0..1]
 r84: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=4, prev_offset=4)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 12
changing reg in insn 5
changing reg in insn 7
changing reg in insn 6
changing reg in insn 7
starting the processing of deferred insns
ending the processing of deferred insns


put_fs_long

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 17 [flags]
;;  ref usage 	r0={3d,1u} r1={2d,1u} r2={1d} r7={1d,5u} r17={2d} 
;;    total ref usage 16{9d,7u,0e} in 5{5 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 12 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 12 3 2 2 (parallel [
            (set (reg:SI 0 ax [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 12 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:SI 0 ax [83])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [1 val+0 S4 A32])) "include/asm/segment.h":19:5 75 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (reg/f:SI 1 dx [84])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [6 addr+0 S4 A32])) "include/asm/segment.h":19:5 75 {*movsi_internal}
     (nil))
(insn 7 6 10 2 (parallel [
            (asm_operands/v ("movl %0, %%fs:%1") ("") 0 [
                    (reg:SI 0 ax [83])
                    (mem:SI (reg/f:SI 1 dx [84]) [1 *addr_3(D)+0 S4 A32])
                ]
                 [
                    (asm_input:SI ("r") include/asm/segment.h:19)
                    (asm_input:SI ("m") include/asm/segment.h:19)
                ]
                 [] include/asm/segment.h:19)
            (clobber (reg:CC 17 flags))
        ]) "include/asm/segment.h":19:5 -1
     (nil))
(note 10 7 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 13 3 (const_int 0 [0]) "include/asm/segment.h":20:1 843 {nop}
     (nil))
(note 13 11 0 NOTE_INSN_DELETED)

;; Function do_signal (do_signal, funcdef_no=8, decl_uid=1361, cgraph_uid=9, symbol_order=8)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=32, prev_offset=0)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 203:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 9:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 11:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 13
	 Choosing alt 0 in insn 13:  (0) =rm  (1) %0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 25:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 36:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =r  (1) g {*movsi_internal}
            2 Small class reload: reject+=3
          alt=0,overall=15,losers=2,rld_nregs=2
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 38:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
      Creating newreg=157 from oldreg=136, assigning class GENERAL_REGS to r157
      Creating newreg=158, assigning class CREG to r158
   38: {r157:SI=r157:SI<<r158:QI;clobber flags:CC;}
      REG_DEAD r136:SI
      REG_DEAD r89:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  205: r157:SI=r136:SI
  207: r158:QI=r89:SI#0
    Inserting insn reload after:
  206: r90:SI=r157:SI

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 207:  (0) =Q  (1) Q {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 39:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 43:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 54:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 58:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 61:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 73:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) =rm  (1) 0 {*negsi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 78
	 Choosing alt 0 in insn 78:  (0) =rm  (1) %0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 79:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 81:  (0) r  (1) l  (2) M {*ashlsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 83:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 88:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 90:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=21,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 92:  (0) r  (1) r  (2) le {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 93:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 95:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 97:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 101:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=21,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 103:  (0) r  (1) r  (2) le {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 104:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 106:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 109:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 110:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 113:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 114:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 117:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=21,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 118:  (0) r  (1) r  (2) le {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 119:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 120:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 121:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 122:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 124:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 125:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 126:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 127:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 128:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 131:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=21,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 132:  (0) r  (1) r  (2) le {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 133:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 134:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 135:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 136:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 138:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 139:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 140:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=21,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 141:  (0) r  (1) r  (2) le {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 142:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 144:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 145:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 146:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 147:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 148:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 149:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=21,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 150:  (0) r  (1) r  (2) le {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 151:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 152:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 153:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 154:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 155:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 156:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 157:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 158:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=21,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 159:  (0) r  (1) r  (2) le {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 160:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 161:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 162:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 163:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 164:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 165:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 166:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 167:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=21,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 168:  (0) r  (1) r  (2) le {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 169:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 170:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 171:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 172:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 173:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 174:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 175:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 176:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 177:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 178:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 180:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 181:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 182:  (0) =rm  (1) %0  (2) re {*iorsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 183:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 184:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 186:  (0) m  (1) re {*movsi_internal}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2 3 4 5
EBB 6 7
EBB 8 9
EBB 10
EBB 11 12
EBB 13
EBB 15
EBB 16
EBB 14

********** Pseudo live ranges #1: **********

  BB 14
  BB 15
   Insn 198: point = 0, n_alt = -1
   Insn 197: point = 0, n_alt = -1
  BB 13
   Insn 193: point = 0, n_alt = -1
   Insn 186: point = 0, n_alt = 1
   Insn 185: point = 1, n_alt = -2
   Insn 184: point = 3, n_alt = 0
   Insn 183: point = 5, n_alt = 0
   Insn 182: point = 7, n_alt = 0
   Insn 181: point = 9, n_alt = 0
   Insn 180: point = 11, n_alt = 0
   Insn 179: point = 12, n_alt = -2
   Insn 178: point = 14, n_alt = 0
   Insn 177: point = 16, n_alt = 0
   Insn 176: point = 18, n_alt = 0
   Insn 175: point = 19, n_alt = 0
   Insn 174: point = 19, n_alt = 0
   Insn 173: point = 19, n_alt = 0
   Insn 172: point = 20, n_alt = 0
   Insn 171: point = 21, n_alt = 0
   Insn 170: point = 21, n_alt = 0
   Insn 169: point = 22, n_alt = 1
   Insn 168: point = 23, n_alt = 3
   Insn 167: point = 24, n_alt = 0
   Insn 166: point = 25, n_alt = 0
   Insn 165: point = 25, n_alt = 0
   Insn 164: point = 25, n_alt = 0
   Insn 163: point = 26, n_alt = 0
   Insn 162: point = 27, n_alt = 0
   Insn 161: point = 27, n_alt = 0
   Insn 160: point = 28, n_alt = 1
   Insn 159: point = 29, n_alt = 3
   Insn 158: point = 30, n_alt = 0
   Insn 157: point = 31, n_alt = 0
   Insn 156: point = 31, n_alt = 0
   Insn 155: point = 31, n_alt = 0
   Insn 154: point = 32, n_alt = 0
   Insn 153: point = 33, n_alt = 0
   Insn 152: point = 33, n_alt = 0
   Insn 151: point = 34, n_alt = 1
   Insn 150: point = 35, n_alt = 3
   Insn 149: point = 36, n_alt = 0
   Insn 148: point = 37, n_alt = 0
   Insn 147: point = 37, n_alt = 0
   Insn 146: point = 37, n_alt = 0
   Insn 145: point = 38, n_alt = 0
   Insn 144: point = 39, n_alt = 0
   Insn 143: point = 39, n_alt = 0
   Insn 142: point = 40, n_alt = 1
   Insn 141: point = 41, n_alt = 3
   Insn 140: point = 42, n_alt = 0
   Insn 139: point = 43, n_alt = 0
   Insn 138: point = 43, n_alt = 0
   Insn 137: point = 43, n_alt = 0
   Insn 136: point = 44, n_alt = 0
   Insn 135: point = 45, n_alt = 0
   Insn 134: point = 45, n_alt = 0
   Insn 133: point = 46, n_alt = 1
   Insn 132: point = 47, n_alt = 3
   Insn 131: point = 48, n_alt = 0
  BB 12
   Insn 128: point = 50, n_alt = 0
   Insn 127: point = 50, n_alt = 0
   Insn 126: point = 50, n_alt = 0
   Insn 125: point = 51, n_alt = 0
   Insn 124: point = 52, n_alt = 0
   Insn 123: point = 52, n_alt = -2
   Insn 122: point = 54, n_alt = 0
   Insn 121: point = 56, n_alt = 0
   Insn 120: point = 58, n_alt = 0
   Insn 119: point = 59, n_alt = 1
   Insn 118: point = 60, n_alt = 3
   Insn 117: point = 61, n_alt = 0
  BB 11
   Insn 115: point = 63, n_alt = -1
   Insn 114: point = 63, n_alt = 0
   Insn 113: point = 64, n_alt = 0
   Insn 112: point = 66, n_alt = 0
   Insn 111: point = 68, n_alt = 0
   Insn 110: point = 69, n_alt = 0
   Insn 109: point = 69, n_alt = 0
   Insn 108: point = 69, n_alt = 0
   Insn 107: point = 70, n_alt = 0
   Insn 106: point = 71, n_alt = 0
   Insn 105: point = 71, n_alt = 0
   Insn 104: point = 72, n_alt = 1
   Insn 103: point = 73, n_alt = 3
   Insn 102: point = 74, n_alt = 0
   Insn 101: point = 75, n_alt = 0
   Insn 100: point = 75, n_alt = 0
   Insn 99: point = 75, n_alt = 0
   Insn 98: point = 76, n_alt = 0
   Insn 97: point = 77, n_alt = 0
   Insn 96: point = 77, n_alt = -2
   Insn 95: point = 79, n_alt = 0
   Insn 94: point = 81, n_alt = 0
   Insn 93: point = 82, n_alt = 1
   Insn 92: point = 83, n_alt = 3
   Insn 91: point = 84, n_alt = 0
   Insn 90: point = 85, n_alt = 1
   Insn 89: point = 86, n_alt = 0
   Insn 88: point = 87, n_alt = 0
   Insn 87: point = 87, n_alt = 0
   Insn 86: point = 87, n_alt = -2
   Insn 85: point = 87, n_alt = 0
   Insn 84: point = 88, n_alt = 0
   Insn 83: point = 89, n_alt = 0
   Insn 82: point = 89, n_alt = 0
   Insn 81: point = 90, n_alt = 1
   Insn 80: point = 92, n_alt = 0
   Insn 79: point = 93, n_alt = 1
   Insn 78: point = 94, n_alt = 0
   Insn 77: point = 96, n_alt = 0
   Insn 76: point = 98, n_alt = 0
   Insn 75: point = 100, n_alt = 0
   Insn 74: point = 101, n_alt = 0
   Insn 73: point = 102, n_alt = 1
  BB 9
   Insn 191: point = 104, n_alt = -1
   Insn 65: point = 104, n_alt = 0
  BB 10
   Insn 70: point = 106, n_alt = 0
  BB 8
   Insn 63: point = 108, n_alt = -1
   Insn 62: point = 108, n_alt = 0
   Insn 61: point = 109, n_alt = 0
   Insn 60: point = 111, n_alt = 0
   Insn 59: point = 113, n_alt = 0
   Insn 58: point = 114, n_alt = 1
   Insn 57: point = 115, n_alt = 0
  BB 7
   Insn 54: point = 117, n_alt = 1
   Insn 53: point = 118, n_alt = 0
  BB 6
   Insn 51: point = 120, n_alt = -1
   Insn 50: point = 120, n_alt = 0
   Insn 47: point = 121, n_alt = 0
   Insn 46: point = 123, n_alt = 0
  BB 5
   Insn 43: point = 125, n_alt = 0
   Insn 42: point = 125, n_alt = 0
   Insn 41: point = 125, n_alt = -2
   Insn 40: point = 125, n_alt = 0
   Insn 39: point = 126, n_alt = 0
   Insn 206: point = 126, n_alt = -2
	Hard reg 0 is preferable by r157 with profit 1000
   Insn 38: point = 128, n_alt = 0
   Insn 207: point = 130, n_alt = 0
   Insn 205: point = 132, n_alt = -2
	Hard reg 0 is preferable by r157 with profit 1000
	Hard reg 1 is preferable by r157 with profit 1000
   Insn 37: point = 134, n_alt = 0
   Insn 36: point = 135, n_alt = 0
   Insn 35: point = 137, n_alt = 0
  BB 16
   Insn 202: point = 139, n_alt = -1
  BB 4
   Insn 29: point = 139, n_alt = -1
   Insn 28: point = 139, n_alt = 0
  BB 3
   Insn 26: point = 140, n_alt = -1
   Insn 25: point = 140, n_alt = 1
  BB 2
   Insn 19: point = 141, n_alt = -1
   Insn 18: point = 141, n_alt = 0
   Insn 17: point = 141, n_alt = 1
   Insn 16: point = 142, n_alt = 0
   Insn 15: point = 144, n_alt = 0
   Insn 14: point = 145, n_alt = 1
   Insn 13: point = 146, n_alt = 0
   Insn 12: point = 148, n_alt = 0
   Insn 11: point = 150, n_alt = 0
   Insn 10: point = 152, n_alt = 0
   Insn 9: point = 153, n_alt = 3
   Insn 8: point = 155, n_alt = 0
   Insn 7: point = 157, n_alt = 0
   Insn 6: point = 158, n_alt = 1
   Insn 5: point = 159, n_alt = 0
   Insn 203: point = 160, n_alt = 0
 r82: [6..160]
 r83: [154..155]
 r84: [147..153]
 r85: [151..152]
 r86: [149..150]
 r87: [147..148]
 r88: [141..142]
 r89: [131..135]
 r90: [125..126]
 r91: [120..121]
 r92: [114..115]
 r93: [110..111]
 r94: [108..109]
 r95: [95..101]
 r96: [99..100]
 r97: [97..98]
 r98: [95..96]
 r99: [93..94]
 r100: [88..90]
 r101: [87..89]
 r102: [76..84]
 r103: [78..79]
 r104: [75..77]
 r105: [70..74]
 r106: [69..71]
 r107: [65..66]
 r108: [63..64]
 r109: [51..61]
 r110: [55..56]
 r111: [53..54]
 r112: [50..52]
 r113: [44..48]
 r114: [43..45]
 r115: [38..42]
 r116: [37..39]
 r117: [32..36]
 r118: [31..33]
 r119: [26..30]
 r120: [25..27]
 r121: [20..24]
 r122: [19..21]
 r123: [15..16]
 r124: [13..14]
 r125: [8..12]
 r126: [8..9]
 r127: [2..7]
 r128: [0..3]
 r129: [0..1]
 r130: [106..106] [102..104]
 r131: [158..159]
 r132: [156..157]
 r133: [145..146]
 r134: [143..144]
 r135: [136..137]
 r136: [133..134]
 r137: [122..123]
 r138: [117..118]
 r139: [112..113]
 r140: [91..92]
 r141: [85..86]
 r142: [82..83]
 r143: [80..81]
 r144: [72..73]
 r145: [67..68]
 r146: [59..60]
 r147: [57..58]
 r148: [46..47]
 r149: [40..41]
 r150: [34..35]
 r151: [28..29]
 r152: [22..23]
 r153: [17..18]
 r154: [10..11]
 r155: [4..5]
 r157: [127..132]
 r158: [129..130]
Compressing live ranges: from 161 to 125 - 77%
Ranges after the compression:
 r82: [6..124]
 r83: [119..120]
 r84: [113..118]
 r85: [117..118]
 r86: [115..116]
 r87: [113..114]
 r88: [107..108]
 r89: [101..104]
 r90: [97..98]
 r91: [93..94]
 r92: [89..90]
 r93: [85..86]
 r94: [83..84]
 r95: [74..79]
 r96: [78..79]
 r97: [76..77]
 r98: [74..75]
 r99: [72..73]
 r100: [68..69]
 r101: [68..69]
 r102: [58..65]
 r103: [60..61]
 r104: [58..59]
 r105: [54..57]
 r106: [54..55]
 r107: [50..51]
 r108: [48..49]
 r109: [38..47]
 r110: [42..43]
 r111: [40..41]
 r112: [38..39]
 r113: [34..37]
 r114: [34..35]
 r115: [30..33]
 r116: [30..31]
 r117: [26..29]
 r118: [26..27]
 r119: [22..25]
 r120: [22..23]
 r121: [18..21]
 r122: [18..19]
 r123: [14..15]
 r124: [12..13]
 r125: [8..11]
 r126: [8..9]
 r127: [2..7]
 r128: [0..3]
 r129: [0..1]
 r130: [80..82]
 r131: [123..124]
 r132: [121..122]
 r133: [111..112]
 r134: [109..110]
 r135: [105..106]
 r136: [103..104]
 r137: [95..96]
 r138: [91..92]
 r139: [87..88]
 r140: [70..71]
 r141: [66..67]
 r142: [64..65]
 r143: [62..63]
 r144: [56..57]
 r145: [52..53]
 r146: [46..47]
 r147: [44..45]
 r148: [36..37]
 r149: [32..33]
 r150: [28..29]
 r151: [24..25]
 r152: [20..21]
 r153: [16..17]
 r154: [10..11]
 r155: [4..5]
 r157: [99..102]
 r158: [99..100]

********** Assignment #1: **********

	 Assigning to 158 (cl=CREG, orig=158, freq=2000, tfirst=158, tfreq=2000)...
	   Assign 2 to reload r158 (freq=2000)
	 Assigning to 157 (cl=GENERAL_REGS, orig=136, freq=3000, tfirst=157, tfreq=3000)...
	   Assign 1 to reload r157 (freq=3000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=48, prev_offset=48)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=32, prev_offset=32)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
changing reg in insn 203
changing reg in insn 183
changing reg in insn 176
changing reg in insn 120
changing reg in insn 86
changing reg in insn 41
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 11
changing reg in insn 12
changing reg in insn 12
changing reg in insn 16
changing reg in insn 17
changing reg in insn 36
changing reg in insn 40
changing reg in insn 47
changing reg in insn 50
changing reg in insn 57
changing reg in insn 58
changing reg in insn 60
changing reg in insn 61
changing reg in insn 61
changing reg in insn 62
changing reg in insn 74
changing reg in insn 75
changing reg in insn 76
changing reg in insn 76
changing reg in insn 77
changing reg in insn 77
changing reg in insn 78
changing reg in insn 79
changing reg in insn 81
changing reg in insn 84
changing reg in insn 82
changing reg in insn 85
changing reg in insn 91
changing reg in insn 98
changing reg in insn 92
changing reg in insn 95
changing reg in insn 96
changing reg in insn 96
changing reg in insn 99
changing reg in insn 102
changing reg in insn 107
changing reg in insn 103
changing reg in insn 105
changing reg in insn 108
changing reg in insn 112
changing reg in insn 113
changing reg in insn 113
changing reg in insn 114
changing reg in insn 117
changing reg in insn 125
changing reg in insn 118
changing reg in insn 121
changing reg in insn 122
changing reg in insn 122
changing reg in insn 123
changing reg in insn 123
changing reg in insn 126
changing reg in insn 131
changing reg in insn 136
changing reg in insn 132
changing reg in insn 134
changing reg in insn 137
changing reg in insn 140
changing reg in insn 145
changing reg in insn 141
changing reg in insn 143
changing reg in insn 146
changing reg in insn 149
changing reg in insn 154
changing reg in insn 150
changing reg in insn 152
changing reg in insn 155
changing reg in insn 158
changing reg in insn 163
changing reg in insn 159
changing reg in insn 161
changing reg in insn 164
changing reg in insn 167
changing reg in insn 172
changing reg in insn 168
changing reg in insn 170
changing reg in insn 173
changing reg in insn 177
changing reg in insn 178
changing reg in insn 178
changing reg in insn 179
changing reg in insn 179
changing reg in insn 182
changing reg in insn 181
changing reg in insn 182
changing reg in insn 182
changing reg in insn 185
changing reg in insn 184
changing reg in insn 186
changing reg in insn 185
changing reg in insn 186
changing reg in insn 70
changing reg in insn 65
changing reg in insn 73
changing reg in insn 5
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 16
changing reg in insn 35
changing reg in insn 36
changing reg in insn 37
changing reg in insn 46
changing reg in insn 47
changing reg in insn 53
changing reg in insn 54
changing reg in insn 59
changing reg in insn 60
changing reg in insn 80
changing reg in insn 81
changing reg in insn 89
changing reg in insn 90
changing reg in insn 92
changing reg in insn 93
changing reg in insn 94
changing reg in insn 95
changing reg in insn 103
changing reg in insn 104
changing reg in insn 111
changing reg in insn 112
changing reg in insn 118
changing reg in insn 119
changing reg in insn 120
changing reg in insn 121
changing reg in insn 132
changing reg in insn 133
changing reg in insn 141
changing reg in insn 142
changing reg in insn 150
changing reg in insn 151
changing reg in insn 159
changing reg in insn 160
changing reg in insn 168
changing reg in insn 169
changing reg in insn 176
changing reg in insn 177
changing reg in insn 180
changing reg in insn 181
changing reg in insn 183
changing reg in insn 184
deleting insn with uid = 205.
deleting insn with uid = 41.
deleting insn with uid = 86.
deleting insn with uid = 96.
deleting insn with uid = 123.
deleting insn with uid = 185.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 42.
verify found no changes in insn with uid = 87.
verify found no changes in insn with uid = 100.
verify found no changes in insn with uid = 109.
verify found no changes in insn with uid = 127.
verify found no changes in insn with uid = 138.
verify found no changes in insn with uid = 147.
verify found no changes in insn with uid = 156.
verify found no changes in insn with uid = 165.
verify found no changes in insn with uid = 174.


do_signal

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 17 [flags]
;;  ref usage 	r0={57d,53u} r1={37d,26u} r2={12d,1u} r3={1d,6u} r7={40d,133u} r8={10d} r9={10d} r10={10d} r11={10d} r12={10d} r13={10d} r14={10d} r15={10d} r16={1e} r17={58d,6u} r18={10d} r19={1e} r20={10d} r21={10d} r22={10d} r23={10d} r24={10d} r25={10d} r26={10d} r27={10d} r28={10d} r29={10d} r30={10d} r31={10d} r32={10d} r33={10d} r34={10d} r35={10d} r36={10d} r37={10d} r38={10d} r39={10d} r40={10d} r41={10d} r42={10d} r43={10d} r44={10d} r45={10d} r46={10d} r47={10d} r48={10d} r49={10d} r50={10d} r51={10d} r52={10d} r53={10d} r54={10d} r55={10d} r56={10d} r57={10d} r58={10d} r59={10d} r60={10d} r61={10d} r62={10d} r63={10d} r64={10d} r65={10d} r66={10d} r67={10d} r68={10d} r69={10d} r70={10d} r71={10d} r72={10d} r73={10d} r74={10d} r75={10d} 
;;    total ref usage 1082{855d,225u,2e} in 157{147 regular + 10 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 203 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 203 3 2 2 (parallel [
            (set (reg:SI 3 bx [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 203 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:SI 0 ax [131])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 80 [0x50])) [1 eip+0 S4 A32])) "kernel/signal.c":18:10 75 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [1 old_eip+0 S4 A32])
        (reg:SI 0 ax [131])) "kernel/signal.c":18:10 75 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (reg/f:SI 0 ax [132])
        (mem/u/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x40]  <var_decl 0x7518d911e360 current>)
                        ] UNSPEC_GOT))) [17  S4 A8])) "kernel/signal.c":19:36 75 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (reg/f:SI 0 ax [orig:83 current.0_1 ] [83])
        (mem/f/c:SI (reg/f:SI 0 ax [132]) [16 current+0 S4 A32])) "kernel/signal.c":19:36 75 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (parallel [
            (set (reg/f:SI 1 dx [orig:84 _2 ] [84])
                (plus:SI (reg/f:SI 0 ax [orig:83 current.0_1 ] [83])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":19:29 209 {*addsi_1}
     (nil))
(insn 10 9 11 2 (set (reg:SI 0 ax [orig:85 signr.1_3 ] [85])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 48 [0x30])) [1 signr+0 S4 A32])) "kernel/signal.c":19:56 75 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (parallel [
            (set (reg:SI 0 ax [orig:86 _4 ] [86])
                (plus:SI (reg:SI 0 ax [orig:85 signr.1_3 ] [85])
                    (const_int 268435455 [0xfffffff])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":19:56 209 {*addsi_1}
     (nil))
(insn 12 11 13 2 (parallel [
            (set (reg:SI 0 ax [orig:87 _5 ] [87])
                (ashift:SI (reg:SI 0 ax [orig:86 _4 ] [86])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":19:56 655 {*ashlsi3_1}
     (nil))
(insn 13 12 14 2 (parallel [
            (set (reg:SI 0 ax [133])
                (plus:SI (reg:SI 0 ax [orig:87 _5 ] [87])
                    (reg/f:SI 1 dx [orig:84 _2 ] [84])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":19:24 209 {*addsi_1}
     (nil))
(insn 14 13 15 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [15 sa+0 S4 A32])
        (reg:SI 0 ax [133])) "kernel/signal.c":19:24 75 {*movsi_internal}
     (nil))
(insn 15 14 16 2 (set (reg/f:SI 0 ax [134])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [15 sa+0 S4 A32])) "kernel/signal.c":23:35 75 {*movsi_internal}
     (nil))
(insn 16 15 17 2 (set (reg/f:SI 0 ax [orig:88 _6 ] [88])
        (mem/f:SI (reg/f:SI 0 ax [134]) [3 sa_57->sa_handler+0 S4 A32])) "kernel/signal.c":23:35 75 {*movsi_internal}
     (nil))
(insn 17 16 18 2 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [1 sa_handler+0 S4 A32])
        (reg/f:SI 0 ax [orig:88 _6 ] [88])) "kernel/signal.c":23:16 75 {*movsi_internal}
     (nil))
(insn 18 17 19 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])) [1 sa_handler+0 S4 A32])
            (const_int 1 [0x1]))) "kernel/signal.c":24:8 11 {*cmpsi_1}
     (nil))
(jump_insn 19 18 24 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 196)
            (pc))) "kernel/signal.c":24:8 806 {*jcc}
     (nil)
 -> 196)
(note 24 19 25 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 25 24 26 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])) [1 sa_handler+0 S4 A32])
            (const_int 0 [0]))) "kernel/signal.c":26:8 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 26 25 27 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 44)
            (pc))) "kernel/signal.c":26:8 806 {*jcc}
     (nil)
 -> 44)
(note 27 26 28 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 29 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 48 [0x30])) [1 signr+0 S4 A32])
            (const_int 17 [0x11]))) "kernel/signal.c":27:12 11 {*cmpsi_1}
     (nil))
(jump_insn 29 28 34 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 201)
            (pc))) "kernel/signal.c":27:12 806 {*jcc}
     (nil)
 -> 201)
(note 34 29 35 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 35 34 36 5 (set (reg:SI 0 ax [135])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 48 [0x30])) [1 signr+0 S4 A32])) "kernel/signal.c":30:33 75 {*movsi_internal}
     (nil))
(insn 36 35 37 5 (parallel [
            (set (reg:SI 0 ax [orig:89 _7 ] [89])
                (plus:SI (reg:SI 0 ax [135])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":30:33 209 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (reg/f:SI 16 argp) [1 signr+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 37 36 207 5 (set (reg:SI 1 dx [136])
        (const_int 1 [0x1])) "kernel/signal.c":30:13 75 {*movsi_internal}
     (nil))
(insn 207 37 38 5 (set (reg:QI 2 cx [158])
        (reg:QI 0 ax [orig:89 _7 ] [89])) "kernel/signal.c":30:13 77 {*movqi_internal}
     (nil))
(insn 38 207 206 5 (parallel [
            (set (reg:SI 1 dx [136])
                (ashift:SI (reg:SI 1 dx [136])
                    (reg:QI 2 cx [158])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":30:13 655 {*ashlsi3_1}
     (nil))
(insn 206 38 39 5 (set (reg:SI 0 ax [orig:90 _8 ] [90])
        (reg:SI 1 dx [136])) "kernel/signal.c":30:13 75 {*movsi_internal}
     (nil))
(insn 39 206 40 5 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":30:13 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 40 39 42 5 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [4  S4 A32])
        (reg:SI 0 ax [orig:90 _8 ] [90])) "kernel/signal.c":30:13 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 42 40 43 5 (call (mem:QI (symbol_ref:SI ("do_exit") [flags 0x41]  <function_decl 0x7518d913b600 do_exit>) [0 do_exit S1 A8])
        (const_int 16 [0x10])) "kernel/signal.c":30:13 812 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 43 42 44 5 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":30:13 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(code_label 44 43 45 6 8 (nil) [1 uses])
(note 45 44 46 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 46 45 47 6 (set (reg/f:SI 0 ax [137])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [15 sa+0 S4 A32])) "kernel/signal.c":32:11 75 {*movsi_internal}
     (nil))
(insn 47 46 50 6 (set (reg:SI 0 ax [orig:91 _9 ] [91])
        (mem:SI (plus:SI (reg/f:SI 0 ax [137])
                (const_int 8 [0x8])) [4 sa_57->sa_flags+0 S4 A32])) "kernel/signal.c":32:11 75 {*movsi_internal}
     (nil))
(insn 50 47 51 6 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:SI 0 ax [orig:91 _9 ] [91])
            (const_int 0 [0]))) "kernel/signal.c":32:8 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 51 50 52 6 (set (pc)
        (if_then_else (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref 55)
            (pc))) "kernel/signal.c":32:8 806 {*jcc}
     (nil)
 -> 55)
(note 52 51 53 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 53 52 54 7 (set (reg/f:SI 0 ax [138])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [15 sa+0 S4 A32])) "kernel/signal.c":33:24 75 {*movsi_internal}
     (nil))
(insn 54 53 55 7 (set (mem/f:SI (reg/f:SI 0 ax [138]) [3 sa_57->sa_handler+0 S4 A32])
        (const_int 0 [0])) "kernel/signal.c":33:24 75 {*movsi_internal}
     (nil))
(code_label 55 54 56 8 10 (nil) [1 uses])
(note 56 55 57 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 57 56 58 8 (set (reg:SI 0 ax [orig:92 sa_handler.2_10 ] [92])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [1 sa_handler+0 S4 A32])) "kernel/signal.c":34:13 75 {*movsi_internal}
     (nil))
(insn 58 57 59 8 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 80 [0x50])) [1 eip+0 S4 A32])
        (reg:SI 0 ax [orig:92 sa_handler.2_10 ] [92])) "kernel/signal.c":34:13 75 {*movsi_internal}
     (nil))
(insn 59 58 60 8 (set (reg/f:SI 0 ax [139])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [15 sa+0 S4 A32])) "kernel/signal.c":35:16 75 {*movsi_internal}
     (nil))
(insn 60 59 61 8 (set (reg:SI 0 ax [orig:93 _11 ] [93])
        (mem:SI (plus:SI (reg/f:SI 0 ax [139])
                (const_int 8 [0x8])) [4 sa_57->sa_flags+0 S4 A32])) "kernel/signal.c":35:16 75 {*movsi_internal}
     (nil))
(insn 61 60 62 8 (parallel [
            (set (reg:SI 0 ax [orig:94 _12 ] [94])
                (and:SI (reg:SI 0 ax [orig:93 _11 ] [93])
                    (const_int 1073741824 [0x40000000])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":35:27 490 {*andsi_1}
     (nil))
(insn 62 61 63 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:94 _12 ] [94])
            (const_int 0 [0]))) "kernel/signal.c":35:44 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 63 62 64 8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 68)
            (pc))) "kernel/signal.c":35:44 806 {*jcc}
     (nil)
 -> 68)
(note 64 63 65 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 65 64 191 9 (set (reg:SI 0 ax [orig:130 iftmp.3_49 ] [130])
        (const_int 7 [0x7])) "kernel/signal.c":35:44 75 {*movsi_internal}
     (nil))
(jump_insn 191 65 192 9 (set (pc)
        (label_ref 71)) 807 {jump}
     (nil)
 -> 71)
(barrier 192 191 68)
(code_label 68 192 69 10 11 (nil) [1 uses])
(note 69 68 70 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 70 69 71 10 (set (reg:SI 0 ax [orig:130 iftmp.3_49 ] [130])
        (const_int 8 [0x8])) "kernel/signal.c":35:44 75 {*movsi_internal}
     (nil))
(code_label 71 70 72 11 12 (nil) [1 uses])
(note 72 71 73 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 73 72 74 11 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [4 longs+0 S4 A32])
        (reg:SI 0 ax [orig:130 iftmp.3_49 ] [130])) "kernel/signal.c":35:11 75 {*movsi_internal}
     (nil))
(insn 74 73 75 11 (set (reg/f:SI 1 dx [orig:95 esp.4_13 ] [95])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 92 [0x5c])) [6 esp+0 S4 A32])) "kernel/signal.c":36:13 75 {*movsi_internal}
     (nil))
(insn 75 74 76 11 (set (reg:SI 0 ax [orig:96 longs.5_14 ] [96])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [4 longs+0 S4 A32])) "kernel/signal.c":36:13 75 {*movsi_internal}
     (nil))
(insn 76 75 77 11 (parallel [
            (set (reg:SI 0 ax [orig:97 _15 ] [97])
                (ashift:SI (reg:SI 0 ax [orig:96 longs.5_14 ] [96])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":36:13 655 {*ashlsi3_1}
     (nil))
(insn 77 76 78 11 (parallel [
            (set (reg:SI 0 ax [orig:98 _16 ] [98])
                (neg:SI (reg:SI 0 ax [orig:97 _15 ] [97])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":36:13 575 {*negsi_1}
     (nil))
(insn 78 77 79 11 (parallel [
            (set (reg/f:SI 0 ax [orig:99 _17 ] [99])
                (plus:SI (reg:SI 0 ax [orig:98 _16 ] [98])
                    (reg/f:SI 1 dx [orig:95 esp.4_13 ] [95])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":36:13 209 {*addsi_1}
     (nil))
(insn 79 78 80 11 (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 92 [0x5c])) [6 esp+0 S4 A32])
        (reg/f:SI 0 ax [orig:99 _17 ] [99])) "kernel/signal.c":36:13 75 {*movsi_internal}
     (nil))
(insn 80 79 81 11 (set (reg:SI 0 ax [140])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [4 longs+0 S4 A32])) "kernel/signal.c":37:5 75 {*movsi_internal}
     (nil))
(insn 81 80 82 11 (parallel [
            (set (reg:SI 1 dx [orig:100 _18 ] [100])
                (ashift:SI (reg:SI 0 ax [140])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":37:5 655 {*ashlsi3_1}
     (expr_list:REG_EQUAL (ashift:SI (mem/c:SI (plus:SI (reg/f:SI 19 frame)
                    (const_int -20 [0xffffffffffffffec])) [4 longs+0 S4 A32])
            (const_int 2 [0x2]))
        (nil)))
(insn 82 81 83 11 (set (reg/f:SI 0 ax [orig:101 esp.6_19 ] [101])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 92 [0x5c])) [6 esp+0 S4 A32])) "kernel/signal.c":37:5 75 {*movsi_internal}
     (nil))
(insn 83 82 84 11 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":37:5 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 84 83 85 11 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [4  S4 A32])
        (reg:SI 1 dx [orig:100 _18 ] [100])) "kernel/signal.c":37:5 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 85 84 87 11 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [6  S4 A32])
        (reg/f:SI 0 ax [orig:101 esp.6_19 ] [101])) "kernel/signal.c":37:5 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 87 85 88 11 (call (mem:QI (symbol_ref:SI ("verify_area") [flags 0x41]  <function_decl 0x7518d913b300 verify_area>) [0 verify_area S1 A8])
        (const_int 16 [0x10])) "kernel/signal.c":37:5 812 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 88 87 89 11 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":37:5 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 89 88 90 11 (set (reg/f:SI 0 ax [141])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 92 [0x5c])) [6 esp+0 S4 A32])) "kernel/signal.c":38:13 75 {*movsi_internal}
     (nil))
(insn 90 89 91 11 (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [6 tmp_esp+0 S4 A32])
        (reg/f:SI 0 ax [141])) "kernel/signal.c":38:13 75 {*movsi_internal}
     (nil))
(insn 91 90 92 11 (set (reg/f:SI 0 ax [orig:102 tmp_esp.7_20 ] [102])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [6 tmp_esp+0 S4 A32])) "kernel/signal.c":39:5 75 {*movsi_internal}
     (nil))
(insn 92 91 93 11 (parallel [
            (set (reg:SI 1 dx [142])
                (plus:SI (reg/f:SI 0 ax [orig:102 tmp_esp.7_20 ] [102])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":39:5 209 {*addsi_1}
     (nil))
(insn 93 92 94 11 (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [6 tmp_esp+0 S4 A32])
        (reg:SI 1 dx [142])) "kernel/signal.c":39:5 75 {*movsi_internal}
     (nil))
(insn 94 93 95 11 (set (reg/f:SI 1 dx [143])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [15 sa+0 S4 A32])) "kernel/signal.c":39:25 75 {*movsi_internal}
     (nil))
(insn 95 94 97 11 (set (reg/f:SI 1 dx [orig:103 _21 ] [103])
        (mem/f:SI (plus:SI (reg/f:SI 1 dx [143])
                (const_int 12 [0xc])) [5 sa_57->sa_restorer+0 S4 A32])) "kernel/signal.c":39:25 75 {*movsi_internal}
     (nil))
(insn 97 95 98 11 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":39:5 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 98 97 99 11 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [6  S4 A32])
        (reg/f:SI 0 ax [orig:102 tmp_esp.7_20 ] [102])) "kernel/signal.c":39:5 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 99 98 100 11 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [1  S4 A32])
        (reg:SI 1 dx [orig:104 _22 ] [104])) "kernel/signal.c":39:5 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 100 99 101 11 (call (mem:QI (symbol_ref:SI ("put_fs_long") [flags 0x3]  <function_decl 0x7518d90d2a00 put_fs_long>) [0 put_fs_long S1 A8])
        (const_int 16 [0x10])) "kernel/signal.c":39:5 812 {*call}
     (nil)
    (nil))
(insn 101 100 102 11 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":39:5 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 102 101 103 11 (set (reg/f:SI 0 ax [orig:105 tmp_esp.8_23 ] [105])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [6 tmp_esp+0 S4 A32])) "kernel/signal.c":40:5 75 {*movsi_internal}
     (nil))
(insn 103 102 104 11 (parallel [
            (set (reg:SI 1 dx [144])
                (plus:SI (reg/f:SI 0 ax [orig:105 tmp_esp.8_23 ] [105])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":40:5 209 {*addsi_1}
     (nil))
(insn 104 103 105 11 (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [6 tmp_esp+0 S4 A32])
        (reg:SI 1 dx [144])) "kernel/signal.c":40:5 75 {*movsi_internal}
     (nil))
(insn 105 104 106 11 (set (reg:SI 1 dx [orig:106 signr.9_24 ] [106])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 48 [0x30])) [1 signr+0 S4 A32])) "kernel/signal.c":40:5 75 {*movsi_internal}
     (nil))
(insn 106 105 107 11 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":40:5 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 107 106 108 11 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [6  S4 A32])
        (reg/f:SI 0 ax [orig:105 tmp_esp.8_23 ] [105])) "kernel/signal.c":40:5 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 108 107 109 11 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [1  S4 A32])
        (reg:SI 1 dx [orig:106 signr.9_24 ] [106])) "kernel/signal.c":40:5 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 109 108 110 11 (call (mem:QI (symbol_ref:SI ("put_fs_long") [flags 0x3]  <function_decl 0x7518d90d2a00 put_fs_long>) [0 put_fs_long S1 A8])
        (const_int 16 [0x10])) "kernel/signal.c":40:5 812 {*call}
     (nil)
    (nil))
(insn 110 109 111 11 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":40:5 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 111 110 112 11 (set (reg/f:SI 0 ax [145])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [15 sa+0 S4 A32])) "kernel/signal.c":41:13 75 {*movsi_internal}
     (nil))
(insn 112 111 113 11 (set (reg:SI 0 ax [orig:107 _25 ] [107])
        (mem:SI (plus:SI (reg/f:SI 0 ax [145])
                (const_int 8 [0x8])) [4 sa_57->sa_flags+0 S4 A32])) "kernel/signal.c":41:13 75 {*movsi_internal}
     (nil))
(insn 113 112 114 11 (parallel [
            (set (reg:SI 0 ax [orig:108 _26 ] [108])
                (and:SI (reg:SI 0 ax [orig:107 _25 ] [107])
                    (const_int 1073741824 [0x40000000])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":41:24 490 {*andsi_1}
     (nil))
(insn 114 113 115 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:108 _26 ] [108])
            (const_int 0 [0]))) "kernel/signal.c":41:8 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 115 114 116 11 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 129)
            (pc))) "kernel/signal.c":41:8 806 {*jcc}
     (nil)
 -> 129)
(note 116 115 117 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 117 116 118 12 (set (reg/f:SI 0 ax [orig:109 tmp_esp.10_27 ] [109])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [6 tmp_esp+0 S4 A32])) "kernel/signal.c":42:9 75 {*movsi_internal}
     (nil))
(insn 118 117 119 12 (parallel [
            (set (reg:SI 1 dx [146])
                (plus:SI (reg/f:SI 0 ax [orig:109 tmp_esp.10_27 ] [109])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":42:9 209 {*addsi_1}
     (nil))
(insn 119 118 120 12 (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [6 tmp_esp+0 S4 A32])
        (reg:SI 1 dx [146])) "kernel/signal.c":42:9 75 {*movsi_internal}
     (nil))
(insn 120 119 121 12 (set (reg/f:SI 1 dx [147])
        (mem/u/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x40]  <var_decl 0x7518d911e360 current>)
                        ] UNSPEC_GOT))) [17  S4 A8])) "kernel/signal.c":42:28 75 {*movsi_internal}
     (nil))
(insn 121 120 122 12 (set (reg/f:SI 1 dx [orig:110 current.11_28 ] [110])
        (mem/f/c:SI (reg/f:SI 1 dx [147]) [16 current+0 S4 A32])) "kernel/signal.c":42:28 75 {*movsi_internal}
     (nil))
(insn 122 121 124 12 (set (reg:SI 1 dx [orig:111 _29 ] [111])
        (mem:SI (plus:SI (reg/f:SI 1 dx [orig:110 current.11_28 ] [110])
                (const_int 528 [0x210])) [1 current.11_28->blocked+0 S4 A32])) "kernel/signal.c":42:28 75 {*movsi_internal}
     (nil))
(insn 124 122 125 12 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":42:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 125 124 126 12 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [6  S4 A32])
        (reg/f:SI 0 ax [orig:109 tmp_esp.10_27 ] [109])) "kernel/signal.c":42:9 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 126 125 127 12 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [1  S4 A32])
        (reg:SI 1 dx [orig:112 _30 ] [112])) "kernel/signal.c":42:9 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 127 126 128 12 (call (mem:QI (symbol_ref:SI ("put_fs_long") [flags 0x3]  <function_decl 0x7518d90d2a00 put_fs_long>) [0 put_fs_long S1 A8])
        (const_int 16 [0x10])) "kernel/signal.c":42:9 812 {*call}
     (nil)
    (nil))
(insn 128 127 129 12 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":42:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(code_label 129 128 130 13 13 (nil) [1 uses])
(note 130 129 131 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 131 130 132 13 (set (reg/f:SI 0 ax [orig:113 tmp_esp.12_31 ] [113])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [6 tmp_esp+0 S4 A32])) "kernel/signal.c":43:5 75 {*movsi_internal}
     (nil))
(insn 132 131 133 13 (parallel [
            (set (reg:SI 1 dx [148])
                (plus:SI (reg/f:SI 0 ax [orig:113 tmp_esp.12_31 ] [113])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":43:5 209 {*addsi_1}
     (nil))
(insn 133 132 134 13 (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [6 tmp_esp+0 S4 A32])
        (reg:SI 1 dx [148])) "kernel/signal.c":43:5 75 {*movsi_internal}
     (nil))
(insn 134 133 135 13 (set (reg:SI 1 dx [orig:114 eax.13_32 ] [114])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 52 [0x34])) [1 eax+0 S4 A32])) "kernel/signal.c":43:5 75 {*movsi_internal}
     (nil))
(insn 135 134 136 13 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":43:5 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 136 135 137 13 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [6  S4 A32])
        (reg/f:SI 0 ax [orig:113 tmp_esp.12_31 ] [113])) "kernel/signal.c":43:5 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 137 136 138 13 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [1  S4 A32])
        (reg:SI 1 dx [orig:114 eax.13_32 ] [114])) "kernel/signal.c":43:5 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 138 137 139 13 (call (mem:QI (symbol_ref:SI ("put_fs_long") [flags 0x3]  <function_decl 0x7518d90d2a00 put_fs_long>) [0 put_fs_long S1 A8])
        (const_int 16 [0x10])) "kernel/signal.c":43:5 812 {*call}
     (nil)
    (nil))
(insn 139 138 140 13 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":43:5 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 140 139 141 13 (set (reg/f:SI 0 ax [orig:115 tmp_esp.14_33 ] [115])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [6 tmp_esp+0 S4 A32])) "kernel/signal.c":44:5 75 {*movsi_internal}
     (nil))
(insn 141 140 142 13 (parallel [
            (set (reg:SI 1 dx [149])
                (plus:SI (reg/f:SI 0 ax [orig:115 tmp_esp.14_33 ] [115])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":44:5 209 {*addsi_1}
     (nil))
(insn 142 141 143 13 (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [6 tmp_esp+0 S4 A32])
        (reg:SI 1 dx [149])) "kernel/signal.c":44:5 75 {*movsi_internal}
     (nil))
(insn 143 142 144 13 (set (reg:SI 1 dx [orig:116 ecx.15_34 ] [116])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 60 [0x3c])) [1 ecx+0 S4 A32])) "kernel/signal.c":44:5 75 {*movsi_internal}
     (nil))
(insn 144 143 145 13 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":44:5 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 145 144 146 13 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [6  S4 A32])
        (reg/f:SI 0 ax [orig:115 tmp_esp.14_33 ] [115])) "kernel/signal.c":44:5 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 146 145 147 13 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [1  S4 A32])
        (reg:SI 1 dx [orig:116 ecx.15_34 ] [116])) "kernel/signal.c":44:5 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 147 146 148 13 (call (mem:QI (symbol_ref:SI ("put_fs_long") [flags 0x3]  <function_decl 0x7518d90d2a00 put_fs_long>) [0 put_fs_long S1 A8])
        (const_int 16 [0x10])) "kernel/signal.c":44:5 812 {*call}
     (nil)
    (nil))
(insn 148 147 149 13 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":44:5 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 149 148 150 13 (set (reg/f:SI 0 ax [orig:117 tmp_esp.16_35 ] [117])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [6 tmp_esp+0 S4 A32])) "kernel/signal.c":45:5 75 {*movsi_internal}
     (nil))
(insn 150 149 151 13 (parallel [
            (set (reg:SI 1 dx [150])
                (plus:SI (reg/f:SI 0 ax [orig:117 tmp_esp.16_35 ] [117])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":45:5 209 {*addsi_1}
     (nil))
(insn 151 150 152 13 (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [6 tmp_esp+0 S4 A32])
        (reg:SI 1 dx [150])) "kernel/signal.c":45:5 75 {*movsi_internal}
     (nil))
(insn 152 151 153 13 (set (reg:SI 1 dx [orig:118 edx.17_36 ] [118])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 64 [0x40])) [1 edx+0 S4 A32])) "kernel/signal.c":45:5 75 {*movsi_internal}
     (nil))
(insn 153 152 154 13 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":45:5 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 154 153 155 13 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [6  S4 A32])
        (reg/f:SI 0 ax [orig:117 tmp_esp.16_35 ] [117])) "kernel/signal.c":45:5 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 155 154 156 13 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [1  S4 A32])
        (reg:SI 1 dx [orig:118 edx.17_36 ] [118])) "kernel/signal.c":45:5 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 156 155 157 13 (call (mem:QI (symbol_ref:SI ("put_fs_long") [flags 0x3]  <function_decl 0x7518d90d2a00 put_fs_long>) [0 put_fs_long S1 A8])
        (const_int 16 [0x10])) "kernel/signal.c":45:5 812 {*call}
     (nil)
    (nil))
(insn 157 156 158 13 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":45:5 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 158 157 159 13 (set (reg/f:SI 0 ax [orig:119 tmp_esp.18_37 ] [119])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [6 tmp_esp+0 S4 A32])) "kernel/signal.c":46:5 75 {*movsi_internal}
     (nil))
(insn 159 158 160 13 (parallel [
            (set (reg:SI 1 dx [151])
                (plus:SI (reg/f:SI 0 ax [orig:119 tmp_esp.18_37 ] [119])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":46:5 209 {*addsi_1}
     (nil))
(insn 160 159 161 13 (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [6 tmp_esp+0 S4 A32])
        (reg:SI 1 dx [151])) "kernel/signal.c":46:5 75 {*movsi_internal}
     (nil))
(insn 161 160 162 13 (set (reg:SI 1 dx [orig:120 eflags.19_38 ] [120])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 88 [0x58])) [1 eflags+0 S4 A32])) "kernel/signal.c":46:5 75 {*movsi_internal}
     (nil))
(insn 162 161 163 13 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":46:5 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 163 162 164 13 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [6  S4 A32])
        (reg/f:SI 0 ax [orig:119 tmp_esp.18_37 ] [119])) "kernel/signal.c":46:5 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 164 163 165 13 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [1  S4 A32])
        (reg:SI 1 dx [orig:120 eflags.19_38 ] [120])) "kernel/signal.c":46:5 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 165 164 166 13 (call (mem:QI (symbol_ref:SI ("put_fs_long") [flags 0x3]  <function_decl 0x7518d90d2a00 put_fs_long>) [0 put_fs_long S1 A8])
        (const_int 16 [0x10])) "kernel/signal.c":46:5 812 {*call}
     (nil)
    (nil))
(insn 166 165 167 13 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":46:5 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 167 166 168 13 (set (reg/f:SI 0 ax [orig:121 tmp_esp.20_39 ] [121])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [6 tmp_esp+0 S4 A32])) "kernel/signal.c":47:5 75 {*movsi_internal}
     (nil))
(insn 168 167 169 13 (parallel [
            (set (reg:SI 1 dx [152])
                (plus:SI (reg/f:SI 0 ax [orig:121 tmp_esp.20_39 ] [121])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":47:5 209 {*addsi_1}
     (nil))
(insn 169 168 170 13 (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [6 tmp_esp+0 S4 A32])
        (reg:SI 1 dx [152])) "kernel/signal.c":47:5 75 {*movsi_internal}
     (nil))
(insn 170 169 171 13 (set (reg:SI 1 dx [orig:122 old_eip.21_40 ] [122])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [1 old_eip+0 S4 A32])) "kernel/signal.c":47:5 75 {*movsi_internal}
     (nil))
(insn 171 170 172 13 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":47:5 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 172 171 173 13 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [6  S4 A32])
        (reg/f:SI 0 ax [orig:121 tmp_esp.20_39 ] [121])) "kernel/signal.c":47:5 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 173 172 174 13 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [1  S4 A32])
        (reg:SI 1 dx [orig:122 old_eip.21_40 ] [122])) "kernel/signal.c":47:5 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 174 173 175 13 (call (mem:QI (symbol_ref:SI ("put_fs_long") [flags 0x3]  <function_decl 0x7518d90d2a00 put_fs_long>) [0 put_fs_long S1 A8])
        (const_int 16 [0x10])) "kernel/signal.c":47:5 812 {*call}
     (nil)
    (nil))
(insn 175 174 176 13 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":47:5 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 176 175 177 13 (set (reg/f:SI 0 ax [153])
        (mem/u/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x40]  <var_decl 0x7518d911e360 current>)
                        ] UNSPEC_GOT))) [17  S4 A8])) "kernel/signal.c":48:22 75 {*movsi_internal}
     (nil))
(insn 177 176 178 13 (set (reg/f:SI 0 ax [orig:123 current.22_41 ] [123])
        (mem/f/c:SI (reg/f:SI 0 ax [153]) [16 current+0 S4 A32])) "kernel/signal.c":48:22 75 {*movsi_internal}
     (nil))
(insn 178 177 179 13 (set (reg:SI 0 ax [orig:124 _42 ] [124])
        (mem:SI (plus:SI (reg/f:SI 0 ax [orig:123 current.22_41 ] [123])
                (const_int 528 [0x210])) [1 current.22_41->blocked+0 S4 A32])) "kernel/signal.c":48:22 75 {*movsi_internal}
     (nil))
(insn 179 178 180 13 (set (reg:SI 1 dx [orig:125 _43 ] [125])
        (reg:SI 0 ax [orig:124 _42 ] [124])) "kernel/signal.c":48:22 75 {*movsi_internal}
     (nil))
(insn 180 179 181 13 (set (reg/f:SI 0 ax [154])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [15 sa+0 S4 A32])) "kernel/signal.c":48:27 75 {*movsi_internal}
     (nil))
(insn 181 180 182 13 (set (reg:SI 0 ax [orig:126 _44 ] [126])
        (mem:SI (plus:SI (reg/f:SI 0 ax [154])
                (const_int 4 [0x4])) [4 sa_57->sa_mask+0 S4 A32])) "kernel/signal.c":48:27 75 {*movsi_internal}
     (nil))
(insn 182 181 183 13 (parallel [
            (set (reg:SI 1 dx [orig:127 _45 ] [127])
                (ior:SI (reg:SI 1 dx [orig:125 _43 ] [125])
                    (reg:SI 0 ax [orig:126 _44 ] [126])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":48:22 520 {*iorsi_1}
     (nil))
(insn 183 182 184 13 (set (reg/f:SI 0 ax [155])
        (mem/u/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x40]  <var_decl 0x7518d911e360 current>)
                        ] UNSPEC_GOT))) [17  S4 A8])) "kernel/signal.c":48:22 75 {*movsi_internal}
     (nil))
(insn 184 183 186 13 (set (reg/f:SI 0 ax [orig:128 current.23_46 ] [128])
        (mem/f/c:SI (reg/f:SI 0 ax [155]) [16 current+0 S4 A32])) "kernel/signal.c":48:22 75 {*movsi_internal}
     (nil))
(insn 186 184 193 13 (set (mem:SI (plus:SI (reg/f:SI 0 ax [orig:128 current.23_46 ] [128])
                (const_int 528 [0x210])) [1 current.23_46->blocked+0 S4 A32])
        (reg:SI 1 dx [orig:129 _47 ] [129])) "kernel/signal.c":48:22 75 {*movsi_internal}
     (nil))
(jump_insn 193 186 194 13 (set (pc)
        (label_ref 189)) 807 {jump}
     (nil)
 -> 189)
(barrier 194 193 196)
(code_label 196 194 195 15 14 (nil) [1 uses])
(note 195 196 197 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 197 195 198 15 (const_int 0 [0]) "kernel/signal.c":25:9 843 {nop}
     (nil))
(jump_insn 198 197 199 15 (set (pc)
        (label_ref 189)) 807 {jump}
     (nil)
 -> 189)
(barrier 199 198 201)
(code_label 201 199 200 16 15 (nil) [1 uses])
(note 200 201 202 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 202 200 189 16 (const_int 0 [0]) "kernel/signal.c":28:13 843 {nop}
     (nil))
(code_label 189 202 190 14 5 (nil) [2 uses])
(note 190 189 204 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(note 204 190 0 NOTE_INSN_DELETED)

;; Function sys_signal (sys_signal, funcdef_no=9, decl_uid=1371, cgraph_uid=10, symbol_order=9)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=20, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =r {*set_got}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 25:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 29:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 33:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 34:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 36
	 Choosing alt 0 in insn 36:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 38:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 42:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 43:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 45
	 Choosing alt 0 in insn 45:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 47:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 49:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 51:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 53:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2 3 4
EBB 5
EBB 6
EBB 7

********** Pseudo live ranges #1: **********

  BB 7
   Insn 64: point = 0, n_alt = -1
   Insn 63: point = 0, n_alt = -2
   Insn 59: point = 1, n_alt = -2
  BB 5
   Insn 66: point = 4, n_alt = -1
   Insn 19: point = 4, n_alt = 0
  BB 6
   Insn 54: point = 5, n_alt = 0
   Insn 53: point = 6, n_alt = 1
   Insn 52: point = 7, n_alt = 0
   Insn 51: point = 8, n_alt = 1
   Insn 50: point = 9, n_alt = 0
   Insn 49: point = 10, n_alt = 1
   Insn 48: point = 11, n_alt = 0
   Insn 47: point = 12, n_alt = 1
   Insn 46: point = 13, n_alt = 0
   Insn 45: point = 14, n_alt = 0
   Insn 44: point = 16, n_alt = 0
   Insn 43: point = 18, n_alt = 0
   Insn 42: point = 20, n_alt = 0
   Insn 41: point = 22, n_alt = 0
   Insn 40: point = 23, n_alt = 0
   Insn 39: point = 25, n_alt = 0
   Insn 38: point = 27, n_alt = 1
   Insn 37: point = 28, n_alt = 0
   Insn 36: point = 30, n_alt = 0
   Insn 35: point = 32, n_alt = 0
   Insn 34: point = 34, n_alt = 0
   Insn 33: point = 36, n_alt = 0
   Insn 32: point = 38, n_alt = 0
   Insn 31: point = 39, n_alt = 0
   Insn 30: point = 41, n_alt = 0
   Insn 29: point = 42, n_alt = 1
   Insn 28: point = 43, n_alt = 0
   Insn 27: point = 44, n_alt = 1
   Insn 26: point = 44, n_alt = 1
   Insn 25: point = 44, n_alt = 1
   Insn 24: point = 45, n_alt = 0
  BB 4
   Insn 16: point = 47, n_alt = -1
   Insn 15: point = 47, n_alt = 0
  BB 3
   Insn 13: point = 48, n_alt = -1
   Insn 12: point = 48, n_alt = 0
  BB 2
   Insn 8: point = 49, n_alt = -1
   Insn 7: point = 49, n_alt = 1
   Insn 68: point = 49, n_alt = 0
 r82: [26..49]
 r83: [44..45]
 r84: [42..43]
 r85: [31..39]
 r86: [35..36]
 r87: [27..28]
 r88: [15..23]
 r89: [19..20]
 r90: [2..5]
 r91: [0..1]
 r92: [40..41]
 r93: [37..38]
 r94: [33..34]
 r95: [31..32]
 r96: [29..30]
 r97: [24..25]
 r98: [21..22]
 r99: [17..18]
 r100: [15..16]
 r101: [6..14]
 r102: [12..13]
 r103: [10..11]
 r104: [8..9]
 r105: [6..7]
Compressing live ranges: from 50 to 40 - 80%
Ranges after the compression:
 r82: [22..39]
 r83: [38..39]
 r84: [36..37]
 r85: [26..33]
 r86: [30..31]
 r87: [22..23]
 r88: [12..19]
 r89: [16..17]
 r90: [2..3]
 r91: [0..1]
 r92: [34..35]
 r93: [32..33]
 r94: [28..29]
 r95: [26..27]
 r96: [24..25]
 r97: [20..21]
 r98: [18..19]
 r99: [14..15]
 r100: [12..13]
 r101: [4..11]
 r102: [10..11]
 r103: [8..9]
 r104: [6..7]
 r105: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=20, prev_offset=20)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=16)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 68
changing reg in insn 39
changing reg in insn 30
changing reg in insn 24
changing reg in insn 25
changing reg in insn 28
changing reg in insn 29
changing reg in insn 31
changing reg in insn 33
changing reg in insn 34
changing reg in insn 37
changing reg in insn 38
changing reg in insn 40
changing reg in insn 42
changing reg in insn 43
changing reg in insn 54
changing reg in insn 19
changing reg in insn 59
changing reg in insn 59
changing reg in insn 63
changing reg in insn 30
changing reg in insn 31
changing reg in insn 32
changing reg in insn 33
changing reg in insn 34
changing reg in insn 35
changing reg in insn 35
changing reg in insn 36
changing reg in insn 37
changing reg in insn 39
changing reg in insn 40
changing reg in insn 41
changing reg in insn 42
changing reg in insn 43
changing reg in insn 44
changing reg in insn 44
changing reg in insn 45
changing reg in insn 53
changing reg in insn 51
changing reg in insn 49
changing reg in insn 47
changing reg in insn 46
changing reg in insn 47
changing reg in insn 48
changing reg in insn 49
changing reg in insn 50
changing reg in insn 51
changing reg in insn 52
changing reg in insn 53
deleting insn with uid = 59.
deleting insn with uid = 63.
starting the processing of deferred insns
ending the processing of deferred insns


sys_signal

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 17 [flags]
;;  ref usage 	r0={10d,13u} r1={15d,14u} r2={2d,1u} r7={1d,24u} r16={2e} r17={12d,3u} 
;;    total ref usage 97{40d,55u,2e} in 41{41 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 68 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 68 3 2 2 (parallel [
            (set (reg:SI 0 ax [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 68 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 2 8 2 (set (reg:CCNO 17 flags)
        (compare:CCNO (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 20 [0x14])) [4 signum+0 S4 A32])
            (const_int 0 [0]))) "kernel/signal.c":55:8 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 8 7 9 2 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 17)
            (pc))) "kernel/signal.c":55:8 806 {*jcc}
     (nil)
 -> 17)
(note 9 8 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 12 9 13 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 20 [0x14])) [4 signum+0 S4 A32])
            (const_int 32 [0x20]))) "kernel/signal.c":55:20 11 {*cmpsi_1}
     (nil))
(jump_insn 13 12 14 3 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 17)
            (pc))) "kernel/signal.c":55:20 806 {*jcc}
     (nil)
 -> 17)
(note 14 13 15 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 20 [0x14])) [4 signum+0 S4 A32])
            (const_int 9 [0x9]))) "kernel/signal.c":55:35 11 {*cmpsi_1}
     (nil))
(jump_insn 16 15 17 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 22)
            (pc))) "kernel/signal.c":55:35 806 {*jcc}
     (nil)
 -> 22)
(code_label 17 16 18 5 17 (nil) [2 uses])
(note 18 17 19 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 19 18 66 5 (set (reg:SI 0 ax [orig:90 _8 ] [90])
        (const_int -1 [0xffffffffffffffff])) "kernel/signal.c":56:16 75 {*movsi_internal}
     (nil))
(jump_insn 66 19 67 5 (set (pc)
        (label_ref 57)) "kernel/signal.c":56:16 807 {jump}
     (nil)
 -> 57)
(barrier 67 66 22)
(code_label 22 67 23 6 18 (nil) [1 uses])
(note 23 22 24 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 25 6 (set (reg/f:SI 1 dx [orig:83 handler.24_1 ] [83])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [1 handler+0 S4 A32])) "kernel/signal.c":57:22 75 {*movsi_internal}
     (nil))
(insn 25 24 26 6 (set (mem/f/c:SI (reg/f:SI 7 sp) [3 tmp.sa_handler+0 S4 A32])
        (reg/f:SI 1 dx [orig:83 handler.24_1 ] [83])) "kernel/signal.c":57:20 75 {*movsi_internal}
     (nil))
(insn 26 25 27 6 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [4 tmp.sa_mask+0 S4 A32])
        (const_int 0 [0])) "kernel/signal.c":58:17 75 {*movsi_internal}
     (nil))
(insn 27 26 28 6 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [4 tmp.sa_flags+0 S4 A32])
        (const_int -1073741824 [0xffffffffc0000000])) "kernel/signal.c":59:18 75 {*movsi_internal}
     (nil))
(insn 28 27 29 6 (set (reg/f:SI 1 dx [orig:84 restorer.25_2 ] [84])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [1 restorer+0 S4 A32])) "kernel/signal.c":60:23 75 {*movsi_internal}
     (nil))
(insn 29 28 30 6 (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [5 tmp.sa_restorer+0 S4 A32])
        (reg/f:SI 1 dx [orig:84 restorer.25_2 ] [84])) "kernel/signal.c":60:21 75 {*movsi_internal}
     (nil))
(insn 30 29 31 6 (set (reg/f:SI 1 dx [92])
        (mem/u/c:SI (plus:SI (reg:SI 0 ax [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x40]  <var_decl 0x7518d911e360 current>)
                        ] UNSPEC_GOT))) [17  S4 A8])) "kernel/signal.c":61:28 75 {*movsi_internal}
     (nil))
(insn 31 30 32 6 (set (reg/f:SI 2 cx [orig:85 current.26_3 ] [85])
        (mem/f/c:SI (reg/f:SI 1 dx [92]) [16 current+0 S4 A32])) "kernel/signal.c":61:28 75 {*movsi_internal}
     (nil))
(insn 32 31 33 6 (set (reg:SI 1 dx [93])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [4 signum+0 S4 A32])) "kernel/signal.c":61:47 75 {*movsi_internal}
     (nil))
(insn 33 32 34 6 (parallel [
            (set (reg:SI 1 dx [orig:86 _4 ] [86])
                (plus:SI (reg:SI 1 dx [93])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":61:47 209 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (reg/f:SI 16 argp) [4 signum+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 34 33 35 6 (parallel [
            (set (reg:SI 1 dx [94])
                (plus:SI (reg:SI 1 dx [orig:86 _4 ] [86])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":61:51 209 {*addsi_1}
     (nil))
(insn 35 34 36 6 (parallel [
            (set (reg:SI 1 dx [95])
                (ashift:SI (reg:SI 1 dx [94])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":61:51 655 {*ashlsi3_1}
     (nil))
(insn 36 35 37 6 (parallel [
            (set (reg/f:SI 1 dx [96])
                (plus:SI (reg:SI 1 dx [95])
                    (reg/f:SI 2 cx [orig:85 current.26_3 ] [85])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":61:51 209 {*addsi_1}
     (nil))
(insn 37 36 38 6 (set (reg/f:SI 1 dx [orig:87 _5 ] [87])
        (mem/f:SI (reg/f:SI 1 dx [96]) [3 current.26_3->sigaction[_4].sa_handler+0 S4 A32])) "kernel/signal.c":61:51 75 {*movsi_internal}
     (nil))
(insn 38 37 39 6 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [1 handler+0 S4 A32])
        (reg/f:SI 1 dx [orig:87 _5 ] [87])) "kernel/signal.c":61:13 75 {*movsi_internal}
     (nil))
(insn 39 38 40 6 (set (reg/f:SI 0 ax [97])
        (mem/u/c:SI (plus:SI (reg:SI 0 ax [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x40]  <var_decl 0x7518d911e360 current>)
                        ] UNSPEC_GOT))) [17  S4 A8])) "kernel/signal.c":62:12 75 {*movsi_internal}
     (nil))
(insn 40 39 41 6 (set (reg/f:SI 1 dx [orig:88 current.27_6 ] [88])
        (mem/f/c:SI (reg/f:SI 0 ax [97]) [16 current+0 S4 A32])) "kernel/signal.c":62:12 75 {*movsi_internal}
     (nil))
(insn 41 40 42 6 (set (reg:SI 0 ax [98])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [4 signum+0 S4 A32])) "kernel/signal.c":62:31 75 {*movsi_internal}
     (nil))
(insn 42 41 43 6 (parallel [
            (set (reg:SI 0 ax [orig:89 _7 ] [89])
                (plus:SI (reg:SI 0 ax [98])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":62:31 209 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (reg/f:SI 16 argp) [4 signum+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 43 42 44 6 (parallel [
            (set (reg:SI 0 ax [99])
                (plus:SI (reg:SI 0 ax [orig:89 _7 ] [89])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":62:36 209 {*addsi_1}
     (nil))
(insn 44 43 45 6 (parallel [
            (set (reg:SI 0 ax [100])
                (ashift:SI (reg:SI 0 ax [99])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":62:36 655 {*ashlsi3_1}
     (nil))
(insn 45 44 46 6 (parallel [
            (set (reg/f:SI 0 ax [101])
                (plus:SI (reg:SI 0 ax [100])
                    (reg/f:SI 1 dx [orig:88 current.27_6 ] [88])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":62:36 209 {*addsi_1}
     (nil))
(insn 46 45 47 6 (set (reg:SI 1 dx [102])
        (mem/c:SI (reg/f:SI 7 sp) [2 tmp+0 S4 A32])) "kernel/signal.c":62:36 75 {*movsi_internal}
     (nil))
(insn 47 46 48 6 (set (mem:SI (reg/f:SI 0 ax [101]) [2 current.27_6->sigaction[_7]+0 S4 A32])
        (reg:SI 1 dx [102])) "kernel/signal.c":62:36 75 {*movsi_internal}
     (nil))
(insn 48 47 49 6 (set (reg:SI 1 dx [103])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [2 tmp+4 S4 A32])) "kernel/signal.c":62:36 75 {*movsi_internal}
     (nil))
(insn 49 48 50 6 (set (mem:SI (plus:SI (reg/f:SI 0 ax [101])
                (const_int 4 [0x4])) [2 current.27_6->sigaction[_7]+4 S4 A32])
        (reg:SI 1 dx [103])) "kernel/signal.c":62:36 75 {*movsi_internal}
     (nil))
(insn 50 49 51 6 (set (reg:SI 1 dx [104])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [2 tmp+8 S4 A32])) "kernel/signal.c":62:36 75 {*movsi_internal}
     (nil))
(insn 51 50 52 6 (set (mem:SI (plus:SI (reg/f:SI 0 ax [101])
                (const_int 8 [0x8])) [2 current.27_6->sigaction[_7]+8 S4 A32])
        (reg:SI 1 dx [104])) "kernel/signal.c":62:36 75 {*movsi_internal}
     (nil))
(insn 52 51 53 6 (set (reg:SI 1 dx [105])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [2 tmp+12 S4 A32])) "kernel/signal.c":62:36 75 {*movsi_internal}
     (nil))
(insn 53 52 54 6 (set (mem:SI (plus:SI (reg/f:SI 0 ax [101])
                (const_int 12 [0xc])) [2 current.27_6->sigaction[_7]+12 S4 A32])
        (reg:SI 1 dx [105])) "kernel/signal.c":62:36 75 {*movsi_internal}
     (nil))
(insn 54 53 57 6 (set (reg:SI 0 ax [orig:90 _8 ] [90])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [1 handler+0 S4 A32])) "kernel/signal.c":63:12 75 {*movsi_internal}
     (nil))
(code_label 57 54 58 7 20 (nil) [1 uses])
(note 58 57 64 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 64 58 69 7 (use (reg/i:SI 0 ax)) "kernel/signal.c":64:1 -1
     (nil))
(note 69 64 0 NOTE_INSN_DELETED)

;; Function get_new (get_new, funcdef_no=10, decl_uid=1378, cgraph_uid=11, symbol_order=10)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=20, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =r {*set_got}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 5:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=21,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 10:  (0) r  (1) r  (2) le {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =<  (1) ri*m {*pushsi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (1) lBwBz {*call_value} (sp_off=-4)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 14:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-4)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=21,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 17:  (0) r  (1) r  (2) le {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=7,overall=27,losers=2 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 20:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 21:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) rm  (1) re {*cmpsi_1}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4 6 5 7

********** Pseudo live ranges #1: **********

  BB 7
   Insn 38: point = 0, n_alt = -1
  BB 5
  BB 6
   Insn 36: point = 0, n_alt = -1
  BB 4
   Insn 29: point = 0, n_alt = -1
   Insn 28: point = 0, n_alt = 0
   Insn 24: point = 1, n_alt = 0
  BB 2
   Insn 33: point = 2, n_alt = -1
   Insn 5: point = 2, n_alt = 1
   Insn 39: point = 2, n_alt = 0
  BB 3
   Insn 21: point = 3, n_alt = 0
   Insn 20: point = 3, n_alt = 8
   Insn 19: point = 4, n_alt = -2
   Insn 18: point = 6, n_alt = 1
   Insn 17: point = 7, n_alt = 3
   Insn 16: point = 8, n_alt = 0
   Insn 15: point = 9, n_alt = -2
   Insn 14: point = 10, n_alt = 0
   Insn 13: point = 10, n_alt = 0
   Insn 12: point = 10, n_alt = 0
   Insn 11: point = 11, n_alt = 1
   Insn 10: point = 12, n_alt = 3
   Insn 9: point = 13, n_alt = 0
 r82: [2..2]
 r83: [10..13]
 r84: [5..9]
 r85: [3..8]
 r86: [3..4]
 r87: [0..1]
 r88: [11..12]
 r89: [6..7]
Compressing live ranges: from 14 to 9 - 64%
Ranges after the compression:
 r82: [2..2]
 r83: [7..8]
 r84: [5..6]
 r85: [3..6]
 r86: [3..4]
 r87: [0..1]
 r88: [7..8]
 r89: [5..6]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=20, prev_offset=20)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=16)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 39
changing reg in insn 9
changing reg in insn 12
changing reg in insn 10
changing reg in insn 15
changing reg in insn 19
changing reg in insn 16
changing reg in insn 20
changing reg in insn 17
changing reg in insn 19
changing reg in insn 20
changing reg in insn 24
changing reg in insn 28
changing reg in insn 10
changing reg in insn 11
changing reg in insn 17
changing reg in insn 18
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 13.


get_new

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 17 [flags]
;;  ref usage 	r0={6d,6u} r1={5d,3u} r2={3d,1u} r7={3d,19u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={7d,1u} r18={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} 
;;    total ref usage 119{89d,30u,0e} in 21{20 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 39 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 39 3 2 2 (parallel [
            (set (reg:SI 0 ax [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 39 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 33 2 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [4 i+0 S4 A32])
        (const_int 0 [0])) "kernel/signal.c":70:12 75 {*movsi_internal}
     (nil))
(jump_insn 33 5 34 2 (set (pc)
        (label_ref 22)) "kernel/signal.c":70:5 807 {jump}
     (nil)
 -> 22)
(barrier 34 33 25)
(code_label 25 34 8 3 23 (nil) [1 uses])
(note 8 25 9 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 9 8 10 3 (set (reg/f:SI 0 ax [orig:83 from.35_1 ] [83])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [14 from+0 S4 A32])) "kernel/signal.c":71:19 75 {*movsi_internal}
     (nil))
(insn 10 9 11 3 (parallel [
            (set (reg:SI 1 dx [88])
                (plus:SI (reg/f:SI 0 ax [orig:83 from.35_1 ] [83])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":71:19 209 {*addsi_1}
     (nil))
(insn 11 10 12 3 (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [14 from+0 S4 A32])
        (reg:SI 1 dx [88])) "kernel/signal.c":71:19 75 {*movsi_internal}
     (nil))
(insn 12 11 13 3 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [14  S4 A32])
        (reg/f:SI 0 ax [orig:83 from.35_1 ] [83])) "kernel/signal.c":71:19 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 4 [0x4])
        (nil)))
(call_insn 13 12 14 3 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:SI ("get_fs_byte") [flags 0x3]  <function_decl 0x7518d90d2600 get_fs_byte>) [0 get_fs_byte S1 A8])
            (const_int 4 [0x4]))) "kernel/signal.c":71:19 823 {*call_value}
     (nil)
    (nil))
(insn 14 13 15 3 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":71:19 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 15 14 16 3 (set (reg:QI 2 cx [orig:84 _2 ] [84])
        (reg:QI 0 ax)) "kernel/signal.c":71:19 77 {*movqi_internal}
     (nil))
(insn 16 15 17 3 (set (reg/f:SI 0 ax [orig:85 to.36_3 ] [85])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [14 to+0 S4 A32])) "kernel/signal.c":71:13 75 {*movsi_internal}
     (nil))
(insn 17 16 18 3 (parallel [
            (set (reg:SI 1 dx [89])
                (plus:SI (reg/f:SI 0 ax [orig:85 to.36_3 ] [85])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":71:13 209 {*addsi_1}
     (nil))
(insn 18 17 19 3 (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [14 to+0 S4 A32])
        (reg:SI 1 dx [89])) "kernel/signal.c":71:13 75 {*movsi_internal}
     (nil))
(insn 19 18 20 3 (set (reg:QI 1 dx [orig:86 _4 ] [86])
        (reg:QI 2 cx [orig:84 _2 ] [84])) "kernel/signal.c":71:19 77 {*movqi_internal}
     (nil))
(insn 20 19 21 3 (set (mem:QI (reg/f:SI 0 ax [orig:85 to.36_3 ] [85]) [0 *to.36_3+0 S1 A8])
        (reg:QI 1 dx [orig:86 _4 ] [86])) "kernel/signal.c":71:17 77 {*movqi_internal}
     (nil))
(insn 21 20 22 3 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 12 [0xc])) [4 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 12 [0xc])) [4 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":70:48 209 {*addsi_1}
     (nil))
(code_label 22 21 23 4 22 (nil) [1 uses])
(note 23 22 24 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 28 4 (set (reg:SI 0 ax [orig:87 i.37_5 ] [87])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [4 i+0 S4 A32])) "kernel/signal.c":70:19 75 {*movsi_internal}
     (nil))
(insn 28 24 29 4 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 ax [orig:87 i.37_5 ] [87])
            (const_int 15 [0xf]))) "kernel/signal.c":70:19 11 {*cmpsi_1}
     (nil))
(jump_insn 29 28 35 4 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 25)
            (pc))) "kernel/signal.c":70:19 806 {*jcc}
     (nil)
 -> 25)
(note 35 29 36 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 36 35 30 6 (const_int 0 [0]) "kernel/signal.c":72:1 843 {nop}
     (nil))
(note 30 36 37 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(note 37 30 38 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 38 37 40 7 (const_int 0 [0]) "kernel/signal.c":72:1 843 {nop}
     (nil))
(note 40 38 0 NOTE_INSN_DELETED)

;; Function save_old (save_old, funcdef_no=11, decl_uid=1387, cgraph_uid=12, symbol_order=11)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 5:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 10:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 16:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 18:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 22:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 23:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 24:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 25:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) rm  (1) re {*cmpsi_1}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4 6 5 7

********** Pseudo live ranges #1: **********

  BB 7
   Insn 42: point = 0, n_alt = -1
  BB 5
  BB 6
   Insn 40: point = 0, n_alt = -1
  BB 4
   Insn 33: point = 0, n_alt = -1
   Insn 32: point = 0, n_alt = 0
   Insn 28: point = 1, n_alt = 0
  BB 2
   Insn 37: point = 2, n_alt = -1
   Insn 11: point = 2, n_alt = 1
   Insn 10: point = 2, n_alt = 0
   Insn 9: point = 2, n_alt = 0
   Insn 8: point = 2, n_alt = -2
   Insn 7: point = 3, n_alt = 0
   Insn 6: point = 3, n_alt = 0
   Insn 5: point = 3, n_alt = 0
   Insn 43: point = 3, n_alt = 0
  BB 3
   Insn 25: point = 4, n_alt = 0
   Insn 24: point = 4, n_alt = 0
   Insn 23: point = 4, n_alt = 0
   Insn 22: point = 4, n_alt = 0
   Insn 21: point = 4, n_alt = 0
   Insn 20: point = 4, n_alt = 0
   Insn 19: point = 5, n_alt = 0
   Insn 18: point = 5, n_alt = 0
   Insn 17: point = 5, n_alt = 0
   Insn 16: point = 7, n_alt = 4
   Insn 15: point = 9, n_alt = 0
 r82: [2..3]
 r83: [6..7]
 r84: [4..5]
 r85: [0..1]
 r86: [8..9]
Compressing live ranges: from 10 to 10 - 100%
Ranges after the compression:
 r82: [2..3]
 r83: [6..7]
 r84: [4..5]
 r85: [0..1]
 r86: [8..9]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=32)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=16)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
changing reg in insn 43
changing reg in insn 8
changing reg in insn 16
changing reg in insn 17
changing reg in insn 17
changing reg in insn 20
changing reg in insn 28
changing reg in insn 32
changing reg in insn 15
changing reg in insn 16
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 9.
verify found no changes in insn with uid = 21.


save_old

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0 [ax] 3 [bx] 7 [sp] 17 [flags]
;;  ref usage 	r0={8d,5u} r1={3d} r2={3d} r3={1d,1u} r7={9d,32u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={11d,1u} r18={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} 
;;    total ref usage 204{165d,39u,0e} in 25{23 regular + 2 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 43 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 43 3 2 2 (parallel [
            (set (reg:SI 0 ax [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 43 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":78:5 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 6 5 7 2 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [4  S4 A32])
        (const_int 16 [0x10])) "kernel/signal.c":78:5 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 7 6 8 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [14  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 48 [0x30])) [14 to+0 S4 A32])) "kernel/signal.c":78:5 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(insn 8 7 9 2 (set (reg:SI 3 bx)
        (reg:SI 0 ax [82])) "kernel/signal.c":78:5 75 {*movsi_internal}
     (nil))
(call_insn 9 8 10 2 (call (mem:QI (symbol_ref:SI ("verify_area") [flags 0x41]  <function_decl 0x7518d913b300 verify_area>) [0 verify_area S1 A8])
        (const_int 16 [0x10])) "kernel/signal.c":78:5 812 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 10 9 11 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":78:5 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 11 10 37 2 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [4 i+0 S4 A32])
        (const_int 0 [0])) "kernel/signal.c":79:12 75 {*movsi_internal}
     (nil))
(jump_insn 37 11 38 2 (set (pc)
        (label_ref 26)) "kernel/signal.c":79:5 807 {jump}
     (nil)
 -> 26)
(barrier 38 37 29)
(code_label 29 38 14 3 26 (nil) [1 uses])
(note 14 29 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 3 (set (reg/f:SI 0 ax [86])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 32 [0x20])) [14 from+0 S4 A32])) "kernel/signal.c":80:21 75 {*movsi_internal}
     (nil))
(insn 16 15 17 3 (set (reg:QI 0 ax [orig:83 _1 ] [83])
        (mem:QI (reg/f:SI 0 ax [86]) [0 *from_4+0 S1 A8])) "kernel/signal.c":80:21 77 {*movqi_internal}
     (nil))
(insn 17 16 18 3 (set (reg:SI 0 ax [orig:84 _2 ] [84])
        (sign_extend:SI (reg:QI 0 ax [orig:83 _1 ] [83]))) "kernel/signal.c":80:9 153 {extendqisi2}
     (nil))
(insn 18 17 19 3 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":80:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 19 18 20 3 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [14  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 44 [0x2c])) [14 to+0 S4 A32])) "kernel/signal.c":80:9 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 20 19 21 3 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [4  S4 A32])
        (reg:SI 0 ax [orig:84 _2 ] [84])) "kernel/signal.c":80:9 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 21 20 22 3 (call (mem:QI (symbol_ref:SI ("put_fs_byte") [flags 0x3]  <function_decl 0x7518d90d2800 put_fs_byte>) [0 put_fs_byte S1 A8])
        (const_int 16 [0x10])) "kernel/signal.c":80:9 812 {*call}
     (nil)
    (nil))
(insn 22 21 23 3 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":80:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 23 22 24 3 (parallel [
            (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 32 [0x20])) [14 from+0 S4 A32])
                (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 32 [0x20])) [14 from+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":81:13 209 {*addsi_1}
     (nil))
(insn 24 23 25 3 (parallel [
            (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 36 [0x24])) [14 to+0 S4 A32])
                (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 36 [0x24])) [14 to+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":82:11 209 {*addsi_1}
     (nil))
(insn 25 24 26 3 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 12 [0xc])) [4 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 12 [0xc])) [4 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":79:48 209 {*addsi_1}
     (nil))
(code_label 26 25 27 4 25 (nil) [1 uses])
(note 27 26 28 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 32 4 (set (reg:SI 0 ax [orig:85 i.38_3 ] [85])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [4 i+0 S4 A32])) "kernel/signal.c":79:19 75 {*movsi_internal}
     (nil))
(insn 32 28 33 4 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 ax [orig:85 i.38_3 ] [85])
            (const_int 15 [0xf]))) "kernel/signal.c":79:19 11 {*cmpsi_1}
     (nil))
(jump_insn 33 32 39 4 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 29)
            (pc))) "kernel/signal.c":79:19 806 {*jcc}
     (nil)
 -> 29)
(note 39 33 40 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 40 39 34 6 (const_int 0 [0]) "kernel/signal.c":84:1 843 {nop}
     (nil))
(note 34 40 41 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(note 41 34 42 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 42 41 44 7 (const_int 0 [0]) "kernel/signal.c":84:1 843 {nop}
     (nil))
(note 44 42 0 NOTE_INSN_DELETED)

;; Function sys_sigaction (sys_sigaction, funcdef_no=12, decl_uid=1397, cgraph_uid=13, symbol_order=12)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 129:  (0) =r {*set_got}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 27:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 28:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 30
	 Choosing alt 0 in insn 30:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 32:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 34:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 36:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 38:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 41:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 43:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 45
	 Choosing alt 0 in insn 45:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =<  (1) ri*m {*pushsi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-4)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) lBwBz {*call} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 49:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-8)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 50:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 53:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=23,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 55:  (0) r  (1) r  (2) le {*addsi_1} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 58:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 64:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 65:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 67
	 Choosing alt 0 in insn 67:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 68:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 70:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 77:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 78:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 80
	 Choosing alt 0 in insn 80:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 81:  (0) =rm  (1) %0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 82:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 90:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 91:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 93
	 Choosing alt 0 in insn 93:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 94:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 95:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 97:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =r  (1) g {*movsi_internal}
            2 Small class reload: reject+=3
          alt=0,overall=15,losers=2,rld_nregs=2
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 99:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
      Creating newreg=147 from oldreg=138, assigning class GENERAL_REGS to r147
      Creating newreg=148, assigning class CREG to r148
   99: {r147:SI=r147:SI<<r148:QI;clobber flags:CC;}
      REG_DEAD r138:SI
      REG_DEAD r100:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  131: r147:SI=r138:SI
  133: r148:QI=r100:SI#0
    Inserting insn reload after:
  132: r101:SI=r147:SI

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 133:  (0) =Q  (1) Q {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 104:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 105:  (0) =rm  (1) %0  (2) re {*iorsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 106:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 108
	 Choosing alt 0 in insn 108:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 109:  (0) =rm  (1) %0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 110:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2 3 4
EBB 5
EBB 6 7
EBB 8 9
EBB 10
EBB 11
EBB 12

********** Pseudo live ranges #1: **********

  BB 12
   Insn 123: point = 0, n_alt = -1
   Insn 122: point = 0, n_alt = -2
   Insn 118: point = 1, n_alt = -2
  BB 5
   Insn 125: point = 4, n_alt = -1
   Insn 19: point = 4, n_alt = 0
  BB 11
   Insn 113: point = 5, n_alt = 0
  BB 9
   Insn 127: point = 6, n_alt = -1
   Insn 82: point = 6, n_alt = 1
   Insn 81: point = 7, n_alt = 0
   Insn 80: point = 9, n_alt = 0
   Insn 79: point = 11, n_alt = 0
   Insn 78: point = 13, n_alt = 0
   Insn 77: point = 15, n_alt = 0
   Insn 76: point = 17, n_alt = 0
   Insn 75: point = 18, n_alt = 0
   Insn 74: point = 20, n_alt = 0
  BB 10
   Insn 110: point = 23, n_alt = 1
   Insn 109: point = 24, n_alt = 0
   Insn 108: point = 26, n_alt = 0
   Insn 107: point = 28, n_alt = 0
   Insn 106: point = 30, n_alt = 0
   Insn 105: point = 32, n_alt = 0
   Insn 104: point = 34, n_alt = 0
   Insn 103: point = 36, n_alt = 0
   Insn 102: point = 37, n_alt = 0
   Insn 101: point = 39, n_alt = 0
   Insn 100: point = 41, n_alt = -2
   Insn 132: point = 43, n_alt = -2
	Hard reg 0 is preferable by r147 with profit 1000
   Insn 99: point = 45, n_alt = 0
   Insn 133: point = 47, n_alt = 0
   Insn 131: point = 49, n_alt = -2
	Hard reg 0 is preferable by r147 with profit 1000
	Hard reg 4 is preferable by r147 with profit 1000
   Insn 98: point = 51, n_alt = 0
   Insn 97: point = 52, n_alt = 0
   Insn 96: point = 54, n_alt = 0
   Insn 95: point = 55, n_alt = 0
   Insn 94: point = 57, n_alt = 0
   Insn 93: point = 59, n_alt = 0
   Insn 92: point = 61, n_alt = 0
   Insn 91: point = 63, n_alt = 0
   Insn 90: point = 65, n_alt = 0
   Insn 89: point = 67, n_alt = 0
   Insn 88: point = 68, n_alt = 0
   Insn 87: point = 70, n_alt = 0
  BB 8
   Insn 72: point = 72, n_alt = -1
   Insn 71: point = 72, n_alt = 0
   Insn 70: point = 73, n_alt = 0
   Insn 69: point = 75, n_alt = 0
   Insn 68: point = 77, n_alt = 0
   Insn 67: point = 79, n_alt = 0
   Insn 66: point = 81, n_alt = 0
   Insn 65: point = 83, n_alt = 0
   Insn 64: point = 85, n_alt = 0
   Insn 63: point = 87, n_alt = 0
   Insn 62: point = 88, n_alt = 0
   Insn 61: point = 90, n_alt = 0
  BB 7
   Insn 58: point = 92, n_alt = 0
   Insn 57: point = 92, n_alt = 0
   Insn 56: point = 92, n_alt = 0
   Insn 55: point = 93, n_alt = 3
   Insn 54: point = 94, n_alt = 0
   Insn 53: point = 94, n_alt = 0
  BB 6
   Insn 51: point = 95, n_alt = -1
   Insn 50: point = 95, n_alt = 1
   Insn 49: point = 95, n_alt = 0
   Insn 48: point = 95, n_alt = 0
   Insn 47: point = 95, n_alt = 0
   Insn 46: point = 95, n_alt = 0
   Insn 45: point = 96, n_alt = 0
   Insn 44: point = 98, n_alt = 0
   Insn 43: point = 100, n_alt = 0
   Insn 42: point = 102, n_alt = 0
   Insn 41: point = 103, n_alt = 3
   Insn 40: point = 105, n_alt = 0
   Insn 39: point = 107, n_alt = 0
   Insn 38: point = 108, n_alt = 1
   Insn 37: point = 109, n_alt = 0
   Insn 36: point = 111, n_alt = 1
   Insn 35: point = 112, n_alt = 0
   Insn 34: point = 113, n_alt = 1
   Insn 33: point = 114, n_alt = 0
   Insn 32: point = 115, n_alt = 1
   Insn 31: point = 116, n_alt = 0
   Insn 30: point = 117, n_alt = 0
   Insn 29: point = 119, n_alt = 0
   Insn 28: point = 121, n_alt = 0
   Insn 27: point = 123, n_alt = 0
   Insn 26: point = 125, n_alt = 0
   Insn 25: point = 126, n_alt = 0
   Insn 24: point = 128, n_alt = 0
  BB 4
   Insn 16: point = 130, n_alt = -1
   Insn 15: point = 130, n_alt = 0
  BB 3
   Insn 13: point = 131, n_alt = -1
   Insn 12: point = 131, n_alt = 0
  BB 2
   Insn 8: point = 132, n_alt = -1
   Insn 7: point = 132, n_alt = 1
   Insn 129: point = 132, n_alt = 0
 r82: [40..132] [21..22]
 r83: [118..126]
 r84: [122..123]
 r85: [104..105]
 r86: [97..103]
 r87: [101..102]
 r88: [99..100]
 r89: [97..98]
 r90: [95..96]
 r91: [80..88]
 r92: [84..85]
 r93: [74..75]
 r94: [72..73]
 r95: [10..18]
 r96: [14..15]
 r97: [60..68]
 r98: [64..65]
 r99: [33..55]
 r100: [48..52]
 r101: [42..43]
 r102: [33..41]
 r103: [27..37]
 r104: [31..34]
 r105: [23..32]
 r106: [2..5]
 r107: [0..1]
 r108: [127..128]
 r109: [124..125]
 r110: [120..121]
 r111: [118..119]
 r112: [110..117]
 r113: [115..116]
 r114: [113..114]
 r115: [111..112]
 r116: [108..109]
 r117: [106..107]
 r118: [92..93]
 r119: [89..90]
 r120: [86..87]
 r121: [82..83]
 r122: [80..81]
 r123: [78..79]
 r124: [76..77]
 r125: [19..20]
 r126: [16..17]
 r127: [12..13]
 r128: [10..11]
 r129: [8..9]
 r130: [6..7]
 r131: [69..70]
 r132: [66..67]
 r133: [62..63]
 r134: [60..61]
 r135: [58..59]
 r136: [56..57]
 r137: [53..54]
 r138: [50..51]
 r139: [38..39]
 r140: [35..36]
 r141: [29..30]
 r142: [27..28]
 r143: [25..26]
 r144: [23..24]
 r147: [44..49]
 r148: [46..47]
Compressing live ranges: from 133 to 112 - 84%
Ranges after the compression:
 r82: [36..111] [18..19]
 r83: [102..109]
 r84: [106..107]
 r85: [90..91]
 r86: [84..89]
 r87: [88..89]
 r88: [86..87]
 r89: [84..85]
 r90: [82..83]
 r91: [70..77]
 r92: [74..75]
 r93: [64..65]
 r94: [62..63]
 r95: [8..15]
 r96: [12..13]
 r97: [52..59]
 r98: [56..57]
 r99: [30..47]
 r100: [42..45]
 r101: [38..39]
 r102: [30..37]
 r103: [24..33]
 r104: [28..31]
 r105: [20..29]
 r106: [2..3]
 r107: [0..1]
 r108: [110..111]
 r109: [108..109]
 r110: [104..105]
 r111: [102..103]
 r112: [96..101]
 r113: [100..101]
 r114: [98..99]
 r115: [96..97]
 r116: [94..95]
 r117: [92..93]
 r118: [80..81]
 r119: [78..79]
 r120: [76..77]
 r121: [72..73]
 r122: [70..71]
 r123: [68..69]
 r124: [66..67]
 r125: [16..17]
 r126: [14..15]
 r127: [10..11]
 r128: [8..9]
 r129: [6..7]
 r130: [4..5]
 r131: [60..61]
 r132: [58..59]
 r133: [54..55]
 r134: [52..53]
 r135: [50..51]
 r136: [48..49]
 r137: [46..47]
 r138: [44..45]
 r139: [34..35]
 r140: [32..33]
 r141: [26..27]
 r142: [24..25]
 r143: [22..23]
 r144: [20..21]
 r147: [40..43]
 r148: [40..41]

********** Assignment #1: **********

	 Assigning to 148 (cl=CREG, orig=148, freq=2000, tfirst=148, tfreq=2000)...
	   Assign 2 to reload r148 (freq=2000)
	 Assigning to 147 (cl=GENERAL_REGS, orig=138, freq=3000, tfirst=147, tfreq=3000)...
	   Assign 4 to reload r147 (freq=3000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=32)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=16)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
changing reg in insn 129
changing reg in insn 101
changing reg in insn 87
changing reg in insn 74
changing reg in insn 61
changing reg in insn 39
changing reg in insn 24
changing reg in insn 25
changing reg in insn 27
changing reg in insn 28
changing reg in insn 40
changing reg in insn 41
changing reg in insn 41
changing reg in insn 42
changing reg in insn 43
changing reg in insn 43
changing reg in insn 44
changing reg in insn 44
changing reg in insn 45
changing reg in insn 46
changing reg in insn 62
changing reg in insn 64
changing reg in insn 65
changing reg in insn 69
changing reg in insn 70
changing reg in insn 70
changing reg in insn 71
changing reg in insn 75
changing reg in insn 77
changing reg in insn 78
changing reg in insn 88
changing reg in insn 90
changing reg in insn 91
changing reg in insn 95
changing reg in insn 105
changing reg in insn 97
changing reg in insn 100
changing reg in insn 100
changing reg in insn 105
changing reg in insn 102
changing reg in insn 104
changing reg in insn 106
changing reg in insn 105
changing reg in insn 110
changing reg in insn 113
changing reg in insn 19
changing reg in insn 118
changing reg in insn 118
changing reg in insn 122
changing reg in insn 24
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 29
changing reg in insn 29
changing reg in insn 30
changing reg in insn 37
changing reg in insn 35
changing reg in insn 33
changing reg in insn 31
changing reg in insn 31
changing reg in insn 32
changing reg in insn 33
changing reg in insn 34
changing reg in insn 35
changing reg in insn 36
changing reg in insn 37
changing reg in insn 38
changing reg in insn 39
changing reg in insn 40
changing reg in insn 55
changing reg in insn 56
changing reg in insn 61
changing reg in insn 62
changing reg in insn 63
changing reg in insn 64
changing reg in insn 65
changing reg in insn 66
changing reg in insn 66
changing reg in insn 67
changing reg in insn 68
changing reg in insn 68
changing reg in insn 69
changing reg in insn 74
changing reg in insn 75
changing reg in insn 76
changing reg in insn 77
changing reg in insn 78
changing reg in insn 79
changing reg in insn 79
changing reg in insn 80
changing reg in insn 81
changing reg in insn 81
changing reg in insn 82
changing reg in insn 87
changing reg in insn 88
changing reg in insn 89
changing reg in insn 90
changing reg in insn 91
changing reg in insn 92
changing reg in insn 92
changing reg in insn 93
changing reg in insn 94
changing reg in insn 94
changing reg in insn 95
changing reg in insn 96
changing reg in insn 97
changing reg in insn 98
changing reg in insn 101
changing reg in insn 102
changing reg in insn 103
changing reg in insn 104
changing reg in insn 106
changing reg in insn 107
changing reg in insn 107
changing reg in insn 108
changing reg in insn 109
changing reg in insn 109
changing reg in insn 110
deleting insn with uid = 131.
deleting insn with uid = 118.
deleting insn with uid = 122.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 48.
verify found no changes in insn with uid = 57.


sys_sigaction

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 17 [flags]
;;  ref usage 	r0={52d,52u} r1={13d,10u} r2={5d,2u} r3={1d,6u} r4={3d,3u} r7={8d,42u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r16={6e} r17={44d,5u} r18={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} 
;;    total ref usage 382{256d,120u,6e} in 93{91 regular + 2 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 129 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 129 3 2 2 (parallel [
            (set (reg:SI 3 bx [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 129 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 2 8 2 (set (reg:CCNO 17 flags)
        (compare:CCNO (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 32 [0x20])) [4 signum+0 S4 A32])
            (const_int 0 [0]))) "kernel/signal.c":91:8 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 8 7 9 2 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 17)
            (pc))) "kernel/signal.c":91:8 806 {*jcc}
     (nil)
 -> 17)
(note 9 8 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 12 9 13 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 32 [0x20])) [4 signum+0 S4 A32])
            (const_int 32 [0x20]))) "kernel/signal.c":91:20 11 {*cmpsi_1}
     (nil))
(jump_insn 13 12 14 3 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 17)
            (pc))) "kernel/signal.c":91:20 806 {*jcc}
     (nil)
 -> 17)
(note 14 13 15 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 32 [0x20])) [4 signum+0 S4 A32])
            (const_int 9 [0x9]))) "kernel/signal.c":91:35 11 {*cmpsi_1}
     (nil))
(jump_insn 16 15 17 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 22)
            (pc))) "kernel/signal.c":91:35 806 {*jcc}
     (nil)
 -> 22)
(code_label 17 16 18 5 28 (nil) [2 uses])
(note 18 17 19 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 19 18 125 5 (set (reg:SI 0 ax [orig:106 _24 ] [106])
        (const_int -1 [0xffffffffffffffff])) "kernel/signal.c":92:16 75 {*movsi_internal}
     (nil))
(jump_insn 125 19 126 5 (set (pc)
        (label_ref 116)) "kernel/signal.c":92:16 807 {jump}
     (nil)
 -> 116)
(barrier 126 125 22)
(code_label 22 126 23 6 29 (nil) [1 uses])
(note 23 22 24 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 25 6 (set (reg/f:SI 0 ax [108])
        (mem/u/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x40]  <var_decl 0x7518d911e360 current>)
                        ] UNSPEC_GOT))) [17  S4 A8])) "kernel/signal.c":93:18 75 {*movsi_internal}
     (nil))
(insn 25 24 26 6 (set (reg/f:SI 1 dx [orig:83 current.28_1 ] [83])
        (mem/f/c:SI (reg/f:SI 0 ax [108]) [16 current+0 S4 A32])) "kernel/signal.c":93:18 75 {*movsi_internal}
     (nil))
(insn 26 25 27 6 (set (reg:SI 0 ax [109])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 32 [0x20])) [4 signum+0 S4 A32])) "kernel/signal.c":93:37 75 {*movsi_internal}
     (nil))
(insn 27 26 28 6 (parallel [
            (set (reg:SI 0 ax [orig:84 _2 ] [84])
                (plus:SI (reg:SI 0 ax [109])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":93:37 209 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (reg/f:SI 16 argp) [4 signum+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 28 27 29 6 (parallel [
            (set (reg:SI 0 ax [110])
                (plus:SI (reg:SI 0 ax [orig:84 _2 ] [84])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":93:9 209 {*addsi_1}
     (nil))
(insn 29 28 30 6 (parallel [
            (set (reg:SI 0 ax [111])
                (ashift:SI (reg:SI 0 ax [110])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":93:9 655 {*ashlsi3_1}
     (nil))
(insn 30 29 31 6 (parallel [
            (set (reg/f:SI 0 ax [112])
                (plus:SI (reg:SI 0 ax [111])
                    (reg/f:SI 1 dx [orig:83 current.28_1 ] [83])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":93:9 209 {*addsi_1}
     (nil))
(insn 31 30 32 6 (set (reg:SI 1 dx [113])
        (mem:SI (reg/f:SI 0 ax [112]) [2 current.28_1->sigaction[_2]+0 S4 A32])) "kernel/signal.c":93:9 75 {*movsi_internal}
     (nil))
(insn 32 31 33 6 (set (mem/c:SI (reg/f:SI 7 sp) [2 tmp+0 S4 A32])
        (reg:SI 1 dx [113])) "kernel/signal.c":93:9 75 {*movsi_internal}
     (nil))
(insn 33 32 34 6 (set (reg:SI 1 dx [114])
        (mem:SI (plus:SI (reg/f:SI 0 ax [112])
                (const_int 4 [0x4])) [2 current.28_1->sigaction[_2]+4 S4 A32])) "kernel/signal.c":93:9 75 {*movsi_internal}
     (nil))
(insn 34 33 35 6 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [2 tmp+4 S4 A32])
        (reg:SI 1 dx [114])) "kernel/signal.c":93:9 75 {*movsi_internal}
     (nil))
(insn 35 34 36 6 (set (reg:SI 1 dx [115])
        (mem:SI (plus:SI (reg/f:SI 0 ax [112])
                (const_int 8 [0x8])) [2 current.28_1->sigaction[_2]+8 S4 A32])) "kernel/signal.c":93:9 75 {*movsi_internal}
     (nil))
(insn 36 35 37 6 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [2 tmp+8 S4 A32])
        (reg:SI 1 dx [115])) "kernel/signal.c":93:9 75 {*movsi_internal}
     (nil))
(insn 37 36 38 6 (set (reg:SI 0 ax [116])
        (mem:SI (plus:SI (reg/f:SI 0 ax [112])
                (const_int 12 [0xc])) [2 current.28_1->sigaction[_2]+12 S4 A32])) "kernel/signal.c":93:9 75 {*movsi_internal}
     (nil))
(insn 38 37 39 6 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [2 tmp+12 S4 A32])
        (reg:SI 0 ax [116])) "kernel/signal.c":93:9 75 {*movsi_internal}
     (nil))
(insn 39 38 40 6 (set (reg/f:SI 0 ax [117])
        (mem/u/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x40]  <var_decl 0x7518d911e360 current>)
                        ] UNSPEC_GOT))) [17  S4 A8])) "kernel/signal.c":95:42 75 {*movsi_internal}
     (nil))
(insn 40 39 41 6 (set (reg/f:SI 0 ax [orig:85 current.29_3 ] [85])
        (mem/f/c:SI (reg/f:SI 0 ax [117]) [16 current+0 S4 A32])) "kernel/signal.c":95:42 75 {*movsi_internal}
     (nil))
(insn 41 40 42 6 (parallel [
            (set (reg/f:SI 1 dx [orig:86 _4 ] [86])
                (plus:SI (reg/f:SI 0 ax [orig:85 current.29_3 ] [85])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":95:33 209 {*addsi_1}
     (nil))
(insn 42 41 43 6 (set (reg:SI 0 ax [orig:87 signum.30_5 ] [87])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 32 [0x20])) [4 signum+0 S4 A32])) "kernel/signal.c":95:33 75 {*movsi_internal}
     (nil))
(insn 43 42 44 6 (parallel [
            (set (reg:SI 0 ax [orig:88 _6 ] [88])
                (plus:SI (reg:SI 0 ax [orig:87 signum.30_5 ] [87])
                    (const_int 268435455 [0xfffffff])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":95:33 209 {*addsi_1}
     (nil))
(insn 44 43 45 6 (parallel [
            (set (reg:SI 0 ax [orig:89 _7 ] [89])
                (ashift:SI (reg:SI 0 ax [orig:88 _6 ] [88])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":95:33 655 {*ashlsi3_1}
     (nil))
(insn 45 44 46 6 (parallel [
            (set (reg/f:SI 0 ax [orig:90 _8 ] [90])
                (plus:SI (reg:SI 0 ax [orig:89 _7 ] [89])
                    (reg/f:SI 1 dx [orig:86 _4 ] [86])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":94:5 209 {*addsi_1}
     (nil))
(insn 46 45 47 6 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [14  S4 A32])
        (reg/f:SI 0 ax [orig:90 _8 ] [90])) "kernel/signal.c":94:5 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 4 [0x4])
        (nil)))
(insn 47 46 48 6 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [15  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 40 [0x28])) [15 action+0 S4 A32])) "kernel/signal.c":94:5 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(call_insn 48 47 49 6 (call (mem:QI (symbol_ref:SI ("get_new") [flags 0x3]  <function_decl 0x7518d913bb00 get_new>) [0 get_new S1 A8])
        (const_int 8 [0x8])) "kernel/signal.c":94:5 812 {*call}
     (nil)
    (nil))
(insn 49 48 50 6 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":94:5 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 50 49 51 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 40 [0x28])) [15 oldaction+0 S4 A32])
            (const_int 0 [0]))) "kernel/signal.c":96:8 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 51 50 52 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 59)
            (pc))) "kernel/signal.c":96:8 806 {*jcc}
     (nil)
 -> 59)
(note 52 51 53 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 53 52 54 7 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":97:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 54 53 55 7 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [15  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 48 [0x30])) [15 oldaction+0 S4 A32])) "kernel/signal.c":97:9 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 55 54 56 7 (parallel [
            (set (reg:SI 0 ax [118])
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":97:9 209 {*addsi_1}
     (nil))
(insn 56 55 57 7 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [15  S4 A32])
        (reg:SI 0 ax [118])) "kernel/signal.c":97:9 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 57 56 58 7 (call (mem:QI (symbol_ref:SI ("save_old") [flags 0x3]  <function_decl 0x7518d913bd00 save_old>) [0 save_old S1 A8])
        (const_int 16 [0x10])) "kernel/signal.c":97:9 812 {*call}
     (nil)
    (nil))
(insn 58 57 59 7 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":97:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(code_label 59 58 60 8 31 (nil) [1 uses])
(note 60 59 61 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 61 60 62 8 (set (reg/f:SI 0 ax [119])
        (mem/u/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x40]  <var_decl 0x7518d911e360 current>)
                        ] UNSPEC_GOT))) [17  S4 A8])) "kernel/signal.c":98:16 75 {*movsi_internal}
     (nil))
(insn 62 61 63 8 (set (reg/f:SI 1 dx [orig:91 current.31_9 ] [91])
        (mem/f/c:SI (reg/f:SI 0 ax [119]) [16 current+0 S4 A32])) "kernel/signal.c":98:16 75 {*movsi_internal}
     (nil))
(insn 63 62 64 8 (set (reg:SI 0 ax [120])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 32 [0x20])) [4 signum+0 S4 A32])) "kernel/signal.c":98:35 75 {*movsi_internal}
     (nil))
(insn 64 63 65 8 (parallel [
            (set (reg:SI 0 ax [orig:92 _10 ] [92])
                (plus:SI (reg:SI 0 ax [120])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":98:35 209 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (reg/f:SI 16 argp) [4 signum+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 65 64 66 8 (parallel [
            (set (reg:SI 0 ax [121])
                (plus:SI (reg:SI 0 ax [orig:92 _10 ] [92])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":98:39 209 {*addsi_1}
     (nil))
(insn 66 65 67 8 (parallel [
            (set (reg:SI 0 ax [122])
                (ashift:SI (reg:SI 0 ax [121])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":98:39 655 {*ashlsi3_1}
     (nil))
(insn 67 66 68 8 (parallel [
            (set (reg:SI 0 ax [123])
                (plus:SI (reg:SI 0 ax [122])
                    (reg/f:SI 1 dx [orig:91 current.31_9 ] [91])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":98:39 209 {*addsi_1}
     (nil))
(insn 68 67 69 8 (parallel [
            (set (reg/f:SI 0 ax [124])
                (plus:SI (reg:SI 0 ax [123])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":98:39 209 {*addsi_1}
     (nil))
(insn 69 68 70 8 (set (reg:SI 0 ax [orig:93 _11 ] [93])
        (mem:SI (reg/f:SI 0 ax [124]) [4 current.31_9->sigaction[_10].sa_flags+0 S4 A32])) "kernel/signal.c":98:39 75 {*movsi_internal}
     (nil))
(insn 70 69 71 8 (parallel [
            (set (reg:SI 0 ax [orig:94 _12 ] [94])
                (and:SI (reg:SI 0 ax [orig:93 _11 ] [93])
                    (const_int 1073741824 [0x40000000])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":98:49 490 {*andsi_1}
     (nil))
(insn 71 70 72 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:94 _12 ] [94])
            (const_int 0 [0]))) "kernel/signal.c":98:8 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 72 71 73 8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 85)
            (pc))) "kernel/signal.c":98:8 806 {*jcc}
     (nil)
 -> 85)
(note 73 72 74 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 74 73 75 9 (set (reg/f:SI 0 ax [125])
        (mem/u/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x40]  <var_decl 0x7518d911e360 current>)
                        ] UNSPEC_GOT))) [17  S4 A8])) "kernel/signal.c":99:16 75 {*movsi_internal}
     (nil))
(insn 75 74 76 9 (set (reg/f:SI 1 dx [orig:95 current.32_13 ] [95])
        (mem/f/c:SI (reg/f:SI 0 ax [125]) [16 current+0 S4 A32])) "kernel/signal.c":99:16 75 {*movsi_internal}
     (nil))
(insn 76 75 77 9 (set (reg:SI 0 ax [126])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 32 [0x20])) [4 signum+0 S4 A32])) "kernel/signal.c":99:35 75 {*movsi_internal}
     (nil))
(insn 77 76 78 9 (parallel [
            (set (reg:SI 0 ax [orig:96 _14 ] [96])
                (plus:SI (reg:SI 0 ax [126])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":99:35 209 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (reg/f:SI 16 argp) [4 signum+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 78 77 79 9 (parallel [
            (set (reg:SI 0 ax [127])
                (plus:SI (reg:SI 0 ax [orig:96 _14 ] [96])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":99:48 209 {*addsi_1}
     (nil))
(insn 79 78 80 9 (parallel [
            (set (reg:SI 0 ax [128])
                (ashift:SI (reg:SI 0 ax [127])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":99:48 655 {*ashlsi3_1}
     (nil))
(insn 80 79 81 9 (parallel [
            (set (reg:SI 0 ax [129])
                (plus:SI (reg:SI 0 ax [128])
                    (reg/f:SI 1 dx [orig:95 current.32_13 ] [95])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":99:48 209 {*addsi_1}
     (nil))
(insn 81 80 82 9 (parallel [
            (set (reg/f:SI 0 ax [130])
                (plus:SI (reg:SI 0 ax [129])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":99:48 209 {*addsi_1}
     (nil))
(insn 82 81 127 9 (set (mem:SI (reg/f:SI 0 ax [130]) [4 current.32_13->sigaction[_14].sa_mask+0 S4 A32])
        (const_int 0 [0])) "kernel/signal.c":99:48 75 {*movsi_internal}
     (nil))
(jump_insn 127 82 128 9 (set (pc)
        (label_ref 111)) 807 {jump}
     (nil)
 -> 111)
(barrier 128 127 85)
(code_label 85 128 86 10 32 (nil) [1 uses])
(note 86 85 87 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 87 86 88 10 (set (reg/f:SI 0 ax [131])
        (mem/u/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x40]  <var_decl 0x7518d911e360 current>)
                        ] UNSPEC_GOT))) [17  S4 A8])) "kernel/signal.c":101:48 75 {*movsi_internal}
     (nil))
(insn 88 87 89 10 (set (reg/f:SI 1 dx [orig:97 current.33_15 ] [97])
        (mem/f/c:SI (reg/f:SI 0 ax [131]) [16 current+0 S4 A32])) "kernel/signal.c":101:48 75 {*movsi_internal}
     (nil))
(insn 89 88 90 10 (set (reg:SI 0 ax [132])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 32 [0x20])) [4 signum+0 S4 A32])) "kernel/signal.c":101:48 75 {*movsi_internal}
     (nil))
(insn 90 89 91 10 (parallel [
            (set (reg:SI 0 ax [orig:98 _16 ] [98])
                (plus:SI (reg:SI 0 ax [132])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":101:48 209 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (reg/f:SI 16 argp) [4 signum+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 91 90 92 10 (parallel [
            (set (reg:SI 0 ax [133])
                (plus:SI (reg:SI 0 ax [orig:98 _16 ] [98])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":101:48 209 {*addsi_1}
     (nil))
(insn 92 91 93 10 (parallel [
            (set (reg:SI 0 ax [134])
                (ashift:SI (reg:SI 0 ax [133])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":101:48 655 {*ashlsi3_1}
     (nil))
(insn 93 92 94 10 (parallel [
            (set (reg:SI 0 ax [135])
                (plus:SI (reg:SI 0 ax [134])
                    (reg/f:SI 1 dx [orig:97 current.33_15 ] [97])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":101:48 209 {*addsi_1}
     (nil))
(insn 94 93 95 10 (parallel [
            (set (reg/f:SI 0 ax [136])
                (plus:SI (reg:SI 0 ax [135])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":101:48 209 {*addsi_1}
     (nil))
(insn 95 94 96 10 (set (reg:SI 1 dx [orig:99 _17 ] [99])
        (mem:SI (reg/f:SI 0 ax [136]) [4 current.33_15->sigaction[_16].sa_mask+0 S4 A32])) "kernel/signal.c":101:48 75 {*movsi_internal}
     (nil))
(insn 96 95 97 10 (set (reg:SI 0 ax [137])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 32 [0x20])) [4 signum+0 S4 A32])) "kernel/signal.c":101:65 75 {*movsi_internal}
     (nil))
(insn 97 96 98 10 (parallel [
            (set (reg:SI 0 ax [orig:100 _18 ] [100])
                (plus:SI (reg:SI 0 ax [137])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":101:65 209 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (reg/f:SI 16 argp) [4 signum+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 98 97 133 10 (set (reg:SI 4 si [138])
        (const_int 1 [0x1])) "kernel/signal.c":101:54 75 {*movsi_internal}
     (nil))
(insn 133 98 99 10 (set (reg:QI 2 cx [148])
        (reg:QI 0 ax [orig:100 _18 ] [100])) "kernel/signal.c":101:54 77 {*movqi_internal}
     (nil))
(insn 99 133 132 10 (parallel [
            (set (reg:SI 4 si [138])
                (ashift:SI (reg:SI 4 si [138])
                    (reg:QI 2 cx [148])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":101:54 655 {*ashlsi3_1}
     (nil))
(insn 132 99 100 10 (set (reg:SI 0 ax [orig:101 _19 ] [101])
        (reg:SI 4 si [138])) "kernel/signal.c":101:54 75 {*movsi_internal}
     (nil))
(insn 100 132 101 10 (set (reg:SI 4 si [orig:102 _20 ] [102])
        (reg:SI 0 ax [orig:101 _19 ] [101])) "kernel/signal.c":101:54 75 {*movsi_internal}
     (nil))
(insn 101 100 102 10 (set (reg/f:SI 0 ax [139])
        (mem/u/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x40]  <var_decl 0x7518d911e360 current>)
                        ] UNSPEC_GOT))) [17  S4 A8])) "kernel/signal.c":101:48 75 {*movsi_internal}
     (nil))
(insn 102 101 103 10 (set (reg/f:SI 2 cx [orig:103 current.34_21 ] [103])
        (mem/f/c:SI (reg/f:SI 0 ax [139]) [16 current+0 S4 A32])) "kernel/signal.c":101:48 75 {*movsi_internal}
     (nil))
(insn 103 102 104 10 (set (reg:SI 0 ax [140])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 32 [0x20])) [4 signum+0 S4 A32])) "kernel/signal.c":101:48 75 {*movsi_internal}
     (nil))
(insn 104 103 105 10 (parallel [
            (set (reg:SI 0 ax [orig:104 _22 ] [104])
                (plus:SI (reg:SI 0 ax [140])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":101:48 209 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (reg/f:SI 16 argp) [4 signum+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))
(insn 105 104 106 10 (parallel [
            (set (reg:SI 1 dx [orig:105 _23 ] [105])
                (ior:SI (reg:SI 1 dx [orig:99 _17 ] [99])
                    (reg:SI 4 si [orig:102 _20 ] [102])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":101:48 520 {*iorsi_1}
     (nil))
(insn 106 105 107 10 (parallel [
            (set (reg:SI 0 ax [141])
                (plus:SI (reg:SI 0 ax [orig:104 _22 ] [104])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":101:48 209 {*addsi_1}
     (nil))
(insn 107 106 108 10 (parallel [
            (set (reg:SI 0 ax [142])
                (ashift:SI (reg:SI 0 ax [141])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":101:48 655 {*ashlsi3_1}
     (nil))
(insn 108 107 109 10 (parallel [
            (set (reg:SI 0 ax [143])
                (plus:SI (reg:SI 0 ax [142])
                    (reg/f:SI 2 cx [orig:103 current.34_21 ] [103])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":101:48 209 {*addsi_1}
     (nil))
(insn 109 108 110 10 (parallel [
            (set (reg/f:SI 0 ax [144])
                (plus:SI (reg:SI 0 ax [143])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":101:48 209 {*addsi_1}
     (nil))
(insn 110 109 111 10 (set (mem:SI (reg/f:SI 0 ax [144]) [4 current.34_21->sigaction[_22].sa_mask+0 S4 A32])
        (reg:SI 1 dx [orig:105 _23 ] [105])) "kernel/signal.c":101:48 75 {*movsi_internal}
     (nil))
(code_label 111 110 112 11 33 (nil) [1 uses])
(note 112 111 113 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 113 112 116 11 (set (reg:SI 0 ax [orig:106 _24 ] [106])
        (const_int 0 [0])) "kernel/signal.c":102:12 75 {*movsi_internal}
     (nil))
(code_label 116 113 117 12 34 (nil) [1 uses])
(note 117 116 123 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 123 117 130 12 (use (reg/i:SI 0 ax)) "kernel/signal.c":103:1 -1
     (nil))
(note 130 123 0 NOTE_INSN_DELETED)

;; Function sys_sgetmask (sys_sgetmask, funcdef_no=13, decl_uid=1401, cgraph_uid=14, symbol_order=13)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=4, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 15: point = 0, n_alt = -1
   Insn 14: point = 0, n_alt = -2
   Insn 10: point = 1, n_alt = -2
   Insn 7: point = 3, n_alt = 0
   Insn 6: point = 5, n_alt = 0
   Insn 5: point = 7, n_alt = 0
   Insn 17: point = 9, n_alt = 0
 r82: [8..9]
 r83: [4..5]
 r84: [2..3]
 r85: [0..1]
 r86: [6..7]
Compressing live ranges: from 10 to 10 - 100%
Ranges after the compression:
 r82: [8..9]
 r83: [4..5]
 r84: [2..3]
 r85: [0..1]
 r86: [6..7]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=4, prev_offset=4)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 17
changing reg in insn 5
changing reg in insn 6
changing reg in insn 7
changing reg in insn 7
changing reg in insn 10
changing reg in insn 10
changing reg in insn 14
changing reg in insn 5
changing reg in insn 6
deleting insn with uid = 10.
deleting insn with uid = 14.
starting the processing of deferred insns
ending the processing of deferred insns


sys_sgetmask

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0 [ax] 17 [flags]
;;  ref usage 	r0={5d,5u} r1={1d} r2={1d} r7={1d,2u} r17={1d} 
;;    total ref usage 16{9d,7u,0e} in 5{5 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 17 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 17 3 2 2 (parallel [
            (set (reg:SI 0 ax [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 17 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 0 ax [86])
        (mem/u/c:SI (plus:SI (reg:SI 0 ax [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x40]  <var_decl 0x7518d911e360 current>)
                        ] UNSPEC_GOT))) [17  S4 A8])) "kernel/signal.c":107:19 75 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (reg/f:SI 0 ax [orig:83 current.39_1 ] [83])
        (mem/f/c:SI (reg/f:SI 0 ax [86]) [16 current+0 S4 A32])) "kernel/signal.c":107:19 75 {*movsi_internal}
     (nil))
(insn 7 6 15 2 (set (reg:SI 0 ax [orig:84 _3 ] [84])
        (mem:SI (plus:SI (reg/f:SI 0 ax [orig:83 current.39_1 ] [83])
                (const_int 528 [0x210])) [1 current.39_1->blocked+0 S4 A32])) "kernel/signal.c":107:19 75 {*movsi_internal}
     (nil))
(insn 15 7 18 2 (use (reg/i:SI 0 ax)) "kernel/signal.c":108:1 -1
     (nil))
(note 18 15 0 NOTE_INSN_DELETED)

;; Function sys_ssetmask (sys_ssetmask, funcdef_no=14, decl_uid=1404, cgraph_uid=15, symbol_order=14)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=20, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 12:  (0) =rm  (1) %0  (2) re {*andsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 22: point = 0, n_alt = -1
   Insn 21: point = 0, n_alt = -2
   Insn 17: point = 1, n_alt = -2
   Insn 14: point = 3, n_alt = 0
   Insn 13: point = 4, n_alt = 1
   Insn 12: point = 5, n_alt = 0
   Insn 11: point = 7, n_alt = 0
   Insn 10: point = 8, n_alt = 0
   Insn 9: point = 10, n_alt = 0
   Insn 8: point = 12, n_alt = 1
   Insn 7: point = 13, n_alt = 0
   Insn 6: point = 15, n_alt = 0
   Insn 5: point = 17, n_alt = 0
   Insn 24: point = 18, n_alt = 0
 r82: [11..18]
 r83: [14..15]
 r84: [4..8]
 r85: [4..5]
 r86: [2..3]
 r87: [0..1]
 r88: [16..17]
 r89: [12..13]
 r90: [9..10]
 r91: [6..7]
Compressing live ranges: from 19 to 16 - 84%
Ranges after the compression:
 r82: [10..15]
 r83: [12..13]
 r84: [4..7]
 r85: [4..5]
 r86: [2..3]
 r87: [0..1]
 r88: [14..15]
 r89: [10..11]
 r90: [8..9]
 r91: [6..7]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=20, prev_offset=20)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=16)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 24
changing reg in insn 9
changing reg in insn 5
changing reg in insn 6
changing reg in insn 7
changing reg in insn 10
changing reg in insn 13
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 17
changing reg in insn 17
changing reg in insn 21
changing reg in insn 5
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
deleting insn with uid = 17.
deleting insn with uid = 21.
starting the processing of deferred insns
ending the processing of deferred insns


sys_ssetmask

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 17 [flags]
;;  ref usage 	r0={5d,6u} r1={6d,5u} r2={1d} r7={1d,5u} r16={1e} r17={2d} 
;;    total ref usage 32{15d,16u,1e} in 12{12 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 24 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 24 3 2 2 (parallel [
            (set (reg:SI 0 ax [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 24 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 1 dx [88])
        (mem/u/c:SI (plus:SI (reg:SI 0 ax [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x40]  <var_decl 0x7518d911e360 current>)
                        ] UNSPEC_GOT))) [17  S4 A8])) "kernel/signal.c":112:22 75 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (reg/f:SI 1 dx [orig:83 current.40_1 ] [83])
        (mem/f/c:SI (reg/f:SI 1 dx [88]) [16 current+0 S4 A32])) "kernel/signal.c":112:22 75 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:SI 1 dx [89])
        (mem:SI (plus:SI (reg/f:SI 1 dx [orig:83 current.40_1 ] [83])
                (const_int 528 [0x210])) [1 current.40_1->blocked+0 S4 A32])) "kernel/signal.c":112:9 75 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [4 old+0 S4 A32])
        (reg:SI 1 dx [89])) "kernel/signal.c":112:9 75 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (reg/f:SI 0 ax [90])
        (mem/u/c:SI (plus:SI (reg:SI 0 ax [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x40]  <var_decl 0x7518d911e360 current>)
                        ] UNSPEC_GOT))) [17  S4 A8])) "kernel/signal.c":114:12 75 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (set (reg/f:SI 0 ax [orig:84 current.41_2 ] [84])
        (mem/f/c:SI (reg/f:SI 0 ax [90]) [16 current+0 S4 A32])) "kernel/signal.c":114:12 75 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:SI 1 dx [91])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [4 newmask+0 S4 A32])) "kernel/signal.c":114:32 75 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (parallel [
            (set (reg:SI 1 dx [orig:85 _3 ] [85])
                (and:SI (reg:SI 1 dx [91])
                    (const_int -257 [0xfffffffffffffeff])))
            (clobber (reg:CC 17 flags))
        ]) "kernel/signal.c":114:32 490 {*andsi_1}
     (expr_list:REG_EQUAL (and:SI (mem/c:SI (reg/f:SI 16 argp) [4 newmask+0 S4 A32])
            (const_int -257 [0xfffffffffffffeff]))
        (nil)))
(insn 13 12 14 2 (set (mem:SI (plus:SI (reg/f:SI 0 ax [orig:84 current.41_2 ] [84])
                (const_int 528 [0x210])) [1 current.41_2->blocked+0 S4 A32])
        (reg:SI 1 dx [orig:85 _3 ] [85])) "kernel/signal.c":114:22 75 {*movsi_internal}
     (nil))
(insn 14 13 22 2 (set (reg:SI 0 ax [orig:86 _8 ] [86])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [4 old+0 S4 A32])) "kernel/signal.c":115:12 75 {*movsi_internal}
     (nil))
(insn 22 14 25 2 (use (reg/i:SI 0 ax)) "kernel/signal.c":116:1 -1
     (nil))
(note 25 22 0 NOTE_INSN_DELETED)
