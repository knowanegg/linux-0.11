
;; Function rs_write (rs_write, funcdef_no=0, decl_uid=1028, cgraph_uid=1, symbol_order=0)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=20, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 15:  (0) =rm  (1) %0  (2) re {*addsi_1}
            1 Small class reload: reject+=3
          alt=0,overall=9,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 17:  (0) =a  (1) d
      Creating newreg=98 from oldreg=86, assigning class DREG to r98
   17: {r95:QI=asm_operands;clobber flags:CC;}
      REG_DEAD r86:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
   34: r98:SI=r86:SI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=7,overall=27,losers=2 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 16:  (0) m  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 18:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 19:  (0) =qm  (1) %0  (2) qn {*iorqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 23:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) a  (1) d
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2 3
EBB 4 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 31: point = 0, n_alt = -1
  BB 4
   Insn 27: point = 0, n_alt = -1
  BB 3
   Insn 24: point = 0, n_alt = 0
   Insn 23: point = 1, n_alt = 0
   Insn 22: point = 3, n_alt = 0
   Insn 21: point = 5, n_alt = 0
   Insn 20: point = 6, n_alt = 0
   Insn 19: point = 8, n_alt = 0
   Insn 18: point = 10, n_alt = 4
   Insn 16: point = 11, n_alt = 8
   Insn 17: point = 12, n_alt = 0
   Insn 34: point = 14, n_alt = -2
	Hard reg 0 is preferable by r98 with profit 1000
   Insn 15: point = 16, n_alt = 0
   Insn 14: point = 18, n_alt = 0
   Insn 13: point = 20, n_alt = 0
  BB 2
   Insn 11: point = 21, n_alt = -1
   Insn 10: point = 21, n_alt = 0
   Insn 9: point = 22, n_alt = 0
   Insn 8: point = 24, n_alt = 0
   Insn 7: point = 25, n_alt = 0
   Insn 6: point = 27, n_alt = 0
   Insn 5: point = 28, n_alt = -1
   Insn 32: point = 28, n_alt = 0
 r82: [28..28]
 r83: [21..25]
 r84: [21..22]
 r85: [17..18]
 r86: [15..16]
 r87: [7..8]
 r88: [0..6]
 r89: [2..3]
 r90: [0..1]
 r91: [9..10]
 r92: [26..27]
 r93: [23..24]
 r94: [19..20]
 r95: [11..12]
 r96: [4..5]
 r98: [13..14]
Compressing live ranges: from 29 to 27 - 93%
Ranges after the compression:
 r82: [26..26]
 r83: [20..23]
 r84: [20..21]
 r85: [16..17]
 r86: [14..15]
 r87: [6..7]
 r88: [0..5]
 r89: [2..3]
 r90: [0..1]
 r91: [8..9]
 r92: [24..25]
 r93: [22..23]
 r94: [18..19]
 r95: [10..11]
 r96: [4..5]
 r98: [12..13]

********** Assignment #1: **********

	 Assigning to 98 (cl=DREG, orig=86, freq=2000, tfirst=98, tfreq=2000)...
	   Assign 1 to reload r98 (freq=2000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=20, prev_offset=20)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=16)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 32
changing reg in insn 7
changing reg in insn 10
changing reg in insn 9
changing reg in insn 10
changing reg in insn 14
changing reg in insn 15
changing reg in insn 15
changing reg in insn 19
changing reg in insn 20
changing reg in insn 20
changing reg in insn 24
changing reg in insn 22
changing reg in insn 23
changing reg in insn 23
changing reg in insn 24
changing reg in insn 18
changing reg in insn 19
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 13
changing reg in insn 14
changing reg in insn 17
changing reg in insn 16
changing reg in insn 21
changing reg in insn 22
starting the processing of deferred insns
ending the processing of deferred insns


rs_write

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 17 [flags]
;;  ref usage 	r0={12d,10u} r1={6d,5u} r2={1d} r7={1d,11u} r17={9d,1u} 
;;    total ref usage 56{29d,27u,0e} in 23{23 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 32 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 32 3 2 2 (parallel [
            (set (reg:SI 0 ax [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 32 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (parallel [
            (asm_operands/v ("cli") ("") 0 []
                 []
                 [] drivers/chr_drv/serial.c:16)
            (clobber (reg:CC 17 flags))
        ]) "drivers/chr_drv/serial.c":16:5 -1
     (nil))
(insn 6 5 7 2 (set (reg/f:SI 0 ax [92])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [1 tty+0 S4 A32])) "drivers/chr_drv/serial.c":17:10 75 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:SI 1 dx [orig:83 _1 ] [83])
        (mem:SI (plus:SI (reg/f:SI 0 ax [92])
                (const_int 1092 [0x444])) [4 tty_10(D)->write_q.head+0 S4 A32])) "drivers/chr_drv/serial.c":17:10 75 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (reg/f:SI 0 ax [93])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [1 tty+0 S4 A32])) "drivers/chr_drv/serial.c":17:10 75 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:SI 0 ax [orig:84 _2 ] [84])
        (mem:SI (plus:SI (reg/f:SI 0 ax [93])
                (const_int 1096 [0x448])) [4 tty_10(D)->write_q.tail+0 S4 A32])) "drivers/chr_drv/serial.c":17:10 75 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:83 _1 ] [83])
            (reg:SI 0 ax [orig:84 _2 ] [84]))) "drivers/chr_drv/serial.c":17:8 11 {*cmpsi_1}
     (nil))
(jump_insn 11 10 12 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 25)
            (pc))) "drivers/chr_drv/serial.c":17:8 806 {*jcc}
     (nil)
 -> 25)
(note 12 11 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 3 (set (reg/f:SI 0 ax [94])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [1 tty+0 S4 A32])) "drivers/chr_drv/serial.c":18:9 75 {*movsi_internal}
     (nil))
(insn 14 13 15 3 (set (reg:SI 0 ax [orig:85 _3 ] [85])
        (mem:SI (plus:SI (reg/f:SI 0 ax [94])
                (const_int 1088 [0x440])) [4 tty_10(D)->write_q.data+0 S4 A32])) "drivers/chr_drv/serial.c":18:9 75 {*movsi_internal}
     (nil))
(insn 15 14 34 3 (parallel [
            (set (reg:SI 0 ax [orig:86 _4 ] [86])
                (plus:SI (reg:SI 0 ax [orig:85 _3 ] [85])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "drivers/chr_drv/serial.c":18:9 209 {*addsi_1}
     (nil))
(insn 34 15 17 3 (set (reg:SI 1 dx [orig:86 _4 ] [86])
        (reg:SI 0 ax [orig:86 _4 ] [86])) "drivers/chr_drv/serial.c":18:9 75 {*movsi_internal}
     (nil))
(insn 17 34 16 3 (parallel [
            (set (reg:QI 0 ax [orig:95 _v ] [95])
                (asm_operands/v:QI ("inb %%dx, %%al
	jmp 1f
1:	jmp 1f
1:") ("=a") 0 [
                        (reg:SI 1 dx [orig:86 _4 ] [86])
                    ]
                     [
                        (asm_input:SI ("d") drivers/chr_drv/serial.c:18)
                    ]
                     [] drivers/chr_drv/serial.c:18))
            (clobber (reg:CC 17 flags))
        ]) "drivers/chr_drv/serial.c":18:9 -1
     (nil))
(insn 16 17 18 3 (set (mem/c:QI (plus:SI (reg/f:SI 7 sp)
                (const_int 15 [0xf])) [0 _v+0 S1 A8])
        (reg:QI 0 ax [orig:95 _v ] [95])) "drivers/chr_drv/serial.c":18:9 77 {*movqi_internal}
     (nil))
(insn 18 16 19 3 (set (reg:QI 0 ax [orig:91 _12 ] [91])
        (mem/c:QI (plus:SI (reg/f:SI 7 sp)
                (const_int 15 [0xf])) [0 _v+0 S1 A8])) "drivers/chr_drv/serial.c":18:9 77 {*movqi_internal}
     (nil))
(insn 19 18 20 3 (parallel [
            (set (reg:QI 0 ax [orig:87 _5 ] [87])
                (ior:QI (reg:QI 0 ax [orig:91 _12 ] [91])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "drivers/chr_drv/serial.c":18:9 530 {*iorqi_1}
     (nil))
(insn 20 19 21 3 (set (reg:SI 0 ax [orig:88 _6 ] [88])
        (zero_extend:SI (reg:QI 0 ax [orig:87 _5 ] [87]))) "drivers/chr_drv/serial.c":18:9 143 {*zero_extendqisi2}
     (nil))
(insn 21 20 22 3 (set (reg/f:SI 1 dx [96])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [1 tty+0 S4 A32])) "drivers/chr_drv/serial.c":18:9 75 {*movsi_internal}
     (nil))
(insn 22 21 23 3 (set (reg:SI 1 dx [orig:89 _7 ] [89])
        (mem:SI (plus:SI (reg/f:SI 1 dx [96])
                (const_int 1088 [0x440])) [4 tty_10(D)->write_q.data+0 S4 A32])) "drivers/chr_drv/serial.c":18:9 75 {*movsi_internal}
     (nil))
(insn 23 22 24 3 (parallel [
            (set (reg:SI 1 dx [orig:90 _8 ] [90])
                (plus:SI (reg:SI 1 dx [orig:89 _7 ] [89])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "drivers/chr_drv/serial.c":18:9 209 {*addsi_1}
     (nil))
(insn 24 23 25 3 (parallel [
            (asm_operands/v ("outb %%al, %%dx") ("") 0 [
                    (reg:SI 0 ax [orig:88 _6 ] [88])
                    (reg:SI 1 dx [orig:90 _8 ] [90])
                ]
                 [
                    (asm_input:SI ("a") drivers/chr_drv/serial.c:18)
                    (asm_input:SI ("d") drivers/chr_drv/serial.c:18)
                ]
                 [] drivers/chr_drv/serial.c:18)
            (clobber (reg:CC 17 flags))
        ]) "drivers/chr_drv/serial.c":18:9 -1
     (nil))
(code_label 25 24 26 4 2 (nil) [1 uses])
(note 26 25 27 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 27 26 30 4 (parallel [
            (asm_operands/v ("sti") ("") 0 []
                 []
                 [] drivers/chr_drv/serial.c:20)
            (clobber (reg:CC 17 flags))
        ]) "drivers/chr_drv/serial.c":20:5 -1
     (nil))
(note 30 27 31 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 31 30 33 5 (const_int 0 [0]) "drivers/chr_drv/serial.c":21:1 843 {nop}
     (nil))
(note 33 31 0 NOTE_INSN_DELETED)

;; Function init (init, funcdef_no=1, decl_uid=1055, cgraph_uid=2, symbol_order=1)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=20, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 6:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) a  (1) d
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) a  (1) d
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 13:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) a  (1) d
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 17:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) a  (1) d
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 21:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) a  (1) d
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 25:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) a  (1) d
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
            1 Small class reload: reject+=3
          alt=0,overall=9,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 30:  (0) =a  (1) d
      Creating newreg=104 from oldreg=102, assigning class DREG to r104
   30: {r101:QI=asm_operands;clobber flags:CC;}
      REG_DEAD r102:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
   38: r104:SI=r102:SI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=7,overall=27,losers=2 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 28:  (0) m  (1) qn {*movqi_internal}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2 3

********** Pseudo live ranges #1: **********

  BB 3
   Insn 35: point = 0, n_alt = -1
  BB 2
   Insn 28: point = 0, n_alt = 8
   Insn 30: point = 1, n_alt = 0
   Insn 38: point = 3, n_alt = -2
	Hard reg 0 is preferable by r104 with profit 1000
   Insn 29: point = 5, n_alt = 0
   Insn 27: point = 6, n_alt = 0
   Insn 26: point = 7, n_alt = 0
   Insn 25: point = 8, n_alt = 3
   Insn 24: point = 10, n_alt = 0
   Insn 23: point = 11, n_alt = 0
   Insn 22: point = 12, n_alt = 0
   Insn 21: point = 13, n_alt = 3
   Insn 20: point = 15, n_alt = 0
   Insn 19: point = 16, n_alt = 0
   Insn 18: point = 17, n_alt = 0
   Insn 17: point = 18, n_alt = 3
   Insn 16: point = 20, n_alt = 0
   Insn 15: point = 21, n_alt = 0
   Insn 14: point = 22, n_alt = 0
   Insn 13: point = 23, n_alt = 3
   Insn 12: point = 25, n_alt = 0
   Insn 11: point = 26, n_alt = 0
   Insn 10: point = 27, n_alt = 0
   Insn 9: point = 28, n_alt = 0
   Insn 8: point = 29, n_alt = 0
   Insn 7: point = 30, n_alt = 0
   Insn 6: point = 31, n_alt = 3
   Insn 5: point = 33, n_alt = 0
   Insn 36: point = 34, n_alt = 0
 r82: [34..34]
 r83: [29..31]
 r84: [21..23]
 r85: [16..18]
 r86: [11..13]
 r87: [6..8]
 r89: [32..33]
 r90: [29..30]
 r91: [26..28]
 r92: [26..27]
 r93: [24..25]
 r94: [21..22]
 r95: [19..20]
 r96: [16..17]
 r97: [14..15]
 r98: [11..12]
 r99: [9..10]
 r100: [6..7]
 r101: [0..1]
 r102: [4..5]
 r104: [2..3]
Compressing live ranges: from 35 to 29 - 82%
Ranges after the compression:
 r82: [28..28]
 r83: [24..25]
 r84: [18..19]
 r85: [14..15]
 r86: [10..11]
 r87: [6..7]
 r89: [26..27]
 r90: [24..25]
 r91: [22..23]
 r92: [22..23]
 r93: [20..21]
 r94: [18..19]
 r95: [16..17]
 r96: [14..15]
 r97: [12..13]
 r98: [10..11]
 r99: [8..9]
 r100: [6..7]
 r101: [0..1]
 r102: [4..5]
 r104: [2..3]

********** Assignment #1: **********

	 Assigning to 104 (cl=DREG, orig=102, freq=2000, tfirst=104, tfreq=2000)...
	   Assign 1 to reload r104 (freq=2000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=20, prev_offset=20)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=16)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 36
changing reg in insn 6
changing reg in insn 8
changing reg in insn 13
changing reg in insn 15
changing reg in insn 17
changing reg in insn 19
changing reg in insn 21
changing reg in insn 23
changing reg in insn 25
changing reg in insn 27
changing reg in insn 5
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 11
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 23
changing reg in insn 24
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 30
changing reg in insn 28
changing reg in insn 29
starting the processing of deferred insns
ending the processing of deferred insns


init

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 17 [flags]
;;  ref usage 	r0={15d,13u} r1={8d,7u} r2={1d} r7={1d,11u} r16={5e} r17={13d} 
;;    total ref usage 74{38d,31u,5e} in 29{29 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 36 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 36 3 2 2 (parallel [
            (set (reg:SI 0 ax [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 36 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:SI 0 ax [89])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [5 port+0 S4 A32])) "drivers/chr_drv/serial.c":26:5 75 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (parallel [
            (set (reg:SI 1 dx [orig:83 _1 ] [83])
                (plus:SI (reg:SI 0 ax [89])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "drivers/chr_drv/serial.c":26:5 209 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (reg/f:SI 16 argp) [5 port+0 S4 A32])
            (const_int 3 [0x3]))
        (nil)))
(insn 7 6 8 2 (set (reg:SI 0 ax [90])
        (const_int 128 [0x80])) "drivers/chr_drv/serial.c":26:5 75 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (parallel [
            (asm_operands/v ("outb %%al, %%dx
	jmp 1f
1:	jmp 1f
1:") ("") 0 [
                    (reg:SI 0 ax [90])
                    (reg:SI 1 dx [orig:83 _1 ] [83])
                ]
                 [
                    (asm_input:SI ("a") drivers/chr_drv/serial.c:26)
                    (asm_input:SI ("d") drivers/chr_drv/serial.c:26)
                ]
                 [] drivers/chr_drv/serial.c:26)
            (clobber (reg:CC 17 flags))
        ]) "drivers/chr_drv/serial.c":26:5 -1
     (nil))
(insn 9 8 10 2 (set (reg:SI 0 ax [91])
        (const_int 48 [0x30])) "drivers/chr_drv/serial.c":27:5 75 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:SI 1 dx [92])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [5 port+0 S4 A32])) "drivers/chr_drv/serial.c":27:5 75 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (parallel [
            (asm_operands/v ("outb %%al, %%dx
	jmp 1f
1:	jmp 1f
1:") ("") 0 [
                    (reg:SI 0 ax [91])
                    (reg:SI 1 dx [92])
                ]
                 [
                    (asm_input:SI ("a") drivers/chr_drv/serial.c:27)
                    (asm_input:SI ("d") drivers/chr_drv/serial.c:27)
                ]
                 [] drivers/chr_drv/serial.c:27)
            (clobber (reg:CC 17 flags))
        ]) "drivers/chr_drv/serial.c":27:5 -1
     (nil))
(insn 12 11 13 2 (set (reg:SI 0 ax [93])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [5 port+0 S4 A32])) "drivers/chr_drv/serial.c":28:5 75 {*movsi_internal}
     (nil))
(insn 13 12 14 2 (parallel [
            (set (reg:SI 1 dx [orig:84 _2 ] [84])
                (plus:SI (reg:SI 0 ax [93])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "drivers/chr_drv/serial.c":28:5 209 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (reg/f:SI 16 argp) [5 port+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 14 13 15 2 (set (reg:SI 0 ax [94])
        (const_int 0 [0])) "drivers/chr_drv/serial.c":28:5 75 {*movsi_internal}
     (nil))
(insn 15 14 16 2 (parallel [
            (asm_operands/v ("outb %%al, %%dx
	jmp 1f
1:	jmp 1f
1:") ("") 0 [
                    (reg:SI 0 ax [94])
                    (reg:SI 1 dx [orig:84 _2 ] [84])
                ]
                 [
                    (asm_input:SI ("a") drivers/chr_drv/serial.c:28)
                    (asm_input:SI ("d") drivers/chr_drv/serial.c:28)
                ]
                 [] drivers/chr_drv/serial.c:28)
            (clobber (reg:CC 17 flags))
        ]) "drivers/chr_drv/serial.c":28:5 -1
     (nil))
(insn 16 15 17 2 (set (reg:SI 0 ax [95])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [5 port+0 S4 A32])) "drivers/chr_drv/serial.c":29:5 75 {*movsi_internal}
     (nil))
(insn 17 16 18 2 (parallel [
            (set (reg:SI 1 dx [orig:85 _3 ] [85])
                (plus:SI (reg:SI 0 ax [95])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "drivers/chr_drv/serial.c":29:5 209 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (reg/f:SI 16 argp) [5 port+0 S4 A32])
            (const_int 3 [0x3]))
        (nil)))
(insn 18 17 19 2 (set (reg:SI 0 ax [96])
        (const_int 3 [0x3])) "drivers/chr_drv/serial.c":29:5 75 {*movsi_internal}
     (nil))
(insn 19 18 20 2 (parallel [
            (asm_operands/v ("outb %%al, %%dx
	jmp 1f
1:	jmp 1f
1:") ("") 0 [
                    (reg:SI 0 ax [96])
                    (reg:SI 1 dx [orig:85 _3 ] [85])
                ]
                 [
                    (asm_input:SI ("a") drivers/chr_drv/serial.c:29)
                    (asm_input:SI ("d") drivers/chr_drv/serial.c:29)
                ]
                 [] drivers/chr_drv/serial.c:29)
            (clobber (reg:CC 17 flags))
        ]) "drivers/chr_drv/serial.c":29:5 -1
     (nil))
(insn 20 19 21 2 (set (reg:SI 0 ax [97])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [5 port+0 S4 A32])) "drivers/chr_drv/serial.c":30:5 75 {*movsi_internal}
     (nil))
(insn 21 20 22 2 (parallel [
            (set (reg:SI 1 dx [orig:86 _4 ] [86])
                (plus:SI (reg:SI 0 ax [97])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "drivers/chr_drv/serial.c":30:5 209 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (reg/f:SI 16 argp) [5 port+0 S4 A32])
            (const_int 4 [0x4]))
        (nil)))
(insn 22 21 23 2 (set (reg:SI 0 ax [98])
        (const_int 11 [0xb])) "drivers/chr_drv/serial.c":30:5 75 {*movsi_internal}
     (nil))
(insn 23 22 24 2 (parallel [
            (asm_operands/v ("outb %%al, %%dx
	jmp 1f
1:	jmp 1f
1:") ("") 0 [
                    (reg:SI 0 ax [98])
                    (reg:SI 1 dx [orig:86 _4 ] [86])
                ]
                 [
                    (asm_input:SI ("a") drivers/chr_drv/serial.c:30)
                    (asm_input:SI ("d") drivers/chr_drv/serial.c:30)
                ]
                 [] drivers/chr_drv/serial.c:30)
            (clobber (reg:CC 17 flags))
        ]) "drivers/chr_drv/serial.c":30:5 -1
     (nil))
(insn 24 23 25 2 (set (reg:SI 0 ax [99])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [5 port+0 S4 A32])) "drivers/chr_drv/serial.c":31:5 75 {*movsi_internal}
     (nil))
(insn 25 24 26 2 (parallel [
            (set (reg:SI 1 dx [orig:87 _5 ] [87])
                (plus:SI (reg:SI 0 ax [99])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "drivers/chr_drv/serial.c":31:5 209 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (reg/f:SI 16 argp) [5 port+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 26 25 27 2 (set (reg:SI 0 ax [100])
        (const_int 13 [0xd])) "drivers/chr_drv/serial.c":31:5 75 {*movsi_internal}
     (nil))
(insn 27 26 29 2 (parallel [
            (asm_operands/v ("outb %%al, %%dx
	jmp 1f
1:	jmp 1f
1:") ("") 0 [
                    (reg:SI 0 ax [100])
                    (reg:SI 1 dx [orig:87 _5 ] [87])
                ]
                 [
                    (asm_input:SI ("a") drivers/chr_drv/serial.c:31)
                    (asm_input:SI ("d") drivers/chr_drv/serial.c:31)
                ]
                 [] drivers/chr_drv/serial.c:31)
            (clobber (reg:CC 17 flags))
        ]) "drivers/chr_drv/serial.c":31:5 -1
     (nil))
(insn 29 27 38 2 (set (reg:SI 0 ax [102])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [5 port+0 S4 A32])) "drivers/chr_drv/serial.c":32:11 75 {*movsi_internal}
     (nil))
(insn 38 29 30 2 (set (reg:SI 1 dx [102])
        (reg:SI 0 ax [102])) "drivers/chr_drv/serial.c":32:11 75 {*movsi_internal}
     (nil))
(insn 30 38 28 2 (parallel [
            (set (reg:QI 0 ax [orig:101 _v ] [101])
                (asm_operands/v:QI ("inb %%dx, %%al") ("=a") 0 [
                        (reg:SI 1 dx [102])
                    ]
                     [
                        (asm_input:SI ("d") drivers/chr_drv/serial.c:32)
                    ]
                     [] drivers/chr_drv/serial.c:32))
            (clobber (reg:CC 17 flags))
        ]) "drivers/chr_drv/serial.c":32:11 -1
     (nil))
(insn 28 30 34 2 (set (mem/c:QI (plus:SI (reg/f:SI 7 sp)
                (const_int 15 [0xf])) [0 _v+0 S1 A8])
        (reg:QI 0 ax [orig:101 _v ] [101])) "drivers/chr_drv/serial.c":32:11 77 {*movqi_internal}
     (nil))
(note 34 28 35 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 35 34 37 3 (const_int 0 [0]) "drivers/chr_drv/serial.c":33:1 843 {nop}
     (nil))
(note 37 35 0 NOTE_INSN_DELETED)

;; Function rs_init (rs_init, funcdef_no=2, decl_uid=1032, cgraph_uid=3, symbol_order=2)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=28, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=-8, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) Ts {*leasi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) Ts {*leasi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) i  (1) o  (2) o  (3) d  (4) a
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) Ts {*leasi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) Ts {*leasi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) i  (1) o  (2) o  (3) d  (4) a
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =<  (1) ri*m {*pushsi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) lBwBz {*call} (sp_off=-4)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 26:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-4)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =<  (1) ri*m {*pushsi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) lBwBz {*call} (sp_off=-4)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 32:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-4)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =r  (1) g {*movsi_internal}
            1 Small class reload: reject+=3
          alt=0,overall=9,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 35:  (0) =a  (1) d
      Creating newreg=110 from oldreg=107, assigning class DREG to r110
   35: {r106:QI=asm_operands;clobber flags:CC;}
      REG_DEAD r107:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
   47: r110:SI=r107:SI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=7,overall=27,losers=2 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 33:  (0) m  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 36:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =r  (1) qm {*zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 38:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) a  (1) d
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2 3

********** Pseudo live ranges #1: **********

  BB 3
   Insn 44: point = 0, n_alt = -1
  BB 2
   Insn 40: point = 0, n_alt = 0
   Insn 39: point = 1, n_alt = 0
   Insn 38: point = 2, n_alt = 0
   Insn 37: point = 4, n_alt = 0
   Insn 36: point = 6, n_alt = 4
   Insn 33: point = 7, n_alt = 8
   Insn 35: point = 8, n_alt = 0
   Insn 47: point = 10, n_alt = -2
	Hard reg 0 is preferable by r110 with profit 1000
   Insn 34: point = 12, n_alt = 0
   Insn 32: point = 13, n_alt = 0
   Insn 31: point = 13, n_alt = 0
   Insn 30: point = 13, n_alt = 0
   Insn 29: point = 14, n_alt = -2
   Insn 28: point = 16, n_alt = 0
   Insn 27: point = 18, n_alt = 0
   Insn 26: point = 20, n_alt = 0
   Insn 25: point = 20, n_alt = 0
   Insn 24: point = 20, n_alt = 0
   Insn 23: point = 21, n_alt = -2
   Insn 22: point = 23, n_alt = 0
   Insn 21: point = 25, n_alt = 0
   Insn 20: point = 26, n_alt = 0
   Insn 19: point = 27, n_alt = 0
   Insn 18: point = 28, n_alt = -2
   Insn 17: point = 30, n_alt = 0
   Insn 16: point = 31, n_alt = 0
   Insn 15: point = 33, n_alt = 0
   Insn 14: point = 34, n_alt = 0
   Insn 13: point = 36, n_alt = 0
   Insn 12: point = 37, n_alt = 0
   Insn 11: point = 38, n_alt = 0
   Insn 10: point = 39, n_alt = -2
   Insn 9: point = 41, n_alt = 0
   Insn 8: point = 42, n_alt = 0
   Insn 7: point = 44, n_alt = 0
   Insn 6: point = 45, n_alt = 0
   Insn 5: point = 47, n_alt = 0
   Insn 45: point = 48, n_alt = 0
 r82: [19..48]
 r83: [37..45]
 r84: [37..42]
 r85: [26..34]
 r86: [26..31]
 r87: [22..23]
 r88: [20..21]
 r89: [15..16]
 r90: [13..14]
 r91: [3..4]
 r92: [0..2]
 r93: [5..6]
 r94: [46..47]
 r95: [43..44]
 r96: [37..39]
 r97: [40..41]
 r98: [37..38]
 r99: [35..36]
 r100: [32..33]
 r101: [26..28]
 r102: [29..30]
 r103: [26..27]
 r104: [24..25]
 r105: [17..18]
 r106: [7..8]
 r107: [11..12]
 r108: [0..1]
 r110: [9..10]
Compressing live ranges: from 49 to 40 - 81%
Ranges after the compression:
 r82: [18..39]
 r83: [32..37]
 r84: [32..35]
 r85: [24..29]
 r86: [24..27]
 r87: [20..21]
 r88: [18..19]
 r89: [14..15]
 r90: [12..13]
 r91: [2..3]
 r92: [0..1]
 r93: [4..5]
 r94: [38..39]
 r95: [36..37]
 r96: [32..33]
 r97: [34..35]
 r98: [32..33]
 r99: [30..31]
 r100: [28..29]
 r101: [24..25]
 r102: [26..27]
 r103: [24..25]
 r104: [22..23]
 r105: [16..17]
 r106: [6..7]
 r107: [10..11]
 r108: [0..1]
 r110: [8..9]

********** Assignment #1: **********

	 Assigning to 110 (cl=DREG, orig=107, freq=2000, tfirst=110, tfreq=2000)...
	   Assign 1 to reload r110 (freq=2000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=28, prev_offset=28)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=16)
Can eliminate 19 to 6 (offset=-8, prev_offset=0)
changing reg in insn 45
changing reg in insn 27
changing reg in insn 21
changing reg in insn 17
changing reg in insn 15
changing reg in insn 13
changing reg in insn 9
changing reg in insn 7
changing reg in insn 5
changing reg in insn 6
changing reg in insn 12
changing reg in insn 8
changing reg in insn 12
changing reg in insn 14
changing reg in insn 20
changing reg in insn 16
changing reg in insn 20
changing reg in insn 22
changing reg in insn 23
changing reg in insn 23
changing reg in insn 24
changing reg in insn 28
changing reg in insn 29
changing reg in insn 29
changing reg in insn 30
changing reg in insn 37
changing reg in insn 38
changing reg in insn 38
changing reg in insn 40
changing reg in insn 36
changing reg in insn 37
changing reg in insn 5
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 10
changing reg in insn 12
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 16
changing reg in insn 18
changing reg in insn 20
changing reg in insn 17
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 27
changing reg in insn 28
changing reg in insn 35
changing reg in insn 33
changing reg in insn 34
changing reg in insn 39
changing reg in insn 40
deleting insn with uid = 23.
deleting insn with uid = 29.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 25.
verify found no changes in insn with uid = 31.


rs_init

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 17 [flags]
;;  ref usage 	r0={20d,17u} r1={7d,4u} r2={5d,2u} r3={1d,8u} r4={2d,2u} r7={5d,13u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={10d} r18={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} 
;;    total ref usage 226{180d,46u,0e} in 37{35 regular + 2 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 45 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 45 3 2 2 (parallel [
            (set (reg:SI 3 bx [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 45 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:SI 0 ax [94])
        (mem/u/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("idt") [flags 0x40]  <var_decl 0x7a4f15539ea0 idt>)
                        ] UNSPEC_GOT))) [10  S4 A8])) "drivers/chr_drv/serial.c":38:5 75 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (reg/f:SI 2 cx [orig:83 _1 ] [83])
        (plus:SI (reg:SI 0 ax [94])
            (const_int 288 [0x120]))) "drivers/chr_drv/serial.c":38:5 205 {*leasi}
     (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("idt") [flags 0x40]  <var_decl 0x7a4f15539ea0 idt>)
                (const_int 288 [0x120])))
        (nil)))
(insn 7 6 8 2 (set (reg:SI 0 ax [95])
        (mem/u/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("idt") [flags 0x40]  <var_decl 0x7a4f15539ea0 idt>)
                        ] UNSPEC_GOT))) [10  S4 A8])) "drivers/chr_drv/serial.c":38:5 75 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (reg/f:SI 4 si [orig:84 _2 ] [84])
        (plus:SI (reg:SI 0 ax [95])
            (const_int 292 [0x124]))) "drivers/chr_drv/serial.c":38:5 205 {*leasi}
     (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("idt") [flags 0x40]  <var_decl 0x7a4f15539ea0 idt>)
                (const_int 292 [0x124])))
        (nil)))
(insn 9 8 10 2 (set (reg:SI 0 ax [97])
        (mem/u/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("rs1_interrupt") [flags 0x41]  <function_decl 0x7a4f13cd2f00 rs1_interrupt>)
                        ] UNSPEC_GOT))) [10  S4 A8])) "drivers/chr_drv/serial.c":38:5 75 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (set (reg/f:SI 1 dx [96])
        (reg:SI 0 ax [97])) "drivers/chr_drv/serial.c":38:5 75 {*movsi_internal}
     (expr_list:REG_EQUAL (symbol_ref:SI ("rs1_interrupt") [flags 0x41]  <function_decl 0x7a4f13cd2f00 rs1_interrupt>)
        (nil)))
(insn 11 10 12 2 (set (reg:SI 0 ax [98])
        (const_int 524288 [0x80000])) "drivers/chr_drv/serial.c":38:5 75 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (parallel [
            (asm_operands/v ("movw %%dx, %%ax
	movw %0, %%dx
	movl %%eax, %1
	movl %%edx, %2") ("") 0 [
                    (const_int -29184 [0xffffffffffff8e00])
                    (mem:QI (reg/f:SI 2 cx [orig:83 _1 ] [83]) [0 MEM[(char *)_1]+0 S1 A8])
                    (mem:QI (reg/f:SI 4 si [orig:84 _2 ] [84]) [0 *_2+0 S1 A8])
                    (reg/f:SI 1 dx [96])
                    (reg:SI 0 ax [98])
                ]
                 [
                    (asm_input:HI ("i") drivers/chr_drv/serial.c:38)
                    (asm_input:QI ("o") drivers/chr_drv/serial.c:38)
                    (asm_input:QI ("o") drivers/chr_drv/serial.c:38)
                    (asm_input:SI ("d") drivers/chr_drv/serial.c:38)
                    (asm_input:SI ("a") drivers/chr_drv/serial.c:38)
                ]
                 [] drivers/chr_drv/serial.c:38)
            (clobber (reg:CC 17 flags))
        ]) "drivers/chr_drv/serial.c":38:5 -1
     (nil))
(insn 13 12 14 2 (set (reg:SI 0 ax [99])
        (mem/u/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("idt") [flags 0x40]  <var_decl 0x7a4f15539ea0 idt>)
                        ] UNSPEC_GOT))) [10  S4 A8])) "drivers/chr_drv/serial.c":39:5 75 {*movsi_internal}
     (nil))
(insn 14 13 15 2 (set (reg/f:SI 2 cx [orig:85 _3 ] [85])
        (plus:SI (reg:SI 0 ax [99])
            (const_int 280 [0x118]))) "drivers/chr_drv/serial.c":39:5 205 {*leasi}
     (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("idt") [flags 0x40]  <var_decl 0x7a4f15539ea0 idt>)
                (const_int 280 [0x118])))
        (nil)))
(insn 15 14 16 2 (set (reg:SI 0 ax [100])
        (mem/u/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("idt") [flags 0x40]  <var_decl 0x7a4f15539ea0 idt>)
                        ] UNSPEC_GOT))) [10  S4 A8])) "drivers/chr_drv/serial.c":39:5 75 {*movsi_internal}
     (nil))
(insn 16 15 17 2 (set (reg/f:SI 4 si [orig:86 _4 ] [86])
        (plus:SI (reg:SI 0 ax [100])
            (const_int 284 [0x11c]))) "drivers/chr_drv/serial.c":39:5 205 {*leasi}
     (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("idt") [flags 0x40]  <var_decl 0x7a4f15539ea0 idt>)
                (const_int 284 [0x11c])))
        (nil)))
(insn 17 16 18 2 (set (reg:SI 0 ax [102])
        (mem/u/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("rs2_interrupt") [flags 0x41]  <function_decl 0x7a4f13cd2600 rs2_interrupt>)
                        ] UNSPEC_GOT))) [10  S4 A8])) "drivers/chr_drv/serial.c":39:5 75 {*movsi_internal}
     (nil))
(insn 18 17 19 2 (set (reg/f:SI 1 dx [101])
        (reg:SI 0 ax [102])) "drivers/chr_drv/serial.c":39:5 75 {*movsi_internal}
     (expr_list:REG_EQUAL (symbol_ref:SI ("rs2_interrupt") [flags 0x41]  <function_decl 0x7a4f13cd2600 rs2_interrupt>)
        (nil)))
(insn 19 18 20 2 (set (reg:SI 0 ax [103])
        (const_int 524288 [0x80000])) "drivers/chr_drv/serial.c":39:5 75 {*movsi_internal}
     (nil))
(insn 20 19 21 2 (parallel [
            (asm_operands/v ("movw %%dx, %%ax
	movw %0, %%dx
	movl %%eax, %1
	movl %%edx, %2") ("") 0 [
                    (const_int -29184 [0xffffffffffff8e00])
                    (mem:QI (reg/f:SI 2 cx [orig:85 _3 ] [85]) [0 MEM[(char *)_3]+0 S1 A8])
                    (mem:QI (reg/f:SI 4 si [orig:86 _4 ] [86]) [0 *_4+0 S1 A8])
                    (reg/f:SI 1 dx [101])
                    (reg:SI 0 ax [103])
                ]
                 [
                    (asm_input:HI ("i") drivers/chr_drv/serial.c:39)
                    (asm_input:QI ("o") drivers/chr_drv/serial.c:39)
                    (asm_input:QI ("o") drivers/chr_drv/serial.c:39)
                    (asm_input:SI ("d") drivers/chr_drv/serial.c:39)
                    (asm_input:SI ("a") drivers/chr_drv/serial.c:39)
                ]
                 [] drivers/chr_drv/serial.c:39)
            (clobber (reg:CC 17 flags))
        ]) "drivers/chr_drv/serial.c":39:5 -1
     (nil))
(insn 21 20 22 2 (set (reg/f:SI 0 ax [104])
        (mem/u/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("tty_table") [flags 0x40]  <var_decl 0x7a4f15539b40 tty_table>)
                        ] UNSPEC_GOT))) [10  S4 A8])) "drivers/chr_drv/serial.c":40:29 75 {*movsi_internal}
     (nil))
(insn 22 21 24 2 (set (reg:SI 0 ax [orig:87 _5 ] [87])
        (mem:SI (plus:SI (reg/f:SI 0 ax [104])
                (const_int 3216 [0xc90])) [4 tty_table[1].read_q.data+0 S4 A32])) "drivers/chr_drv/serial.c":40:29 75 {*movsi_internal}
     (nil))
(insn 24 22 25 2 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [5  S4 A32])
        (reg:SI 0 ax [orig:88 _6 ] [88])) "drivers/chr_drv/serial.c":40:5 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 4 [0x4])
        (nil)))
(call_insn 25 24 26 2 (call (mem:QI (symbol_ref:SI ("init") [flags 0x3]  <function_decl 0x7a4f13d0d000 init>) [0 init S1 A8])
        (const_int 4 [0x4])) "drivers/chr_drv/serial.c":40:5 812 {*call}
     (nil)
    (nil))
(insn 26 25 27 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "drivers/chr_drv/serial.c":40:5 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 27 26 28 2 (set (reg/f:SI 0 ax [105])
        (mem/u/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("tty_table") [flags 0x40]  <var_decl 0x7a4f15539b40 tty_table>)
                        ] UNSPEC_GOT))) [10  S4 A8])) "drivers/chr_drv/serial.c":41:29 75 {*movsi_internal}
     (nil))
(insn 28 27 30 2 (set (reg:SI 0 ax [orig:89 _7 ] [89])
        (mem:SI (plus:SI (reg/f:SI 0 ax [105])
                (const_int 6384 [0x18f0])) [4 tty_table[2].read_q.data+0 S4 A32])) "drivers/chr_drv/serial.c":41:29 75 {*movsi_internal}
     (nil))
(insn 30 28 31 2 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [5  S4 A32])
        (reg:SI 0 ax [orig:90 _8 ] [90])) "drivers/chr_drv/serial.c":41:5 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 4 [0x4])
        (nil)))
(call_insn 31 30 32 2 (call (mem:QI (symbol_ref:SI ("init") [flags 0x3]  <function_decl 0x7a4f13d0d000 init>) [0 init S1 A8])
        (const_int 4 [0x4])) "drivers/chr_drv/serial.c":41:5 812 {*call}
     (nil)
    (nil))
(insn 32 31 34 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "drivers/chr_drv/serial.c":41:5 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 34 32 47 2 (set (reg:SI 0 ax [107])
        (const_int 33 [0x21])) "drivers/chr_drv/serial.c":42:5 75 {*movsi_internal}
     (nil))
(insn 47 34 35 2 (set (reg:SI 1 dx [107])
        (reg:SI 0 ax [107])) "drivers/chr_drv/serial.c":42:5 75 {*movsi_internal}
     (nil))
(insn 35 47 33 2 (parallel [
            (set (reg:QI 0 ax [orig:106 _v ] [106])
                (asm_operands/v:QI ("inb %%dx, %%al
	jmp 1f
1:	jmp 1f
1:") ("=a") 0 [
                        (reg:SI 1 dx [107])
                    ]
                     [
                        (asm_input:SI ("d") drivers/chr_drv/serial.c:42)
                    ]
                     [] drivers/chr_drv/serial.c:42))
            (clobber (reg:CC 17 flags))
        ]) "drivers/chr_drv/serial.c":42:5 -1
     (nil))
(insn 33 35 36 2 (set (mem/c:QI (plus:SI (reg/f:SI 7 sp)
                (const_int 15 [0xf])) [0 _v+0 S1 A8])
        (reg:QI 0 ax [orig:106 _v ] [106])) "drivers/chr_drv/serial.c":42:5 77 {*movqi_internal}
     (nil))
(insn 36 33 37 2 (set (reg:QI 0 ax [orig:93 _15 ] [93])
        (mem/c:QI (plus:SI (reg/f:SI 7 sp)
                (const_int 15 [0xf])) [0 _v+0 S1 A8])) "drivers/chr_drv/serial.c":42:5 77 {*movqi_internal}
     (nil))
(insn 37 36 38 2 (set (reg:SI 0 ax [orig:91 _9 ] [91])
        (zero_extend:SI (reg:QI 0 ax [orig:93 _15 ] [93]))) "drivers/chr_drv/serial.c":42:5 143 {*zero_extendqisi2}
     (nil))
(insn 38 37 39 2 (parallel [
            (set (reg:SI 0 ax [orig:92 _10 ] [92])
                (and:SI (reg:SI 0 ax [orig:91 _9 ] [91])
                    (const_int 231 [0xe7])))
            (clobber (reg:CC 17 flags))
        ]) "drivers/chr_drv/serial.c":42:5 490 {*andsi_1}
     (nil))
(insn 39 38 40 2 (set (reg:SI 1 dx [108])
        (const_int 33 [0x21])) "drivers/chr_drv/serial.c":42:5 75 {*movsi_internal}
     (nil))
(insn 40 39 43 2 (parallel [
            (asm_operands/v ("outb %%al, %%dx") ("") 0 [
                    (reg:SI 0 ax [orig:92 _10 ] [92])
                    (reg:SI 1 dx [108])
                ]
                 [
                    (asm_input:SI ("a") drivers/chr_drv/serial.c:42)
                    (asm_input:SI ("d") drivers/chr_drv/serial.c:42)
                ]
                 [] drivers/chr_drv/serial.c:42)
            (clobber (reg:CC 17 flags))
        ]) "drivers/chr_drv/serial.c":42:5 -1
     (nil))
(note 43 40 44 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 46 3 (const_int 0 [0]) "drivers/chr_drv/serial.c":43:1 843 {nop}
     (nil))
(note 46 44 0 NOTE_INSN_DELETED)
