
;; Function oom (oom, funcdef_no=1, decl_uid=1336, cgraph_uid=2, symbol_order=3)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 5:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) Ts {*leasi} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 10:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 11:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 15:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2 3

********** Pseudo live ranges #1: **********

  BB 3
   Insn 19: point = 0, n_alt = -1
  BB 2
   Insn 15: point = 0, n_alt = 0
   Insn 14: point = 0, n_alt = 0
   Insn 13: point = 0, n_alt = -2
   Insn 12: point = 1, n_alt = 0
   Insn 11: point = 1, n_alt = 0
   Insn 10: point = 1, n_alt = 0
   Insn 9: point = 1, n_alt = 0
   Insn 8: point = 1, n_alt = -2
   Insn 7: point = 1, n_alt = 0
   Insn 6: point = 2, n_alt = 0
   Insn 5: point = 3, n_alt = 0
   Insn 20: point = 3, n_alt = 0
 r82: [0..3]
 r83: [1..2]
Compressing live ranges: from 4 to 2 - 50%
Ranges after the compression:
 r82: [0..1]
 r83: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=16)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
changing reg in insn 20
changing reg in insn 13
changing reg in insn 8
changing reg in insn 6
changing reg in insn 6
changing reg in insn 7
deleting insn with uid = 8.
deleting insn with uid = 13.
starting the processing of deferred insns
ending the processing of deferred insns


oom

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0 [ax] 3 [bx] 7 [sp] 17 [flags]
;;  ref usage 	r0={4d,1u} r1={3d} r2={3d} r3={1d,3u} r7={7d,15u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={7d} r18={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} 
;;    total ref usage 174{155d,19u,0e} in 11{9 regular + 2 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 20 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 20 3 2 2 (parallel [
            (set (reg:SI 3 bx [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 20 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":34:2 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 6 5 7 2 (set (reg/f:SI 0 ax [83])
        (plus:SI (reg:SI 3 bx [82])
            (const:SI (unspec:SI [
                        (symbol_ref/f:SI ("*.LC0") [flags 0x2]  <var_decl 0x7b517d59d480 *.LC0>)
                    ] UNSPEC_GOTOFF)))) "mm/memory.c":34:2 205 {*leasi}
     (expr_list:REG_EQUAL (symbol_ref/f:SI ("*.LC0") [flags 0x2]  <var_decl 0x7b517d59d480 *.LC0>)
        (nil)))
(insn 7 6 9 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [15  S4 A32])
        (reg/f:SI 0 ax [83])) "mm/memory.c":34:2 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 9 7 10 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("printk") [flags 0x41]  <function_decl 0x7b517d4d2700 printk>) [0 printk S1 A8])
            (const_int 16 [0x10]))) "mm/memory.c":34:2 823 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 10 9 11 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":34:2 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 11 10 12 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":35:2 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 12 11 14 2 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (const_int 11 [0xb])) "mm/memory.c":35:2 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 14 12 15 2 (call (mem:QI (symbol_ref:SI ("do_exit") [flags 0x41]  <function_decl 0x7b517d537e00 do_exit>) [0 do_exit S1 A8])
        (const_int 16 [0x10])) "mm/memory.c":35:2 812 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 15 14 18 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":35:2 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(note 18 15 19 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 19 18 21 3 (const_int 0 [0]) "mm/memory.c":36:1 843 {nop}
     (nil))
(note 21 19 0 NOTE_INSN_DELETED)

;; Function mem_init (mem_init, funcdef_no=2, decl_uid=1340, cgraph_uid=3, symbol_order=4)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=20, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) Ts {*leasi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 13
	 Choosing alt 0 in insn 13:  (0) =rm  (1) %0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 14:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 15:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 25:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =rm  (1) 0  (2) re {*subsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=21,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 35:  (0) r  (1) r  (2) le {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 36:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 37:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=21,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 41:  (0) r  (1) r  (2) le {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 42:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) r {*cmpsi_ccno_1}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4 5
EBB 6
EBB 7 9 8 10

********** Pseudo live ranges #1: **********

  BB 10
   Insn 58: point = 0, n_alt = -1
  BB 8
  BB 9
   Insn 56: point = 0, n_alt = -1
  BB 7
   Insn 47: point = 0, n_alt = -1
   Insn 46: point = 0, n_alt = 0
   Insn 42: point = 1, n_alt = 1
   Insn 41: point = 2, n_alt = 3
   Insn 40: point = 3, n_alt = 0
  BB 5
   Insn 53: point = 5, n_alt = -1
   Insn 30: point = 5, n_alt = 0
   Insn 29: point = 5, n_alt = 0
   Insn 28: point = 6, n_alt = 0
   Insn 27: point = 7, n_alt = 1
   Insn 26: point = 8, n_alt = 0
   Insn 25: point = 10, n_alt = 0
   Insn 24: point = 12, n_alt = 0
  BB 4
   Insn 22: point = 14, n_alt = -1
   Insn 21: point = 14, n_alt = 0
  BB 2
   Insn 51: point = 15, n_alt = -1
   Insn 7: point = 15, n_alt = 1
   Insn 6: point = 15, n_alt = 1
   Insn 5: point = 16, n_alt = 0
   Insn 59: point = 17, n_alt = 0
  BB 3
   Insn 15: point = 18, n_alt = 0
   Insn 14: point = 18, n_alt = 8
   Insn 13: point = 19, n_alt = 0
   Insn 12: point = 21, n_alt = 0
   Insn 11: point = 22, n_alt = 0
  BB 6
   Insn 37: point = 24, n_alt = 8
   Insn 36: point = 25, n_alt = 1
   Insn 35: point = 26, n_alt = 3
   Insn 34: point = 27, n_alt = 0
 r82: [0..28]
 r83: [9..10]
 r84: [24..27]
 r85: [0..3]
 r86: [15..16]
 r87: [20..22]
 r88: [20..21]
 r89: [18..19]
 r90: [11..12]
 r91: [7..8]
 r92: [5..6]
 r93: [25..26]
 r94: [1..2]
Compressing live ranges: from 29 to 18 - 62%
Ranges after the compression:
 r82: [0..17]
 r83: [6..7]
 r84: [16..17]
 r85: [0..1]
 r86: [10..11]
 r87: [14..15]
 r88: [14..15]
 r89: [12..13]
 r90: [8..9]
 r91: [4..5]
 r92: [2..3]
 r93: [16..17]
 r94: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=20, prev_offset=20)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=16)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 59
changing reg in insn 37
changing reg in insn 11
changing reg in insn 6
changing reg in insn 25
changing reg in insn 26
changing reg in insn 34
changing reg in insn 37
changing reg in insn 35
changing reg in insn 40
changing reg in insn 46
changing reg in insn 41
changing reg in insn 5
changing reg in insn 6
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 24
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 29
changing reg in insn 35
changing reg in insn 36
changing reg in insn 41
changing reg in insn 42
starting the processing of deferred insns
ending the processing of deferred insns


mem_init

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 17 [flags]
;;  ref usage 	r0={2d,3u} r1={10d,11u} r2={4d,3u} r7={1d,27u} r16={1e} r17={11d,2u} 
;;    total ref usage 75{28d,46u,1e} in 31{31 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 59 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 59 3 2 2 (parallel [
            (set (reg:SI 0 ax [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 59 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:SI 1 dx [86])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [1 end_mem+0 S4 A32])) "mm/memory.c":45:17 75 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/c:SI (plus:SI (reg:SI 0 ax [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("HIGH_MEMORY") [flags 0x2]  <var_decl 0x7b517d52f510 HIGH_MEMORY>)
                        ] UNSPEC_GOTOFF))) [1 HIGH_MEMORY+0 S4 A32])
        (reg:SI 1 dx [86])) "mm/memory.c":45:17 75 {*movsi_internal}
     (nil))
(insn 7 6 51 2 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [2 i+0 S4 A32])
        (const_int 0 [0])) "mm/memory.c":47:12 75 {*movsi_internal}
     (nil))
(jump_insn 51 7 52 2 (set (pc)
        (label_ref 16)) "mm/memory.c":47:5 807 {jump}
     (nil)
 -> 16)
(barrier 52 51 18)
(code_label 18 52 10 3 4 (nil) [1 uses])
(note 10 18 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (reg:SI 2 cx [87])
        (plus:SI (reg:SI 0 ax [82])
            (const:SI (unspec:SI [
                        (symbol_ref:SI ("mem_map") [flags 0x2]  <var_decl 0x7b517d52f5a0 mem_map>)
                    ] UNSPEC_GOTOFF)))) "mm/memory.c":49:20 205 {*leasi}
     (nil))
(insn 12 11 13 3 (set (reg:SI 1 dx [88])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [2 i+0 S4 A32])) "mm/memory.c":49:20 75 {*movsi_internal}
     (nil))
(insn 13 12 14 3 (parallel [
            (set (reg/f:SI 1 dx [89])
                (plus:SI (reg:SI 1 dx [88])
                    (reg:SI 2 cx [87])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":49:20 209 {*addsi_1}
     (nil))
(insn 14 13 15 3 (set (mem:QI (reg/f:SI 1 dx [89]) [0 mem_map[i_5]+0 S1 A8])
        (const_int 100 [0x64])) "mm/memory.c":49:20 77 {*movqi_internal}
     (nil))
(insn 15 14 16 3 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 12 [0xc])) [2 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 12 [0xc])) [2 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":47:36 209 {*addsi_1}
     (nil))
(code_label 16 15 17 4 3 (nil) [1 uses])
(note 17 16 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 21 17 22 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 12 [0xc])) [2 i+0 S4 A32])
            (const_int 3839 [0xeff]))) "mm/memory.c":47:19 11 {*cmpsi_1}
     (nil))
(jump_insn 22 21 23 4 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 18)
            (pc))) "mm/memory.c":47:19 806 {*jcc}
     (nil)
 -> 18)
(note 23 22 24 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 25 5 (set (reg:SI 1 dx [90])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [1 start_mem+0 S4 A32])) "mm/memory.c":51:9 75 {*movsi_internal}
     (nil))
(insn 25 24 26 5 (parallel [
            (set (reg:SI 1 dx [orig:83 _1 ] [83])
                (plus:SI (reg:SI 1 dx [90])
                    (const_int -1048576 [0xfffffffffff00000])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":51:9 209 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (reg/f:SI 16 argp) [1 start_mem+0 S4 A32])
            (const_int -1048576 [0xfffffffffff00000]))
        (nil)))
(insn 26 25 27 5 (parallel [
            (set (reg:SI 1 dx [91])
                (ashiftrt:SI (reg:SI 1 dx [orig:83 _1 ] [83])
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":51:7 702 {*ashrsi3_1}
     (nil))
(insn 27 26 28 5 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [2 i+0 S4 A32])
        (reg:SI 1 dx [91])) "mm/memory.c":51:7 75 {*movsi_internal}
     (nil))
(insn 28 27 29 5 (set (reg:SI 1 dx [92])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [1 start_mem+0 S4 A32])) "mm/memory.c":53:13 75 {*movsi_internal}
     (nil))
(insn 29 28 30 5 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 24 [0x18])) [1 end_mem+0 S4 A32])
                (minus:SI (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 24 [0x18])) [1 end_mem+0 S4 A32])
                    (reg:SI 1 dx [92])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":53:13 282 {*subsi_1}
     (nil))
(insn 30 29 53 5 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 24 [0x18])) [1 end_mem+0 S4 A32])
                (ashiftrt:SI (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 24 [0x18])) [1 end_mem+0 S4 A32])
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":55:13 702 {*ashrsi3_1}
     (nil))
(jump_insn 53 30 54 5 (set (pc)
        (label_ref 38)) "mm/memory.c":56:11 807 {jump}
     (nil)
 -> 38)
(barrier 54 53 43)
(code_label 43 54 33 6 6 (nil) [1 uses])
(note 33 43 34 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 34 33 35 6 (set (reg:SI 1 dx [orig:84 i.0_2 ] [84])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [2 i+0 S4 A32])) "mm/memory.c":58:18 75 {*movsi_internal}
     (nil))
(insn 35 34 36 6 (parallel [
            (set (reg:SI 2 cx [93])
                (plus:SI (reg:SI 1 dx [orig:84 i.0_2 ] [84])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":58:18 209 {*addsi_1}
     (nil))
(insn 36 35 37 6 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [2 i+0 S4 A32])
        (reg:SI 2 cx [93])) "mm/memory.c":58:18 75 {*movsi_internal}
     (nil))
(insn 37 36 38 6 (set (mem:QI (plus:SI (plus:SI (reg:SI 0 ax [82])
                    (reg:SI 1 dx [orig:84 i.0_2 ] [84]))
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("mem_map") [flags 0x2]  <var_decl 0x7b517d52f5a0 mem_map>)
                        ] UNSPEC_GOTOFF))) [0 mem_map[i.0_2]+0 S1 A8])
        (const_int 0 [0])) "mm/memory.c":58:22 77 {*movqi_internal}
     (nil))
(code_label 38 37 39 7 5 (nil) [1 uses])
(note 39 38 40 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 40 39 41 7 (set (reg:SI 1 dx [orig:85 end_mem.1_3 ] [85])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [1 end_mem+0 S4 A32])) "mm/memory.c":56:19 75 {*movsi_internal}
     (nil))
(insn 41 40 42 7 (parallel [
            (set (reg:SI 2 cx [94])
                (plus:SI (reg:SI 1 dx [orig:85 end_mem.1_3 ] [85])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":56:19 209 {*addsi_1}
     (nil))
(insn 42 41 46 7 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [1 end_mem+0 S4 A32])
        (reg:SI 2 cx [94])) "mm/memory.c":56:19 75 {*movsi_internal}
     (nil))
(insn 46 42 47 7 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:SI 1 dx [orig:85 end_mem.1_3 ] [85])
            (const_int 0 [0]))) "mm/memory.c":56:22 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 47 46 55 7 (set (pc)
        (if_then_else (gt (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 43)
            (pc))) "mm/memory.c":56:22 806 {*jcc}
     (nil)
 -> 43)
(note 55 47 56 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 56 55 48 9 (const_int 0 [0]) "mm/memory.c":59:1 843 {nop}
     (nil))
(note 48 56 57 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(note 57 48 58 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 58 57 60 10 (const_int 0 [0]) "mm/memory.c":59:1 843 {nop}
     (nil))
(note 60 58 0 NOTE_INSN_DELETED)

;; Function get_free_page (get_free_page, funcdef_no=3, decl_uid=1351, cgraph_uid=4, symbol_order=5)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=4, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) Ts {*leasi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
            4 Small class reload: reject+=3
          alt=0,overall=9,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 8:  (0) =a  (1) 0  (2) i  (3) c  (4) D
      Creating newreg=90 from oldreg=83, assigning class DIREG to r90
    8: {ax:SI=asm_operands;clobber flags:CC;}
      REG_DEAD r87:SI
      REG_DEAD r83:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
   22: r90:SI=r83:SI

	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 17: point = 0, n_alt = -1
   Insn 16: point = 0, n_alt = -2
   Insn 12: point = 1, n_alt = -2
   Insn 9: point = 3, n_alt = -2
   Insn 8: point = 4, n_alt = 0
   Insn 22: point = 5, n_alt = -2
	Hard reg 1 is preferable by r90 with profit 1000
   Insn 19: point = 7, n_alt = -2
   Insn 7: point = 8, n_alt = 0
   Insn 6: point = 9, n_alt = 0
   Insn 5: point = 10, n_alt = 0
   Insn 20: point = 12, n_alt = 0
 r82: [11..12]
 r83: [6..10]
 r84: [2..3]
 r85: [0..1]
 r86: [7..9]
 r87: [4..8]
 r90: [4..5]
Compressing live ranges: from 13 to 10 - 76%
Ranges after the compression:
 r82: [8..9]
 r83: [6..7]
 r84: [2..3]
 r85: [0..1]
 r86: [6..7]
 r87: [4..7]
 r90: [4..5]

********** Assignment #1: **********

	 Assigning to 90 (cl=DIREG, orig=83, freq=2000, tfirst=90, tfreq=2000)...
	   Assign 5 to reload r90 (freq=2000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=4)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-4, prev_offset=0)
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=8)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-4, prev_offset=0)
changing reg in insn 20
changing reg in insn 5
changing reg in insn 5
changing reg in insn 9
changing reg in insn 12
changing reg in insn 12
changing reg in insn 16
changing reg in insn 6
changing reg in insn 19
changing reg in insn 7
changing reg in insn 8
deleting insn with uid = 19.
deleting insn with uid = 9.
deleting insn with uid = 12.
deleting insn with uid = 16.
starting the processing of deferred insns
ending the processing of deferred insns


get_free_page

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 5 [di] 17 [flags]
;;  ref usage 	r0={4d,4u} r1={2d,1u} r2={2d,1u} r5={1d,1u} r7={1d,2u} r17={2d} 
;;    total ref usage 21{12d,9u,0e} in 7{7 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 20 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 20 3 2 2 (parallel [
            (set (reg:SI 0 ax [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 20 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 1 dx [orig:83 _1 ] [83])
        (plus:SI (reg:SI 0 ax [82])
            (const:SI (plus:SI (unspec:SI [
                            (symbol_ref:SI ("mem_map") [flags 0x2]  <var_decl 0x7b517d52f5a0 mem_map>)
                        ] UNSPEC_GOTOFF)
                    (const_int 3839 [0xeff]))))) "mm/memory.c":137:34 205 {*leasi}
     (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("mem_map") [flags 0x2]  <var_decl 0x7b517d52f5a0 mem_map>)
                (const_int 3839 [0xeff])))
        (nil)))
(insn 6 5 7 2 (set (reg:SI 0 ax [86])
        (const_int 0 [0])) "mm/memory.c":119:2 75 {*movsi_internal}
     (nil))
(insn 7 6 22 2 (set (reg:SI 2 cx [87])
        (const_int 3840 [0xf00])) "mm/memory.c":119:2 75 {*movsi_internal}
     (nil))
(insn 22 7 8 2 (set (reg/f:SI 5 di [orig:83 _1 ] [83])
        (reg/f:SI 1 dx [orig:83 _1 ] [83])) "mm/memory.c":119:2 75 {*movsi_internal}
     (nil))
(insn 8 22 17 2 (parallel [
            (set (reg/v:SI 0 ax [ __res ])
                (asm_operands:SI ("std ; repne ; scasb
	jne 1f
	movb $1, 1(%%edi)
	sall $12, %%ecx
	addl %2, %%ecx
	movl %%ecx, %%edx
	movl $1024, %%ecx
	leal 4092(%%edx), %%edi
	rep ; stosl
	movl %%edx, %%eax
1:cld") ("=a") 0 [
                        (reg/v:SI 0 ax [ __res ])
                        (const_int 1048576 [0x100000])
                        (reg:SI 2 cx [87])
                        (reg/f:SI 5 di [orig:83 _1 ] [83])
                    ]
                     [
                        (asm_input:SI ("0") mm/memory.c:119)
                        (asm_input:SI ("i") mm/memory.c:119)
                        (asm_input:SI ("c") mm/memory.c:119)
                        (asm_input:SI ("D") mm/memory.c:119)
                    ]
                     [] mm/memory.c:119))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":119:2 -1
     (nil))
(insn 17 8 21 2 (use (reg/i:SI 0 ax)) "mm/memory.c":140:1 -1
     (nil))
(note 21 17 0 NOTE_INSN_DELETED)

;; Function free_page (free_page, funcdef_no=4, decl_uid=1355, cgraph_uid=5, symbol_order=6)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 19:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) Ts {*leasi} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 24:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 27:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) Ts {*leasi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 31
	 Choosing alt 0 in insn 31:  (0) =rm  (1) %0  (2) re {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 32:  (0) q  (1) m {*movqi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=21,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
          alt=3,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=4,overall=11,losers=1 -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=9,losers=1 -- refuse
	 Choosing alt 5 in insn 33:  (0) Yp  (1) Yp  (2) ln {*addqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =r  (1) Ts {*leasi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 36
	 Choosing alt 0 in insn 36:  (0) =rm  (1) %0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=7,overall=27,losers=2 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 37:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =r  (1) Ts {*leasi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 47
	 Choosing alt 0 in insn 47:  (0) =rm  (1) %0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 48:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 49:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =r  (1) Ts {*leasi} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 54:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2 3 4
EBB 5 6
EBB 8
EBB 9
EBB 7

********** Pseudo live ranges #1: **********

  BB 7
  BB 8
   Insn 64: point = 0, n_alt = -1
   Insn 63: point = 0, n_alt = -1
  BB 6
   Insn 59: point = 0, n_alt = -1
   Insn 54: point = 0, n_alt = 0
   Insn 53: point = 0, n_alt = 0
   Insn 52: point = 0, n_alt = -2
   Insn 51: point = 1, n_alt = 0
   Insn 50: point = 2, n_alt = 0
   Insn 49: point = 3, n_alt = 0
   Insn 48: point = 3, n_alt = 8
   Insn 47: point = 4, n_alt = 0
   Insn 46: point = 6, n_alt = 0
   Insn 45: point = 7, n_alt = 0
  BB 9
   Insn 68: point = 9, n_alt = -1
  BB 5
   Insn 39: point = 9, n_alt = -1
   Insn 38: point = 9, n_alt = 0
   Insn 37: point = 10, n_alt = 8
   Insn 36: point = 11, n_alt = 0
   Insn 35: point = 13, n_alt = 0
   Insn 34: point = 14, n_alt = 0
   Insn 33: point = 15, n_alt = 5
   Insn 32: point = 16, n_alt = 4
   Insn 31: point = 18, n_alt = 0
   Insn 30: point = 20, n_alt = 0
   Insn 29: point = 21, n_alt = 0
   Insn 28: point = 22, n_alt = 0
   Insn 27: point = 22, n_alt = 0
  BB 4
   Insn 24: point = 23, n_alt = 0
   Insn 23: point = 23, n_alt = 0
   Insn 22: point = 23, n_alt = -2
   Insn 21: point = 23, n_alt = 0
   Insn 20: point = 24, n_alt = 0
   Insn 19: point = 25, n_alt = 0
  BB 3
   Insn 17: point = 26, n_alt = -1
   Insn 16: point = 26, n_alt = 0
   Insn 15: point = 27, n_alt = -2
   Insn 14: point = 29, n_alt = 0
  BB 2
   Insn 8: point = 31, n_alt = -1
   Insn 7: point = 31, n_alt = 0
   Insn 69: point = 31, n_alt = 0
 r82: [0..31]
 r83: [28..29]
 r84: [26..27]
 r85: [9..16]
 r86: [10..15]
 r87: [23..24]
 r88: [19..21]
 r89: [19..20]
 r90: [17..18]
 r91: [12..14]
 r92: [12..13]
 r93: [10..11]
 r94: [5..7]
 r95: [5..6]
 r96: [3..4]
 r97: [1..2]
Compressing live ranges: from 32 to 20 - 62%
Ranges after the compression:
 r82: [0..19]
 r83: [18..19]
 r84: [16..17]
 r85: [6..9]
 r86: [6..9]
 r87: [14..15]
 r88: [12..13]
 r89: [12..13]
 r90: [10..11]
 r91: [8..9]
 r92: [8..9]
 r93: [6..7]
 r94: [4..5]
 r95: [4..5]
 r96: [2..3]
 r97: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=16)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
changing reg in insn 69
changing reg in insn 52
changing reg in insn 50
changing reg in insn 45
changing reg in insn 34
changing reg in insn 29
changing reg in insn 22
changing reg in insn 20
changing reg in insn 14
changing reg in insn 14
changing reg in insn 15
changing reg in insn 15
changing reg in insn 16
changing reg in insn 32
changing reg in insn 38
changing reg in insn 33
changing reg in insn 33
changing reg in insn 37
changing reg in insn 20
changing reg in insn 21
changing reg in insn 29
changing reg in insn 30
changing reg in insn 31
changing reg in insn 32
changing reg in insn 34
changing reg in insn 35
changing reg in insn 36
changing reg in insn 37
changing reg in insn 45
changing reg in insn 46
changing reg in insn 47
changing reg in insn 48
changing reg in insn 50
changing reg in insn 51
deleting insn with uid = 15.
deleting insn with uid = 22.
deleting insn with uid = 52.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 23.
verify found no changes in insn with uid = 53.


free_page

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 17 [flags]
;;  ref usage 	r0={11d,9u} r1={6d,3u} r2={5d,2u} r3={1d,8u} r4={1d,1u} r7={7d,30u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={16d,3u} r18={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} 
;;    total ref usage 233{177d,56u,0e} in 37{35 regular + 2 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 69 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 69 3 2 2 (parallel [
            (set (reg:SI 3 bx [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 69 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 2 8 2 (set (reg:CC 17 flags)
        (compare:CC (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])) [1 addr+0 S4 A32])
            (const_int 1048575 [0xfffff]))) "mm/memory.c":148:5 11 {*cmpsi_1}
     (nil))
(jump_insn 8 7 13 2 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 62)
            (pc))) "mm/memory.c":148:5 806 {*jcc}
     (nil)
 -> 62)
(note 13 8 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 16 3 (set (reg:SI 0 ax [orig:83 HIGH_MEMORY.2_1 ] [83])
        (mem/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("HIGH_MEMORY") [flags 0x2]  <var_decl 0x7b517d52f510 HIGH_MEMORY>)
                        ] UNSPEC_GOTOFF))) [1 HIGH_MEMORY+0 S4 A32])) "mm/memory.c":150:11 75 {*movsi_internal}
     (nil))
(insn 16 14 17 3 (set (reg:CC 17 flags)
        (compare:CC (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])) [1 addr+0 S4 A32])
            (reg:SI 0 ax [orig:84 HIGH_MEMORY.3_2 ] [84]))) "mm/memory.c":150:5 11 {*cmpsi_1}
     (nil))
(jump_insn 17 16 18 3 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 25)
            (pc))) "mm/memory.c":150:5 806 {*jcc}
     (nil)
 -> 25)
(note 18 17 19 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 19 18 20 4 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":151:3 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 20 19 21 4 (set (reg/f:SI 0 ax [87])
        (plus:SI (reg:SI 3 bx [82])
            (const:SI (unspec:SI [
                        (symbol_ref/f:SI ("*.LC1") [flags 0x2]  <var_decl 0x7b517d59d5a0 *.LC1>)
                    ] UNSPEC_GOTOFF)))) "mm/memory.c":151:3 205 {*leasi}
     (expr_list:REG_EQUAL (symbol_ref/f:SI ("*.LC1") [flags 0x2]  <var_decl 0x7b517d59d5a0 *.LC1>)
        (nil)))
(insn 21 20 23 4 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [15  S4 A32])
        (reg/f:SI 0 ax [87])) "mm/memory.c":151:3 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 23 21 24 4 (call (mem:QI (symbol_ref:SI ("panic") [flags 0x41]  <function_decl 0x7b517d4d2900 panic>) [0 panic S1 A8])
        (const_int 16 [0x10])) "mm/memory.c":151:3 812 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 24 23 25 4 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":151:3 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(code_label 25 24 26 5 12 (nil) [1 uses])
(note 26 25 27 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 27 26 28 5 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 16 [0x10])) [1 addr+0 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 16 [0x10])) [1 addr+0 S4 A32])
                    (const_int -1048576 [0xfffffffffff00000])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":152:7 209 {*addsi_1}
     (nil))
(insn 28 27 29 5 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 16 [0x10])) [1 addr+0 S4 A32])
                (lshiftrt:SI (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 16 [0x10])) [1 addr+0 S4 A32])
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":153:7 701 {*lshrsi3_1}
     (nil))
(insn 29 28 30 5 (set (reg:SI 1 dx [88])
        (plus:SI (reg:SI 3 bx [82])
            (const:SI (unspec:SI [
                        (symbol_ref:SI ("mem_map") [flags 0x2]  <var_decl 0x7b517d52f5a0 mem_map>)
                    ] UNSPEC_GOTOFF)))) "mm/memory.c":154:13 205 {*leasi}
     (nil))
(insn 30 29 31 5 (set (reg:SI 0 ax [89])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [1 addr+0 S4 A32])) "mm/memory.c":154:13 75 {*movsi_internal}
     (nil))
(insn 31 30 32 5 (parallel [
            (set (reg/f:SI 0 ax [90])
                (plus:SI (reg:SI 0 ax [89])
                    (reg:SI 1 dx [88])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":154:13 209 {*addsi_1}
     (nil))
(insn 32 31 33 5 (set (reg:QI 0 ax [orig:85 _3 ] [85])
        (mem:QI (reg/f:SI 0 ax [90]) [0 mem_map[addr_12]+0 S1 A8])) "mm/memory.c":154:13 77 {*movqi_internal}
     (nil))
(insn 33 32 34 5 (parallel [
            (set (reg:QI 1 dx [orig:86 _5 ] [86])
                (plus:QI (reg:QI 0 ax [orig:85 _3 ] [85])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":154:19 213 {*addqi_1}
     (nil))
(insn 34 33 35 5 (set (reg:SI 4 si [91])
        (plus:SI (reg:SI 3 bx [82])
            (const:SI (unspec:SI [
                        (symbol_ref:SI ("mem_map") [flags 0x2]  <var_decl 0x7b517d52f5a0 mem_map>)
                    ] UNSPEC_GOTOFF)))) "mm/memory.c":154:19 205 {*leasi}
     (nil))
(insn 35 34 36 5 (set (reg:SI 2 cx [92])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [1 addr+0 S4 A32])) "mm/memory.c":154:19 75 {*movsi_internal}
     (nil))
(insn 36 35 37 5 (parallel [
            (set (reg/f:SI 2 cx [93])
                (plus:SI (reg:SI 2 cx [92])
                    (reg:SI 4 si [91])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":154:19 209 {*addsi_1}
     (nil))
(insn 37 36 38 5 (set (mem:QI (reg/f:SI 2 cx [93]) [0 mem_map[addr_12]+0 S1 A8])
        (reg:QI 1 dx [orig:86 _5 ] [86])) "mm/memory.c":154:19 77 {*movqi_internal}
     (nil))
(insn 38 37 39 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:85 _3 ] [85])
            (const_int 0 [0]))) "mm/memory.c":154:5 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 39 38 44 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 67)
            (pc))) "mm/memory.c":154:5 806 {*jcc}
     (nil)
 -> 67)
(note 44 39 45 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 45 44 46 6 (set (reg:SI 1 dx [94])
        (plus:SI (reg:SI 3 bx [82])
            (const:SI (unspec:SI [
                        (symbol_ref:SI ("mem_map") [flags 0x2]  <var_decl 0x7b517d52f5a0 mem_map>)
                    ] UNSPEC_GOTOFF)))) "mm/memory.c":156:16 205 {*leasi}
     (nil))
(insn 46 45 47 6 (set (reg:SI 0 ax [95])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [1 addr+0 S4 A32])) "mm/memory.c":156:16 75 {*movsi_internal}
     (nil))
(insn 47 46 48 6 (parallel [
            (set (reg/f:SI 0 ax [96])
                (plus:SI (reg:SI 0 ax [95])
                    (reg:SI 1 dx [94])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":156:16 209 {*addsi_1}
     (nil))
(insn 48 47 49 6 (set (mem:QI (reg/f:SI 0 ax [96]) [0 mem_map[addr_12]+0 S1 A8])
        (const_int 0 [0])) "mm/memory.c":156:16 77 {*movqi_internal}
     (nil))
(insn 49 48 50 6 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":157:2 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 50 49 51 6 (set (reg/f:SI 0 ax [97])
        (plus:SI (reg:SI 3 bx [82])
            (const:SI (unspec:SI [
                        (symbol_ref/f:SI ("*.LC2") [flags 0x2]  <var_decl 0x7b517d59d630 *.LC2>)
                    ] UNSPEC_GOTOFF)))) "mm/memory.c":157:2 205 {*leasi}
     (expr_list:REG_EQUAL (symbol_ref/f:SI ("*.LC2") [flags 0x2]  <var_decl 0x7b517d59d630 *.LC2>)
        (nil)))
(insn 51 50 53 6 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [15  S4 A32])
        (reg/f:SI 0 ax [97])) "mm/memory.c":157:2 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 53 51 54 6 (call (mem:QI (symbol_ref:SI ("panic") [flags 0x41]  <function_decl 0x7b517d4d2900 panic>) [0 panic S1 A8])
        (const_int 16 [0x10])) "mm/memory.c":157:2 812 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 54 53 59 6 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":157:2 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(jump_insn 59 54 60 6 (set (pc)
        (label_ref 57)) 807 {jump}
     (nil)
 -> 57)
(barrier 60 59 62)
(code_label 62 60 61 8 14 (nil) [1 uses])
(note 61 62 63 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 63 61 64 8 (const_int 0 [0]) "mm/memory.c":149:3 843 {nop}
     (nil))
(jump_insn 64 63 65 8 (set (pc)
        (label_ref 57)) 807 {jump}
     (nil)
 -> 57)
(barrier 65 64 67)
(code_label 67 65 66 9 15 (nil) [1 uses])
(note 66 67 68 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 68 66 57 9 (const_int 0 [0]) "mm/memory.c":155:3 843 {nop}
     (nil))
(code_label 57 68 58 7 9 (nil) [2 uses])
(note 58 57 70 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(note 70 58 0 NOTE_INSN_DELETED)

;; Function copy_page_tables (copy_page_tables, funcdef_no=5, decl_uid=1320, cgraph_uid=6, symbol_order=7)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=32, prev_offset=0)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 191:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 6:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 11:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 16:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) Ts {*leasi} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 21:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 26:  (0) =rm  (1) %0  (2) re {*andsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 30:  (0) =rm  (1) %0  (2) re {*andsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 31:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 33:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 36:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 42:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 46:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =r  (1) Ts {*leasi} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 51:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 56:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 66:  (0) =rm  (1) %0  (2) re {*andsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 67:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (1) lBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 70:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 71:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 80:  (0) =rm  (1) %0  (2) re {*iorsi_1}
      Creating newreg=138 from oldreg=99, assigning class GENERAL_REGS to r138
   80: {r138:SI=r138:SI|0x7;clobber flags:CC;}
      REG_DEAD r99:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  193: r138:SI=r99:SI
    Inserting insn reload after:
  194: r100:SI=r138:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 82:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 83:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 94:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 100:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 102:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 110:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 113:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 116:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 119:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 120:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 121:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 122:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 123:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 124:  (0) =r  (1) Ts {*leasi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 125:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 126
	 Choosing alt 0 in insn 126:  (0) =rm  (1) %0  (2) re {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 127:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=4,overall=11,losers=1 -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=9,losers=1 -- refuse
	 Choosing alt 5 in insn 128:  (0) Yp  (1) Yp  (2) ln {*addqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 129:  (0) =r  (1) Ts {*leasi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 130:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 131
	 Choosing alt 0 in insn 131:  (0) =rm  (1) %0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=7,overall=27,losers=2 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 132:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 135:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 136:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 139:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=21,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 140:  (0) r  (1) r  (2) le {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 141:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 147:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 148:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 151:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=21,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 152:  (0) r  (1) r  (2) le {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 153:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 157:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 160:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 161:  (0) a
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 162:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2 3
EBB 4
EBB 5
EBB 6 7
EBB 8 9 10
EBB 11 12
EBB 13
EBB 14
EBB 15 16 17
EBB 26
EBB 18
EBB 19 24
EBB 25
EBB 20
EBB 21 22
EBB 23

********** Pseudo live ranges #1: **********

  BB 23
   Insn 170: point = 0, n_alt = -1
   Insn 169: point = 0, n_alt = -2
   Insn 165: point = 1, n_alt = -2
  BB 10
   Insn 174: point = 4, n_alt = -1
   Insn 74: point = 4, n_alt = 0
  BB 22
   Insn 162: point = 5, n_alt = 0
   Insn 161: point = 6, n_alt = 0
   Insn 160: point = 7, n_alt = 0
  BB 21
   Insn 158: point = 8, n_alt = -1
   Insn 157: point = 8, n_alt = 0
   Insn 153: point = 9, n_alt = 1
   Insn 152: point = 10, n_alt = 3
   Insn 151: point = 11, n_alt = 0
  BB 5
   Insn 172: point = 13, n_alt = -1
   Insn 36: point = 13, n_alt = 1
   Insn 35: point = 14, n_alt = 0
   Insn 34: point = 16, n_alt = -2
   Insn 33: point = 18, n_alt = 0
   Insn 32: point = 20, n_alt = 0
   Insn 31: point = 21, n_alt = 1
   Insn 30: point = 22, n_alt = 0
   Insn 29: point = 24, n_alt = 0
   Insn 28: point = 26, n_alt = 0
   Insn 27: point = 27, n_alt = 1
   Insn 26: point = 28, n_alt = 0
   Insn 25: point = 30, n_alt = 0
   Insn 24: point = 32, n_alt = 0
  BB 4
   Insn 21: point = 34, n_alt = 0
   Insn 20: point = 34, n_alt = 0
   Insn 19: point = 34, n_alt = -2
   Insn 18: point = 34, n_alt = 0
   Insn 17: point = 35, n_alt = 0
   Insn 16: point = 36, n_alt = 0
  BB 3
   Insn 13: point = 37, n_alt = -1
   Insn 12: point = 37, n_alt = 0
   Insn 11: point = 38, n_alt = 0
   Insn 10: point = 40, n_alt = 0
  BB 2
   Insn 8: point = 42, n_alt = -1
   Insn 7: point = 42, n_alt = 0
   Insn 6: point = 43, n_alt = 0
   Insn 5: point = 45, n_alt = 0
   Insn 191: point = 46, n_alt = 0
  BB 20
   Insn 148: point = 47, n_alt = 0
   Insn 147: point = 47, n_alt = 0
  BB 24
   Insn 181: point = 48, n_alt = -1
  BB 19
   Insn 144: point = 49, n_alt = -1
   Insn 143: point = 49, n_alt = 0
   Insn 141: point = 50, n_alt = 1
   Insn 140: point = 51, n_alt = 3
   Insn 139: point = 52, n_alt = 0
  BB 14
   Insn 178: point = 54, n_alt = -1
   Insn 94: point = 54, n_alt = 1
  BB 12
   Insn 176: point = 56, n_alt = -1
   Insn 86: point = 56, n_alt = 0
  BB 13
   Insn 91: point = 58, n_alt = 0
  BB 11
   Insn 84: point = 60, n_alt = -1
   Insn 83: point = 60, n_alt = 1
   Insn 82: point = 60, n_alt = 1
   Insn 81: point = 61, n_alt = 0
   Insn 194: point = 62, n_alt = -2
	Hard reg 1 is preferable by r138 with profit 1000
   Insn 80: point = 64, n_alt = 0
   Insn 193: point = 65, n_alt = -2
	Hard reg 1 is preferable by r138 with profit 1000
	Hard reg 0 is preferable by r138 with profit 1000
   Insn 79: point = 67, n_alt = 0
  BB 9
   Insn 72: point = 69, n_alt = -1
   Insn 71: point = 69, n_alt = 1
   Insn 70: point = 69, n_alt = 1
   Insn 69: point = 70, n_alt = -2
   Insn 68: point = 71, n_alt = 0
   Insn 67: point = 71, n_alt = 1
   Insn 66: point = 72, n_alt = 0
   Insn 65: point = 74, n_alt = 0
   Insn 64: point = 76, n_alt = 0
  BB 18
   Insn 136: point = 78, n_alt = 0
   Insn 135: point = 78, n_alt = 0
  BB 17
   Insn 186: point = 79, n_alt = -1
   Insn 132: point = 79, n_alt = 8
   Insn 131: point = 80, n_alt = 0
   Insn 130: point = 82, n_alt = 0
   Insn 129: point = 83, n_alt = 0
   Insn 128: point = 84, n_alt = 5
   Insn 127: point = 86, n_alt = 4
   Insn 126: point = 88, n_alt = 0
   Insn 125: point = 90, n_alt = 0
   Insn 124: point = 91, n_alt = 0
   Insn 123: point = 92, n_alt = 0
   Insn 122: point = 92, n_alt = 0
   Insn 121: point = 92, n_alt = 1
   Insn 120: point = 93, n_alt = 0
   Insn 119: point = 94, n_alt = 0
  BB 16
   Insn 117: point = 96, n_alt = -1
   Insn 116: point = 96, n_alt = 0
   Insn 113: point = 96, n_alt = 1
   Insn 112: point = 97, n_alt = 0
   Insn 111: point = 98, n_alt = 0
   Insn 110: point = 99, n_alt = 0
  BB 26
   Insn 190: point = 100, n_alt = -1
  BB 15
   Insn 104: point = 101, n_alt = -1
   Insn 103: point = 101, n_alt = 0
   Insn 102: point = 102, n_alt = 0
   Insn 101: point = 104, n_alt = 0
   Insn 100: point = 105, n_alt = 1
   Insn 99: point = 106, n_alt = 0
   Insn 98: point = 108, n_alt = 0
  BB 25
   Insn 185: point = 110, n_alt = -1
  BB 8
   Insn 58: point = 111, n_alt = -1
   Insn 57: point = 111, n_alt = 0
   Insn 56: point = 112, n_alt = 0
   Insn 55: point = 114, n_alt = 0
   Insn 54: point = 116, n_alt = 0
  BB 7
   Insn 51: point = 118, n_alt = 0
   Insn 50: point = 118, n_alt = 0
   Insn 49: point = 118, n_alt = -2
   Insn 48: point = 118, n_alt = 0
   Insn 47: point = 119, n_alt = 0
   Insn 46: point = 120, n_alt = 0
  BB 6
   Insn 44: point = 121, n_alt = -1
   Insn 43: point = 121, n_alt = 0
   Insn 42: point = 122, n_alt = 0
   Insn 41: point = 124, n_alt = 0
   Insn 40: point = 126, n_alt = 0
 r82: [8..127]
 r83: [42..43]
 r84: [37..38]
 r85: [29..30]
 r86: [27..28]
 r87: [23..24]
 r88: [21..22]
 r89: [17..18]
 r90: [15..16]
 r91: [13..14]
 r92: [123..124]
 r93: [121..122]
 r94: [113..114]
 r95: [111..112]
 r96: [73..74]
 r97: [71..72]
 r98: [69..70]
 r99: [66..67]
 r100: [60..62]
 r101: [101..102]
 r102: [85..86]
 r103: [79..84]
 r104: [49..52]
 r105: [8..11]
 r106: [2..5]
 r107: [58..58] [54..56]
 r108: [0..1]
 r109: [44..45]
 r110: [39..40]
 r111: [34..35]
 r112: [31..32]
 r113: [25..26]
 r114: [19..20]
 r115: [125..126]
 r116: [118..119]
 r117: [115..116]
 r118: [75..76]
 r119: [60..61]
 r120: [107..108]
 r121: [105..106]
 r122: [103..104]
 r123: [96..98]
 r124: [96..97]
 r125: [92..94]
 r126: [92..93]
 r127: [89..91]
 r128: [89..90]
 r129: [87..88]
 r130: [81..83]
 r131: [81..82]
 r132: [79..80]
 r133: [50..51]
 r134: [9..10]
 r135: [6..7]
 r138: [63..65]
Compressing live ranges: from 128 to 93 - 72%
Ranges after the compression:
 r82: [6..92]
 r83: [34..35]
 r84: [30..31]
 r85: [24..25]
 r86: [22..23]
 r87: [18..19]
 r88: [16..17]
 r89: [12..13]
 r90: [10..11]
 r91: [8..9]
 r92: [89..90]
 r93: [87..88]
 r94: [81..82]
 r95: [79..80]
 r96: [53..54]
 r97: [51..52]
 r98: [49..50]
 r99: [47..48]
 r100: [43..44]
 r101: [71..72]
 r102: [61..62]
 r103: [57..60]
 r104: [38..39]
 r105: [6..7]
 r106: [2..3]
 r107: [40..42]
 r108: [0..1]
 r109: [36..37]
 r110: [32..33]
 r111: [28..29]
 r112: [26..27]
 r113: [20..21]
 r114: [14..15]
 r115: [91..92]
 r116: [85..86]
 r117: [83..84]
 r118: [55..56]
 r119: [43..44]
 r120: [77..78]
 r121: [75..76]
 r122: [73..74]
 r123: [69..70]
 r124: [69..70]
 r125: [67..68]
 r126: [67..68]
 r127: [65..66]
 r128: [65..66]
 r129: [63..64]
 r130: [59..60]
 r131: [59..60]
 r132: [57..58]
 r133: [38..39]
 r134: [6..7]
 r135: [4..5]
 r138: [45..46]

********** Assignment #1: **********

	 Assigning to 138 (cl=GENERAL_REGS, orig=99, freq=3000, tfirst=138, tfreq=3000)...
	   Assign 0 to reload r138 (freq=3000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=48, prev_offset=48)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=32, prev_offset=32)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
changing reg in insn 191
changing reg in insn 129
changing reg in insn 124
changing reg in insn 49
changing reg in insn 47
changing reg in insn 19
changing reg in insn 17
changing reg in insn 6
changing reg in insn 7
changing reg in insn 11
changing reg in insn 12
changing reg in insn 25
changing reg in insn 26
changing reg in insn 26
changing reg in insn 27
changing reg in insn 29
changing reg in insn 30
changing reg in insn 30
changing reg in insn 31
changing reg in insn 33
changing reg in insn 34
changing reg in insn 34
changing reg in insn 35
changing reg in insn 35
changing reg in insn 36
changing reg in insn 41
changing reg in insn 42
changing reg in insn 42
changing reg in insn 43
changing reg in insn 55
changing reg in insn 56
changing reg in insn 56
changing reg in insn 57
changing reg in insn 65
changing reg in insn 66
changing reg in insn 66
changing reg in insn 67
changing reg in insn 69
changing reg in insn 70
changing reg in insn 79
changing reg in insn 82
changing reg in insn 102
changing reg in insn 103
changing reg in insn 127
changing reg in insn 128
changing reg in insn 128
changing reg in insn 132
changing reg in insn 139
changing reg in insn 143
changing reg in insn 140
changing reg in insn 151
changing reg in insn 157
changing reg in insn 152
changing reg in insn 162
changing reg in insn 74
changing reg in insn 165
changing reg in insn 91
changing reg in insn 86
changing reg in insn 94
changing reg in insn 165
changing reg in insn 169
changing reg in insn 5
changing reg in insn 6
changing reg in insn 10
changing reg in insn 11
changing reg in insn 17
changing reg in insn 18
changing reg in insn 24
changing reg in insn 25
changing reg in insn 28
changing reg in insn 29
changing reg in insn 32
changing reg in insn 33
changing reg in insn 40
changing reg in insn 41
changing reg in insn 47
changing reg in insn 48
changing reg in insn 54
changing reg in insn 55
changing reg in insn 64
changing reg in insn 65
changing reg in insn 81
changing reg in insn 82
changing reg in insn 98
changing reg in insn 99
changing reg in insn 99
changing reg in insn 100
changing reg in insn 101
changing reg in insn 102
changing reg in insn 111
changing reg in insn 113
changing reg in insn 112
changing reg in insn 113
changing reg in insn 119
changing reg in insn 121
changing reg in insn 120
changing reg in insn 121
changing reg in insn 124
changing reg in insn 125
changing reg in insn 126
changing reg in insn 127
changing reg in insn 129
changing reg in insn 130
changing reg in insn 131
changing reg in insn 132
changing reg in insn 140
changing reg in insn 141
changing reg in insn 152
changing reg in insn 153
changing reg in insn 160
changing reg in insn 161
deleting insn with uid = 19.
deleting insn with uid = 34.
deleting insn with uid = 49.
deleting insn with uid = 69.
deleting insn with uid = 193.
deleting insn with uid = 165.
deleting insn with uid = 169.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 20.
verify found no changes in insn with uid = 50.
verify found no changes in insn with uid = 68.


copy_page_tables

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 17 [flags]
;;  ref usage 	r0={49d,47u} r1={11d,7u} r2={5d,1u} r3={1d,6u} r7={7d,85u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r16={5e} r17={44d,10u} r18={3d} r19={1e} r20={3d} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} 
;;    total ref usage 474{312d,156u,6e} in 113{110 regular + 3 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 191 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 191 3 2 2 (parallel [
            (set (reg:SI 3 bx [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 191 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:SI 0 ax [109])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 48 [0x30])) [1 from+0 S4 A32])) "mm/memory.c":186:15 75 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (parallel [
            (set (reg:SI 0 ax [orig:83 _1 ] [83])
                (and:SI (reg:SI 0 ax [109])
                    (const_int 4194303 [0x3fffff])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":186:15 490 {*andsi_1}
     (expr_list:REG_EQUAL (and:SI (mem/c:SI (reg/f:SI 16 argp) [1 from+0 S4 A32])
            (const_int 4194303 [0x3fffff]))
        (nil)))
(insn 7 6 8 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:83 _1 ] [83])
            (const_int 0 [0]))) "mm/memory.c":186:8 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 8 7 9 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 14)
            (pc))) "mm/memory.c":186:8 806 {*jcc}
     (nil)
 -> 14)
(note 9 8 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 3 (set (reg:SI 0 ax [110])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 52 [0x34])) [1 to+0 S4 A32])) "mm/memory.c":186:34 75 {*movsi_internal}
     (nil))
(insn 11 10 12 3 (parallel [
            (set (reg:SI 0 ax [orig:84 _2 ] [84])
                (and:SI (reg:SI 0 ax [110])
                    (const_int 4194303 [0x3fffff])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":186:34 490 {*andsi_1}
     (expr_list:REG_EQUAL (and:SI (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                    (const_int 4 [0x4])) [1 to+0 S4 A32])
            (const_int 4194303 [0x3fffff]))
        (nil)))
(insn 12 11 13 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:84 _2 ] [84])
            (const_int 0 [0]))) "mm/memory.c":186:27 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 13 12 14 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 22)
            (pc))) "mm/memory.c":186:27 806 {*jcc}
     (nil)
 -> 22)
(code_label 14 13 15 4 17 (nil) [1 uses])
(note 15 14 16 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 17 4 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":187:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 17 16 18 4 (set (reg/f:SI 0 ax [111])
        (plus:SI (reg:SI 3 bx [82])
            (const:SI (unspec:SI [
                        (symbol_ref/f:SI ("*.LC3") [flags 0x2]  <var_decl 0x7b517d59d7e0 *.LC3>)
                    ] UNSPEC_GOTOFF)))) "mm/memory.c":187:9 205 {*leasi}
     (expr_list:REG_EQUAL (symbol_ref/f:SI ("*.LC3") [flags 0x2]  <var_decl 0x7b517d59d7e0 *.LC3>)
        (nil)))
(insn 18 17 20 4 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [15  S4 A32])
        (reg/f:SI 0 ax [111])) "mm/memory.c":187:9 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 20 18 21 4 (call (mem:QI (symbol_ref:SI ("panic") [flags 0x41]  <function_decl 0x7b517d4d2900 panic>) [0 panic S1 A8])
        (const_int 16 [0x10])) "mm/memory.c":187:9 812 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 21 20 22 4 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":187:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(code_label 22 21 23 5 18 (nil) [1 uses])
(note 23 22 24 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 25 5 (set (reg:SI 0 ax [112])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 48 [0x30])) [1 from+0 S4 A32])) "mm/memory.c":188:41 75 {*movsi_internal}
     (nil))
(insn 25 24 26 5 (parallel [
            (set (reg:SI 0 ax [orig:85 _3 ] [85])
                (lshiftrt:SI (reg:SI 0 ax [112])
                    (const_int 20 [0x14])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":188:41 701 {*lshrsi3_1}
     (expr_list:REG_EQUAL (lshiftrt:SI (mem/c:SI (reg/f:SI 16 argp) [1 from+0 S4 A32])
            (const_int 20 [0x14]))
        (nil)))
(insn 26 25 27 5 (parallel [
            (set (reg:SI 0 ax [orig:86 _4 ] [86])
                (and:SI (reg:SI 0 ax [orig:85 _3 ] [85])
                    (const_int 4092 [0xffc])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":188:48 490 {*andsi_1}
     (nil))
(insn 27 26 28 5 (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [16 from_dir+0 S4 A32])
        (reg:SI 0 ax [orig:86 _4 ] [86])) "mm/memory.c":188:14 75 {*movsi_internal}
     (nil))
(insn 28 27 29 5 (set (reg:SI 0 ax [113])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 52 [0x34])) [1 to+0 S4 A32])) "mm/memory.c":189:37 75 {*movsi_internal}
     (nil))
(insn 29 28 30 5 (parallel [
            (set (reg:SI 0 ax [orig:87 _5 ] [87])
                (lshiftrt:SI (reg:SI 0 ax [113])
                    (const_int 20 [0x14])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":189:37 701 {*lshrsi3_1}
     (expr_list:REG_EQUAL (lshiftrt:SI (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                    (const_int 4 [0x4])) [1 to+0 S4 A32])
            (const_int 20 [0x14]))
        (nil)))
(insn 30 29 31 5 (parallel [
            (set (reg:SI 0 ax [orig:88 _6 ] [88])
                (and:SI (reg:SI 0 ax [orig:87 _5 ] [87])
                    (const_int 4092 [0xffc])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":189:44 490 {*andsi_1}
     (nil))
(insn 31 30 32 5 (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [16 to_dir+0 S4 A32])
        (reg:SI 0 ax [orig:88 _6 ] [88])) "mm/memory.c":189:12 75 {*movsi_internal}
     (nil))
(insn 32 31 33 5 (set (reg:SI 0 ax [114])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 56 [0x38])) [1 size+0 S4 A32])) "mm/memory.c":190:30 75 {*movsi_internal}
     (nil))
(insn 33 32 35 5 (parallel [
            (set (reg:SI 0 ax [orig:89 _7 ] [89])
                (plus:SI (reg:SI 0 ax [114])
                    (const_int 4194303 [0x3fffff])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":190:30 209 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                    (const_int 8 [0x8])) [1 size+0 S4 A32])
            (const_int 4194303 [0x3fffff]))
        (nil)))
(insn 35 33 36 5 (parallel [
            (set (reg:SI 0 ax [orig:91 _9 ] [91])
                (lshiftrt:SI (reg:SI 0 ax [orig:90 _8 ] [90])
                    (const_int 22 [0x16])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":190:43 701 {*lshrsi3_1}
     (nil))
(insn 36 35 172 5 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 56 [0x38])) [1 size+0 S4 A32])
        (reg:SI 0 ax [orig:91 _9 ] [91])) "mm/memory.c":190:10 75 {*movsi_internal}
     (nil))
(jump_insn 172 36 173 5 (set (pc)
        (label_ref 149)) "mm/memory.c":191:5 807 {jump}
     (nil)
 -> 149)
(barrier 173 172 154)
(code_label 154 173 39 6 31 (nil) [1 uses])
(note 39 154 40 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 40 39 41 6 (set (reg/f:SI 0 ax [115])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [16 to_dir+0 S4 A32])) "mm/memory.c":193:17 75 {*movsi_internal}
     (nil))
(insn 41 40 42 6 (set (reg:SI 0 ax [orig:92 _10 ] [92])
        (mem:SI (reg/f:SI 0 ax [115]) [1 *to_dir_29+0 S4 A32])) "mm/memory.c":193:17 75 {*movsi_internal}
     (nil))
(insn 42 41 43 6 (parallel [
            (set (reg:SI 0 ax [orig:93 _11 ] [93])
                (and:SI (reg:SI 0 ax [orig:92 _10 ] [92])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":193:15 490 {*andsi_1}
     (nil))
(insn 43 42 44 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:93 _11 ] [93])
            (const_int 0 [0]))) "mm/memory.c":193:12 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 44 43 45 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 52)
            (pc))) "mm/memory.c":193:12 806 {*jcc}
     (nil)
 -> 52)
(note 45 44 46 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 46 45 47 7 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":194:13 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 47 46 48 7 (set (reg/f:SI 0 ax [116])
        (plus:SI (reg:SI 3 bx [82])
            (const:SI (unspec:SI [
                        (symbol_ref/f:SI ("*.LC4") [flags 0x2]  <var_decl 0x7b517d59d870 *.LC4>)
                    ] UNSPEC_GOTOFF)))) "mm/memory.c":194:13 205 {*leasi}
     (expr_list:REG_EQUAL (symbol_ref/f:SI ("*.LC4") [flags 0x2]  <var_decl 0x7b517d59d870 *.LC4>)
        (nil)))
(insn 48 47 50 7 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [15  S4 A32])
        (reg/f:SI 0 ax [116])) "mm/memory.c":194:13 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 50 48 51 7 (call (mem:QI (symbol_ref:SI ("panic") [flags 0x41]  <function_decl 0x7b517d4d2900 panic>) [0 panic S1 A8])
        (const_int 16 [0x10])) "mm/memory.c":194:13 812 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 51 50 52 7 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":194:13 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(code_label 52 51 53 8 20 (nil) [1 uses])
(note 53 52 54 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 54 53 55 8 (set (reg/f:SI 0 ax [117])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [16 from_dir+0 S4 A32])) "mm/memory.c":195:19 75 {*movsi_internal}
     (nil))
(insn 55 54 56 8 (set (reg:SI 0 ax [orig:94 _12 ] [94])
        (mem:SI (reg/f:SI 0 ax [117]) [1 *from_dir_28+0 S4 A32])) "mm/memory.c":195:19 75 {*movsi_internal}
     (nil))
(insn 56 55 57 8 (parallel [
            (set (reg:SI 0 ax [orig:95 _13 ] [95])
                (and:SI (reg:SI 0 ax [orig:94 _12 ] [94])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":195:17 490 {*andsi_1}
     (nil))
(insn 57 56 58 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:95 _13 ] [95])
            (const_int 0 [0]))) "mm/memory.c":195:12 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 58 57 63 8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 184)
            (pc))) "mm/memory.c":195:12 806 {*jcc}
     (nil)
 -> 184)
(note 63 58 64 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 64 63 65 9 (set (reg/f:SI 0 ax [118])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [16 from_dir+0 S4 A32])) "mm/memory.c":197:59 75 {*movsi_internal}
     (nil))
(insn 65 64 66 9 (set (reg:SI 0 ax [orig:96 _14 ] [96])
        (mem:SI (reg/f:SI 0 ax [118]) [1 *from_dir_28+0 S4 A32])) "mm/memory.c":197:59 75 {*movsi_internal}
     (nil))
(insn 66 65 67 9 (parallel [
            (set (reg:SI 0 ax [orig:97 _15 ] [97])
                (and:SI (reg:SI 0 ax [orig:96 _14 ] [96])
                    (const_int -4096 [0xfffffffffffff000])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":197:57 490 {*andsi_1}
     (nil))
(insn 67 66 68 9 (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [16 from_page_table+0 S4 A32])
        (reg:SI 0 ax [orig:97 _15 ] [97])) "mm/memory.c":197:25 75 {*movsi_internal}
     (nil))
(call_insn 68 67 70 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("get_free_page") [flags 0x3]  <function_decl 0x7b517d53b100 get_free_page>) [0 get_free_page S1 A8])
            (const_int 0 [0]))) "mm/memory.c":198:49 823 {*call_value}
     (nil)
    (nil))
(insn 70 68 71 9 (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [16 to_page_table+0 S4 A32])
        (reg:SI 0 ax [orig:98 _16 ] [98])) "mm/memory.c":198:29 75 {*movsi_internal}
     (nil))
(insn 71 70 72 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 24 [0x18])) [16 to_page_table+0 S4 A32])
            (const_int 0 [0]))) "mm/memory.c":198:12 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 72 71 73 9 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 77)
            (pc))) "mm/memory.c":198:12 806 {*jcc}
     (nil)
 -> 77)
(note 73 72 74 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 74 73 174 10 (set (reg:SI 0 ax [orig:106 _31 ] [106])
        (const_int -1 [0xffffffffffffffff])) "mm/memory.c":199:20 75 {*movsi_internal}
     (nil))
(jump_insn 174 74 175 10 (set (pc)
        (label_ref 163)) "mm/memory.c":199:20 807 {jump}
     (nil)
 -> 163)
(barrier 175 174 77)
(code_label 77 175 78 11 23 (nil) [1 uses])
(note 78 77 79 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 79 78 80 11 (set (reg:SI 0 ax [orig:99 to_page_table.4_17 ] [99])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [16 to_page_table+0 S4 A32])) "mm/memory.c":201:20 75 {*movsi_internal}
     (nil))
(insn 80 79 194 11 (parallel [
            (set (reg:SI 0 ax [orig:99 to_page_table.4_17 ] [99])
                (ior:SI (reg:SI 0 ax [orig:99 to_page_table.4_17 ] [99])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":201:51 520 {*iorsi_1}
     (nil))
(insn 194 80 81 11 (set (reg:SI 1 dx [orig:100 _18 ] [100])
        (reg:SI 0 ax [orig:99 to_page_table.4_17 ] [99])) "mm/memory.c":201:51 75 {*movsi_internal}
     (nil))
(insn 81 194 82 11 (set (reg/f:SI 0 ax [119])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [16 to_dir+0 S4 A32])) "mm/memory.c":201:17 75 {*movsi_internal}
     (nil))
(insn 82 81 83 11 (set (mem:SI (reg/f:SI 0 ax [119]) [1 *to_dir_29+0 S4 A32])
        (reg:SI 1 dx [orig:100 _18 ] [100])) "mm/memory.c":201:17 75 {*movsi_internal}
     (nil))
(insn 83 82 84 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 48 [0x30])) [1 from+0 S4 A32])
            (const_int 0 [0]))) "mm/memory.c":202:33 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 84 83 85 11 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 89)
            (pc))) "mm/memory.c":202:33 806 {*jcc}
     (nil)
 -> 89)
(note 85 84 86 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 86 85 176 12 (set (reg:SI 0 ax [orig:107 iftmp.5_32 ] [107])
        (const_int 160 [0xa0])) "mm/memory.c":202:33 75 {*movsi_internal}
     (nil))
(jump_insn 176 86 177 12 (set (pc)
        (label_ref 92)) 807 {jump}
     (nil)
 -> 92)
(barrier 177 176 89)
(code_label 89 177 90 13 25 (nil) [1 uses])
(note 90 89 91 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 91 90 92 13 (set (reg:SI 0 ax [orig:107 iftmp.5_32 ] [107])
        (const_int 1024 [0x400])) "mm/memory.c":202:33 75 {*movsi_internal}
     (nil))
(code_label 92 91 93 14 26 (nil) [1 uses])
(note 93 92 94 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 94 93 178 14 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [1 nr+0 S4 A32])
        (reg:SI 0 ax [orig:107 iftmp.5_32 ] [107])) "mm/memory.c":202:12 75 {*movsi_internal}
     (nil))
(jump_insn 178 94 179 14 (set (pc)
        (label_ref 137)) "mm/memory.c":204:9 807 {jump}
     (nil)
 -> 137)
(barrier 179 178 142)
(code_label 142 179 97 15 30 (nil) [1 uses])
(note 97 142 98 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 98 97 99 15 (set (reg/f:SI 0 ax [120])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [16 from_page_table+0 S4 A32])) "mm/memory.c":205:23 75 {*movsi_internal}
     (nil))
(insn 99 98 100 15 (set (reg:SI 0 ax [121])
        (mem:SI (reg/f:SI 0 ax [120]) [1 *from_page_table_26+0 S4 A32])) "mm/memory.c":205:23 75 {*movsi_internal}
     (nil))
(insn 100 99 101 15 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [1 this_page+0 S4 A32])
        (reg:SI 0 ax [121])) "mm/memory.c":205:23 75 {*movsi_internal}
     (nil))
(insn 101 100 102 15 (set (reg:SI 0 ax [122])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [1 this_page+0 S4 A32])) "mm/memory.c":206:21 75 {*movsi_internal}
     (nil))
(insn 102 101 103 15 (parallel [
            (set (reg:SI 0 ax [orig:101 _19 ] [101])
                (and:SI (reg:SI 0 ax [122])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":206:21 490 {*andsi_1}
     (expr_list:REG_EQUAL (and:SI (mem/c:SI (plus:SI (reg/f:SI 19 frame)
                    (const_int -24 [0xffffffffffffffe8])) [1 this_page+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 103 102 104 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:101 _19 ] [101])
            (const_int 0 [0]))) "mm/memory.c":206:16 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 104 103 109 15 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 189)
            (pc))) "mm/memory.c":206:16 806 {*jcc}
     (nil)
 -> 189)
(note 109 104 110 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 110 109 111 16 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 8 [0x8])) [1 this_page+0 S4 A32])
                (and:SI (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 8 [0x8])) [1 this_page+0 S4 A32])
                    (const_int -3 [0xfffffffffffffffd])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":209:23 490 {*andsi_1}
     (nil))
(insn 111 110 112 16 (set (reg/f:SI 0 ax [123])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [16 to_page_table+0 S4 A32])) "mm/memory.c":210:28 75 {*movsi_internal}
     (nil))
(insn 112 111 113 16 (set (reg:SI 1 dx [124])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [1 this_page+0 S4 A32])) "mm/memory.c":210:28 75 {*movsi_internal}
     (nil))
(insn 113 112 116 16 (set (mem:SI (reg/f:SI 0 ax [123]) [1 *to_page_table_27+0 S4 A32])
        (reg:SI 1 dx [124])) "mm/memory.c":210:28 75 {*movsi_internal}
     (nil))
(insn 116 113 117 16 (set (reg:CC 17 flags)
        (compare:CC (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 8 [0x8])) [1 this_page+0 S4 A32])
            (const_int 1048576 [0x100000]))) "mm/memory.c":211:16 11 {*cmpsi_1}
     (nil))
(jump_insn 117 116 118 16 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 133)
            (pc))) "mm/memory.c":211:16 806 {*jcc}
     (nil)
 -> 133)
(note 118 117 119 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 119 118 120 17 (set (reg/f:SI 0 ax [125])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [16 from_page_table+0 S4 A32])) "mm/memory.c":212:34 75 {*movsi_internal}
     (nil))
(insn 120 119 121 17 (set (reg:SI 1 dx [126])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [1 this_page+0 S4 A32])) "mm/memory.c":212:34 75 {*movsi_internal}
     (nil))
(insn 121 120 122 17 (set (mem:SI (reg/f:SI 0 ax [125]) [1 *from_page_table_26+0 S4 A32])
        (reg:SI 1 dx [126])) "mm/memory.c":212:34 75 {*movsi_internal}
     (nil))
(insn 122 121 123 17 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 8 [0x8])) [1 this_page+0 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 8 [0x8])) [1 this_page+0 S4 A32])
                    (const_int -1048576 [0xfffffffffff00000])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":213:27 209 {*addsi_1}
     (nil))
(insn 123 122 124 17 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 8 [0x8])) [1 this_page+0 S4 A32])
                (lshiftrt:SI (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 8 [0x8])) [1 this_page+0 S4 A32])
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":214:27 701 {*lshrsi3_1}
     (nil))
(insn 124 123 125 17 (set (reg:SI 1 dx [127])
        (plus:SI (reg:SI 3 bx [82])
            (const:SI (unspec:SI [
                        (symbol_ref:SI ("mem_map") [flags 0x2]  <var_decl 0x7b517d52f5a0 mem_map>)
                    ] UNSPEC_GOTOFF)))) "mm/memory.c":215:24 205 {*leasi}
     (nil))
(insn 125 124 126 17 (set (reg:SI 0 ax [128])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [1 this_page+0 S4 A32])) "mm/memory.c":215:24 75 {*movsi_internal}
     (nil))
(insn 126 125 127 17 (parallel [
            (set (reg/f:SI 0 ax [129])
                (plus:SI (reg:SI 0 ax [128])
                    (reg:SI 1 dx [127])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":215:24 209 {*addsi_1}
     (nil))
(insn 127 126 128 17 (set (reg:QI 0 ax [orig:102 _20 ] [102])
        (mem:QI (reg/f:SI 0 ax [129]) [0 mem_map[this_page_64]+0 S1 A8])) "mm/memory.c":215:24 77 {*movqi_internal}
     (nil))
(insn 128 127 129 17 (parallel [
            (set (reg:QI 1 dx [orig:103 _22 ] [103])
                (plus:QI (reg:QI 0 ax [orig:102 _20 ] [102])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":215:35 213 {*addqi_1}
     (nil))
(insn 129 128 130 17 (set (reg:SI 2 cx [130])
        (plus:SI (reg:SI 3 bx [82])
            (const:SI (unspec:SI [
                        (symbol_ref:SI ("mem_map") [flags 0x2]  <var_decl 0x7b517d52f5a0 mem_map>)
                    ] UNSPEC_GOTOFF)))) "mm/memory.c":215:35 205 {*leasi}
     (nil))
(insn 130 129 131 17 (set (reg:SI 0 ax [131])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [1 this_page+0 S4 A32])) "mm/memory.c":215:35 75 {*movsi_internal}
     (nil))
(insn 131 130 132 17 (parallel [
            (set (reg/f:SI 0 ax [132])
                (plus:SI (reg:SI 0 ax [131])
                    (reg:SI 2 cx [130])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":215:35 209 {*addsi_1}
     (nil))
(insn 132 131 186 17 (set (mem:QI (reg/f:SI 0 ax [132]) [0 mem_map[this_page_64]+0 S1 A8])
        (reg:QI 1 dx [orig:103 _22 ] [103])) "mm/memory.c":215:35 77 {*movqi_internal}
     (nil))
(jump_insn 186 132 187 17 (set (pc)
        (label_ref 133)) 807 {jump}
     (nil)
 -> 133)
(barrier 187 186 189)
(code_label 189 187 188 26 33 (nil) [1 uses])
(note 188 189 190 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 190 188 133 26 (const_int 0 [0]) "mm/memory.c":207:17 843 {nop}
     (nil))
(code_label 133 190 134 18 29 (nil) [2 uses])
(note 134 133 135 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 135 134 136 18 (parallel [
            (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 28 [0x1c])) [16 from_page_table+0 S4 A32])
                (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 28 [0x1c])) [16 from_page_table+0 S4 A32])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":204:42 209 {*addsi_1}
     (nil))
(insn 136 135 137 18 (parallel [
            (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 24 [0x18])) [16 to_page_table+0 S4 A32])
                (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 24 [0x18])) [16 to_page_table+0 S4 A32])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":204:59 209 {*addsi_1}
     (nil))
(code_label 137 136 138 19 27 (nil) [1 uses])
(note 138 137 139 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 139 138 140 19 (set (reg:SI 0 ax [orig:104 nr.6_23 ] [104])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [1 nr+0 S4 A32])) "mm/memory.c":204:19 75 {*movsi_internal}
     (nil))
(insn 140 139 141 19 (parallel [
            (set (reg:SI 1 dx [133])
                (plus:SI (reg:SI 0 ax [orig:104 nr.6_23 ] [104])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":204:19 209 {*addsi_1}
     (nil))
(insn 141 140 143 19 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [1 nr+0 S4 A32])
        (reg:SI 1 dx [133])) "mm/memory.c":204:19 75 {*movsi_internal}
     (nil))
(insn 143 141 144 19 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:104 nr.6_23 ] [104])
            (const_int 0 [0]))) "mm/memory.c":204:22 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 144 143 180 19 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 142)
            (pc))) "mm/memory.c":204:22 806 {*jcc}
     (nil)
 -> 142)
(note 180 144 181 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(jump_insn 181 180 182 24 (set (pc)
        (label_ref 145)) 807 {jump}
     (nil)
 -> 145)
(barrier 182 181 184)
(code_label 184 182 183 25 32 (nil) [1 uses])
(note 183 184 185 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 185 183 145 25 (const_int 0 [0]) "mm/memory.c":196:13 843 {nop}
     (nil))
(code_label 145 185 146 20 22 (nil) [1 uses])
(note 146 145 147 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 147 146 148 20 (parallel [
            (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 20 [0x14])) [16 from_dir+0 S4 A32])
                (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 20 [0x14])) [16 from_dir+0 S4 A32])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":191:33 209 {*addsi_1}
     (nil))
(insn 148 147 149 20 (parallel [
            (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 16 [0x10])) [16 to_dir+0 S4 A32])
                (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 16 [0x10])) [16 to_dir+0 S4 A32])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":191:43 209 {*addsi_1}
     (nil))
(code_label 149 148 150 21 19 (nil) [1 uses])
(note 150 149 151 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 151 150 152 21 (set (reg:SI 0 ax [orig:105 size.7_24 ] [105])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 56 [0x38])) [1 size+0 S4 A32])) "mm/memory.c":191:17 75 {*movsi_internal}
     (nil))
(insn 152 151 153 21 (parallel [
            (set (reg:SI 1 dx [134])
                (plus:SI (reg:SI 0 ax [orig:105 size.7_24 ] [105])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":191:17 209 {*addsi_1}
     (nil))
(insn 153 152 157 21 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 56 [0x38])) [1 size+0 S4 A32])
        (reg:SI 1 dx [134])) "mm/memory.c":191:17 75 {*movsi_internal}
     (nil))
(insn 157 153 158 21 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:SI 0 ax [orig:105 size.7_24 ] [105])
            (const_int 0 [0]))) "mm/memory.c":191:20 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 158 157 159 21 (set (pc)
        (if_then_else (gt (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 154)
            (pc))) "mm/memory.c":191:20 806 {*jcc}
     (nil)
 -> 154)
(note 159 158 160 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 160 159 161 22 (set (reg:SI 0 ax [135])
        (const_int 0 [0])) "mm/memory.c":219:5 75 {*movsi_internal}
     (nil))
(insn 161 160 162 22 (parallel [
            (asm_operands/v ("movl %%eax, %%cr3") ("") 0 [
                    (reg:SI 0 ax [135])
                ]
                 [
                    (asm_input:SI ("a") mm/memory.c:219)
                ]
                 [] mm/memory.c:219)
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":219:5 -1
     (nil))
(insn 162 161 163 22 (set (reg:SI 0 ax [orig:106 _31 ] [106])
        (const_int 0 [0])) "mm/memory.c":220:12 75 {*movsi_internal}
     (nil))
(code_label 163 162 164 23 24 (nil) [1 uses])
(note 164 163 170 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 170 164 192 23 (use (reg/i:SI 0 ax)) "mm/memory.c":221:1 -1
     (nil))
(note 192 170 0 NOTE_INSN_DELETED)

;; Function free_page_tables (free_page_tables, funcdef_no=6, decl_uid=1323, cgraph_uid=7, symbol_order=8)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 127:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 6:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 10:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) Ts {*leasi} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 15:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 21:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r  (1) Ts {*leasi} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 26:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 30:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 32:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 35:  (0) =rm  (1) %0  (2) re {*andsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 36:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 42:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 52:  (0) =rm  (1) %0  (2) re {*andsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 53:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 54:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 60:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 66:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 67:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 70:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 74:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 75:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 76:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 87:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 88:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 91:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 93:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 96:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=21,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 100:  (0) r  (1) r  (2) le {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 101:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 106:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (0) a
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2 3
EBB 4 5
EBB 6
EBB 7 8
EBB 9 10
EBB 11
EBB 12 13
EBB 17
EBB 14
EBB 15 16

********** Pseudo live ranges #1: **********

  BB 16
   Insn 116: point = 0, n_alt = -1
   Insn 115: point = 0, n_alt = -2
   Insn 111: point = 1, n_alt = -2
   Insn 108: point = 3, n_alt = 0
   Insn 107: point = 4, n_alt = 0
   Insn 106: point = 5, n_alt = 0
  BB 15
   Insn 104: point = 6, n_alt = -1
   Insn 103: point = 6, n_alt = 0
   Insn 101: point = 7, n_alt = 1
   Insn 100: point = 8, n_alt = 3
   Insn 99: point = 9, n_alt = 0
  BB 6
   Insn 118: point = 10, n_alt = -1
   Insn 36: point = 10, n_alt = 1
   Insn 35: point = 11, n_alt = 0
   Insn 34: point = 13, n_alt = 0
   Insn 33: point = 15, n_alt = 0
   Insn 32: point = 16, n_alt = 1
   Insn 31: point = 17, n_alt = 0
   Insn 30: point = 19, n_alt = 0
   Insn 29: point = 21, n_alt = 0
  BB 5
   Insn 26: point = 22, n_alt = 0
   Insn 25: point = 22, n_alt = 0
   Insn 24: point = 22, n_alt = -2
   Insn 23: point = 23, n_alt = 0
   Insn 22: point = 24, n_alt = 0
   Insn 21: point = 25, n_alt = 0
  BB 4
   Insn 19: point = 26, n_alt = -1
   Insn 18: point = 26, n_alt = 1
  BB 3
   Insn 15: point = 27, n_alt = 0
   Insn 14: point = 27, n_alt = 0
   Insn 13: point = 27, n_alt = -2
   Insn 12: point = 27, n_alt = 0
   Insn 11: point = 28, n_alt = 0
   Insn 10: point = 29, n_alt = 0
  BB 2
   Insn 8: point = 30, n_alt = -1
   Insn 7: point = 30, n_alt = 0
   Insn 6: point = 31, n_alt = 0
   Insn 5: point = 33, n_alt = 0
   Insn 127: point = 34, n_alt = 0
  BB 14
   Insn 96: point = 35, n_alt = 0
  BB 13
   Insn 122: point = 35, n_alt = -1
   Insn 93: point = 35, n_alt = 1
   Insn 92: point = 36, n_alt = 0
   Insn 91: point = 37, n_alt = 0
   Insn 90: point = 37, n_alt = 0
   Insn 89: point = 37, n_alt = 0
   Insn 88: point = 38, n_alt = 0
   Insn 87: point = 38, n_alt = 0
   Insn 86: point = 40, n_alt = 0
   Insn 85: point = 42, n_alt = 0
  BB 12
   Insn 83: point = 43, n_alt = -1
   Insn 82: point = 43, n_alt = 0
  BB 8
   Insn 120: point = 43, n_alt = -1
   Insn 54: point = 43, n_alt = 1
   Insn 53: point = 43, n_alt = 1
   Insn 52: point = 44, n_alt = 0
   Insn 51: point = 46, n_alt = 0
   Insn 50: point = 48, n_alt = 0
  BB 11
   Insn 76: point = 49, n_alt = 0
   Insn 75: point = 49, n_alt = 0
   Insn 74: point = 49, n_alt = 1
   Insn 73: point = 50, n_alt = 0
  BB 10
   Insn 70: point = 51, n_alt = 0
   Insn 69: point = 51, n_alt = 0
   Insn 68: point = 51, n_alt = 0
   Insn 67: point = 52, n_alt = 0
   Insn 66: point = 52, n_alt = 0
   Insn 65: point = 54, n_alt = 0
   Insn 64: point = 56, n_alt = 0
  BB 9
   Insn 62: point = 57, n_alt = -1
   Insn 61: point = 57, n_alt = 0
   Insn 60: point = 58, n_alt = 0
   Insn 59: point = 60, n_alt = 0
   Insn 58: point = 62, n_alt = 0
  BB 17
   Insn 126: point = 63, n_alt = -1
  BB 7
   Insn 44: point = 63, n_alt = -1
   Insn 43: point = 63, n_alt = 0
   Insn 42: point = 64, n_alt = 0
   Insn 41: point = 66, n_alt = 0
   Insn 40: point = 68, n_alt = 0
 r82: [22..34]
 r83: [30..31]
 r84: [18..19]
 r85: [12..13]
 r86: [10..11]
 r87: [65..66]
 r88: [63..64]
 r89: [45..46]
 r90: [43..44]
 r91: [59..60]
 r92: [57..58]
 r93: [53..54]
 r94: [51..52]
 r95: [39..40]
 r96: [37..38]
 r97: [6..9]
 r98: [2..3]
 r99: [0..1]
 r100: [32..33]
 r101: [27..28]
 r102: [23..24]
 r103: [20..21]
 r104: [16..17]
 r105: [14..15]
 r106: [67..68]
 r107: [47..48]
 r108: [61..62]
 r109: [55..56]
 r110: [49..50]
 r111: [41..42]
 r112: [35..36]
 r113: [7..8]
 r114: [4..5]
Compressing live ranges: from 69 to 62 - 89%
Ranges after the compression:
 r82: [20..27]
 r83: [24..25]
 r84: [16..17]
 r85: [10..11]
 r86: [8..9]
 r87: [58..59]
 r88: [56..57]
 r89: [38..39]
 r90: [36..37]
 r91: [52..53]
 r92: [50..51]
 r93: [46..47]
 r94: [44..45]
 r95: [32..33]
 r96: [30..31]
 r97: [6..7]
 r98: [2..3]
 r99: [0..1]
 r100: [26..27]
 r101: [22..23]
 r102: [20..21]
 r103: [18..19]
 r104: [14..15]
 r105: [12..13]
 r106: [60..61]
 r107: [40..41]
 r108: [54..55]
 r109: [48..49]
 r110: [42..43]
 r111: [34..35]
 r112: [28..29]
 r113: [6..7]
 r114: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=32)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=16)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
changing reg in insn 127
changing reg in insn 24
changing reg in insn 22
changing reg in insn 13
changing reg in insn 11
changing reg in insn 6
changing reg in insn 7
changing reg in insn 30
changing reg in insn 31
changing reg in insn 34
changing reg in insn 35
changing reg in insn 35
changing reg in insn 36
changing reg in insn 41
changing reg in insn 42
changing reg in insn 42
changing reg in insn 43
changing reg in insn 51
changing reg in insn 52
changing reg in insn 52
changing reg in insn 53
changing reg in insn 59
changing reg in insn 60
changing reg in insn 60
changing reg in insn 61
changing reg in insn 65
changing reg in insn 66
changing reg in insn 66
changing reg in insn 68
changing reg in insn 86
changing reg in insn 87
changing reg in insn 87
changing reg in insn 89
changing reg in insn 99
changing reg in insn 103
changing reg in insn 100
changing reg in insn 108
changing reg in insn 111
changing reg in insn 111
changing reg in insn 115
changing reg in insn 5
changing reg in insn 6
changing reg in insn 11
changing reg in insn 12
changing reg in insn 22
changing reg in insn 23
changing reg in insn 29
changing reg in insn 30
changing reg in insn 31
changing reg in insn 32
changing reg in insn 33
changing reg in insn 34
changing reg in insn 40
changing reg in insn 41
changing reg in insn 50
changing reg in insn 51
changing reg in insn 58
changing reg in insn 59
changing reg in insn 64
changing reg in insn 65
changing reg in insn 73
changing reg in insn 74
changing reg in insn 85
changing reg in insn 86
changing reg in insn 92
changing reg in insn 93
changing reg in insn 100
changing reg in insn 101
changing reg in insn 106
changing reg in insn 107
deleting insn with uid = 13.
deleting insn with uid = 24.
deleting insn with uid = 111.
deleting insn with uid = 115.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 14.
verify found no changes in insn with uid = 25.
verify found no changes in insn with uid = 69.
verify found no changes in insn with uid = 90.


free_page_tables

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 17 [flags]
;;  ref usage 	r0={35d,32u} r1={6d,1u} r2={5d} r3={1d,4u} r7={13d,65u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r16={3e} r17={34d,6u} r18={4d} r20={4d} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={4d} r38={4d} r39={4d} r40={4d} r41={4d} r42={4d} r43={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} 
;;    total ref usage 465{354d,108u,3e} in 76{72 regular + 4 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 127 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 127 3 2 2 (parallel [
            (set (reg:SI 3 bx [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 127 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:SI 0 ax [100])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 32 [0x20])) [1 from+0 S4 A32])) "mm/memory.c":232:14 75 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (parallel [
            (set (reg:SI 0 ax [orig:83 _1 ] [83])
                (and:SI (reg:SI 0 ax [100])
                    (const_int 4194303 [0x3fffff])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":232:14 490 {*andsi_1}
     (expr_list:REG_EQUAL (and:SI (mem/c:SI (reg/f:SI 16 argp) [1 from+0 S4 A32])
            (const_int 4194303 [0x3fffff]))
        (nil)))
(insn 7 6 8 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:83 _1 ] [83])
            (const_int 0 [0]))) "mm/memory.c":232:8 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 8 7 9 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 16)
            (pc))) "mm/memory.c":232:8 806 {*jcc}
     (nil)
 -> 16)
(note 9 8 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 3 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":233:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 11 10 12 3 (set (reg/f:SI 0 ax [101])
        (plus:SI (reg:SI 3 bx [82])
            (const:SI (unspec:SI [
                        (symbol_ref/f:SI ("*.LC5") [flags 0x2]  <var_decl 0x7b517d59d990 *.LC5>)
                    ] UNSPEC_GOTOFF)))) "mm/memory.c":233:9 205 {*leasi}
     (expr_list:REG_EQUAL (symbol_ref/f:SI ("*.LC5") [flags 0x2]  <var_decl 0x7b517d59d990 *.LC5>)
        (nil)))
(insn 12 11 14 3 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [15  S4 A32])
        (reg/f:SI 0 ax [101])) "mm/memory.c":233:9 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 14 12 15 3 (call (mem:QI (symbol_ref:SI ("panic") [flags 0x41]  <function_decl 0x7b517d4d2900 panic>) [0 panic S1 A8])
        (const_int 16 [0x10])) "mm/memory.c":233:9 812 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 15 14 16 3 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":233:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(code_label 16 15 17 4 35 (nil) [1 uses])
(note 17 16 18 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 32 [0x20])) [1 from+0 S4 A32])
            (const_int 0 [0]))) "mm/memory.c":234:8 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 19 18 20 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 27)
            (pc))) "mm/memory.c":234:8 806 {*jcc}
     (nil)
 -> 27)
(note 20 19 21 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 22 5 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":235:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 22 21 23 5 (set (reg/f:SI 0 ax [102])
        (plus:SI (reg:SI 3 bx [82])
            (const:SI (unspec:SI [
                        (symbol_ref/f:SI ("*.LC6") [flags 0x2]  <var_decl 0x7b517d59da20 *.LC6>)
                    ] UNSPEC_GOTOFF)))) "mm/memory.c":235:9 205 {*leasi}
     (expr_list:REG_EQUAL (symbol_ref/f:SI ("*.LC6") [flags 0x2]  <var_decl 0x7b517d59da20 *.LC6>)
        (nil)))
(insn 23 22 25 5 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [15  S4 A32])
        (reg/f:SI 0 ax [102])) "mm/memory.c":235:9 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 25 23 26 5 (call (mem:QI (symbol_ref:SI ("panic") [flags 0x41]  <function_decl 0x7b517d4d2900 panic>) [0 panic S1 A8])
        (const_int 16 [0x10])) "mm/memory.c":235:9 812 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 26 25 27 5 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":235:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(code_label 27 26 28 6 36 (nil) [1 uses])
(note 28 27 29 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 30 6 (set (reg:SI 0 ax [103])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 36 [0x24])) [1 size+0 S4 A32])) "mm/memory.c":236:18 75 {*movsi_internal}
     (nil))
(insn 30 29 31 6 (parallel [
            (set (reg:SI 0 ax [orig:84 _2 ] [84])
                (plus:SI (reg:SI 0 ax [103])
                    (const_int 4194303 [0x3fffff])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":236:18 209 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                    (const_int 4 [0x4])) [1 size+0 S4 A32])
            (const_int 4194303 [0x3fffff]))
        (nil)))
(insn 31 30 32 6 (parallel [
            (set (reg:SI 0 ax [104])
                (lshiftrt:SI (reg:SI 0 ax [orig:84 _2 ] [84])
                    (const_int 22 [0x16])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":236:10 701 {*lshrsi3_1}
     (nil))
(insn 32 31 33 6 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 36 [0x24])) [1 size+0 S4 A32])
        (reg:SI 0 ax [104])) "mm/memory.c":236:10 75 {*movsi_internal}
     (nil))
(insn 33 32 34 6 (set (reg:SI 0 ax [105])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 32 [0x20])) [1 from+0 S4 A32])) "mm/memory.c":237:36 75 {*movsi_internal}
     (nil))
(insn 34 33 35 6 (parallel [
            (set (reg:SI 0 ax [orig:85 _3 ] [85])
                (lshiftrt:SI (reg:SI 0 ax [105])
                    (const_int 20 [0x14])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":237:36 701 {*lshrsi3_1}
     (expr_list:REG_EQUAL (lshiftrt:SI (mem/c:SI (reg/f:SI 16 argp) [1 from+0 S4 A32])
            (const_int 20 [0x14]))
        (nil)))
(insn 35 34 36 6 (parallel [
            (set (reg:SI 0 ax [orig:86 _4 ] [86])
                (and:SI (reg:SI 0 ax [orig:85 _3 ] [85])
                    (const_int 4092 [0xffc])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":237:43 490 {*andsi_1}
     (nil))
(insn 36 35 118 6 (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [16 dir+0 S4 A32])
        (reg:SI 0 ax [orig:86 _4 ] [86])) "mm/memory.c":237:9 75 {*movsi_internal}
     (nil))
(jump_insn 118 36 119 6 (set (pc)
        (label_ref 97)) "mm/memory.c":238:5 807 {jump}
     (nil)
 -> 97)
(barrier 119 118 102)
(code_label 102 119 39 7 43 (nil) [1 uses])
(note 39 102 40 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 40 39 41 7 (set (reg/f:SI 0 ax [106])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [16 dir+0 S4 A32])) "mm/memory.c":239:19 75 {*movsi_internal}
     (nil))
(insn 41 40 42 7 (set (reg:SI 0 ax [orig:87 _5 ] [87])
        (mem:SI (reg/f:SI 0 ax [106]) [1 *dir_18+0 S4 A32])) "mm/memory.c":239:19 75 {*movsi_internal}
     (nil))
(insn 42 41 43 7 (parallel [
            (set (reg:SI 0 ax [orig:88 _6 ] [88])
                (and:SI (reg:SI 0 ax [orig:87 _5 ] [87])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":239:17 490 {*andsi_1}
     (nil))
(insn 43 42 44 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:88 _6 ] [88])
            (const_int 0 [0]))) "mm/memory.c":239:12 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 44 43 49 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 125)
            (pc))) "mm/memory.c":239:12 806 {*jcc}
     (nil)
 -> 125)
(note 49 44 50 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 50 49 51 8 (set (reg/f:SI 0 ax [107])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [16 dir+0 S4 A32])) "mm/memory.c":241:52 75 {*movsi_internal}
     (nil))
(insn 51 50 52 8 (set (reg:SI 0 ax [orig:89 _7 ] [89])
        (mem:SI (reg/f:SI 0 ax [107]) [1 *dir_18+0 S4 A32])) "mm/memory.c":241:52 75 {*movsi_internal}
     (nil))
(insn 52 51 53 8 (parallel [
            (set (reg:SI 0 ax [orig:90 _8 ] [90])
                (and:SI (reg:SI 0 ax [orig:89 _7 ] [89])
                    (const_int -4096 [0xfffffffffffff000])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":241:50 490 {*andsi_1}
     (nil))
(insn 53 52 54 8 (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [16 pg_table+0 S4 A32])
        (reg:SI 0 ax [orig:90 _8 ] [90])) "mm/memory.c":241:18 75 {*movsi_internal}
     (nil))
(insn 54 53 120 8 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [1 nr+0 S4 A32])
        (const_int 0 [0])) "mm/memory.c":242:17 75 {*movsi_internal}
     (nil))
(jump_insn 120 54 121 8 (set (pc)
        (label_ref 77)) "mm/memory.c":242:9 807 {jump}
     (nil)
 -> 77)
(barrier 121 120 79)
(code_label 79 121 57 9 42 (nil) [1 uses])
(note 57 79 58 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 58 57 59 9 (set (reg/f:SI 0 ax [108])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [16 pg_table+0 S4 A32])) "mm/memory.c":243:21 75 {*movsi_internal}
     (nil))
(insn 59 58 60 9 (set (reg:SI 0 ax [orig:91 _9 ] [91])
        (mem:SI (reg/f:SI 0 ax [108]) [1 *pg_table_17+0 S4 A32])) "mm/memory.c":243:21 75 {*movsi_internal}
     (nil))
(insn 60 59 61 9 (parallel [
            (set (reg:SI 0 ax [orig:92 _10 ] [92])
                (and:SI (reg:SI 0 ax [orig:91 _9 ] [91])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":243:19 490 {*andsi_1}
     (nil))
(insn 61 60 62 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:92 _10 ] [92])
            (const_int 0 [0]))) "mm/memory.c":243:16 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 62 61 63 9 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 71)
            (pc))) "mm/memory.c":243:16 806 {*jcc}
     (nil)
 -> 71)
(note 63 62 64 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 64 63 65 10 (set (reg/f:SI 0 ax [109])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [16 pg_table+0 S4 A32])) "mm/memory.c":244:40 75 {*movsi_internal}
     (nil))
(insn 65 64 66 10 (set (reg:SI 0 ax [orig:93 _11 ] [93])
        (mem:SI (reg/f:SI 0 ax [109]) [1 *pg_table_17+0 S4 A32])) "mm/memory.c":244:40 75 {*movsi_internal}
     (nil))
(insn 66 65 67 10 (parallel [
            (set (reg:SI 0 ax [orig:94 _12 ] [94])
                (and:SI (reg:SI 0 ax [orig:93 _11 ] [93])
                    (const_int -4096 [0xfffffffffffff000])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":244:17 490 {*andsi_1}
     (nil))
(insn 67 66 68 10 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":244:17 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 68 67 69 10 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [1  S4 A32])
        (reg:SI 0 ax [orig:94 _12 ] [94])) "mm/memory.c":244:17 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 69 68 70 10 (call (mem:QI (symbol_ref:SI ("free_page") [flags 0x3]  <function_decl 0x7b517d53b400 free_page>) [0 free_page S1 A8])
        (const_int 16 [0x10])) "mm/memory.c":244:17 812 {*call}
     (nil)
    (nil))
(insn 70 69 71 10 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":244:17 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(code_label 71 70 72 11 41 (nil) [1 uses])
(note 72 71 73 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 73 72 74 11 (set (reg/f:SI 0 ax [110])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [16 pg_table+0 S4 A32])) "mm/memory.c":245:23 75 {*movsi_internal}
     (nil))
(insn 74 73 75 11 (set (mem:SI (reg/f:SI 0 ax [110]) [1 *pg_table_17+0 S4 A32])
        (const_int 0 [0])) "mm/memory.c":245:23 75 {*movsi_internal}
     (nil))
(insn 75 74 76 11 (parallel [
            (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 12 [0xc])) [16 pg_table+0 S4 A32])
                (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 12 [0xc])) [16 pg_table+0 S4 A32])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":246:21 209 {*addsi_1}
     (nil))
(insn 76 75 77 11 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 4 [0x4])) [1 nr+0 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 4 [0x4])) [1 nr+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":242:36 209 {*addsi_1}
     (nil))
(code_label 77 76 78 12 40 (nil) [1 uses])
(note 78 77 82 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 82 78 83 12 (set (reg:CC 17 flags)
        (compare:CC (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 4 [0x4])) [1 nr+0 S4 A32])
            (const_int 1023 [0x3ff]))) "mm/memory.c":242:25 11 {*cmpsi_1}
     (nil))
(jump_insn 83 82 84 12 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 79)
            (pc))) "mm/memory.c":242:25 806 {*jcc}
     (nil)
 -> 79)
(note 84 83 85 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 85 84 86 13 (set (reg/f:SI 0 ax [111])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [16 dir+0 S4 A32])) "mm/memory.c":248:32 75 {*movsi_internal}
     (nil))
(insn 86 85 87 13 (set (reg:SI 0 ax [orig:95 _13 ] [95])
        (mem:SI (reg/f:SI 0 ax [111]) [1 *dir_18+0 S4 A32])) "mm/memory.c":248:32 75 {*movsi_internal}
     (nil))
(insn 87 86 88 13 (parallel [
            (set (reg:SI 0 ax [orig:96 _14 ] [96])
                (and:SI (reg:SI 0 ax [orig:95 _13 ] [95])
                    (const_int -4096 [0xfffffffffffff000])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":248:9 490 {*andsi_1}
     (nil))
(insn 88 87 89 13 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":248:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 89 88 90 13 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [1  S4 A32])
        (reg:SI 0 ax [orig:96 _14 ] [96])) "mm/memory.c":248:9 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 90 89 91 13 (call (mem:QI (symbol_ref:SI ("free_page") [flags 0x3]  <function_decl 0x7b517d53b400 free_page>) [0 free_page S1 A8])
        (const_int 16 [0x10])) "mm/memory.c":248:9 812 {*call}
     (nil)
    (nil))
(insn 91 90 92 13 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":248:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 92 91 93 13 (set (reg/f:SI 0 ax [112])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [16 dir+0 S4 A32])) "mm/memory.c":249:14 75 {*movsi_internal}
     (nil))
(insn 93 92 122 13 (set (mem:SI (reg/f:SI 0 ax [112]) [1 *dir_18+0 S4 A32])
        (const_int 0 [0])) "mm/memory.c":249:14 75 {*movsi_internal}
     (nil))
(jump_insn 122 93 123 13 (set (pc)
        (label_ref 94)) 807 {jump}
     (nil)
 -> 94)
(barrier 123 122 125)
(code_label 125 123 124 17 45 (nil) [1 uses])
(note 124 125 126 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 126 124 94 17 (const_int 0 [0]) "mm/memory.c":240:13 843 {nop}
     (nil))
(code_label 94 126 95 14 39 (nil) [1 uses])
(note 95 94 96 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 96 95 97 14 (parallel [
            (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 8 [0x8])) [16 dir+0 S4 A32])
                (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 8 [0x8])) [16 dir+0 S4 A32])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":238:28 209 {*addsi_1}
     (nil))
(code_label 97 96 98 15 37 (nil) [1 uses])
(note 98 97 99 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 99 98 100 15 (set (reg:SI 0 ax [orig:97 size.8_15 ] [97])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 36 [0x24])) [1 size+0 S4 A32])) "mm/memory.c":238:17 75 {*movsi_internal}
     (nil))
(insn 100 99 101 15 (parallel [
            (set (reg:SI 1 dx [113])
                (plus:SI (reg:SI 0 ax [orig:97 size.8_15 ] [97])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":238:17 209 {*addsi_1}
     (nil))
(insn 101 100 103 15 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 36 [0x24])) [1 size+0 S4 A32])
        (reg:SI 1 dx [113])) "mm/memory.c":238:17 75 {*movsi_internal}
     (nil))
(insn 103 101 104 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:97 size.8_15 ] [97])
            (const_int 0 [0]))) "mm/memory.c":238:20 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 104 103 105 15 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 102)
            (pc))) "mm/memory.c":238:20 806 {*jcc}
     (nil)
 -> 102)
(note 105 104 106 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 106 105 107 16 (set (reg:SI 0 ax [114])
        (const_int 0 [0])) "mm/memory.c":251:5 75 {*movsi_internal}
     (nil))
(insn 107 106 108 16 (parallel [
            (asm_operands/v ("movl %%eax, %%cr3") ("") 0 [
                    (reg:SI 0 ax [114])
                ]
                 [
                    (asm_input:SI ("a") mm/memory.c:251)
                ]
                 [] mm/memory.c:251)
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":251:5 -1
     (nil))
(insn 108 107 116 16 (set (reg:SI 0 ax [orig:98 _34 ] [98])
        (const_int 0 [0])) "mm/memory.c":252:12 75 {*movsi_internal}
     (nil))
(insn 116 108 128 16 (use (reg/i:SI 0 ax)) "mm/memory.c":253:1 -1
     (nil))
(note 128 116 0 NOTE_INSN_DELETED)

;; Function free_table (free_table, funcdef_no=7, decl_uid=1392, cgraph_uid=8, symbol_order=9)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 19:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) Ts {*leasi} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 24:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 27:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) Ts {*leasi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 31
	 Choosing alt 0 in insn 31:  (0) =rm  (1) %0  (2) re {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 32:  (0) q  (1) m {*movqi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=21,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
          alt=3,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=4,overall=11,losers=1 -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=9,losers=1 -- refuse
	 Choosing alt 5 in insn 33:  (0) Yp  (1) Yp  (2) ln {*addqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =r  (1) Ts {*leasi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 36
	 Choosing alt 0 in insn 36:  (0) =rm  (1) %0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=7,overall=27,losers=2 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 37:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 45:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =r  (1) Ts {*leasi} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 50:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2 3 4
EBB 5 6
EBB 8
EBB 9
EBB 7

********** Pseudo live ranges #1: **********

  BB 7
  BB 8
   Insn 60: point = 0, n_alt = -1
   Insn 59: point = 0, n_alt = -1
  BB 6
   Insn 55: point = 0, n_alt = -1
   Insn 50: point = 0, n_alt = 0
   Insn 49: point = 0, n_alt = 0
   Insn 48: point = 0, n_alt = -2
   Insn 47: point = 1, n_alt = 0
   Insn 46: point = 2, n_alt = 0
   Insn 45: point = 3, n_alt = 0
  BB 9
   Insn 64: point = 4, n_alt = -1
  BB 5
   Insn 39: point = 4, n_alt = -1
   Insn 38: point = 4, n_alt = 0
   Insn 37: point = 5, n_alt = 8
   Insn 36: point = 6, n_alt = 0
   Insn 35: point = 8, n_alt = 0
   Insn 34: point = 9, n_alt = 0
   Insn 33: point = 10, n_alt = 5
   Insn 32: point = 11, n_alt = 4
   Insn 31: point = 13, n_alt = 0
   Insn 30: point = 15, n_alt = 0
   Insn 29: point = 16, n_alt = 0
   Insn 28: point = 17, n_alt = 0
   Insn 27: point = 17, n_alt = 0
  BB 4
   Insn 24: point = 18, n_alt = 0
   Insn 23: point = 18, n_alt = 0
   Insn 22: point = 18, n_alt = -2
   Insn 21: point = 18, n_alt = 0
   Insn 20: point = 19, n_alt = 0
   Insn 19: point = 20, n_alt = 0
  BB 3
   Insn 17: point = 21, n_alt = -1
   Insn 16: point = 21, n_alt = 0
   Insn 15: point = 22, n_alt = -2
   Insn 14: point = 24, n_alt = 0
  BB 2
   Insn 8: point = 26, n_alt = -1
   Insn 7: point = 26, n_alt = 0
   Insn 65: point = 26, n_alt = 0
 r82: [0..26]
 r83: [23..24]
 r84: [21..22]
 r85: [4..11]
 r86: [5..10]
 r87: [18..19]
 r88: [14..16]
 r89: [14..15]
 r90: [12..13]
 r91: [7..9]
 r92: [7..8]
 r93: [5..6]
 r94: [1..2]
Compressing live ranges: from 27 to 16 - 59%
Ranges after the compression:
 r82: [0..15]
 r83: [14..15]
 r84: [12..13]
 r85: [2..5]
 r86: [2..5]
 r87: [10..11]
 r88: [8..9]
 r89: [8..9]
 r90: [6..7]
 r91: [4..5]
 r92: [4..5]
 r93: [2..3]
 r94: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=16)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
changing reg in insn 65
changing reg in insn 48
changing reg in insn 46
changing reg in insn 34
changing reg in insn 29
changing reg in insn 22
changing reg in insn 20
changing reg in insn 14
changing reg in insn 14
changing reg in insn 15
changing reg in insn 15
changing reg in insn 16
changing reg in insn 32
changing reg in insn 38
changing reg in insn 33
changing reg in insn 33
changing reg in insn 37
changing reg in insn 20
changing reg in insn 21
changing reg in insn 29
changing reg in insn 30
changing reg in insn 31
changing reg in insn 32
changing reg in insn 34
changing reg in insn 35
changing reg in insn 36
changing reg in insn 37
changing reg in insn 46
changing reg in insn 47
deleting insn with uid = 15.
deleting insn with uid = 22.
deleting insn with uid = 48.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 23.
verify found no changes in insn with uid = 49.


free_table

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 17 [flags]
;;  ref usage 	r0={9d,7u} r1={5d,2u} r2={5d,2u} r3={1d,7u} r4={1d,1u} r7={7d,29u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={15d,3u} r18={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} 
;;    total ref usage 224{173d,51u,0e} in 33{31 regular + 2 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 65 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 65 3 2 2 (parallel [
            (set (reg:SI 3 bx [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 65 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 2 8 2 (set (reg:CC 17 flags)
        (compare:CC (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])) [1 addr+0 S4 A32])
            (const_int 1048575 [0xfffff]))) "mm/memory.c":261:5 11 {*cmpsi_1}
     (nil))
(jump_insn 8 7 13 2 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 58)
            (pc))) "mm/memory.c":261:5 806 {*jcc}
     (nil)
 -> 58)
(note 13 8 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 16 3 (set (reg:SI 0 ax [orig:83 HIGH_MEMORY.9_1 ] [83])
        (mem/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("HIGH_MEMORY") [flags 0x2]  <var_decl 0x7b517d52f510 HIGH_MEMORY>)
                        ] UNSPEC_GOTOFF))) [1 HIGH_MEMORY+0 S4 A32])) "mm/memory.c":263:11 75 {*movsi_internal}
     (nil))
(insn 16 14 17 3 (set (reg:CC 17 flags)
        (compare:CC (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])) [1 addr+0 S4 A32])
            (reg:SI 0 ax [orig:84 HIGH_MEMORY.10_2 ] [84]))) "mm/memory.c":263:5 11 {*cmpsi_1}
     (nil))
(jump_insn 17 16 18 3 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 25)
            (pc))) "mm/memory.c":263:5 806 {*jcc}
     (nil)
 -> 25)
(note 18 17 19 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 19 18 20 4 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":264:3 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 20 19 21 4 (set (reg/f:SI 0 ax [87])
        (plus:SI (reg:SI 3 bx [82])
            (const:SI (unspec:SI [
                        (symbol_ref/f:SI ("*.LC1") [flags 0x2]  <var_decl 0x7b517d59d5a0 *.LC1>)
                    ] UNSPEC_GOTOFF)))) "mm/memory.c":264:3 205 {*leasi}
     (expr_list:REG_EQUAL (symbol_ref/f:SI ("*.LC1") [flags 0x2]  <var_decl 0x7b517d59d5a0 *.LC1>)
        (nil)))
(insn 21 20 23 4 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [15  S4 A32])
        (reg/f:SI 0 ax [87])) "mm/memory.c":264:3 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 23 21 24 4 (call (mem:QI (symbol_ref:SI ("panic") [flags 0x41]  <function_decl 0x7b517d4d2900 panic>) [0 panic S1 A8])
        (const_int 16 [0x10])) "mm/memory.c":264:3 812 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 24 23 25 4 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":264:3 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(code_label 25 24 26 5 49 (nil) [1 uses])
(note 26 25 27 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 27 26 28 5 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 16 [0x10])) [1 addr+0 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 16 [0x10])) [1 addr+0 S4 A32])
                    (const_int -1048576 [0xfffffffffff00000])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":265:7 209 {*addsi_1}
     (nil))
(insn 28 27 29 5 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 16 [0x10])) [1 addr+0 S4 A32])
                (lshiftrt:SI (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 16 [0x10])) [1 addr+0 S4 A32])
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":266:7 701 {*lshrsi3_1}
     (nil))
(insn 29 28 30 5 (set (reg:SI 1 dx [88])
        (plus:SI (reg:SI 3 bx [82])
            (const:SI (unspec:SI [
                        (symbol_ref:SI ("mem_map") [flags 0x2]  <var_decl 0x7b517d52f5a0 mem_map>)
                    ] UNSPEC_GOTOFF)))) "mm/memory.c":267:13 205 {*leasi}
     (nil))
(insn 30 29 31 5 (set (reg:SI 0 ax [89])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [1 addr+0 S4 A32])) "mm/memory.c":267:13 75 {*movsi_internal}
     (nil))
(insn 31 30 32 5 (parallel [
            (set (reg/f:SI 0 ax [90])
                (plus:SI (reg:SI 0 ax [89])
                    (reg:SI 1 dx [88])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":267:13 209 {*addsi_1}
     (nil))
(insn 32 31 33 5 (set (reg:QI 0 ax [orig:85 _3 ] [85])
        (mem:QI (reg/f:SI 0 ax [90]) [0 mem_map[addr_12]+0 S1 A8])) "mm/memory.c":267:13 77 {*movqi_internal}
     (nil))
(insn 33 32 34 5 (parallel [
            (set (reg:QI 1 dx [orig:86 _5 ] [86])
                (plus:QI (reg:QI 0 ax [orig:85 _3 ] [85])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":267:19 213 {*addqi_1}
     (nil))
(insn 34 33 35 5 (set (reg:SI 4 si [91])
        (plus:SI (reg:SI 3 bx [82])
            (const:SI (unspec:SI [
                        (symbol_ref:SI ("mem_map") [flags 0x2]  <var_decl 0x7b517d52f5a0 mem_map>)
                    ] UNSPEC_GOTOFF)))) "mm/memory.c":267:19 205 {*leasi}
     (nil))
(insn 35 34 36 5 (set (reg:SI 2 cx [92])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [1 addr+0 S4 A32])) "mm/memory.c":267:19 75 {*movsi_internal}
     (nil))
(insn 36 35 37 5 (parallel [
            (set (reg/f:SI 2 cx [93])
                (plus:SI (reg:SI 2 cx [92])
                    (reg:SI 4 si [91])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":267:19 209 {*addsi_1}
     (nil))
(insn 37 36 38 5 (set (mem:QI (reg/f:SI 2 cx [93]) [0 mem_map[addr_12]+0 S1 A8])
        (reg:QI 1 dx [orig:86 _5 ] [86])) "mm/memory.c":267:19 77 {*movqi_internal}
     (nil))
(insn 38 37 39 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:85 _3 ] [85])
            (const_int 0 [0]))) "mm/memory.c":267:5 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 39 38 44 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 63)
            (pc))) "mm/memory.c":267:5 806 {*jcc}
     (nil)
 -> 63)
(note 44 39 45 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 45 44 46 6 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":269:2 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 46 45 47 6 (set (reg/f:SI 0 ax [94])
        (plus:SI (reg:SI 3 bx [82])
            (const:SI (unspec:SI [
                        (symbol_ref/f:SI ("*.LC2") [flags 0x2]  <var_decl 0x7b517d59d630 *.LC2>)
                    ] UNSPEC_GOTOFF)))) "mm/memory.c":269:2 205 {*leasi}
     (expr_list:REG_EQUAL (symbol_ref/f:SI ("*.LC2") [flags 0x2]  <var_decl 0x7b517d59d630 *.LC2>)
        (nil)))
(insn 47 46 49 6 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [15  S4 A32])
        (reg/f:SI 0 ax [94])) "mm/memory.c":269:2 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 49 47 50 6 (call (mem:QI (symbol_ref:SI ("panic") [flags 0x41]  <function_decl 0x7b517d4d2900 panic>) [0 panic S1 A8])
        (const_int 16 [0x10])) "mm/memory.c":269:2 812 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 50 49 55 6 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":269:2 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(jump_insn 55 50 56 6 (set (pc)
        (label_ref 53)) 807 {jump}
     (nil)
 -> 53)
(barrier 56 55 58)
(code_label 58 56 57 8 51 (nil) [1 uses])
(note 57 58 59 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 59 57 60 8 (const_int 0 [0]) "mm/memory.c":262:3 843 {nop}
     (nil))
(jump_insn 60 59 61 8 (set (pc)
        (label_ref 53)) 807 {jump}
     (nil)
 -> 53)
(barrier 61 60 63)
(code_label 63 61 62 9 52 (nil) [1 uses])
(note 62 63 64 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 64 62 53 9 (const_int 0 [0]) "mm/memory.c":268:3 843 {nop}
     (nil))
(code_label 53 64 54 7 46 (nil) [2 uses])
(note 54 53 66 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(note 66 54 0 NOTE_INSN_DELETED)

;; Function put_page (put_page, funcdef_no=8, decl_uid=1396, cgraph_uid=9, symbol_order=10)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 16:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-4)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) Ts {*leasi} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 23:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 27:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 29:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 33:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-4)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r  (1) Ts {*leasi} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 40:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 45:  (0) =rm  (1) %0  (2) re {*andsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 46:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 49:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 55:  (0) =rm  (1) %0  (2) re {*andsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 56:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (1) lBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 63:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 64:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 73:  (0) =rm  (1) %0  (2) re {*iorsi_1}
      Creating newreg=117 from oldreg=109, assigning class GENERAL_REGS to r117
   73: {r117:SI=r117:SI|0x7;clobber flags:CC;}
      REG_DEAD r109:SI
      REG_UNUSED flags:CC
      REG_EQUAL [frame:SI-0x8]|0x7
    Inserting insn reload before:
  105: r117:SI=r109:SI
    Inserting insn reload after:
  106: r94:SI=r117:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 75:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 77:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 82:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 83:  (0) r  (1) l  (2) M {*ashlsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 85
	 Choosing alt 0 in insn 85:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 87:  (0) =rm  (1) %0  (2) re {*iorsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 88:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2 3
EBB 4
EBB 5 6
EBB 7 8
EBB 9 10
EBB 11
EBB 12
EBB 13

********** Pseudo live ranges #1: **********

  BB 13
   Insn 97: point = 0, n_alt = -1
   Insn 96: point = 0, n_alt = -2
   Insn 92: point = 1, n_alt = -2
  BB 10
   Insn 101: point = 4, n_alt = -1
   Insn 67: point = 4, n_alt = 0
  BB 12
   Insn 89: point = 5, n_alt = 0
   Insn 88: point = 6, n_alt = 1
   Insn 87: point = 7, n_alt = 0
   Insn 86: point = 9, n_alt = 0
   Insn 85: point = 10, n_alt = 0
   Insn 84: point = 12, n_alt = 0
   Insn 83: point = 13, n_alt = 1
   Insn 82: point = 15, n_alt = 0
   Insn 81: point = 17, n_alt = 0
   Insn 80: point = 19, n_alt = 0
  BB 8
   Insn 99: point = 20, n_alt = -1
   Insn 56: point = 20, n_alt = 1
   Insn 55: point = 21, n_alt = 0
   Insn 54: point = 23, n_alt = 0
   Insn 53: point = 25, n_alt = 0
  BB 11
   Insn 77: point = 26, n_alt = 1
   Insn 76: point = 27, n_alt = 0
   Insn 75: point = 28, n_alt = 1
   Insn 74: point = 29, n_alt = 0
   Insn 106: point = 30, n_alt = -2
	Hard reg 1 is preferable by r117 with profit 1000
   Insn 73: point = 32, n_alt = 0
   Insn 105: point = 33, n_alt = -2
	Hard reg 1 is preferable by r117 with profit 1000
	Hard reg 0 is preferable by r117 with profit 1000
   Insn 72: point = 35, n_alt = 0
  BB 9
   Insn 65: point = 36, n_alt = -1
   Insn 64: point = 36, n_alt = 1
   Insn 63: point = 36, n_alt = 1
   Insn 62: point = 37, n_alt = -2
   Insn 61: point = 38, n_alt = 0
  BB 7
   Insn 51: point = 38, n_alt = -1
   Insn 50: point = 38, n_alt = 0
   Insn 49: point = 39, n_alt = 0
   Insn 48: point = 41, n_alt = 0
   Insn 47: point = 43, n_alt = 0
   Insn 46: point = 44, n_alt = 1
   Insn 45: point = 45, n_alt = 0
   Insn 44: point = 47, n_alt = 0
   Insn 43: point = 49, n_alt = 0
  BB 6
   Insn 40: point = 50, n_alt = 0
   Insn 39: point = 50, n_alt = 0
   Insn 38: point = 50, n_alt = -2
   Insn 37: point = 51, n_alt = 0
   Insn 36: point = 52, n_alt = 0
   Insn 35: point = 53, n_alt = 0
   Insn 34: point = 53, n_alt = 0
   Insn 33: point = 53, n_alt = 0
  BB 5
   Insn 31: point = 54, n_alt = -1
   Insn 30: point = 54, n_alt = 0
   Insn 29: point = 55, n_alt = 4
   Insn 28: point = 57, n_alt = 0
   Insn 27: point = 59, n_alt = 0
   Insn 26: point = 61, n_alt = 0
  BB 4
   Insn 23: point = 63, n_alt = 0
   Insn 22: point = 63, n_alt = 0
   Insn 21: point = 63, n_alt = -2
   Insn 20: point = 63, n_alt = 0
   Insn 19: point = 64, n_alt = 0
   Insn 18: point = 65, n_alt = 0
   Insn 17: point = 65, n_alt = 0
   Insn 16: point = 65, n_alt = 0
  BB 3
   Insn 13: point = 66, n_alt = -1
   Insn 12: point = 66, n_alt = 0
   Insn 11: point = 67, n_alt = -2
   Insn 10: point = 69, n_alt = 0
  BB 2
   Insn 8: point = 71, n_alt = -1
   Insn 7: point = 71, n_alt = 0
   Insn 103: point = 71, n_alt = 0
 r82: [50..71]
 r83: [68..69]
 r84: [66..67]
 r85: [58..59]
 r86: [56..57]
 r87: [54..55]
 r88: [46..47]
 r89: [44..45]
 r90: [40..41]
 r91: [38..39]
 r92: [22..23]
 r93: [20..21]
 r94: [28..30]
 r95: [16..17]
 r96: [14..15]
 r97: [11..13]
 r98: [6..10]
 r99: [6..7]
 r100: [2..5]
 r101: [0..1]
 r102: [63..64]
 r103: [60..61]
 r104: [51..52]
 r105: [48..49]
 r106: [42..43]
 r107: [24..25]
 r108: [36..37]
 r109: [34..35]
 r110: [28..29]
 r111: [26..27]
 r112: [18..19]
 r113: [11..12]
 r114: [8..9]
 r117: [31..33]
Compressing live ranges: from 72 to 60 - 83%
Ranges after the compression:
 r82: [44..59]
 r83: [58..59]
 r84: [56..57]
 r85: [50..51]
 r86: [48..49]
 r87: [46..47]
 r88: [40..41]
 r89: [38..39]
 r90: [34..35]
 r91: [32..33]
 r92: [18..19]
 r93: [16..17]
 r94: [24..25]
 r95: [12..13]
 r96: [10..11]
 r97: [8..9]
 r98: [4..7]
 r99: [4..5]
 r100: [2..3]
 r101: [0..1]
 r102: [54..55]
 r103: [52..53]
 r104: [44..45]
 r105: [42..43]
 r106: [36..37]
 r107: [20..21]
 r108: [30..31]
 r109: [28..29]
 r110: [24..25]
 r111: [22..23]
 r112: [14..15]
 r113: [8..9]
 r114: [6..7]
 r117: [26..27]

********** Assignment #1: **********

	 Assigning to 117 (cl=GENERAL_REGS, orig=109, freq=3000, tfirst=117, tfreq=3000)...
	   Assign 0 to reload r117 (freq=3000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=32)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=16)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
changing reg in insn 103
changing reg in insn 38
changing reg in insn 36
changing reg in insn 29
changing reg in insn 21
changing reg in insn 19
changing reg in insn 10
changing reg in insn 10
changing reg in insn 11
changing reg in insn 11
changing reg in insn 12
changing reg in insn 27
changing reg in insn 28
changing reg in insn 28
changing reg in insn 29
changing reg in insn 29
changing reg in insn 30
changing reg in insn 44
changing reg in insn 45
changing reg in insn 45
changing reg in insn 46
changing reg in insn 48
changing reg in insn 49
changing reg in insn 49
changing reg in insn 50
changing reg in insn 54
changing reg in insn 55
changing reg in insn 55
changing reg in insn 56
changing reg in insn 75
changing reg in insn 81
changing reg in insn 82
changing reg in insn 82
changing reg in insn 83
changing reg in insn 83
changing reg in insn 85
changing reg in insn 85
changing reg in insn 88
changing reg in insn 87
changing reg in insn 88
changing reg in insn 89
changing reg in insn 67
changing reg in insn 92
changing reg in insn 92
changing reg in insn 96
changing reg in insn 19
changing reg in insn 20
changing reg in insn 26
changing reg in insn 27
changing reg in insn 36
changing reg in insn 37
changing reg in insn 43
changing reg in insn 44
changing reg in insn 47
changing reg in insn 48
changing reg in insn 53
changing reg in insn 54
changing reg in insn 62
changing reg in insn 63
changing reg in insn 72
changing reg in insn 74
changing reg in insn 75
changing reg in insn 76
changing reg in insn 77
changing reg in insn 80
changing reg in insn 81
changing reg in insn 84
changing reg in insn 86
changing reg in insn 87
deleting insn with uid = 11.
deleting insn with uid = 21.
deleting insn with uid = 38.
deleting insn with uid = 62.
deleting insn with uid = 105.
deleting insn with uid = 92.
deleting insn with uid = 96.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 22.
verify found no changes in insn with uid = 39.
verify found no changes in insn with uid = 61.


put_page

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 17 [flags]
;;  ref usage 	r0={31d,28u} r1={8d,4u,1e} r2={4d} r3={1d,6u} r7={11d,52u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r16={4e} r17={25d,5u} r18={3d} r19={2e} r20={3d} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} 
;;    total ref usage 377{275d,95u,7e} in 64{61 regular + 3 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 103 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 103 3 2 2 (parallel [
            (set (reg:SI 3 bx [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 103 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 2 8 2 (set (reg:CC 17 flags)
        (compare:CC (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 32 [0x20])) [1 page+0 S4 A32])
            (const_int 1048575 [0xfffff]))) "mm/memory.c":283:5 11 {*cmpsi_1}
     (nil))
(jump_insn 8 7 9 2 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 14)
            (pc))) "mm/memory.c":283:5 806 {*jcc}
     (nil)
 -> 14)
(note 9 8 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 12 3 (set (reg:SI 0 ax [orig:83 HIGH_MEMORY.11_1 ] [83])
        (mem/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("HIGH_MEMORY") [flags 0x2]  <var_decl 0x7b517d52f510 HIGH_MEMORY>)
                        ] UNSPEC_GOTOFF))) [1 HIGH_MEMORY+0 S4 A32])) "mm/memory.c":283:29 75 {*movsi_internal}
     (nil))
(insn 12 10 13 3 (set (reg:CC 17 flags)
        (compare:CC (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 32 [0x20])) [1 page+0 S4 A32])
            (reg:SI 0 ax [orig:84 HIGH_MEMORY.12_2 ] [84]))) "mm/memory.c":283:21 11 {*cmpsi_1}
     (nil))
(jump_insn 13 12 14 3 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 24)
            (pc))) "mm/memory.c":283:21 806 {*jcc}
     (nil)
 -> 24)
(code_label 14 13 15 4 54 (nil) [1 uses])
(note 15 14 16 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 17 4 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":284:3 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 4 [0x4])
        (nil)))
(insn 17 16 18 4 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [1  S4 A32])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 40 [0x28])) [1 address+0 S4 A32])) "mm/memory.c":284:3 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 18 17 19 4 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [1  S4 A32])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 40 [0x28])) [1 page+0 S4 A32])) "mm/memory.c":284:3 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 19 18 20 4 (set (reg/f:SI 0 ax [102])
        (plus:SI (reg:SI 3 bx [82])
            (const:SI (unspec:SI [
                        (symbol_ref/f:SI ("*.LC7") [flags 0x2]  <var_decl 0x7b517d59dbd0 *.LC7>)
                    ] UNSPEC_GOTOFF)))) "mm/memory.c":284:3 205 {*leasi}
     (expr_list:REG_EQUAL (symbol_ref/f:SI ("*.LC7") [flags 0x2]  <var_decl 0x7b517d59dbd0 *.LC7>)
        (nil)))
(insn 20 19 22 4 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [15  S4 A32])
        (reg/f:SI 0 ax [102])) "mm/memory.c":284:3 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 22 20 23 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("printk") [flags 0x41]  <function_decl 0x7b517d4d2700 printk>) [0 printk S1 A8])
            (const_int 16 [0x10]))) "mm/memory.c":284:3 823 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 23 22 24 4 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":284:3 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(code_label 24 23 25 5 55 (nil) [1 uses])
(note 25 24 26 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 26 25 27 5 (set (reg:SI 0 ax [103])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 32 [0x20])) [1 page+0 S4 A32])) "mm/memory.c":285:20 75 {*movsi_internal}
     (nil))
(insn 27 26 28 5 (parallel [
            (set (reg:SI 0 ax [orig:85 _3 ] [85])
                (plus:SI (reg:SI 0 ax [103])
                    (const_int -1048576 [0xfffffffffff00000])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":285:20 209 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (reg/f:SI 16 argp) [1 page+0 S4 A32])
            (const_int -1048576 [0xfffffffffff00000]))
        (nil)))
(insn 28 27 29 5 (parallel [
            (set (reg:SI 0 ax [orig:86 _4 ] [86])
                (lshiftrt:SI (reg:SI 0 ax [orig:85 _3 ] [85])
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":285:31 701 {*lshrsi3_1}
     (nil))
(insn 29 28 30 5 (set (reg:QI 0 ax [orig:87 _5 ] [87])
        (mem:QI (plus:SI (plus:SI (reg:SI 3 bx [82])
                    (reg:SI 0 ax [orig:86 _4 ] [86]))
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("mem_map") [flags 0x2]  <var_decl 0x7b517d52f5a0 mem_map>)
                        ] UNSPEC_GOTOFF))) [0 mem_map[_4]+0 S1 A8])) "mm/memory.c":285:13 77 {*movqi_internal}
     (nil))
(insn 30 29 31 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:87 _5 ] [87])
            (const_int 1 [0x1]))) "mm/memory.c":285:5 9 {*cmpqi_1}
     (nil))
(jump_insn 31 30 32 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 41)
            (pc))) "mm/memory.c":285:5 806 {*jcc}
     (nil)
 -> 41)
(note 32 31 33 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 33 32 34 6 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":286:3 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 4 [0x4])
        (nil)))
(insn 34 33 35 6 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [1  S4 A32])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 40 [0x28])) [1 address+0 S4 A32])) "mm/memory.c":286:3 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 35 34 36 6 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [1  S4 A32])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 40 [0x28])) [1 page+0 S4 A32])) "mm/memory.c":286:3 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 36 35 37 6 (set (reg/f:SI 0 ax [104])
        (plus:SI (reg:SI 3 bx [82])
            (const:SI (unspec:SI [
                        (symbol_ref/f:SI ("*.LC8") [flags 0x2]  <var_decl 0x7b517d59dc60 *.LC8>)
                    ] UNSPEC_GOTOFF)))) "mm/memory.c":286:3 205 {*leasi}
     (expr_list:REG_EQUAL (symbol_ref/f:SI ("*.LC8") [flags 0x2]  <var_decl 0x7b517d59dc60 *.LC8>)
        (nil)))
(insn 37 36 39 6 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [15  S4 A32])
        (reg/f:SI 0 ax [104])) "mm/memory.c":286:3 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 39 37 40 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("printk") [flags 0x41]  <function_decl 0x7b517d4d2700 printk>) [0 printk S1 A8])
            (const_int 16 [0x10]))) "mm/memory.c":286:3 823 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 40 39 41 6 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":286:3 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(code_label 41 40 42 7 56 (nil) [1 uses])
(note 42 41 43 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 43 42 44 7 (set (reg:SI 0 ax [105])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 36 [0x24])) [1 address+0 S4 A32])) "mm/memory.c":287:42 75 {*movsi_internal}
     (nil))
(insn 44 43 45 7 (parallel [
            (set (reg:SI 0 ax [orig:88 _6 ] [88])
                (lshiftrt:SI (reg:SI 0 ax [105])
                    (const_int 20 [0x14])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":287:42 701 {*lshrsi3_1}
     (expr_list:REG_EQUAL (lshiftrt:SI (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                    (const_int 4 [0x4])) [1 address+0 S4 A32])
            (const_int 20 [0x14]))
        (nil)))
(insn 45 44 46 7 (parallel [
            (set (reg:SI 0 ax [orig:89 _7 ] [89])
                (and:SI (reg:SI 0 ax [orig:88 _6 ] [88])
                    (const_int 4092 [0xffc])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":287:49 490 {*andsi_1}
     (nil))
(insn 46 45 47 7 (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [16 page_table+0 S4 A32])
        (reg:SI 0 ax [orig:89 _7 ] [89])) "mm/memory.c":287:13 75 {*movsi_internal}
     (nil))
(insn 47 46 48 7 (set (reg/f:SI 0 ax [106])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [16 page_table+0 S4 A32])) "mm/memory.c":288:7 75 {*movsi_internal}
     (nil))
(insn 48 47 49 7 (set (reg:SI 0 ax [orig:90 _8 ] [90])
        (mem:SI (reg/f:SI 0 ax [106]) [1 *page_table_29+0 S4 A32])) "mm/memory.c":288:7 75 {*movsi_internal}
     (nil))
(insn 49 48 50 7 (parallel [
            (set (reg:SI 0 ax [orig:91 _9 ] [91])
                (and:SI (reg:SI 0 ax [orig:90 _8 ] [90])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":288:20 490 {*andsi_1}
     (nil))
(insn 50 49 51 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:91 _9 ] [91])
            (const_int 0 [0]))) "mm/memory.c":288:5 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 51 50 52 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 59)
            (pc))) "mm/memory.c":288:5 806 {*jcc}
     (nil)
 -> 59)
(note 52 51 53 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 53 52 54 8 (set (reg/f:SI 0 ax [107])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [16 page_table+0 S4 A32])) "mm/memory.c":289:47 75 {*movsi_internal}
     (nil))
(insn 54 53 55 8 (set (reg:SI 0 ax [orig:92 _10 ] [92])
        (mem:SI (reg/f:SI 0 ax [107]) [1 *page_table_29+0 S4 A32])) "mm/memory.c":289:47 75 {*movsi_internal}
     (nil))
(insn 55 54 56 8 (parallel [
            (set (reg:SI 0 ax [orig:93 _11 ] [93])
                (and:SI (reg:SI 0 ax [orig:92 _10 ] [92])
                    (const_int -4096 [0xfffffffffffff000])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":289:45 490 {*andsi_1}
     (nil))
(insn 56 55 99 8 (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [16 page_table+0 S4 A32])
        (reg:SI 0 ax [orig:93 _11 ] [93])) "mm/memory.c":289:14 75 {*movsi_internal}
     (nil))
(jump_insn 99 56 100 8 (set (pc)
        (label_ref 78)) 807 {jump}
     (nil)
 -> 78)
(barrier 100 99 59)
(code_label 59 100 60 9 57 (nil) [1 uses])
(note 60 59 61 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(call_insn 61 60 63 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("get_free_page") [flags 0x3]  <function_decl 0x7b517d53b100 get_free_page>) [0 get_free_page S1 A8])
            (const_int 0 [0]))) "mm/memory.c":291:15 823 {*call_value}
     (nil)
    (nil))
(insn 63 61 64 9 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [1 tmp+0 S4 A32])
        (reg:SI 0 ax [108])) "mm/memory.c":291:15 75 {*movsi_internal}
     (nil))
(insn 64 63 65 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 8 [0x8])) [1 tmp+0 S4 A32])
            (const_int 0 [0]))) "mm/memory.c":291:6 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 65 64 66 9 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 70)
            (pc))) "mm/memory.c":291:6 806 {*jcc}
     (nil)
 -> 70)
(note 66 65 67 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 67 66 101 10 (set (reg:SI 0 ax [orig:100 _19 ] [100])
        (const_int 0 [0])) "mm/memory.c":292:11 75 {*movsi_internal}
     (nil))
(jump_insn 101 67 102 10 (set (pc)
        (label_ref 90)) "mm/memory.c":292:11 807 {jump}
     (nil)
 -> 90)
(barrier 102 101 70)
(code_label 70 102 71 11 59 (nil) [1 uses])
(note 71 70 72 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 72 71 73 11 (set (reg:SI 0 ax [109])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [1 tmp+0 S4 A32])) "mm/memory.c":293:21 75 {*movsi_internal}
     (nil))
(insn 73 72 106 11 (parallel [
            (set (reg:SI 0 ax [109])
                (ior:SI (reg:SI 0 ax [109])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":293:21 520 {*iorsi_1}
     (expr_list:REG_EQUAL (ior:SI (mem/c:SI (plus:SI (reg/f:SI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 tmp+0 S4 A32])
            (const_int 7 [0x7]))
        (nil)))
(insn 106 73 74 11 (set (reg:SI 1 dx [orig:94 _12 ] [94])
        (reg:SI 0 ax [109])) "mm/memory.c":293:21 75 {*movsi_internal}
     (nil))
(insn 74 106 75 11 (set (reg/f:SI 0 ax [110])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [16 page_table+0 S4 A32])) "mm/memory.c":293:15 75 {*movsi_internal}
     (nil))
(insn 75 74 76 11 (set (mem:SI (reg/f:SI 0 ax [110]) [1 *page_table_29+0 S4 A32])
        (reg:SI 1 dx [orig:94 _12 ] [94])) "mm/memory.c":293:15 75 {*movsi_internal}
     (nil))
(insn 76 75 77 11 (set (reg:SI 0 ax [111])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [1 tmp+0 S4 A32])) "mm/memory.c":294:14 75 {*movsi_internal}
     (nil))
(insn 77 76 78 11 (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [16 page_table+0 S4 A32])
        (reg:SI 0 ax [111])) "mm/memory.c":294:14 75 {*movsi_internal}
     (nil))
(code_label 78 77 79 12 58 (nil) [1 uses])
(note 79 78 80 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 80 79 81 12 (set (reg:SI 0 ax [112])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 36 [0x24])) [1 address+0 S4 A32])) "mm/memory.c":296:22 75 {*movsi_internal}
     (nil))
(insn 81 80 82 12 (parallel [
            (set (reg:SI 0 ax [orig:95 _13 ] [95])
                (lshiftrt:SI (reg:SI 0 ax [112])
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":296:22 701 {*lshrsi3_1}
     (expr_list:REG_EQUAL (lshiftrt:SI (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                    (const_int 4 [0x4])) [1 address+0 S4 A32])
            (const_int 12 [0xc]))
        (nil)))
(insn 82 81 83 12 (parallel [
            (set (reg:SI 0 ax [orig:96 _14 ] [96])
                (and:SI (reg:SI 0 ax [orig:95 _13 ] [95])
                    (const_int 1023 [0x3ff])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":296:29 490 {*andsi_1}
     (nil))
(insn 83 82 84 12 (parallel [
            (set (reg:SI 1 dx [orig:97 _15 ] [97])
                (ashift:SI (reg:SI 0 ax [orig:96 _14 ] [96])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":296:12 655 {*ashlsi3_1}
     (nil))
(insn 84 83 85 12 (set (reg/f:SI 0 ax [113])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [16 page_table+0 S4 A32])) "mm/memory.c":296:12 75 {*movsi_internal}
     (nil))
(insn 85 84 86 12 (parallel [
            (set (reg/f:SI 0 ax [orig:98 _16 ] [98])
                (plus:SI (reg/f:SI 0 ax [113])
                    (reg:SI 1 dx [orig:97 _15 ] [97])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":296:12 209 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 19 frame)
                    (const_int -4 [0xfffffffffffffffc])) [16 page_table+0 S4 A32])
            (reg:SI 1 dx [orig:97 _15 ] [97]))
        (nil)))
(insn 86 85 87 12 (set (reg:SI 1 dx [114])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 32 [0x20])) [1 page+0 S4 A32])) "mm/memory.c":296:45 75 {*movsi_internal}
     (nil))
(insn 87 86 88 12 (parallel [
            (set (reg:SI 1 dx [orig:99 _17 ] [99])
                (ior:SI (reg:SI 1 dx [114])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":296:45 520 {*iorsi_1}
     (expr_list:REG_EQUAL (ior:SI (mem/c:SI (reg/f:SI 16 argp) [1 page+0 S4 A32])
            (const_int 7 [0x7]))
        (nil)))
(insn 88 87 89 12 (set (mem:SI (reg/f:SI 0 ax [orig:98 _16 ] [98]) [1 *_16+0 S4 A32])
        (reg:SI 1 dx [orig:99 _17 ] [99])) "mm/memory.c":296:38 75 {*movsi_internal}
     (nil))
(insn 89 88 90 12 (set (reg:SI 0 ax [orig:100 _19 ] [100])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 32 [0x20])) [1 page+0 S4 A32])) "mm/memory.c":298:9 75 {*movsi_internal}
     (nil))
(code_label 90 89 91 13 60 (nil) [1 uses])
(note 91 90 97 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 97 91 104 13 (use (reg/i:SI 0 ax)) "mm/memory.c":299:1 -1
     (nil))
(note 104 97 0 NOTE_INSN_DELETED)

;; Function get_empty_page (get_empty_page, funcdef_no=9, decl_uid=1401, cgraph_uid=10, symbol_order=11)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (1) lBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 11:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 15:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 21:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 24:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) lBwBz {*call}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2 3
EBB 4
EBB 6
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
  BB 6
   Insn 34: point = 0, n_alt = -1
  BB 4
   Insn 25: point = 0, n_alt = 0
   Insn 24: point = 0, n_alt = 0
   Insn 23: point = 0, n_alt = 0
   Insn 22: point = 0, n_alt = 0
   Insn 21: point = 0, n_alt = 0
  BB 3
   Insn 18: point = 0, n_alt = -1
   Insn 17: point = 0, n_alt = 0
   Insn 16: point = 1, n_alt = -2
   Insn 15: point = 2, n_alt = 0
   Insn 14: point = 2, n_alt = 0
   Insn 13: point = 2, n_alt = 0
   Insn 12: point = 2, n_alt = 0
   Insn 11: point = 2, n_alt = 0
  BB 2
   Insn 9: point = 2, n_alt = -1
   Insn 8: point = 2, n_alt = 1
   Insn 7: point = 2, n_alt = 1
   Insn 6: point = 3, n_alt = -2
   Insn 5: point = 4, n_alt = 0
   Insn 35: point = 4, n_alt = 0
 r82: [4..4]
 r83: [0..1]
 r84: [2..3]
Compressing live ranges: from 5 to 5 - 100%
Ranges after the compression:
 r82: [4..4]
 r83: [0..1]
 r84: [2..3]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=32)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=16)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
changing reg in insn 35
changing reg in insn 16
changing reg in insn 17
changing reg in insn 6
changing reg in insn 7
deleting insn with uid = 6.
deleting insn with uid = 16.
starting the processing of deferred insns
ending the processing of deferred insns


get_empty_page

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0 [ax] 7 [sp] 17 [flags]
;;  ref usage 	r0={6d,2u} r1={5d} r2={5d} r7={8d,26u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={11d,2u} r18={4d} r20={4d} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={4d} r38={4d} r39={4d} r40={4d} r41={4d} r42={4d} r43={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} 
;;    total ref usage 325{295d,30u,0e} in 18{14 regular + 4 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 35 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 35 3 2 2 (parallel [
            (set (reg:SI 0 ax [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 35 5 2 NOTE_INSN_FUNCTION_BEG)
(call_insn 5 2 7 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("get_free_page") [flags 0x3]  <function_decl 0x7b517d53b100 get_free_page>) [0 get_free_page S1 A8])
            (const_int 0 [0]))) "mm/memory.c":305:14 823 {*call_value}
     (nil)
    (nil))
(insn 7 5 8 2 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [1 tmp+0 S4 A32])
        (reg:SI 0 ax [84])) "mm/memory.c":305:14 75 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 12 [0xc])) [1 tmp+0 S4 A32])
            (const_int 0 [0]))) "mm/memory.c":305:5 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 9 8 10 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 19)
            (pc))) "mm/memory.c":305:5 806 {*jcc}
     (nil)
 -> 19)
(note 10 9 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":305:35 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 12 11 13 3 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [1  S4 A32])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 40 [0x28])) [1 address+0 S4 A32])) "mm/memory.c":305:35 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 13 12 14 3 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [1  S4 A32])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [1 tmp+0 S4 A32])) "mm/memory.c":305:35 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 14 13 15 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("put_page") [flags 0x3]  <function_decl 0x7b517d53bc00 put_page>) [0 put_page S1 A8])
            (const_int 16 [0x10]))) "mm/memory.c":305:35 823 {*call_value}
     (nil)
    (nil))
(insn 15 14 17 3 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":305:35 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 17 15 18 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:83 _1 ] [83])
            (const_int 0 [0]))) "mm/memory.c":305:31 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 18 17 19 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 33)
            (pc))) "mm/memory.c":305:31 806 {*jcc}
     (nil)
 -> 33)
(code_label 19 18 20 4 62 (nil) [1 uses])
(note 20 19 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 22 4 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":306:3 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 22 21 23 4 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [1  S4 A32])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [1 tmp+0 S4 A32])) "mm/memory.c":306:3 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 23 22 24 4 (call (mem:QI (symbol_ref:SI ("free_page") [flags 0x3]  <function_decl 0x7b517d53b400 free_page>) [0 free_page S1 A8])
        (const_int 16 [0x10])) "mm/memory.c":306:3 812 {*call}
     (nil)
    (nil))
(insn 24 23 25 4 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":306:3 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(call_insn 25 24 33 4 (call (mem:QI (symbol_ref:SI ("oom") [flags 0x3]  <function_decl 0x7b517d537f00 oom>) [0 oom S1 A8])
        (const_int 0 [0])) "mm/memory.c":307:3 812 {*call}
     (nil)
    (nil))
(code_label 33 25 32 6 64 (nil) [1 uses])
(note 32 33 34 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 34 32 28 6 (const_int 0 [0]) "mm/memory.c":309:1 843 {nop}
     (nil))
(code_label 28 34 29 5 61 (nil) [0 uses])
(note 29 28 36 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(note 36 29 0 NOTE_INSN_DELETED)

;; Function try_to_share (try_to_share, funcdef_no=10, decl_uid=1406, cgraph_uid=11, symbol_order=12)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=32, prev_offset=0)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 164:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 7:  (0) =rm  (1) %0  (2) re {*andsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 14:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=12,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 15:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 20:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=12,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 21:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 26:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 35:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            alt=2: Bad operand -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 38:  (0) =rm  (1) %0  (2) re {*andsi_1}
      Creating newreg=152 from oldreg=93, assigning class GENERAL_REGS to r152
   38: {r152:SI=r152:SI&0xffc;clobber flags:CC;}
      REG_DEAD r93:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  166: r152:SI=r93:SI
    Inserting insn reload after:
  167: r94:SI=r152:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 43
	 Choosing alt 0 in insn 43:  (0) =rm  (1) %0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 44:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 47:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 49:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 58:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 77:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 79:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (1) lBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 85:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 86:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 91:  (0) =rm  (1) %0  (2) re {*iorsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 92:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 97:  (0) lBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 100:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            alt=2: Bad operand -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 103:  (0) =rm  (1) %0  (2) re {*andsi_1}
      Creating newreg=153 from oldreg=103, assigning class GENERAL_REGS to r153
  103: {r153:SI=r153:SI&0xffc;clobber flags:CC;}
      REG_DEAD r103:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  168: r153:SI=r103:SI
    Inserting insn reload after:
  169: r104:SI=r153:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 108
	 Choosing alt 0 in insn 108:  (0) =rm  (1) %0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 109:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 112:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 116:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 117:  (0) =r  (1) Ts {*leasi} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 118:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 120:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 121:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 124:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 125:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 126:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 127:  (0) =rm  (1) %0  (2) re {*andsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 128:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 129:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 130:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 131:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 132:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 133:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 134:  (0) a
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 135:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 136:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (0) =r  (1) Ts {*leasi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 138:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 139
	 Choosing alt 0 in insn 139:  (0) =rm  (1) %0  (2) re {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 140:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=4,overall=11,losers=1 -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=9,losers=1 -- refuse
	 Choosing alt 5 in insn 141:  (0) Yp  (1) Yp  (2) ln {*addqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 142:  (0) =r  (1) Ts {*leasi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 144
	 Choosing alt 0 in insn 144:  (0) =rm  (1) %0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=7,overall=27,losers=2 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 145:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 146:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2 3
EBB 4 5
EBB 6 7
EBB 8
EBB 9 10 11
EBB 12
EBB 13 14
EBB 15
EBB 16

********** Pseudo live ranges #1: **********

  BB 16
   Insn 154: point = 0, n_alt = -1
   Insn 153: point = 0, n_alt = -2
   Insn 149: point = 1, n_alt = -2
  BB 8
   Insn 160: point = 4, n_alt = -1
   Insn 70: point = 4, n_alt = 0
  BB 5
   Insn 158: point = 5, n_alt = -1
   Insn 53: point = 5, n_alt = 0
  BB 3
   Insn 156: point = 6, n_alt = -1
   Insn 30: point = 6, n_alt = 0
  BB 15
   Insn 146: point = 7, n_alt = 0
   Insn 145: point = 8, n_alt = 8
   Insn 144: point = 9, n_alt = 0
   Insn 143: point = 11, n_alt = 0
   Insn 142: point = 12, n_alt = 0
   Insn 141: point = 14, n_alt = 5
   Insn 140: point = 16, n_alt = 4
   Insn 139: point = 18, n_alt = 0
   Insn 138: point = 20, n_alt = 0
   Insn 137: point = 21, n_alt = 0
   Insn 136: point = 22, n_alt = 0
   Insn 135: point = 22, n_alt = 0
   Insn 134: point = 22, n_alt = 0
   Insn 133: point = 23, n_alt = 0
   Insn 132: point = 24, n_alt = 1
   Insn 131: point = 25, n_alt = 0
   Insn 130: point = 27, n_alt = 0
   Insn 129: point = 28, n_alt = 0
   Insn 128: point = 29, n_alt = 1
   Insn 127: point = 30, n_alt = 0
   Insn 126: point = 32, n_alt = 0
   Insn 125: point = 33, n_alt = 0
   Insn 124: point = 35, n_alt = 0
  BB 14
   Insn 121: point = 37, n_alt = 0
   Insn 120: point = 37, n_alt = 0
   Insn 119: point = 37, n_alt = -2
   Insn 118: point = 37, n_alt = 0
   Insn 117: point = 38, n_alt = 0
   Insn 116: point = 39, n_alt = 0
  BB 13
   Insn 114: point = 40, n_alt = -1
   Insn 113: point = 40, n_alt = 0
   Insn 112: point = 41, n_alt = 0
   Insn 111: point = 43, n_alt = 0
   Insn 110: point = 45, n_alt = 0
   Insn 109: point = 46, n_alt = 1
   Insn 108: point = 47, n_alt = 0
   Insn 107: point = 49, n_alt = 0
   Insn 169: point = 50, n_alt = -2
	Hard reg 1 is preferable by r153 with profit 1000
   Insn 103: point = 52, n_alt = 0
   Insn 168: point = 53, n_alt = -2
	Hard reg 1 is preferable by r153 with profit 1000
	Hard reg 0 is preferable by r153 with profit 1000
   Insn 102: point = 55, n_alt = 0
   Insn 101: point = 57, n_alt = 0
   Insn 100: point = 58, n_alt = 0
  BB 11
   Insn 162: point = 59, n_alt = -1
   Insn 92: point = 59, n_alt = 1
   Insn 91: point = 60, n_alt = 0
   Insn 90: point = 62, n_alt = 0
   Insn 89: point = 63, n_alt = 0
  BB 12
   Insn 97: point = 65, n_alt = 0
  BB 10
   Insn 87: point = 66, n_alt = -1
   Insn 86: point = 66, n_alt = 1
   Insn 85: point = 66, n_alt = 1
   Insn 84: point = 67, n_alt = -2
   Insn 83: point = 68, n_alt = 0
  BB 9
   Insn 81: point = 69, n_alt = -1
   Insn 80: point = 69, n_alt = 0
   Insn 79: point = 70, n_alt = 0
   Insn 78: point = 72, n_alt = 0
   Insn 77: point = 73, n_alt = 1
   Insn 76: point = 74, n_alt = 0
   Insn 75: point = 76, n_alt = 0
  BB 7
   Insn 67: point = 78, n_alt = -1
   Insn 66: point = 78, n_alt = 0
  BB 6
   Insn 62: point = 79, n_alt = -1
   Insn 61: point = 79, n_alt = 0
   Insn 60: point = 80, n_alt = -2
   Insn 59: point = 82, n_alt = 0
   Insn 58: point = 83, n_alt = 0
  BB 4
   Insn 51: point = 84, n_alt = -1
   Insn 50: point = 84, n_alt = 0
   Insn 49: point = 85, n_alt = 0
   Insn 48: point = 87, n_alt = 0
   Insn 47: point = 88, n_alt = 1
   Insn 46: point = 89, n_alt = 0
   Insn 45: point = 91, n_alt = 0
   Insn 44: point = 92, n_alt = 1
   Insn 43: point = 93, n_alt = 0
   Insn 42: point = 95, n_alt = 0
   Insn 167: point = 96, n_alt = -2
	Hard reg 1 is preferable by r152 with profit 1000
   Insn 38: point = 98, n_alt = 0
   Insn 166: point = 99, n_alt = -2
	Hard reg 1 is preferable by r152 with profit 1000
	Hard reg 0 is preferable by r152 with profit 1000
   Insn 37: point = 101, n_alt = 0
   Insn 36: point = 103, n_alt = 0
   Insn 35: point = 104, n_alt = 0
  BB 2
   Insn 28: point = 105, n_alt = -1
   Insn 27: point = 105, n_alt = 0
   Insn 26: point = 106, n_alt = 0
   Insn 25: point = 108, n_alt = 0
   Insn 24: point = 109, n_alt = 1
   Insn 23: point = 110, n_alt = 0
   Insn 22: point = 112, n_alt = 0
   Insn 21: point = 113, n_alt = 0
   Insn 20: point = 114, n_alt = 0
   Insn 19: point = 116, n_alt = 0
   Insn 18: point = 118, n_alt = 0
   Insn 17: point = 120, n_alt = 0
   Insn 16: point = 122, n_alt = 0
   Insn 15: point = 123, n_alt = 0
   Insn 14: point = 124, n_alt = 0
   Insn 13: point = 126, n_alt = 0
   Insn 12: point = 128, n_alt = 0
   Insn 11: point = 130, n_alt = 0
   Insn 10: point = 131, n_alt = 1
   Insn 9: point = 132, n_alt = 0
   Insn 8: point = 133, n_alt = 1
   Insn 7: point = 134, n_alt = 0
   Insn 6: point = 136, n_alt = 0
   Insn 5: point = 138, n_alt = 0
   Insn 164: point = 139, n_alt = 0
 r82: [13..139]
 r83: [135..136]
 r84: [127..128]
 r85: [125..126]
 r86: [123..124]
 r87: [119..120]
 r88: [117..118]
 r89: [115..116]
 r90: [113..114]
 r91: [111..112]
 r92: [105..106]
 r93: [100..101]
 r94: [94..96]
 r95: [90..91]
 r96: [84..85]
 r97: [81..82]
 r98: [79..80]
 r99: [75..76]
 r100: [69..70]
 r101: [59..63]
 r102: [59..60]
 r103: [54..55]
 r104: [48..50]
 r105: [44..45]
 r106: [42..43]
 r107: [40..41]
 r108: [34..35]
 r109: [31..33]
 r110: [29..32]
 r111: [29..30]
 r112: [26..28]
 r113: [24..27]
 r114: [24..25]
 r115: [15..16]
 r116: [8..14]
 r117: [2..7]
 r118: [0..1]
 r119: [137..138]
 r120: [133..134]
 r121: [131..132]
 r122: [129..130]
 r123: [121..122]
 r124: [109..110]
 r125: [107..108]
 r126: [102..103]
 r129: [92..93]
 r130: [94..95]
 r131: [88..89]
 r132: [86..87]
 r133: [73..74]
 r134: [71..72]
 r135: [66..67]
 r136: [61..62]
 r137: [56..57]
 r140: [46..47]
 r141: [48..49]
 r142: [37..38]
 r143: [22..23]
 r144: [19..21]
 r145: [19..20]
 r146: [17..18]
 r147: [10..12]
 r148: [10..11]
 r149: [8..9]
 r152: [97..99]
 r153: [51..53]
Compressing live ranges: from 140 to 116 - 82%
Ranges after the compression:
 r82: [8..115]
 r83: [112..113]
 r84: [104..105]
 r85: [102..103]
 r86: [100..101]
 r87: [96..97]
 r88: [94..95]
 r89: [92..93]
 r90: [90..91]
 r91: [88..89]
 r92: [82..83]
 r93: [78..79]
 r94: [74..75]
 r95: [70..71]
 r96: [64..65]
 r97: [62..63]
 r98: [60..61]
 r99: [58..59]
 r100: [52..53]
 r101: [46..49]
 r102: [46..47]
 r103: [42..43]
 r104: [38..39]
 r105: [34..35]
 r106: [32..33]
 r107: [30..31]
 r108: [26..27]
 r109: [24..25]
 r110: [22..25]
 r111: [22..23]
 r112: [20..21]
 r113: [18..21]
 r114: [18..19]
 r115: [10..11]
 r116: [4..9]
 r117: [2..3]
 r118: [0..1]
 r119: [114..115]
 r120: [110..111]
 r121: [108..109]
 r122: [106..107]
 r123: [98..99]
 r124: [86..87]
 r125: [84..85]
 r126: [80..81]
 r129: [72..73]
 r130: [74..75]
 r131: [68..69]
 r132: [66..67]
 r133: [56..57]
 r134: [54..55]
 r135: [50..51]
 r136: [48..49]
 r137: [44..45]
 r140: [36..37]
 r141: [38..39]
 r142: [28..29]
 r143: [16..17]
 r144: [14..15]
 r145: [14..15]
 r146: [12..13]
 r147: [6..7]
 r148: [6..7]
 r149: [4..5]
 r152: [76..77]
 r153: [40..41]

********** Assignment #1: **********

	 Assigning to 152 (cl=GENERAL_REGS, orig=93, freq=3000, tfirst=152, tfreq=3000)...
	   Assign 0 to reload r152 (freq=3000)
	 Assigning to 153 (cl=GENERAL_REGS, orig=103, freq=3000, tfirst=153, tfreq=3000)...
	   Assign 0 to reload r153 (freq=3000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=48, prev_offset=48)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=32, prev_offset=32)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
changing reg in insn 164
changing reg in insn 142
changing reg in insn 137
changing reg in insn 119
changing reg in insn 117
changing reg in insn 59
changing reg in insn 16
changing reg in insn 6
changing reg in insn 7
changing reg in insn 12
changing reg in insn 13
changing reg in insn 13
changing reg in insn 14
changing reg in insn 14
changing reg in insn 15
changing reg in insn 17
changing reg in insn 18
changing reg in insn 18
changing reg in insn 19
changing reg in insn 19
changing reg in insn 20
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 23
changing reg in insn 26
changing reg in insn 27
changing reg in insn 37
changing reg in insn 43
changing reg in insn 45
changing reg in insn 46
changing reg in insn 49
changing reg in insn 50
changing reg in insn 59
changing reg in insn 60
changing reg in insn 60
changing reg in insn 61
changing reg in insn 75
changing reg in insn 76
changing reg in insn 79
changing reg in insn 80
changing reg in insn 89
changing reg in insn 92
changing reg in insn 91
changing reg in insn 92
changing reg in insn 102
changing reg in insn 108
changing reg in insn 110
changing reg in insn 111
changing reg in insn 111
changing reg in insn 112
changing reg in insn 112
changing reg in insn 113
changing reg in insn 124
changing reg in insn 125
changing reg in insn 125
changing reg in insn 127
changing reg in insn 126
changing reg in insn 128
changing reg in insn 127
changing reg in insn 128
changing reg in insn 129
changing reg in insn 131
changing reg in insn 130
changing reg in insn 132
changing reg in insn 131
changing reg in insn 132
changing reg in insn 140
changing reg in insn 141
changing reg in insn 141
changing reg in insn 145
changing reg in insn 146
changing reg in insn 70
changing reg in insn 53
changing reg in insn 30
changing reg in insn 149
changing reg in insn 149
changing reg in insn 153
changing reg in insn 5
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 16
changing reg in insn 17
changing reg in insn 23
changing reg in insn 24
changing reg in insn 25
changing reg in insn 26
changing reg in insn 36
changing reg in insn 37
changing reg in insn 43
changing reg in insn 44
changing reg in insn 42
changing reg in insn 46
changing reg in insn 47
changing reg in insn 48
changing reg in insn 49
changing reg in insn 76
changing reg in insn 77
changing reg in insn 78
changing reg in insn 79
changing reg in insn 84
changing reg in insn 85
changing reg in insn 90
changing reg in insn 91
changing reg in insn 101
changing reg in insn 102
changing reg in insn 108
changing reg in insn 109
changing reg in insn 107
changing reg in insn 117
changing reg in insn 118
changing reg in insn 133
changing reg in insn 134
changing reg in insn 137
changing reg in insn 138
changing reg in insn 139
changing reg in insn 140
changing reg in insn 142
changing reg in insn 143
changing reg in insn 144
changing reg in insn 145
deleting insn with uid = 166.
deleting insn with uid = 60.
deleting insn with uid = 84.
deleting insn with uid = 168.
deleting insn with uid = 119.
deleting insn with uid = 149.
deleting insn with uid = 153.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 83.
verify found no changes in insn with uid = 97.
verify found no changes in insn with uid = 120.


try_to_share

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 7 [sp] 17 [flags]
;;  ref usage 	r0={58d,53u} r1={14d,10u,2e} r2={5d,1u} r3={1d,6u} r7={4d,71u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r16={3e} r17={42d,7u} r18={3d} r19={6e} r20={3d} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} 
;;    total ref usage 478{319d,148u,11e} in 111{108 regular + 3 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 164 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 164 3 2 2 (parallel [
            (set (reg:SI 3 bx [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 164 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:SI 0 ax [119])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 48 [0x30])) [1 address+0 S4 A32])) "mm/memory.c":327:34 75 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (parallel [
            (set (reg:SI 0 ax [orig:83 _1 ] [83])
                (lshiftrt:SI (reg:SI 0 ax [119])
                    (const_int 20 [0x14])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":327:34 701 {*lshrsi3_1}
     (expr_list:REG_EQUAL (lshiftrt:SI (mem/c:SI (reg/f:SI 16 argp) [1 address+0 S4 A32])
            (const_int 20 [0x14]))
        (nil)))
(insn 7 6 8 2 (parallel [
            (set (reg:SI 0 ax [120])
                (and:SI (reg:SI 0 ax [orig:83 _1 ] [83])
                    (const_int 4092 [0xffc])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":327:22 490 {*andsi_1}
     (nil))
(insn 8 7 9 2 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [1 to_page+0 S4 A32])
        (reg:SI 0 ax [120])) "mm/memory.c":327:22 75 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:SI 0 ax [121])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [1 to_page+0 S4 A32])) "mm/memory.c":327:12 75 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [1 from_page+0 S4 A32])
        (reg:SI 0 ax [121])) "mm/memory.c":327:12 75 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (set (reg/f:SI 0 ax [122])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 52 [0x34])) [14 p+0 S4 A32])) "mm/memory.c":328:18 75 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:SI 0 ax [orig:84 _2 ] [84])
        (mem:SI (plus:SI (reg/f:SI 0 ax [122])
                (const_int 536 [0x218])) [1 p_45(D)->start_code+0 S4 A32])) "mm/memory.c":328:18 75 {*movsi_internal}
     (nil))
(insn 13 12 14 2 (parallel [
            (set (reg:SI 0 ax [orig:85 _3 ] [85])
                (lshiftrt:SI (reg:SI 0 ax [orig:84 _2 ] [84])
                    (const_int 20 [0x14])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":328:31 701 {*lshrsi3_1}
     (nil))
(insn 14 13 15 2 (parallel [
            (set (reg:SI 0 ax [orig:86 _4 ] [86])
                (and:SI (reg:SI 0 ax [orig:85 _3 ] [85])
                    (const_int 4092 [0xffc])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":328:38 490 {*andsi_1}
     (nil))
(insn 15 14 16 2 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 20 [0x14])) [1 from_page+0 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 20 [0x14])) [1 from_page+0 S4 A32])
                    (reg:SI 0 ax [orig:86 _4 ] [86])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":328:12 209 {*addsi_1}
     (nil))
(insn 16 15 17 2 (set (reg/f:SI 0 ax [123])
        (mem/u/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x40]  <var_decl 0x7b517d52f120 current>)
                        ] UNSPEC_GOT))) [17  S4 A8])) "mm/memory.c":329:24 75 {*movsi_internal}
     (nil))
(insn 17 16 18 2 (set (reg/f:SI 0 ax [orig:87 current.13_5 ] [87])
        (mem/f/c:SI (reg/f:SI 0 ax [123]) [14 current+0 S4 A32])) "mm/memory.c":329:24 75 {*movsi_internal}
     (nil))
(insn 18 17 19 2 (set (reg:SI 0 ax [orig:88 _6 ] [88])
        (mem:SI (plus:SI (reg/f:SI 0 ax [orig:87 current.13_5 ] [87])
                (const_int 536 [0x218])) [1 current.13_5->start_code+0 S4 A32])) "mm/memory.c":329:24 75 {*movsi_internal}
     (nil))
(insn 19 18 20 2 (parallel [
            (set (reg:SI 0 ax [orig:89 _7 ] [89])
                (lshiftrt:SI (reg:SI 0 ax [orig:88 _6 ] [88])
                    (const_int 20 [0x14])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":329:37 701 {*lshrsi3_1}
     (nil))
(insn 20 19 21 2 (parallel [
            (set (reg:SI 0 ax [orig:90 _8 ] [90])
                (and:SI (reg:SI 0 ax [orig:89 _7 ] [89])
                    (const_int 4092 [0xffc])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":329:44 490 {*andsi_1}
     (nil))
(insn 21 20 22 2 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 24 [0x18])) [1 to_page+0 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 24 [0x18])) [1 to_page+0 S4 A32])
                    (reg:SI 0 ax [orig:90 _8 ] [90])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":329:12 209 {*addsi_1}
     (nil))
(insn 22 21 23 2 (set (reg/f:SI 0 ax [orig:91 from_page.14_9 ] [91])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [1 from_page+0 S4 A32])) "mm/memory.c":331:10 75 {*movsi_internal}
     (nil))
(insn 23 22 24 2 (set (reg:SI 0 ax [124])
        (mem:SI (reg/f:SI 0 ax [orig:91 from_page.14_9 ] [91]) [1 *from_page.14_9+0 S4 A32])) "mm/memory.c":331:7 75 {*movsi_internal}
     (nil))
(insn 24 23 25 2 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [1 from+0 S4 A32])
        (reg:SI 0 ax [124])) "mm/memory.c":331:7 75 {*movsi_internal}
     (nil))
(insn 25 24 26 2 (set (reg:SI 0 ax [125])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [1 from+0 S4 A32])) "mm/memory.c":332:13 75 {*movsi_internal}
     (nil))
(insn 26 25 27 2 (parallel [
            (set (reg:SI 0 ax [orig:92 _10 ] [92])
                (and:SI (reg:SI 0 ax [125])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":332:13 490 {*andsi_1}
     (expr_list:REG_EQUAL (and:SI (mem/c:SI (plus:SI (reg/f:SI 19 frame)
                    (const_int -16 [0xfffffffffffffff0])) [1 from+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 27 26 28 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:92 _10 ] [92])
            (const_int 0 [0]))) "mm/memory.c":332:5 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 28 27 29 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 33)
            (pc))) "mm/memory.c":332:5 806 {*jcc}
     (nil)
 -> 33)
(note 29 28 30 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 30 29 156 3 (set (reg:SI 0 ax [orig:117 _37 ] [117])
        (const_int 0 [0])) "mm/memory.c":333:10 75 {*movsi_internal}
     (nil))
(jump_insn 156 30 157 3 (set (pc)
        (label_ref 147)) "mm/memory.c":333:10 807 {jump}
     (nil)
 -> 147)
(barrier 157 156 33)
(code_label 33 157 34 4 66 (nil) [1 uses])
(note 34 33 35 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 35 34 36 4 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 16 [0x10])) [1 from+0 S4 A32])
                (and:SI (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 16 [0x10])) [1 from+0 S4 A32])
                    (const_int -4096 [0xfffffffffffff000])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":334:7 490 {*andsi_1}
     (nil))
(insn 36 35 37 4 (set (reg:SI 0 ax [126])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 48 [0x30])) [1 address+0 S4 A32])) "mm/memory.c":335:31 75 {*movsi_internal}
     (nil))
(insn 37 36 38 4 (parallel [
            (set (reg:SI 0 ax [orig:93 _11 ] [93])
                (lshiftrt:SI (reg:SI 0 ax [126])
                    (const_int 10 [0xa])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":335:31 701 {*lshrsi3_1}
     (expr_list:REG_EQUAL (lshiftrt:SI (mem/c:SI (reg/f:SI 16 argp) [1 address+0 S4 A32])
            (const_int 10 [0xa]))
        (nil)))
(insn 38 37 167 4 (parallel [
            (set (reg:SI 0 ax [orig:93 _11 ] [93])
                (and:SI (reg:SI 0 ax [orig:93 _11 ] [93])
                    (const_int 4092 [0xffc])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":335:38 490 {*andsi_1}
     (nil))
(insn 167 38 42 4 (set (reg:SI 1 dx [orig:94 _12 ] [94])
        (reg:SI 0 ax [orig:93 _11 ] [93])) "mm/memory.c":335:38 75 {*movsi_internal}
     (nil))
(insn 42 167 43 4 (set (reg:SI 0 ax [130])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [1 from+0 S4 A32])) "mm/memory.c":335:12 75 {*movsi_internal}
     (nil))
(insn 43 42 44 4 (parallel [
            (set (reg:SI 0 ax [129])
                (plus:SI (reg:SI 0 ax [130])
                    (reg:SI 1 dx [orig:94 _12 ] [94])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":335:12 209 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 1 dx [orig:94 _12 ] [94])
            (mem/c:SI (plus:SI (reg/f:SI 19 frame)
                    (const_int -16 [0xfffffffffffffff0])) [1 from+0 S4 A32]))
        (nil)))
(insn 44 43 45 4 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [1 from_page+0 S4 A32])
        (reg:SI 0 ax [129])) "mm/memory.c":335:12 75 {*movsi_internal}
     (nil))
(insn 45 44 46 4 (set (reg/f:SI 0 ax [orig:95 from_page.15_13 ] [95])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [1 from_page+0 S4 A32])) "mm/memory.c":336:15 75 {*movsi_internal}
     (nil))
(insn 46 45 47 4 (set (reg:SI 0 ax [131])
        (mem:SI (reg/f:SI 0 ax [orig:95 from_page.15_13 ] [95]) [1 *from_page.15_13+0 S4 A32])) "mm/memory.c":336:12 75 {*movsi_internal}
     (nil))
(insn 47 46 48 4 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [1 phys_addr+0 S4 A32])
        (reg:SI 0 ax [131])) "mm/memory.c":336:12 75 {*movsi_internal}
     (nil))
(insn 48 47 49 4 (set (reg:SI 0 ax [132])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [1 phys_addr+0 S4 A32])) "mm/memory.c":338:17 75 {*movsi_internal}
     (nil))
(insn 49 48 50 4 (parallel [
            (set (reg:SI 0 ax [orig:96 _14 ] [96])
                (and:SI (reg:SI 0 ax [132])
                    (const_int 65 [0x41])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":338:17 490 {*andsi_1}
     (expr_list:REG_EQUAL (and:SI (mem/c:SI (plus:SI (reg/f:SI 19 frame)
                    (const_int -20 [0xffffffffffffffec])) [1 phys_addr+0 S4 A32])
            (const_int 65 [0x41]))
        (nil)))
(insn 50 49 51 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:96 _14 ] [96])
            (const_int 1 [0x1]))) "mm/memory.c":338:5 11 {*cmpsi_1}
     (nil))
(jump_insn 51 50 52 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 56)
            (pc))) "mm/memory.c":338:5 806 {*jcc}
     (nil)
 -> 56)
(note 52 51 53 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 53 52 158 5 (set (reg:SI 0 ax [orig:117 _37 ] [117])
        (const_int 0 [0])) "mm/memory.c":339:10 75 {*movsi_internal}
     (nil))
(jump_insn 158 53 159 5 (set (pc)
        (label_ref 147)) "mm/memory.c":339:10 807 {jump}
     (nil)
 -> 147)
(barrier 159 158 56)
(code_label 56 159 57 6 68 (nil) [1 uses])
(note 57 56 58 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 58 57 59 6 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 12 [0xc])) [1 phys_addr+0 S4 A32])
                (and:SI (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 12 [0xc])) [1 phys_addr+0 S4 A32])
                    (const_int -4096 [0xfffffffffffff000])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":340:12 490 {*andsi_1}
     (nil))
(insn 59 58 61 6 (set (reg:SI 0 ax [orig:97 HIGH_MEMORY.16_15 ] [97])
        (mem/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("HIGH_MEMORY") [flags 0x2]  <var_decl 0x7b517d52f510 HIGH_MEMORY>)
                        ] UNSPEC_GOTOFF))) [1 HIGH_MEMORY+0 S4 A32])) "mm/memory.c":341:16 75 {*movsi_internal}
     (nil))
(insn 61 59 62 6 (set (reg:CC 17 flags)
        (compare:CC (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 12 [0xc])) [1 phys_addr+0 S4 A32])
            (reg:SI 0 ax [orig:98 HIGH_MEMORY.17_16 ] [98]))) "mm/memory.c":341:5 11 {*cmpsi_1}
     (nil))
(jump_insn 62 61 63 6 (set (pc)
        (if_then_else (geu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 68)
            (pc))) "mm/memory.c":341:5 806 {*jcc}
     (nil)
 -> 68)
(note 63 62 66 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 66 63 67 7 (set (reg:CC 17 flags)
        (compare:CC (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 12 [0xc])) [1 phys_addr+0 S4 A32])
            (const_int 1048575 [0xfffff]))) "mm/memory.c":341:31 11 {*cmpsi_1}
     (nil))
(jump_insn 67 66 68 7 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 73)
            (pc))) "mm/memory.c":341:31 806 {*jcc}
     (nil)
 -> 73)
(code_label 68 67 69 8 69 (nil) [1 uses])
(note 69 68 70 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 70 69 160 8 (set (reg:SI 0 ax [orig:117 _37 ] [117])
        (const_int 0 [0])) "mm/memory.c":342:10 75 {*movsi_internal}
     (nil))
(jump_insn 160 70 161 8 (set (pc)
        (label_ref 147)) "mm/memory.c":342:10 807 {jump}
     (nil)
 -> 147)
(barrier 161 160 73)
(code_label 73 161 74 9 70 (nil) [1 uses])
(note 74 73 75 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 75 74 76 9 (set (reg/f:SI 0 ax [orig:99 to_page.18_17 ] [99])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [1 to_page+0 S4 A32])) "mm/memory.c":343:8 75 {*movsi_internal}
     (nil))
(insn 76 75 77 9 (set (reg:SI 0 ax [133])
        (mem:SI (reg/f:SI 0 ax [orig:99 to_page.18_17 ] [99]) [1 *to_page.18_17+0 S4 A32])) "mm/memory.c":343:5 75 {*movsi_internal}
     (nil))
(insn 77 76 78 9 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [1 to+0 S4 A32])
        (reg:SI 0 ax [133])) "mm/memory.c":343:5 75 {*movsi_internal}
     (nil))
(insn 78 77 79 9 (set (reg:SI 0 ax [134])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [1 to+0 S4 A32])) "mm/memory.c":344:11 75 {*movsi_internal}
     (nil))
(insn 79 78 80 9 (parallel [
            (set (reg:SI 0 ax [orig:100 _18 ] [100])
                (and:SI (reg:SI 0 ax [134])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":344:11 490 {*andsi_1}
     (expr_list:REG_EQUAL (and:SI (mem/c:SI (plus:SI (reg/f:SI 19 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 to+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 80 79 81 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:100 _18 ] [100])
            (const_int 0 [0]))) "mm/memory.c":344:5 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 81 80 82 9 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 98)
            (pc))) "mm/memory.c":344:5 806 {*jcc}
     (nil)
 -> 98)
(note 82 81 83 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(call_insn 83 82 85 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("get_free_page") [flags 0x3]  <function_decl 0x7b517d53b100 get_free_page>) [0 get_free_page S1 A8])
            (const_int 0 [0]))) "mm/memory.c":345:13 823 {*call_value}
     (nil)
    (nil))
(insn 85 83 86 10 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [1 to+0 S4 A32])
        (reg:SI 0 ax [135])) "mm/memory.c":345:13 75 {*movsi_internal}
     (nil))
(insn 86 85 87 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 28 [0x1c])) [1 to+0 S4 A32])
            (const_int 0 [0]))) "mm/memory.c":345:6 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 87 86 88 10 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 95)
            (pc))) "mm/memory.c":345:6 806 {*jcc}
     (nil)
 -> 95)
(note 88 87 89 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 89 88 90 11 (set (reg/f:SI 0 ax [orig:101 to_page.19_19 ] [101])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [1 to_page+0 S4 A32])) "mm/memory.c":346:5 75 {*movsi_internal}
     (nil))
(insn 90 89 91 11 (set (reg:SI 1 dx [136])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [1 to+0 S4 A32])) "mm/memory.c":346:36 75 {*movsi_internal}
     (nil))
(insn 91 90 92 11 (parallel [
            (set (reg:SI 1 dx [orig:102 _20 ] [102])
                (ior:SI (reg:SI 1 dx [136])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":346:36 520 {*iorsi_1}
     (expr_list:REG_EQUAL (ior:SI (mem/c:SI (plus:SI (reg/f:SI 19 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 to+0 S4 A32])
            (const_int 7 [0x7]))
        (nil)))
(insn 92 91 162 11 (set (mem:SI (reg/f:SI 0 ax [orig:101 to_page.19_19 ] [101]) [1 *to_page.19_19+0 S4 A32])
        (reg:SI 1 dx [orig:102 _20 ] [102])) "mm/memory.c":346:31 75 {*movsi_internal}
     (nil))
(jump_insn 162 92 163 11 (set (pc)
        (label_ref 98)) 807 {jump}
     (nil)
 -> 98)
(barrier 163 162 95)
(code_label 95 163 96 12 72 (nil) [1 uses])
(note 96 95 97 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(call_insn 97 96 98 12 (call (mem:QI (symbol_ref:SI ("oom") [flags 0x3]  <function_decl 0x7b517d537f00 oom>) [0 oom S1 A8])
        (const_int 0 [0])) "mm/memory.c":348:4 812 {*call}
     (nil)
    (nil))
(code_label 98 97 99 13 71 (nil) [2 uses])
(note 99 98 100 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 100 99 101 13 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 28 [0x1c])) [1 to+0 S4 A32])
                (and:SI (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 28 [0x1c])) [1 to+0 S4 A32])
                    (const_int -4096 [0xfffffffffffff000])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":350:5 490 {*andsi_1}
     (nil))
(insn 101 100 102 13 (set (reg:SI 0 ax [137])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 48 [0x30])) [1 address+0 S4 A32])) "mm/memory.c":351:27 75 {*movsi_internal}
     (nil))
(insn 102 101 103 13 (parallel [
            (set (reg:SI 0 ax [orig:103 _21 ] [103])
                (lshiftrt:SI (reg:SI 0 ax [137])
                    (const_int 10 [0xa])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":351:27 701 {*lshrsi3_1}
     (expr_list:REG_EQUAL (lshiftrt:SI (mem/c:SI (reg/f:SI 16 argp) [1 address+0 S4 A32])
            (const_int 10 [0xa]))
        (nil)))
(insn 103 102 169 13 (parallel [
            (set (reg:SI 0 ax [orig:103 _21 ] [103])
                (and:SI (reg:SI 0 ax [orig:103 _21 ] [103])
                    (const_int 4092 [0xffc])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":351:34 490 {*andsi_1}
     (nil))
(insn 169 103 107 13 (set (reg:SI 1 dx [orig:104 _22 ] [104])
        (reg:SI 0 ax [orig:103 _21 ] [103])) "mm/memory.c":351:34 75 {*movsi_internal}
     (nil))
(insn 107 169 108 13 (set (reg:SI 0 ax [141])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [1 to+0 S4 A32])) "mm/memory.c":351:10 75 {*movsi_internal}
     (nil))
(insn 108 107 109 13 (parallel [
            (set (reg:SI 0 ax [140])
                (plus:SI (reg:SI 0 ax [141])
                    (reg:SI 1 dx [orig:104 _22 ] [104])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":351:10 209 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 1 dx [orig:104 _22 ] [104])
            (mem/c:SI (plus:SI (reg/f:SI 19 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 to+0 S4 A32]))
        (nil)))
(insn 109 108 110 13 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [1 to_page+0 S4 A32])
        (reg:SI 0 ax [140])) "mm/memory.c":351:10 75 {*movsi_internal}
     (nil))
(insn 110 109 111 13 (set (reg/f:SI 0 ax [orig:105 to_page.20_23 ] [105])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [1 to_page+0 S4 A32])) "mm/memory.c":352:11 75 {*movsi_internal}
     (nil))
(insn 111 110 112 13 (set (reg:SI 0 ax [orig:106 _24 ] [106])
        (mem:SI (reg/f:SI 0 ax [orig:105 to_page.20_23 ] [105]) [1 *to_page.20_23+0 S4 A32])) "mm/memory.c":352:10 75 {*movsi_internal}
     (nil))
(insn 112 111 113 13 (parallel [
            (set (reg:SI 0 ax [orig:107 _25 ] [107])
                (and:SI (reg:SI 0 ax [orig:106 _24 ] [106])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":352:8 490 {*andsi_1}
     (nil))
(insn 113 112 114 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:107 _25 ] [107])
            (const_int 0 [0]))) "mm/memory.c":352:5 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 114 113 115 13 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 122)
            (pc))) "mm/memory.c":352:5 806 {*jcc}
     (nil)
 -> 122)
(note 115 114 116 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 116 115 117 14 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":353:3 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 117 116 118 14 (set (reg/f:SI 0 ax [142])
        (plus:SI (reg:SI 3 bx [82])
            (const:SI (unspec:SI [
                        (symbol_ref/f:SI ("*.LC9") [flags 0x2]  <var_decl 0x7b517d59dea0 *.LC9>)
                    ] UNSPEC_GOTOFF)))) "mm/memory.c":353:3 205 {*leasi}
     (expr_list:REG_EQUAL (symbol_ref/f:SI ("*.LC9") [flags 0x2]  <var_decl 0x7b517d59dea0 *.LC9>)
        (nil)))
(insn 118 117 120 14 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [15  S4 A32])
        (reg/f:SI 0 ax [142])) "mm/memory.c":353:3 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 120 118 121 14 (call (mem:QI (symbol_ref:SI ("panic") [flags 0x41]  <function_decl 0x7b517d4d2900 panic>) [0 panic S1 A8])
        (const_int 16 [0x10])) "mm/memory.c":353:3 812 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 121 120 122 14 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":353:3 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(code_label 122 121 123 15 73 (nil) [1 uses])
(note 123 122 124 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 124 123 125 15 (set (reg/f:SI 0 ax [orig:108 from_page.21_26 ] [108])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [1 from_page+0 S4 A32])) "mm/memory.c":355:31 75 {*movsi_internal}
     (nil))
(insn 125 124 126 15 (set (reg:SI 1 dx [orig:109 _27 ] [109])
        (mem:SI (reg/f:SI 0 ax [orig:108 from_page.21_26 ] [108]) [1 *from_page.21_26+0 S4 A32])) "mm/memory.c":355:31 75 {*movsi_internal}
     (nil))
(insn 126 125 127 15 (set (reg/f:SI 0 ax [orig:110 from_page.22_28 ] [110])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [1 from_page+0 S4 A32])) "mm/memory.c":355:31 75 {*movsi_internal}
     (nil))
(insn 127 126 128 15 (parallel [
            (set (reg:SI 1 dx [orig:111 _29 ] [111])
                (and:SI (reg:SI 1 dx [orig:109 _27 ] [109])
                    (const_int -3 [0xfffffffffffffffd])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":355:31 490 {*andsi_1}
     (nil))
(insn 128 127 129 15 (set (mem:SI (reg/f:SI 0 ax [orig:110 from_page.22_28 ] [110]) [1 *from_page.22_28+0 S4 A32])
        (reg:SI 1 dx [orig:111 _29 ] [111])) "mm/memory.c":355:31 75 {*movsi_internal}
     (nil))
(insn 129 128 130 15 (set (reg/f:SI 1 dx [orig:112 from_page.23_30 ] [112])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [1 from_page+0 S4 A32])) "mm/memory.c":356:32 75 {*movsi_internal}
     (nil))
(insn 130 129 131 15 (set (reg/f:SI 0 ax [orig:113 to_page.24_31 ] [113])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [1 to_page+0 S4 A32])) "mm/memory.c":356:3 75 {*movsi_internal}
     (nil))
(insn 131 130 132 15 (set (reg:SI 1 dx [orig:114 _32 ] [114])
        (mem:SI (reg/f:SI 1 dx [orig:112 from_page.23_30 ] [112]) [1 *from_page.23_30+0 S4 A32])) "mm/memory.c":356:31 75 {*movsi_internal}
     (nil))
(insn 132 131 133 15 (set (mem:SI (reg/f:SI 0 ax [orig:113 to_page.24_31 ] [113]) [1 *to_page.24_31+0 S4 A32])
        (reg:SI 1 dx [orig:114 _32 ] [114])) "mm/memory.c":356:29 75 {*movsi_internal}
     (nil))
(insn 133 132 134 15 (set (reg:SI 0 ax [143])
        (const_int 0 [0])) "mm/memory.c":357:2 75 {*movsi_internal}
     (nil))
(insn 134 133 135 15 (parallel [
            (asm_operands/v ("movl %%eax, %%cr3") ("") 0 [
                    (reg:SI 0 ax [143])
                ]
                 [
                    (asm_input:SI ("a") mm/memory.c:357)
                ]
                 [] mm/memory.c:357)
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":357:2 -1
     (nil))
(insn 135 134 136 15 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 12 [0xc])) [1 phys_addr+0 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 12 [0xc])) [1 phys_addr+0 S4 A32])
                    (const_int -1048576 [0xfffffffffff00000])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":358:12 209 {*addsi_1}
     (nil))
(insn 136 135 137 15 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 12 [0xc])) [1 phys_addr+0 S4 A32])
                (lshiftrt:SI (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 12 [0xc])) [1 phys_addr+0 S4 A32])
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":359:12 701 {*lshrsi3_1}
     (nil))
(insn 137 136 138 15 (set (reg:SI 1 dx [144])
        (plus:SI (reg:SI 3 bx [82])
            (const:SI (unspec:SI [
                        (symbol_ref:SI ("mem_map") [flags 0x2]  <var_decl 0x7b517d52f5a0 mem_map>)
                    ] UNSPEC_GOTOFF)))) "mm/memory.c":360:9 205 {*leasi}
     (nil))
(insn 138 137 139 15 (set (reg:SI 0 ax [145])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [1 phys_addr+0 S4 A32])) "mm/memory.c":360:9 75 {*movsi_internal}
     (nil))
(insn 139 138 140 15 (parallel [
            (set (reg/f:SI 0 ax [146])
                (plus:SI (reg:SI 0 ax [145])
                    (reg:SI 1 dx [144])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":360:9 209 {*addsi_1}
     (nil))
(insn 140 139 141 15 (set (reg:QI 0 ax [orig:115 _33 ] [115])
        (mem:QI (reg/f:SI 0 ax [146]) [0 mem_map[phys_addr_64]+0 S1 A8])) "mm/memory.c":360:9 77 {*movqi_internal}
     (nil))
(insn 141 140 142 15 (parallel [
            (set (reg:QI 1 dx [orig:116 _35 ] [116])
                (plus:QI (reg:QI 0 ax [orig:115 _33 ] [115])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":360:20 213 {*addqi_1}
     (nil))
(insn 142 141 143 15 (set (reg:SI 2 cx [147])
        (plus:SI (reg:SI 3 bx [82])
            (const:SI (unspec:SI [
                        (symbol_ref:SI ("mem_map") [flags 0x2]  <var_decl 0x7b517d52f5a0 mem_map>)
                    ] UNSPEC_GOTOFF)))) "mm/memory.c":360:20 205 {*leasi}
     (nil))
(insn 143 142 144 15 (set (reg:SI 0 ax [148])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [1 phys_addr+0 S4 A32])) "mm/memory.c":360:20 75 {*movsi_internal}
     (nil))
(insn 144 143 145 15 (parallel [
            (set (reg/f:SI 0 ax [149])
                (plus:SI (reg:SI 0 ax [148])
                    (reg:SI 2 cx [147])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":360:20 209 {*addsi_1}
     (nil))
(insn 145 144 146 15 (set (mem:QI (reg/f:SI 0 ax [149]) [0 mem_map[phys_addr_64]+0 S1 A8])
        (reg:QI 1 dx [orig:116 _35 ] [116])) "mm/memory.c":360:20 77 {*movqi_internal}
     (nil))
(insn 146 145 147 15 (set (reg:SI 0 ax [orig:117 _37 ] [117])
        (const_int 1 [0x1])) "mm/memory.c":361:9 75 {*movsi_internal}
     (nil))
(code_label 147 146 148 16 67 (nil) [3 uses])
(note 148 147 154 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 154 148 165 16 (use (reg/i:SI 0 ax)) "mm/memory.c":362:1 -1
     (nil))
(note 165 154 0 NOTE_INSN_DELETED)

;; Function share_page (share_page, funcdef_no=11, decl_uid=1414, cgraph_uid=12, symbol_order=13)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 125:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 19:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) rm  (1) rn {*cmphi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) Ts {*leasi}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 32:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 71:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 75:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 85:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2 3
EBB 4 5
EBB 6
EBB 7 8 9 10 11
EBB 16
EBB 17
EBB 18
EBB 12
EBB 13 14
EBB 15

********** Pseudo live ranges #1: **********

  BB 15
   Insn 102: point = 0, n_alt = -1
   Insn 101: point = 0, n_alt = -2
   Insn 97: point = 1, n_alt = -2
  BB 11
   Insn 110: point = 4, n_alt = -1
   Insn 80: point = 4, n_alt = 0
  BB 5
   Insn 106: point = 5, n_alt = -1
   Insn 25: point = 5, n_alt = 0
  BB 3
   Insn 104: point = 6, n_alt = -1
   Insn 11: point = 6, n_alt = 0
  BB 14
   Insn 94: point = 7, n_alt = 0
  BB 13
   Insn 92: point = 8, n_alt = -1
   Insn 91: point = 8, n_alt = 0
   Insn 90: point = 9, n_alt = -2
   Insn 89: point = 11, n_alt = 0
  BB 6
   Insn 108: point = 13, n_alt = -1
   Insn 32: point = 13, n_alt = 1
   Insn 31: point = 14, n_alt = 0
   Insn 30: point = 16, n_alt = 0
  BB 4
   Insn 23: point = 18, n_alt = -1
   Insn 22: point = 18, n_alt = 0
   Insn 19: point = 19, n_alt = 2
   Insn 18: point = 21, n_alt = 0
   Insn 17: point = 23, n_alt = 0
   Insn 16: point = 25, n_alt = 0
  BB 2
   Insn 9: point = 27, n_alt = -1
   Insn 8: point = 27, n_alt = 0
   Insn 7: point = 28, n_alt = 0
   Insn 6: point = 30, n_alt = 0
   Insn 5: point = 32, n_alt = 0
   Insn 125: point = 33, n_alt = 0
  BB 12
   Insn 85: point = 34, n_alt = 0
  BB 17
   Insn 120: point = 35, n_alt = -1
   Insn 119: point = 35, n_alt = -1
  BB 18
   Insn 124: point = 36, n_alt = -1
  BB 16
   Insn 115: point = 37, n_alt = -1
   Insn 114: point = 37, n_alt = -1
  BB 10
   Insn 78: point = 38, n_alt = -1
   Insn 77: point = 38, n_alt = 0
   Insn 76: point = 39, n_alt = -2
   Insn 75: point = 40, n_alt = 0
   Insn 74: point = 40, n_alt = 0
   Insn 73: point = 40, n_alt = 0
   Insn 72: point = 40, n_alt = 0
   Insn 71: point = 41, n_alt = 0
   Insn 70: point = 41, n_alt = 0
   Insn 69: point = 43, n_alt = 0
  BB 9
   Insn 63: point = 45, n_alt = -1
   Insn 62: point = 45, n_alt = 0
   Insn 61: point = 46, n_alt = 0
   Insn 60: point = 48, n_alt = 0
   Insn 59: point = 50, n_alt = 0
   Insn 58: point = 51, n_alt = 0
   Insn 57: point = 53, n_alt = 0
   Insn 56: point = 55, n_alt = 0
  BB 8
   Insn 50: point = 57, n_alt = -1
   Insn 49: point = 57, n_alt = 0
   Insn 48: point = 58, n_alt = 0
   Insn 47: point = 60, n_alt = 0
   Insn 46: point = 61, n_alt = 0
   Insn 45: point = 63, n_alt = 0
  BB 7
   Insn 39: point = 65, n_alt = -1
   Insn 38: point = 65, n_alt = 0
   Insn 37: point = 66, n_alt = 0
   Insn 36: point = 68, n_alt = 0
 r82: [8..69]
 r83: [29..30]
 r84: [27..28]
 r85: [22..23]
 r86: [20..21]
 r87: [18..19]
 r88: [65..66]
 r89: [57..61]
 r90: [57..58]
 r91: [52..53]
 r92: [45..51]
 r93: [47..48]
 r94: [45..46]
 r95: [40..41]
 r96: [38..39]
 r97: [2..7]
 r98: [0..1]
 r99: [31..32]
 r100: [24..25]
 r101: [13..14]
 r102: [15..16]
 r103: [67..68]
 r104: [62..63]
 r105: [59..60]
 r106: [54..55]
 r107: [49..50]
 r108: [42..43]
 r109: [8..9]
 r110: [10..11]
Compressing live ranges: from 70 to 52 - 74%
Ranges after the compression:
 r82: [4..51]
 r83: [22..23]
 r84: [20..21]
 r85: [16..17]
 r86: [14..15]
 r87: [12..13]
 r88: [48..49]
 r89: [42..45]
 r90: [42..43]
 r91: [38..39]
 r92: [32..37]
 r93: [34..35]
 r94: [32..33]
 r95: [28..29]
 r96: [26..27]
 r97: [2..3]
 r98: [0..1]
 r99: [24..25]
 r100: [18..19]
 r101: [8..9]
 r102: [10..11]
 r103: [50..51]
 r104: [46..47]
 r105: [44..45]
 r106: [40..41]
 r107: [36..37]
 r108: [30..31]
 r109: [4..5]
 r110: [6..7]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=32)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=16)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
changing reg in insn 125
changing reg in insn 89
changing reg in insn 59
changing reg in insn 47
changing reg in insn 30
changing reg in insn 16
changing reg in insn 5
changing reg in insn 6
changing reg in insn 7
changing reg in insn 7
changing reg in insn 8
changing reg in insn 17
changing reg in insn 18
changing reg in insn 18
changing reg in insn 19
changing reg in insn 19
changing reg in insn 22
changing reg in insn 37
changing reg in insn 38
changing reg in insn 46
changing reg in insn 49
changing reg in insn 48
changing reg in insn 49
changing reg in insn 57
changing reg in insn 58
changing reg in insn 58
changing reg in insn 62
changing reg in insn 60
changing reg in insn 61
changing reg in insn 61
changing reg in insn 62
changing reg in insn 70
changing reg in insn 72
changing reg in insn 76
changing reg in insn 77
changing reg in insn 94
changing reg in insn 80
changing reg in insn 25
changing reg in insn 11
changing reg in insn 97
changing reg in insn 97
changing reg in insn 101
changing reg in insn 5
changing reg in insn 6
changing reg in insn 16
changing reg in insn 17
changing reg in insn 31
changing reg in insn 32
changing reg in insn 30
changing reg in insn 31
changing reg in insn 36
changing reg in insn 37
changing reg in insn 45
changing reg in insn 46
changing reg in insn 47
changing reg in insn 48
changing reg in insn 56
changing reg in insn 57
changing reg in insn 59
changing reg in insn 60
changing reg in insn 69
changing reg in insn 70
changing reg in insn 90
changing reg in insn 91
changing reg in insn 89
changing reg in insn 90
deleting insn with uid = 76.
deleting insn with uid = 90.
deleting insn with uid = 97.
deleting insn with uid = 101.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 74.


share_page

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 17 [flags]
;;  ref usage 	r0={28d,25u} r1={4d,2u} r2={2d} r3={1d,6u} r7={5d,34u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={12d,7u} r18={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} 
;;    total ref usage 191{117d,74u,0e} in 60{59 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 125 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 125 3 2 2 (parallel [
            (set (reg:SI 3 bx [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 125 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 0 ax [99])
        (mem/u/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x40]  <var_decl 0x7b517d52f120 current>)
                        ] UNSPEC_GOT))) [17  S4 A8])) "mm/memory.c":376:14 75 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (reg/f:SI 0 ax [orig:83 current.25_1 ] [83])
        (mem/f/c:SI (reg/f:SI 0 ax [99]) [14 current+0 S4 A32])) "mm/memory.c":376:14 75 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (reg/f:SI 0 ax [orig:84 _2 ] [84])
        (mem/f:SI (plus:SI (reg/f:SI 0 ax [orig:83 current.25_1 ] [83])
                (const_int 632 [0x278])) [8 current.25_1->executable+0 S4 A32])) "mm/memory.c":376:14 75 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:SI 0 ax [orig:84 _2 ] [84])
            (const_int 0 [0]))) "mm/memory.c":376:5 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 9 8 10 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 14)
            (pc))) "mm/memory.c":376:5 806 {*jcc}
     (nil)
 -> 14)
(note 10 9 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 104 3 (set (reg:SI 0 ax [orig:97 _16 ] [97])
        (const_int 0 [0])) "mm/memory.c":377:10 75 {*movsi_internal}
     (nil))
(jump_insn 104 11 105 3 (set (pc)
        (label_ref 95)) "mm/memory.c":377:10 807 {jump}
     (nil)
 -> 95)
(barrier 105 104 14)
(code_label 14 105 15 4 75 (nil) [1 uses])
(note 15 14 16 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 17 4 (set (reg/f:SI 0 ax [100])
        (mem/u/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x40]  <var_decl 0x7b517d52f120 current>)
                        ] UNSPEC_GOT))) [17  S4 A8])) "mm/memory.c":378:13 75 {*movsi_internal}
     (nil))
(insn 17 16 18 4 (set (reg/f:SI 0 ax [orig:85 current.26_3 ] [85])
        (mem/f/c:SI (reg/f:SI 0 ax [100]) [14 current+0 S4 A32])) "mm/memory.c":378:13 75 {*movsi_internal}
     (nil))
(insn 18 17 19 4 (set (reg/f:SI 0 ax [orig:86 _4 ] [86])
        (mem/f:SI (plus:SI (reg/f:SI 0 ax [orig:85 current.26_3 ] [85])
                (const_int 632 [0x278])) [8 current.26_3->executable+0 S4 A32])) "mm/memory.c":378:13 75 {*movsi_internal}
     (nil))
(insn 19 18 22 4 (set (reg:HI 0 ax [orig:87 _5 ] [87])
        (mem:HI (plus:SI (reg/f:SI 0 ax [orig:86 _4 ] [86])
                (const_int 48 [0x30])) [7 _4->i_count+0 S2 A32])) "mm/memory.c":378:25 76 {*movhi_internal}
     (nil))
(insn 22 19 23 4 (set (reg:CC 17 flags)
        (compare:CC (reg:HI 0 ax [orig:87 _5 ] [87])
            (const_int 1 [0x1]))) "mm/memory.c":378:5 10 {*cmphi_1}
     (nil))
(jump_insn 23 22 24 4 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 28)
            (pc))) "mm/memory.c":378:5 806 {*jcc}
     (nil)
 -> 28)
(note 24 23 25 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 25 24 106 5 (set (reg:SI 0 ax [orig:97 _16 ] [97])
        (const_int 0 [0])) "mm/memory.c":379:10 75 {*movsi_internal}
     (nil))
(jump_insn 106 25 107 5 (set (pc)
        (label_ref 95)) "mm/memory.c":379:10 807 {jump}
     (nil)
 -> 95)
(barrier 107 106 28)
(code_label 28 107 29 6 77 (nil) [1 uses])
(note 29 28 30 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 30 29 31 6 (set (reg:SI 0 ax [102])
        (mem/u/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("task") [flags 0x40]  <var_decl 0x7b517d52f1b0 task>)
                        ] UNSPEC_GOT))) [17  S4 A8])) "mm/memory.c":380:9 75 {*movsi_internal}
     (nil))
(insn 31 30 32 6 (set (reg/f:SI 0 ax [101])
        (plus:SI (reg:SI 0 ax [102])
            (const_int 252 [0xfc]))) "mm/memory.c":380:9 205 {*leasi}
     (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("task") [flags 0x40]  <var_decl 0x7b517d52f1b0 task>)
                (const_int 252 [0xfc])))
        (nil)))
(insn 32 31 108 6 (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [18 p+0 S4 A32])
        (reg/f:SI 0 ax [101])) "mm/memory.c":380:9 75 {*movsi_internal}
     (nil))
(jump_insn 108 32 109 6 (set (pc)
        (label_ref 86)) "mm/memory.c":380:2 807 {jump}
     (nil)
 -> 86)
(barrier 109 108 88)
(code_label 88 109 35 7 83 (nil) [1 uses])
(note 35 88 36 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 36 35 37 7 (set (reg/f:SI 0 ax [103])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [18 p+0 S4 A32])) "mm/memory.c":381:8 75 {*movsi_internal}
     (nil))
(insn 37 36 38 7 (set (reg/f:SI 0 ax [orig:88 _6 ] [88])
        (mem/f:SI (reg/f:SI 0 ax [103]) [14 *p_15+0 S4 A32])) "mm/memory.c":381:8 75 {*movsi_internal}
     (nil))
(insn 38 37 39 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:SI 0 ax [orig:88 _6 ] [88])
            (const_int 0 [0]))) "mm/memory.c":381:6 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 39 38 44 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 113)
            (pc))) "mm/memory.c":381:6 806 {*jcc}
     (nil)
 -> 113)
(note 44 39 45 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 45 44 46 8 (set (reg/f:SI 0 ax [104])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [18 p+0 S4 A32])) "mm/memory.c":383:18 75 {*movsi_internal}
     (nil))
(insn 46 45 47 8 (set (reg/f:SI 1 dx [orig:89 _7 ] [89])
        (mem/f:SI (reg/f:SI 0 ax [104]) [14 *p_15+0 S4 A32])) "mm/memory.c":383:18 75 {*movsi_internal}
     (nil))
(insn 47 46 48 8 (set (reg/f:SI 0 ax [105])
        (mem/u/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x40]  <var_decl 0x7b517d52f120 current>)
                        ] UNSPEC_GOT))) [17  S4 A8])) "mm/memory.c":383:15 75 {*movsi_internal}
     (nil))
(insn 48 47 49 8 (set (reg/f:SI 0 ax [orig:90 current.27_8 ] [90])
        (mem/f/c:SI (reg/f:SI 0 ax [105]) [14 current+0 S4 A32])) "mm/memory.c":383:15 75 {*movsi_internal}
     (nil))
(insn 49 48 50 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:SI 1 dx [orig:89 _7 ] [89])
            (reg/f:SI 0 ax [orig:90 current.27_8 ] [90]))) "mm/memory.c":383:6 11 {*cmpsi_1}
     (nil))
(jump_insn 50 49 55 8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 118)
            (pc))) "mm/memory.c":383:6 806 {*jcc}
     (nil)
 -> 118)
(note 55 50 56 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 56 55 57 9 (set (reg/f:SI 0 ax [106])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [18 p+0 S4 A32])) "mm/memory.c":385:8 75 {*movsi_internal}
     (nil))
(insn 57 56 58 9 (set (reg/f:SI 0 ax [orig:91 _9 ] [91])
        (mem/f:SI (reg/f:SI 0 ax [106]) [14 *p_15+0 S4 A32])) "mm/memory.c":385:8 75 {*movsi_internal}
     (nil))
(insn 58 57 59 9 (set (reg/f:SI 1 dx [orig:92 _10 ] [92])
        (mem/f:SI (plus:SI (reg/f:SI 0 ax [orig:91 _9 ] [91])
                (const_int 632 [0x278])) [8 _9->executable+0 S4 A32])) "mm/memory.c":385:11 75 {*movsi_internal}
     (nil))
(insn 59 58 60 9 (set (reg/f:SI 0 ax [107])
        (mem/u/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x40]  <var_decl 0x7b517d52f120 current>)
                        ] UNSPEC_GOT))) [17  S4 A8])) "mm/memory.c":385:34 75 {*movsi_internal}
     (nil))
(insn 60 59 61 9 (set (reg/f:SI 0 ax [orig:93 current.28_11 ] [93])
        (mem/f/c:SI (reg/f:SI 0 ax [107]) [14 current+0 S4 A32])) "mm/memory.c":385:34 75 {*movsi_internal}
     (nil))
(insn 61 60 62 9 (set (reg/f:SI 0 ax [orig:94 _12 ] [94])
        (mem/f:SI (plus:SI (reg/f:SI 0 ax [orig:93 current.28_11 ] [93])
                (const_int 632 [0x278])) [8 current.28_11->executable+0 S4 A32])) "mm/memory.c":385:34 75 {*movsi_internal}
     (nil))
(insn 62 61 63 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:SI 1 dx [orig:92 _10 ] [92])
            (reg/f:SI 0 ax [orig:94 _12 ] [94]))) "mm/memory.c":385:6 11 {*cmpsi_1}
     (nil))
(jump_insn 63 62 68 9 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 123)
            (pc))) "mm/memory.c":385:6 806 {*jcc}
     (nil)
 -> 123)
(note 68 63 69 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 69 68 70 10 (set (reg/f:SI 0 ax [108])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [18 p+0 S4 A32])) "mm/memory.c":387:7 75 {*movsi_internal}
     (nil))
(insn 70 69 71 10 (set (reg/f:SI 0 ax [orig:95 _13 ] [95])
        (mem/f:SI (reg/f:SI 0 ax [108]) [14 *p_15+0 S4 A32])) "mm/memory.c":387:7 75 {*movsi_internal}
     (nil))
(insn 71 70 72 10 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":387:7 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 72 71 73 10 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [14  S4 A32])
        (reg/f:SI 0 ax [orig:95 _13 ] [95])) "mm/memory.c":387:7 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 73 72 74 10 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [1  S4 A32])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 44 [0x2c])) [1 address+0 S4 A32])) "mm/memory.c":387:7 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 74 73 75 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("try_to_share") [flags 0x3]  <function_decl 0x7b517d53b600 try_to_share>) [0 try_to_share S1 A8])
            (const_int 16 [0x10]))) "mm/memory.c":387:7 823 {*call_value}
     (nil)
    (nil))
(insn 75 74 77 10 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":387:7 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 77 75 78 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:96 _14 ] [96])
            (const_int 0 [0]))) "mm/memory.c":387:6 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 78 77 79 10 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 83)
            (pc))) "mm/memory.c":387:6 806 {*jcc}
     (nil)
 -> 83)
(note 79 78 80 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 80 79 110 11 (set (reg:SI 0 ax [orig:97 _16 ] [97])
        (const_int 1 [0x1])) "mm/memory.c":388:11 75 {*movsi_internal}
     (nil))
(jump_insn 110 80 111 11 (set (pc)
        (label_ref 95)) "mm/memory.c":388:11 807 {jump}
     (nil)
 -> 95)
(barrier 111 110 113)
(code_label 113 111 112 16 84 (nil) [1 uses])
(note 112 113 114 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 114 112 115 16 (const_int 0 [0]) "mm/memory.c":382:4 843 {nop}
     (nil))
(jump_insn 115 114 116 16 (set (pc)
        (label_ref 83)) 807 {jump}
     (nil)
 -> 83)
(barrier 116 115 118)
(code_label 118 116 117 17 85 (nil) [1 uses])
(note 117 118 119 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 119 117 120 17 (const_int 0 [0]) "mm/memory.c":384:4 843 {nop}
     (nil))
(jump_insn 120 119 121 17 (set (pc)
        (label_ref 83)) 807 {jump}
     (nil)
 -> 83)
(barrier 121 120 123)
(code_label 123 121 122 18 86 (nil) [1 uses])
(note 122 123 124 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 124 122 83 18 (const_int 0 [0]) "mm/memory.c":386:4 843 {nop}
     (nil))
(code_label 83 124 84 12 80 (nil) [3 uses])
(note 84 83 85 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 85 84 86 12 (parallel [
            (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 12 [0xc])) [18 p+0 S4 A32])
                (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 12 [0xc])) [18 p+0 S4 A32])
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":380:40 209 {*addsi_1}
     (nil))
(code_label 86 85 87 13 78 (nil) [1 uses])
(note 87 86 89 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 89 87 91 13 (set (reg:SI 0 ax [110])
        (mem/u/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("task") [flags 0x40]  <var_decl 0x7b517d52f1b0 task>)
                        ] UNSPEC_GOT))) [17  S4 A8])) "mm/memory.c":380:25 75 {*movsi_internal}
     (nil))
(insn 91 89 92 13 (set (reg:CC 17 flags)
        (compare:CC (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 12 [0xc])) [18 p+0 S4 A32])
            (reg:SI 0 ax [109]))) "mm/memory.c":380:25 11 {*cmpsi_1}
     (nil))
(jump_insn 92 91 93 13 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 88)
            (pc))) "mm/memory.c":380:25 806 {*jcc}
     (nil)
 -> 88)
(note 93 92 94 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 94 93 95 14 (set (reg:SI 0 ax [orig:97 _16 ] [97])
        (const_int 0 [0])) "mm/memory.c":390:9 75 {*movsi_internal}
     (nil))
(code_label 95 94 96 15 76 (nil) [3 uses])
(note 96 95 102 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 102 96 126 15 (use (reg/i:SI 0 ax)) "mm/memory.c":391:1 -1
     (nil))
(note 126 102 0 NOTE_INSN_DELETED)

;; Function do_no_page (do_no_page, funcdef_no=12, decl_uid=1423, cgraph_uid=13, symbol_order=14)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=32, prev_offset=0)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 172:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 5:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =rm  (1) 0  (2) re {*subsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 28:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 31:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 36:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 39:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (1) lBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 50:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 51:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) lBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 59:  (0) =rm  (1) %0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 60:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 61:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 68:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 73:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 76:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 77:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 78:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 90:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (0) =r  (1) rm {*zero_extendhisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 92:  (0) =rm  (1) %0  (2) re {*addsi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=23,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 93:  (0) r  (1) r  (2) le {*addsi_1} (sp_off=-4)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-4)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 95:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 99:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (0) =rm  (1) 0  (2) re {*subsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 105:  (0) =rm  (1) %0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 106:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 111:  (0) =rm  (1) %0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 112:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 116:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 117:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 118:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 121:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=21,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 122:  (0) r  (1) r  (2) le {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 123:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 127:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 130:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 131:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 132:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 133:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 134:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 136:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 143:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 144:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 145:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 146:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 147:  (0) lBwBz {*call}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2 3
EBB 4
EBB 5 6 7
EBB 8
EBB 9
EBB 10 11
EBB 12
EBB 13 14 15
EBB 17
EBB 18
EBB 16

********** Pseudo live ranges #1: **********

  BB 16
  BB 17
   Insn 167: point = 0, n_alt = -1
   Insn 166: point = 0, n_alt = -1
  BB 15
   Insn 162: point = 0, n_alt = -1
   Insn 147: point = 0, n_alt = 0
   Insn 146: point = 0, n_alt = 0
   Insn 145: point = 0, n_alt = 0
   Insn 144: point = 0, n_alt = 0
   Insn 143: point = 0, n_alt = 0
  BB 18
   Insn 171: point = 0, n_alt = -1
  BB 14
   Insn 137: point = 0, n_alt = -1
   Insn 136: point = 0, n_alt = 0
   Insn 135: point = 1, n_alt = -2
   Insn 134: point = 2, n_alt = 0
   Insn 133: point = 2, n_alt = 0
   Insn 132: point = 2, n_alt = 0
   Insn 131: point = 2, n_alt = 0
   Insn 130: point = 2, n_alt = 0
  BB 13
   Insn 128: point = 2, n_alt = -1
   Insn 127: point = 2, n_alt = 0
   Insn 123: point = 3, n_alt = 1
   Insn 122: point = 4, n_alt = 3
   Insn 121: point = 5, n_alt = 0
  BB 11
   Insn 160: point = 6, n_alt = -1
   Insn 112: point = 6, n_alt = 1
   Insn 111: point = 7, n_alt = 0
   Insn 110: point = 9, n_alt = 0
   Insn 106: point = 10, n_alt = 1
   Insn 105: point = 11, n_alt = 0
   Insn 104: point = 13, n_alt = 0
   Insn 103: point = 15, n_alt = 0
   Insn 102: point = 16, n_alt = 0
   Insn 101: point = 18, n_alt = 0
   Insn 100: point = 20, n_alt = 0
   Insn 99: point = 22, n_alt = 0
   Insn 98: point = 22, n_alt = 0
   Insn 97: point = 22, n_alt = -2
   Insn 96: point = 22, n_alt = 0
   Insn 95: point = 22, n_alt = 0
   Insn 94: point = 23, n_alt = 0
   Insn 93: point = 24, n_alt = 3
   Insn 92: point = 25, n_alt = 0
   Insn 91: point = 25, n_alt = 0
   Insn 90: point = 27, n_alt = 2
   Insn 89: point = 29, n_alt = 0
   Insn 88: point = 31, n_alt = 0
   Insn 87: point = 33, n_alt = 0
  BB 10
   Insn 85: point = 35, n_alt = -1
   Insn 84: point = 35, n_alt = 0
  BB 8
   Insn 158: point = 36, n_alt = -1
   Insn 61: point = 36, n_alt = 1
   Insn 60: point = 36, n_alt = 1
   Insn 59: point = 37, n_alt = 0
   Insn 58: point = 39, n_alt = 0
   Insn 57: point = 41, n_alt = 0
  BB 7
   Insn 54: point = 43, n_alt = 0
  BB 6
   Insn 52: point = 44, n_alt = -1
   Insn 51: point = 44, n_alt = 1
   Insn 50: point = 44, n_alt = 1
   Insn 49: point = 45, n_alt = -2
   Insn 48: point = 46, n_alt = 0
  BB 5
   Insn 42: point = 47, n_alt = -1
   Insn 41: point = 47, n_alt = 0
   Insn 40: point = 48, n_alt = -2
   Insn 39: point = 49, n_alt = 0
   Insn 38: point = 49, n_alt = 0
   Insn 37: point = 49, n_alt = 0
   Insn 36: point = 49, n_alt = 0
  BB 9
   Insn 78: point = 50, n_alt = 0
   Insn 77: point = 50, n_alt = 0
   Insn 76: point = 50, n_alt = 1
   Insn 75: point = 51, n_alt = 0
   Insn 74: point = 52, n_alt = -2
   Insn 73: point = 53, n_alt = 0
   Insn 72: point = 53, n_alt = 0
   Insn 71: point = 53, n_alt = -2
   Insn 70: point = 53, n_alt = 0
   Insn 69: point = 54, n_alt = 0
   Insn 68: point = 54, n_alt = 0
   Insn 67: point = 54, n_alt = 0
   Insn 66: point = 56, n_alt = 0
   Insn 65: point = 58, n_alt = 0
  BB 12
   Insn 118: point = 60, n_alt = 8
   Insn 117: point = 61, n_alt = 0
   Insn 116: point = 62, n_alt = 0
  BB 4
   Insn 156: point = 62, n_alt = -1
   Insn 31: point = 62, n_alt = 0
   Insn 30: point = 62, n_alt = 0
   Insn 29: point = 62, n_alt = 0
   Insn 28: point = 62, n_alt = 0
  BB 3
   Insn 25: point = 62, n_alt = -1
   Insn 24: point = 62, n_alt = 0
   Insn 23: point = 63, n_alt = 0
   Insn 22: point = 65, n_alt = 0
   Insn 21: point = 67, n_alt = 0
  BB 2
   Insn 19: point = 69, n_alt = -1
   Insn 18: point = 69, n_alt = 0
   Insn 17: point = 70, n_alt = 0
   Insn 16: point = 72, n_alt = 0
   Insn 15: point = 74, n_alt = 0
   Insn 14: point = 75, n_alt = 1
   Insn 13: point = 76, n_alt = 0
   Insn 12: point = 78, n_alt = 0
   Insn 8: point = 79, n_alt = 0
   Insn 7: point = 81, n_alt = 0
   Insn 6: point = 83, n_alt = 0
   Insn 5: point = 84, n_alt = 0
   Insn 172: point = 84, n_alt = 0
 r82: [62..84] [21..59]
 r83: [80..81]
 r84: [77..79]
 r85: [71..72]
 r86: [69..70]
 r87: [64..65]
 r88: [62..63]
 r89: [47..48]
 r90: [38..39]
 r91: [36..37]
 r92: [55..56]
 r93: [53..54]
 r94: [50..52]
 r95: [30..31]
 r96: [28..29]
 r97: [26..27]
 r98: [22..25]
 r99: [17..18]
 r100: [14..16]
 r101: [12..13]
 r102: [10..11]
 r103: [60..61]
 r104: [2..5]
 r105: [0..1]
 r106: [82..83]
 r109: [75..76]
 r110: [77..78]
 r111: [73..74]
 r112: [66..67]
 r113: [44..45]
 r114: [40..41]
 r115: [57..58]
 r116: [50..51]
 r117: [32..33]
 r118: [23..24]
 r119: [19..20]
 r120: [14..15]
 r123: [6..7]
 r124: [8..9]
 r125: [3..4]
Compressing live ranges: from 85 to 68 - 80%
Ranges after the compression:
 r82: [48..67] [18..45]
 r83: [64..65]
 r84: [62..63]
 r85: [56..57]
 r86: [54..55]
 r87: [50..51]
 r88: [48..49]
 r89: [36..37]
 r90: [30..31]
 r91: [28..29]
 r92: [42..43]
 r93: [40..41]
 r94: [38..39]
 r95: [24..25]
 r96: [22..23]
 r97: [20..21]
 r98: [18..19]
 r99: [14..15]
 r100: [12..13]
 r101: [10..11]
 r102: [8..9]
 r103: [46..47]
 r104: [2..3]
 r105: [0..1]
 r106: [66..67]
 r109: [60..61]
 r110: [62..63]
 r111: [58..59]
 r112: [52..53]
 r113: [34..35]
 r114: [32..33]
 r115: [44..45]
 r116: [38..39]
 r117: [26..27]
 r118: [18..19]
 r119: [16..17]
 r120: [12..13]
 r123: [4..5]
 r124: [6..7]
 r125: [2..3]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=48, prev_offset=48)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=32, prev_offset=32)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
changing reg in insn 172
changing reg in insn 100
changing reg in insn 97
changing reg in insn 87
changing reg in insn 71
changing reg in insn 65
changing reg in insn 21
changing reg in insn 15
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 8
changing reg in insn 13
changing reg in insn 13
changing reg in insn 16
changing reg in insn 17
changing reg in insn 17
changing reg in insn 18
changing reg in insn 22
changing reg in insn 23
changing reg in insn 23
changing reg in insn 24
changing reg in insn 40
changing reg in insn 41
changing reg in insn 58
changing reg in insn 59
changing reg in insn 59
changing reg in insn 60
changing reg in insn 66
changing reg in insn 67
changing reg in insn 67
changing reg in insn 70
changing reg in insn 74
changing reg in insn 76
changing reg in insn 88
changing reg in insn 89
changing reg in insn 89
changing reg in insn 90
changing reg in insn 90
changing reg in insn 91
changing reg in insn 91
changing reg in insn 95
changing reg in insn 101
changing reg in insn 102
changing reg in insn 102
changing reg in insn 104
changing reg in insn 104
changing reg in insn 104
changing reg in insn 105
changing reg in insn 105
changing reg in insn 106
changing reg in insn 117
changing reg in insn 118
changing reg in insn 121
changing reg in insn 127
changing reg in insn 122
changing reg in insn 135
changing reg in insn 136
changing reg in insn 6
changing reg in insn 7
changing reg in insn 13
changing reg in insn 14
changing reg in insn 12
changing reg in insn 13
changing reg in insn 15
changing reg in insn 16
changing reg in insn 21
changing reg in insn 22
changing reg in insn 49
changing reg in insn 50
changing reg in insn 57
changing reg in insn 58
changing reg in insn 58
changing reg in insn 65
changing reg in insn 66
changing reg in insn 75
changing reg in insn 76
changing reg in insn 87
changing reg in insn 88
changing reg in insn 93
changing reg in insn 94
changing reg in insn 100
changing reg in insn 101
changing reg in insn 103
changing reg in insn 104
changing reg in insn 111
changing reg in insn 112
changing reg in insn 110
changing reg in insn 111
changing reg in insn 122
changing reg in insn 123
deleting insn with uid = 40.
deleting insn with uid = 49.
deleting insn with uid = 71.
deleting insn with uid = 74.
deleting insn with uid = 97.
deleting insn with uid = 135.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 30.
verify found no changes in insn with uid = 38.
verify found no changes in insn with uid = 48.
verify found no changes in insn with uid = 54.
verify found no changes in insn with uid = 72.
verify found no changes in insn with uid = 98.
verify found no changes in insn with uid = 133.
verify found no changes in insn with uid = 145.
verify found no changes in insn with uid = 147.


do_no_page

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 17 [flags]
;;  ref usage 	r0={40d,35u,1e} r1={15d,5u,2e} r2={10d} r3={1d,8u} r7={23d,95u} r8={9d} r9={9d} r10={9d} r11={9d} r12={9d} r13={9d} r14={9d} r15={9d} r16={1e} r17={41d,7u} r18={9d} r19={2e} r20={9d} r21={9d} r22={9d} r23={9d} r24={9d} r25={9d} r26={9d} r27={9d} r28={9d} r29={9d} r30={9d} r31={9d} r32={9d} r33={9d} r34={9d} r35={9d} r36={9d} r37={9d} r38={9d} r39={9d} r40={9d} r41={9d} r42={9d} r43={9d} r44={9d} r45={9d} r46={9d} r47={9d} r48={9d} r49={9d} r50={9d} r51={9d} r52={9d} r53={9d} r54={9d} r55={9d} r56={9d} r57={9d} r58={9d} r59={9d} r60={9d} r61={9d} r62={9d} r63={9d} r64={9d} r65={9d} r66={9d} r67={9d} r68={9d} r69={9d} r70={9d} r71={9d} r72={9d} r73={9d} r74={9d} r75={9d} 
;;    total ref usage 871{715d,150u,6e} in 101{92 regular + 9 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 172 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 172 3 2 2 (parallel [
            (set (reg:SI 3 bx [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 172 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 52 [0x34])) [1 address+0 S4 A32])
                (and:SI (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 52 [0x34])) [1 address+0 S4 A32])
                    (const_int -4096 [0xfffffffffffff000])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":400:10 490 {*andsi_1}
     (nil))
(insn 6 5 7 2 (set (reg/f:SI 0 ax [106])
        (mem/u/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x40]  <var_decl 0x7b517d52f120 current>)
                        ] UNSPEC_GOT))) [17  S4 A8])) "mm/memory.c":401:25 75 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (reg/f:SI 0 ax [orig:83 current.29_1 ] [83])
        (mem/f/c:SI (reg/f:SI 0 ax [106]) [14 current+0 S4 A32])) "mm/memory.c":401:25 75 {*movsi_internal}
     (nil))
(insn 8 7 12 2 (set (reg:SI 1 dx [orig:84 _2 ] [84])
        (mem:SI (plus:SI (reg/f:SI 0 ax [orig:83 current.29_1 ] [83])
                (const_int 536 [0x218])) [1 current.29_1->start_code+0 S4 A32])) "mm/memory.c":401:25 75 {*movsi_internal}
     (nil))
(insn 12 8 13 2 (set (reg:SI 0 ax [110])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 52 [0x34])) [1 address+0 S4 A32])) "mm/memory.c":401:6 75 {*movsi_internal}
     (nil))
(insn 13 12 14 2 (parallel [
            (set (reg:SI 0 ax [109])
                (minus:SI (reg:SI 0 ax [110])
                    (reg:SI 1 dx [orig:84 _2 ] [84])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":401:6 282 {*subsi_1}
     (expr_list:REG_EQUAL (minus:SI (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                    (const_int 4 [0x4])) [1 address+0 S4 A32])
            (reg:SI 1 dx [orig:84 _2 ] [84]))
        (nil)))
(insn 14 13 15 2 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [1 tmp+0 S4 A32])
        (reg:SI 0 ax [109])) "mm/memory.c":401:6 75 {*movsi_internal}
     (nil))
(insn 15 14 16 2 (set (reg/f:SI 0 ax [111])
        (mem/u/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x40]  <var_decl 0x7b517d52f120 current>)
                        ] UNSPEC_GOT))) [17  S4 A8])) "mm/memory.c":402:14 75 {*movsi_internal}
     (nil))
(insn 16 15 17 2 (set (reg/f:SI 0 ax [orig:85 current.30_3 ] [85])
        (mem/f/c:SI (reg/f:SI 0 ax [111]) [14 current+0 S4 A32])) "mm/memory.c":402:14 75 {*movsi_internal}
     (nil))
(insn 17 16 18 2 (set (reg/f:SI 0 ax [orig:86 _4 ] [86])
        (mem/f:SI (plus:SI (reg/f:SI 0 ax [orig:85 current.30_3 ] [85])
                (const_int 632 [0x278])) [8 current.30_3->executable+0 S4 A32])) "mm/memory.c":402:14 75 {*movsi_internal}
     (nil))
(insn 18 17 19 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:SI 0 ax [orig:86 _4 ] [86])
            (const_int 0 [0]))) "mm/memory.c":402:5 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 19 18 20 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 26)
            (pc))) "mm/memory.c":402:5 806 {*jcc}
     (nil)
 -> 26)
(note 20 19 21 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 22 3 (set (reg/f:SI 0 ax [112])
        (mem/u/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x40]  <var_decl 0x7b517d52f120 current>)
                        ] UNSPEC_GOT))) [17  S4 A8])) "mm/memory.c":402:44 75 {*movsi_internal}
     (nil))
(insn 22 21 23 3 (set (reg/f:SI 0 ax [orig:87 current.31_5 ] [87])
        (mem/f/c:SI (reg/f:SI 0 ax [112]) [14 current+0 S4 A32])) "mm/memory.c":402:44 75 {*movsi_internal}
     (nil))
(insn 23 22 24 3 (set (reg:SI 0 ax [orig:88 _6 ] [88])
        (mem:SI (plus:SI (reg/f:SI 0 ax [orig:87 current.31_5 ] [87])
                (const_int 544 [0x220])) [1 current.31_5->end_data+0 S4 A32])) "mm/memory.c":402:44 75 {*movsi_internal}
     (nil))
(insn 24 23 25 3 (set (reg:CC 17 flags)
        (compare:CC (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 28 [0x1c])) [1 tmp+0 S4 A32])
            (reg:SI 0 ax [orig:88 _6 ] [88]))) "mm/memory.c":402:27 11 {*cmpsi_1}
     (nil))
(jump_insn 25 24 26 3 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 34)
            (pc))) "mm/memory.c":402:27 806 {*jcc}
     (nil)
 -> 34)
(code_label 26 25 27 4 88 (nil) [1 uses])
(note 27 26 28 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 29 4 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":403:3 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 29 28 30 4 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [1  S4 A32])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 64 [0x40])) [1 address+0 S4 A32])) "mm/memory.c":403:3 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 30 29 31 4 (call (mem:QI (symbol_ref:SI ("get_empty_page") [flags 0x3]  <function_decl 0x7b517d53be00 get_empty_page>) [0 get_empty_page S1 A8])
        (const_int 16 [0x10])) "mm/memory.c":403:3 812 {*call}
     (nil)
    (nil))
(insn 31 30 156 4 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":403:3 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(jump_insn 156 31 157 4 (set (pc)
        (label_ref 154)) "mm/memory.c":404:3 807 {jump}
     (nil)
 -> 154)
(barrier 157 156 34)
(code_label 34 157 35 5 89 (nil) [1 uses])
(note 35 34 36 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 36 35 37 5 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":406:6 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 37 36 38 5 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [1  S4 A32])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 40 [0x28])) [1 tmp+0 S4 A32])) "mm/memory.c":406:6 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 38 37 39 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("share_page") [flags 0x3]  <function_decl 0x7b517d54c000 share_page>) [0 share_page S1 A8])
            (const_int 16 [0x10]))) "mm/memory.c":406:6 823 {*call_value}
     (nil)
    (nil))
(insn 39 38 41 5 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":406:6 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 41 39 42 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:89 _7 ] [89])
            (const_int 0 [0]))) "mm/memory.c":406:5 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 42 41 47 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 165)
            (pc))) "mm/memory.c":406:5 806 {*jcc}
     (nil)
 -> 165)
(note 47 42 48 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(call_insn 48 47 50 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("get_free_page") [flags 0x3]  <function_decl 0x7b517d53b100 get_free_page>) [0 get_free_page S1 A8])
            (const_int 0 [0]))) "mm/memory.c":408:15 823 {*call_value}
     (nil)
    (nil))
(insn 50 48 51 6 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [1 page+0 S4 A32])
        (reg:SI 0 ax [113])) "mm/memory.c":408:15 75 {*movsi_internal}
     (nil))
(insn 51 50 52 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])) [1 page+0 S4 A32])
            (const_int 0 [0]))) "mm/memory.c":408:5 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 52 51 53 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 55)
            (pc))) "mm/memory.c":408:5 806 {*jcc}
     (nil)
 -> 55)
(note 53 52 54 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(call_insn 54 53 55 7 (call (mem:QI (symbol_ref:SI ("oom") [flags 0x3]  <function_decl 0x7b517d537f00 oom>) [0 oom S1 A8])
        (const_int 0 [0])) "mm/memory.c":409:3 812 {*call}
     (nil)
    (nil))
(code_label 55 54 56 8 92 (nil) [1 uses])
(note 56 55 57 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 57 56 58 8 (set (reg:SI 0 ax [114])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [1 tmp+0 S4 A32])) "mm/memory.c":411:18 75 {*movsi_internal}
     (nil))
(insn 58 57 59 8 (parallel [
            (set (reg:SI 0 ax [orig:90 _8 ] [90])
                (lshiftrt:SI (reg:SI 0 ax [114])
                    (const_int 10 [0xa])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":411:18 701 {*lshrsi3_1}
     (expr_list:REG_EQUAL (udiv:SI (reg:SI 0 ax [114])
            (const_int 1024 [0x400]))
        (nil)))
(insn 59 58 60 8 (parallel [
            (set (reg:SI 0 ax [orig:91 _9 ] [91])
                (plus:SI (reg:SI 0 ax [orig:90 _8 ] [90])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":411:12 209 {*addsi_1}
     (nil))
(insn 60 59 61 8 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [2 block+0 S4 A32])
        (reg:SI 0 ax [orig:91 _9 ] [91])) "mm/memory.c":411:8 75 {*movsi_internal}
     (nil))
(insn 61 60 158 8 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [2 i+0 S4 A32])
        (const_int 0 [0])) "mm/memory.c":412:9 75 {*movsi_internal}
     (nil))
(jump_insn 158 61 159 8 (set (pc)
        (label_ref 79)) "mm/memory.c":412:2 807 {jump}
     (nil)
 -> 79)
(barrier 159 158 81)
(code_label 81 159 64 9 94 (nil) [1 uses])
(note 64 81 65 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 65 64 66 9 (set (reg/f:SI 0 ax [115])
        (mem/u/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x40]  <var_decl 0x7b517d52f120 current>)
                        ] UNSPEC_GOT))) [17  S4 A8])) "mm/memory.c":413:23 75 {*movsi_internal}
     (nil))
(insn 66 65 67 9 (set (reg/f:SI 0 ax [orig:92 current.32_10 ] [92])
        (mem/f/c:SI (reg/f:SI 0 ax [115]) [14 current+0 S4 A32])) "mm/memory.c":413:23 75 {*movsi_internal}
     (nil))
(insn 67 66 68 9 (set (reg/f:SI 0 ax [orig:93 _11 ] [93])
        (mem/f:SI (plus:SI (reg/f:SI 0 ax [orig:92 current.32_10 ] [92])
                (const_int 632 [0x278])) [8 current.32_10->executable+0 S4 A32])) "mm/memory.c":413:11 75 {*movsi_internal}
     (nil))
(insn 68 67 69 9 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":413:11 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 69 68 70 9 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 32 [0x20])) [2 block+0 S4 A32])) "mm/memory.c":413:11 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 70 69 72 9 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [8  S4 A32])
        (reg/f:SI 0 ax [orig:93 _11 ] [93])) "mm/memory.c":413:11 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 72 70 73 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("bmap") [flags 0x41]  <function_decl 0x7b517d514100 bmap>) [0 bmap S1 A8])
            (const_int 16 [0x10]))) "mm/memory.c":413:11 823 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 73 72 75 9 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":413:11 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 75 73 76 9 (set (reg:SI 1 dx [116])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [2 i+0 S4 A32])) "mm/memory.c":413:9 75 {*movsi_internal}
     (nil))
(insn 76 75 77 9 (set (mem:SI (plus:SI (mult:SI (reg:SI 1 dx [116])
                    (const_int 4 [0x4]))
                (reg/f:SI 7 sp)) [2 nr[i_26]+0 S4 A32])
        (reg:SI 0 ax [orig:94 _12 ] [94])) "mm/memory.c":413:9 75 {*movsi_internal}
     (nil))
(insn 77 76 78 9 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 24 [0x18])) [2 block+0 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 24 [0x18])) [2 block+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":412:26 209 {*addsi_1}
     (nil))
(insn 78 77 79 9 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 20 [0x14])) [2 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 20 [0x14])) [2 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":412:31 209 {*addsi_1}
     (nil))
(code_label 79 78 80 10 93 (nil) [1 uses])
(note 80 79 84 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 84 80 85 10 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 20 [0x14])) [2 i+0 S4 A32])
            (const_int 3 [0x3]))) "mm/memory.c":412:16 11 {*cmpsi_1}
     (nil))
(jump_insn 85 84 86 10 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 81)
            (pc))) "mm/memory.c":412:16 806 {*jcc}
     (nil)
 -> 81)
(note 86 85 87 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 87 86 88 11 (set (reg/f:SI 0 ax [117])
        (mem/u/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x40]  <var_decl 0x7b517d52f120 current>)
                        ] UNSPEC_GOT))) [17  S4 A8])) "mm/memory.c":414:26 75 {*movsi_internal}
     (nil))
(insn 88 87 89 11 (set (reg/f:SI 0 ax [orig:95 current.33_13 ] [95])
        (mem/f/c:SI (reg/f:SI 0 ax [117]) [14 current+0 S4 A32])) "mm/memory.c":414:26 75 {*movsi_internal}
     (nil))
(insn 89 88 90 11 (set (reg/f:SI 0 ax [orig:96 _14 ] [96])
        (mem/f:SI (plus:SI (reg/f:SI 0 ax [orig:95 current.33_13 ] [95])
                (const_int 632 [0x278])) [8 current.33_13->executable+0 S4 A32])) "mm/memory.c":414:26 75 {*movsi_internal}
     (nil))
(insn 90 89 91 11 (set (reg:HI 0 ax [orig:97 _15 ] [97])
        (mem:HI (plus:SI (reg/f:SI 0 ax [orig:96 _14 ] [96])
                (const_int 44 [0x2c])) [7 _14->i_dev+0 S2 A32])) "mm/memory.c":414:38 76 {*movhi_internal}
     (nil))
(insn 91 90 92 11 (set (reg:SI 0 ax [orig:98 _16 ] [98])
        (zero_extend:SI (reg:HI 0 ax [orig:97 _15 ] [97]))) "mm/memory.c":414:2 144 {*zero_extendhisi2}
     (nil))
(insn 92 91 93 11 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":414:2 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 4 [0x4])
        (nil)))
(insn 93 92 94 11 (parallel [
            (set (reg:SI 1 dx [118])
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":414:2 209 {*addsi_1}
     (nil))
(insn 94 93 95 11 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [19  S4 A32])
        (reg:SI 1 dx [118])) "mm/memory.c":414:2 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 95 94 96 11 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (reg:SI 0 ax [orig:98 _16 ] [98])) "mm/memory.c":414:2 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 96 95 98 11 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [1  S4 A32])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [1 page+0 S4 A32])) "mm/memory.c":414:2 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 98 96 99 11 (call (mem:QI (symbol_ref:SI ("bread_page") [flags 0x41]  <function_decl 0x7b517d514b00 bread_page>) [0 bread_page S1 A8])
        (const_int 16 [0x10])) "mm/memory.c":414:2 812 {*call}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 99 98 100 11 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":414:2 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 100 99 101 11 (set (reg/f:SI 0 ax [119])
        (mem/u/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("current") [flags 0x40]  <var_decl 0x7b517d52f120 current>)
                        ] UNSPEC_GOT))) [17  S4 A8])) "mm/memory.c":415:26 75 {*movsi_internal}
     (nil))
(insn 101 100 102 11 (set (reg/f:SI 0 ax [orig:99 current.34_17 ] [99])
        (mem/f/c:SI (reg/f:SI 0 ax [119]) [14 current+0 S4 A32])) "mm/memory.c":415:26 75 {*movsi_internal}
     (nil))
(insn 102 101 103 11 (set (reg:SI 1 dx [orig:100 _18 ] [100])
        (mem:SI (plus:SI (reg/f:SI 0 ax [orig:99 current.34_17 ] [99])
                (const_int 544 [0x220])) [1 current.34_17->end_data+0 S4 A32])) "mm/memory.c":415:26 75 {*movsi_internal}
     (nil))
(insn 103 102 104 11 (set (reg:SI 0 ax [120])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [1 tmp+0 S4 A32])) "mm/memory.c":415:17 75 {*movsi_internal}
     (nil))
(insn 104 103 105 11 (parallel [
            (set (reg:SI 0 ax [orig:101 _19 ] [101])
                (minus:SI (reg:SI 0 ax [120])
                    (reg:SI 1 dx [orig:100 _18 ] [100])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":415:17 282 {*subsi_1}
     (expr_list:REG_EQUAL (minus:SI (mem/c:SI (plus:SI (reg/f:SI 19 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 tmp+0 S4 A32])
            (reg:SI 1 dx [orig:100 _18 ] [100]))
        (nil)))
(insn 105 104 106 11 (parallel [
            (set (reg:SI 0 ax [orig:102 _20 ] [102])
                (plus:SI (reg:SI 0 ax [orig:101 _19 ] [101])
                    (const_int 4096 [0x1000])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":415:17 209 {*addsi_1}
     (nil))
(insn 106 105 110 11 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [2 i+0 S4 A32])
        (reg:SI 0 ax [orig:102 _20 ] [102])) "mm/memory.c":415:4 75 {*movsi_internal}
     (nil))
(insn 110 106 111 11 (set (reg:SI 0 ax [124])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [1 page+0 S4 A32])) "mm/memory.c":416:6 75 {*movsi_internal}
     (nil))
(insn 111 110 112 11 (parallel [
            (set (reg:SI 0 ax [123])
                (plus:SI (reg:SI 0 ax [124])
                    (const_int 4096 [0x1000])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":416:6 209 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:SI (reg/f:SI 19 frame)
                    (const_int -16 [0xfffffffffffffff0])) [1 page+0 S4 A32])
            (const_int 4096 [0x1000]))
        (nil)))
(insn 112 111 160 11 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [1 tmp+0 S4 A32])
        (reg:SI 0 ax [123])) "mm/memory.c":416:6 75 {*movsi_internal}
     (nil))
(jump_insn 160 112 161 11 (set (pc)
        (label_ref 119)) "mm/memory.c":417:8 807 {jump}
     (nil)
 -> 119)
(barrier 161 160 124)
(code_label 124 161 115 12 96 (nil) [1 uses])
(note 115 124 116 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 116 115 117 12 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 28 [0x1c])) [1 tmp+0 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 28 [0x1c])) [1 tmp+0 S4 A32])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":418:6 209 {*addsi_1}
     (nil))
(insn 117 116 118 12 (set (reg/f:SI 0 ax [orig:103 tmp.35_21 ] [103])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [1 tmp+0 S4 A32])) "mm/memory.c":419:4 75 {*movsi_internal}
     (nil))
(insn 118 117 119 12 (set (mem:QI (reg/f:SI 0 ax [orig:103 tmp.35_21 ] [103]) [0 *tmp.35_21+0 S1 A8])
        (const_int 0 [0])) "mm/memory.c":419:16 77 {*movqi_internal}
     (nil))
(code_label 119 118 120 13 95 (nil) [1 uses])
(note 120 119 121 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 121 120 122 13 (set (reg:SI 0 ax [orig:104 i.36_22 ] [104])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [2 i+0 S4 A32])) "mm/memory.c":417:10 75 {*movsi_internal}
     (nil))
(insn 122 121 123 13 (parallel [
            (set (reg:SI 1 dx [125])
                (plus:SI (reg:SI 0 ax [orig:104 i.36_22 ] [104])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":417:10 209 {*addsi_1}
     (nil))
(insn 123 122 127 13 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [2 i+0 S4 A32])
        (reg:SI 1 dx [125])) "mm/memory.c":417:10 75 {*movsi_internal}
     (nil))
(insn 127 123 128 13 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:SI 0 ax [orig:104 i.36_22 ] [104])
            (const_int 0 [0]))) "mm/memory.c":417:13 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 128 127 129 13 (set (pc)
        (if_then_else (gt (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 124)
            (pc))) "mm/memory.c":417:13 806 {*jcc}
     (nil)
 -> 124)
(note 129 128 130 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 130 129 131 14 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":421:6 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 131 130 132 14 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [1  S4 A32])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 60 [0x3c])) [1 address+0 S4 A32])) "mm/memory.c":421:6 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 132 131 133 14 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [1  S4 A32])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [1 page+0 S4 A32])) "mm/memory.c":421:6 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 133 132 134 14 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("put_page") [flags 0x3]  <function_decl 0x7b517d53bc00 put_page>) [0 put_page S1 A8])
            (const_int 16 [0x10]))) "mm/memory.c":421:6 823 {*call_value}
     (nil)
    (nil))
(insn 134 133 136 14 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":421:6 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 136 134 137 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:105 _23 ] [105])
            (const_int 0 [0]))) "mm/memory.c":421:5 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 137 136 142 14 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 170)
            (pc))) "mm/memory.c":421:5 806 {*jcc}
     (nil)
 -> 170)
(note 142 137 143 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 143 142 144 15 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":423:2 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 144 143 145 15 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [1  S4 A32])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [1 page+0 S4 A32])) "mm/memory.c":423:2 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 145 144 146 15 (call (mem:QI (symbol_ref:SI ("free_page") [flags 0x3]  <function_decl 0x7b517d53b400 free_page>) [0 free_page S1 A8])
        (const_int 16 [0x10])) "mm/memory.c":423:2 812 {*call}
     (nil)
    (nil))
(insn 146 145 147 15 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":423:2 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(call_insn 147 146 162 15 (call (mem:QI (symbol_ref:SI ("oom") [flags 0x3]  <function_decl 0x7b517d537f00 oom>) [0 oom S1 A8])
        (const_int 0 [0])) "mm/memory.c":424:2 812 {*call}
     (nil)
    (nil))
(jump_insn 162 147 163 15 (set (pc)
        (label_ref 154)) 807 {jump}
     (nil)
 -> 154)
(barrier 163 162 165)
(code_label 165 163 164 17 99 (nil) [1 uses])
(note 164 165 166 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 166 164 167 17 (const_int 0 [0]) "mm/memory.c":407:3 843 {nop}
     (nil))
(jump_insn 167 166 168 17 (set (pc)
        (label_ref 154)) 807 {jump}
     (nil)
 -> 154)
(barrier 168 167 170)
(code_label 170 168 169 18 100 (nil) [1 uses])
(note 169 170 171 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 171 169 154 18 (const_int 0 [0]) "mm/memory.c":422:3 843 {nop}
     (nil))
(code_label 154 171 155 16 87 (nil) [3 uses])
(note 155 154 173 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(note 173 155 0 NOTE_INSN_DELETED)

;; Function un_wp_page (un_wp_page, funcdef_no=13, decl_uid=1438, cgraph_uid=14, symbol_order=15)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 7:  (0) =rm  (1) %0  (2) re {*andsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 15:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 17:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 23:  (0) =rm  (1) %0  (2) re {*iorsi_1}
      Creating newreg=109 from oldreg=87, assigning class GENERAL_REGS to r109
   23: {r109:SI=r109:SI|0x2;clobber flags:CC;}
      REG_DEAD r87:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
   72: r109:SI=r87:SI
    Inserting insn reload after:
   73: r88:SI=r109:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 25:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) a
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (1) lBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 34:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) lBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 47:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 49:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 50:  (0) =qm  (1) %0  (2) qn {*addqi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=7,overall=27,losers=2 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 51:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 55:  (0) =rm  (1) %0  (2) re {*iorsi_1}
      Creating newreg=110 from oldreg=102, assigning class GENERAL_REGS to r110
   55: {r110:SI=r110:SI|0x7;clobber flags:CC;}
      REG_DEAD r102:SI
      REG_UNUSED flags:CC
      REG_EQUAL [frame:SI-0x8]|0x7
    Inserting insn reload before:
   74: r110:SI=r102:SI
    Inserting insn reload after:
   75: r93:SI=r110:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 57:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) a
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) =r  (1) g {*movsi_internal}
            0 Small class reload: reject+=3
            1 Small class reload: reject+=3
          alt=0,overall=18,losers=2,rld_nregs=2
	 Choosing alt 0 in insn 63:  (0) S  (1) D  (2) c
      Creating newreg=111 from oldreg=105, assigning class SIREG to r111
      Creating newreg=112 from oldreg=106, assigning class DIREG to r112
   63: {asm_operands;clobber flags:CC;}
      REG_DEAD r107:SI
      REG_DEAD r106:SI
      REG_DEAD r105:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
   76: r111:SI=r105:SI
   77: r112:SI=r106:SI

	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2 3 4
EBB 5 6
EBB 7 8
EBB 9
EBB 10

********** Pseudo live ranges #1: **********

  BB 10
  BB 4
   Insn 68: point = 0, n_alt = -1
   Insn 27: point = 0, n_alt = 0
   Insn 26: point = 1, n_alt = 0
   Insn 25: point = 2, n_alt = 1
   Insn 24: point = 3, n_alt = 0
   Insn 73: point = 4, n_alt = -2
	Hard reg 1 is preferable by r109 with profit 1000
   Insn 23: point = 6, n_alt = 0
   Insn 72: point = 7, n_alt = -2
	Hard reg 1 is preferable by r109 with profit 1000
	Hard reg 0 is preferable by r109 with profit 1000
   Insn 22: point = 9, n_alt = 0
   Insn 21: point = 11, n_alt = 0
  BB 9
   Insn 63: point = 12, n_alt = 0
   Insn 77: point = 13, n_alt = -2
	Hard reg 1 is preferable by r112 with profit 1000
   Insn 76: point = 15, n_alt = -2
	Hard reg 0 is preferable by r111 with profit 1000
   Insn 62: point = 17, n_alt = 0
   Insn 61: point = 18, n_alt = 0
   Insn 60: point = 19, n_alt = 0
   Insn 59: point = 20, n_alt = 0
   Insn 58: point = 21, n_alt = 0
   Insn 57: point = 22, n_alt = 1
   Insn 56: point = 23, n_alt = 0
   Insn 75: point = 24, n_alt = -2
	Hard reg 1 is preferable by r110 with profit 1000
   Insn 55: point = 26, n_alt = 0
   Insn 74: point = 27, n_alt = -2
	Hard reg 1 is preferable by r110 with profit 1000
	Hard reg 0 is preferable by r110 with profit 1000
   Insn 54: point = 29, n_alt = 0
  BB 8
   Insn 51: point = 30, n_alt = 8
   Insn 50: point = 31, n_alt = 0
   Insn 49: point = 33, n_alt = 4
   Insn 48: point = 34, n_alt = 0
   Insn 47: point = 36, n_alt = 0
   Insn 46: point = 38, n_alt = 0
  BB 7
   Insn 44: point = 40, n_alt = -1
   Insn 43: point = 40, n_alt = 0
  BB 6
   Insn 38: point = 41, n_alt = 0
  BB 5
   Insn 36: point = 42, n_alt = -1
   Insn 35: point = 42, n_alt = 1
   Insn 34: point = 42, n_alt = 1
   Insn 33: point = 43, n_alt = -2
   Insn 32: point = 44, n_alt = 0
  BB 3
   Insn 19: point = 45, n_alt = -1
   Insn 18: point = 45, n_alt = 0
   Insn 17: point = 46, n_alt = 4
   Insn 16: point = 48, n_alt = 0
   Insn 15: point = 50, n_alt = 0
   Insn 14: point = 52, n_alt = 0
  BB 2
   Insn 12: point = 54, n_alt = -1
   Insn 11: point = 54, n_alt = 0
   Insn 8: point = 54, n_alt = 1
   Insn 7: point = 55, n_alt = 0
   Insn 6: point = 57, n_alt = 0
   Insn 5: point = 59, n_alt = 0
   Insn 70: point = 60, n_alt = 0
 r82: [30..60]
 r83: [56..57]
 r84: [49..50]
 r85: [47..48]
 r86: [45..46]
 r87: [8..9]
 r88: [2..4]
 r89: [35..36]
 r90: [30..34]
 r91: [32..33]
 r92: [30..31]
 r93: [22..24]
 r94: [58..59]
 r95: [54..55]
 r96: [51..52]
 r97: [10..11]
 r98: [2..3]
 r99: [0..1]
 r100: [42..43]
 r101: [37..38]
 r102: [28..29]
 r103: [22..23]
 r104: [20..21]
 r105: [16..19]
 r106: [14..18]
 r107: [12..17]
 r109: [5..7]
 r110: [25..27]
 r111: [12..15]
 r112: [12..13]
Compressing live ranges: from 61 to 48 - 78%
Ranges after the compression:
 r82: [24..47]
 r83: [44..45]
 r84: [38..39]
 r85: [36..37]
 r86: [34..35]
 r87: [6..7]
 r88: [2..3]
 r89: [28..29]
 r90: [24..27]
 r91: [26..27]
 r92: [24..25]
 r93: [18..19]
 r94: [46..47]
 r95: [42..43]
 r96: [40..41]
 r97: [8..9]
 r98: [2..3]
 r99: [0..1]
 r100: [32..33]
 r101: [30..31]
 r102: [22..23]
 r103: [18..19]
 r104: [16..17]
 r105: [14..15]
 r106: [12..15]
 r107: [10..15]
 r109: [4..5]
 r110: [20..21]
 r111: [10..13]
 r112: [10..11]

********** Assignment #1: **********

	 Assigning to 111 (cl=SIREG, orig=105, freq=2000, tfirst=111, tfreq=2000)...
	   Assign 4 to reload r111 (freq=2000)
	 Assigning to 112 (cl=DIREG, orig=106, freq=2000, tfirst=112, tfreq=2000)...
	   Assign 5 to reload r112 (freq=2000)
	 Assigning to 109 (cl=GENERAL_REGS, orig=87, freq=3000, tfirst=109, tfreq=3000)...
	   Assign 0 to reload r109 (freq=3000)
	 Assigning to 110 (cl=GENERAL_REGS, orig=102, freq=3000, tfirst=110, tfreq=3000)...
	   Assign 0 to reload r110 (freq=3000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=32)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=16)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
changing reg in insn 70
changing reg in insn 51
changing reg in insn 49
changing reg in insn 17
changing reg in insn 6
changing reg in insn 7
changing reg in insn 15
changing reg in insn 16
changing reg in insn 16
changing reg in insn 17
changing reg in insn 17
changing reg in insn 18
changing reg in insn 22
changing reg in insn 25
changing reg in insn 47
changing reg in insn 48
changing reg in insn 48
changing reg in insn 51
changing reg in insn 49
changing reg in insn 49
changing reg in insn 50
changing reg in insn 50
changing reg in insn 51
changing reg in insn 57
changing reg in insn 5
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 14
changing reg in insn 15
changing reg in insn 21
changing reg in insn 22
changing reg in insn 24
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 33
changing reg in insn 34
changing reg in insn 46
changing reg in insn 47
changing reg in insn 54
changing reg in insn 56
changing reg in insn 57
changing reg in insn 58
changing reg in insn 59
changing reg in insn 60
changing reg in insn 61
changing reg in insn 62
changing reg in insn 63
deleting insn with uid = 72.
deleting insn with uid = 33.
deleting insn with uid = 74.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 32.
verify found no changes in insn with uid = 38.


un_wp_page

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp] 17 [flags]
;;  ref usage 	r0={23d,22u} r1={8d,5u} r2={4d,1u} r3={1d,3u} r4={1d,1u} r5={1d,1u} r7={1d,26u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={18d,4u} r18={2d} r19={3e} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} 
;;    total ref usage 253{187d,63u,3e} in 48{46 regular + 2 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 70 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 70 3 2 2 (parallel [
            (set (reg:SI 3 bx [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 70 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 0 ax [94])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 32 [0x20])) [16 table_entry+0 S4 A32])) "mm/memory.c":431:26 75 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (reg:SI 0 ax [orig:83 _1 ] [83])
        (mem:SI (reg/f:SI 0 ax [94]) [1 *table_entry_17(D)+0 S4 A32])) "mm/memory.c":431:26 75 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (parallel [
            (set (reg:SI 0 ax [95])
                (and:SI (reg:SI 0 ax [orig:83 _1 ] [83])
                    (const_int -4096 [0xfffffffffffff000])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":431:11 490 {*andsi_1}
     (nil))
(insn 8 7 11 2 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [1 old_page+0 S4 A32])
        (reg:SI 0 ax [95])) "mm/memory.c":431:11 75 {*movsi_internal}
     (nil))
(insn 11 8 12 2 (set (reg:CC 17 flags)
        (compare:CC (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 12 [0xc])) [1 old_page+0 S4 A32])
            (const_int 1048575 [0xfffff]))) "mm/memory.c":432:5 11 {*cmpsi_1}
     (nil))
(jump_insn 12 11 13 2 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 30)
            (pc))) "mm/memory.c":432:5 806 {*jcc}
     (nil)
 -> 30)
(note 13 12 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 3 (set (reg:SI 0 ax [96])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [1 old_page+0 S4 A32])) "mm/memory.c":432:37 75 {*movsi_internal}
     (nil))
(insn 15 14 16 3 (parallel [
            (set (reg:SI 0 ax [orig:84 _2 ] [84])
                (plus:SI (reg:SI 0 ax [96])
                    (const_int -1048576 [0xfffffffffff00000])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":432:37 209 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:SI (reg/f:SI 19 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 old_page+0 S4 A32])
            (const_int -1048576 [0xfffffffffff00000]))
        (nil)))
(insn 16 15 17 3 (parallel [
            (set (reg:SI 0 ax [orig:85 _3 ] [85])
                (lshiftrt:SI (reg:SI 0 ax [orig:84 _2 ] [84])
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":432:37 701 {*lshrsi3_1}
     (nil))
(insn 17 16 18 3 (set (reg:QI 0 ax [orig:86 _4 ] [86])
        (mem:QI (plus:SI (plus:SI (reg:SI 3 bx [82])
                    (reg:SI 0 ax [orig:85 _3 ] [85]))
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("mem_map") [flags 0x2]  <var_decl 0x7b517d52f5a0 mem_map>)
                        ] UNSPEC_GOTOFF))) [0 mem_map[_3]+0 S1 A8])) "mm/memory.c":432:36 77 {*movqi_internal}
     (nil))
(insn 18 17 19 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:86 _4 ] [86])
            (const_int 1 [0x1]))) "mm/memory.c":432:26 9 {*cmpqi_1}
     (nil))
(jump_insn 19 18 20 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 30)
            (pc))) "mm/memory.c":432:26 806 {*jcc}
     (nil)
 -> 30)
(note 20 19 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 22 4 (set (reg/f:SI 0 ax [97])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 32 [0x20])) [16 table_entry+0 S4 A32])) "mm/memory.c":433:16 75 {*movsi_internal}
     (nil))
(insn 22 21 23 4 (set (reg:SI 0 ax [orig:87 _5 ] [87])
        (mem:SI (reg/f:SI 0 ax [97]) [1 *table_entry_17(D)+0 S4 A32])) "mm/memory.c":433:16 75 {*movsi_internal}
     (nil))
(insn 23 22 73 4 (parallel [
            (set (reg:SI 0 ax [orig:87 _5 ] [87])
                (ior:SI (reg:SI 0 ax [orig:87 _5 ] [87])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":433:16 520 {*iorsi_1}
     (nil))
(insn 73 23 24 4 (set (reg:SI 1 dx [orig:88 _6 ] [88])
        (reg:SI 0 ax [orig:87 _5 ] [87])) "mm/memory.c":433:16 75 {*movsi_internal}
     (nil))
(insn 24 73 25 4 (set (reg/f:SI 0 ax [98])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 32 [0x20])) [16 table_entry+0 S4 A32])) "mm/memory.c":433:16 75 {*movsi_internal}
     (nil))
(insn 25 24 26 4 (set (mem:SI (reg/f:SI 0 ax [98]) [1 *table_entry_17(D)+0 S4 A32])
        (reg:SI 1 dx [orig:88 _6 ] [88])) "mm/memory.c":433:16 75 {*movsi_internal}
     (nil))
(insn 26 25 27 4 (set (reg:SI 0 ax [99])
        (const_int 0 [0])) "mm/memory.c":434:3 75 {*movsi_internal}
     (nil))
(insn 27 26 68 4 (parallel [
            (asm_operands/v ("movl %%eax, %%cr3") ("") 0 [
                    (reg:SI 0 ax [99])
                ]
                 [
                    (asm_input:SI ("a") mm/memory.c:434)
                ]
                 [] mm/memory.c:434)
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":434:3 -1
     (nil))
(jump_insn 68 27 69 4 (set (pc)
        (label_ref 66)) "mm/memory.c":435:3 807 {jump}
     (nil)
 -> 66)
(barrier 69 68 30)
(code_label 30 69 31 5 102 (nil) [2 uses])
(note 31 30 32 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(call_insn 32 31 34 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("get_free_page") [flags 0x3]  <function_decl 0x7b517d53b100 get_free_page>) [0 get_free_page S1 A8])
            (const_int 0 [0]))) "mm/memory.c":437:19 823 {*call_value}
     (nil)
    (nil))
(insn 34 32 35 5 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [1 new_page+0 S4 A32])
        (reg:SI 0 ax [100])) "mm/memory.c":437:19 75 {*movsi_internal}
     (nil))
(insn 35 34 36 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 8 [0x8])) [1 new_page+0 S4 A32])
            (const_int 0 [0]))) "mm/memory.c":437:5 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 36 35 37 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 39)
            (pc))) "mm/memory.c":437:5 806 {*jcc}
     (nil)
 -> 39)
(note 37 36 38 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(call_insn 38 37 39 6 (call (mem:QI (symbol_ref:SI ("oom") [flags 0x3]  <function_decl 0x7b517d537f00 oom>) [0 oom S1 A8])
        (const_int 0 [0])) "mm/memory.c":438:3 812 {*call}
     (nil)
    (nil))
(code_label 39 38 40 7 104 (nil) [1 uses])
(note 40 39 43 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 43 40 44 7 (set (reg:CC 17 flags)
        (compare:CC (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 12 [0xc])) [1 old_page+0 S4 A32])
            (const_int 1048575 [0xfffff]))) "mm/memory.c":439:5 11 {*cmpsi_1}
     (nil))
(jump_insn 44 43 45 7 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 52)
            (pc))) "mm/memory.c":439:5 806 {*jcc}
     (nil)
 -> 52)
(note 45 44 46 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 46 45 47 8 (set (reg:SI 0 ax [101])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [1 old_page+0 S4 A32])) "mm/memory.c":440:11 75 {*movsi_internal}
     (nil))
(insn 47 46 48 8 (parallel [
            (set (reg:SI 0 ax [orig:89 _7 ] [89])
                (plus:SI (reg:SI 0 ax [101])
                    (const_int -1048576 [0xfffffffffff00000])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":440:11 209 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:SI (reg/f:SI 19 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 old_page+0 S4 A32])
            (const_int -1048576 [0xfffffffffff00000]))
        (nil)))
(insn 48 47 49 8 (parallel [
            (set (reg:SI 0 ax [orig:90 _8 ] [90])
                (lshiftrt:SI (reg:SI 0 ax [orig:89 _7 ] [89])
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":440:11 701 {*lshrsi3_1}
     (nil))
(insn 49 48 50 8 (set (reg:QI 1 dx [orig:91 _9 ] [91])
        (mem:QI (plus:SI (plus:SI (reg:SI 3 bx [82])
                    (reg:SI 0 ax [orig:90 _8 ] [90]))
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("mem_map") [flags 0x2]  <var_decl 0x7b517d52f5a0 mem_map>)
                        ] UNSPEC_GOTOFF))) [0 mem_map[_8]+0 S1 A8])) "mm/memory.c":440:10 77 {*movqi_internal}
     (nil))
(insn 50 49 51 8 (parallel [
            (set (reg:QI 1 dx [orig:92 _11 ] [92])
                (plus:QI (reg:QI 1 dx [orig:91 _9 ] [91])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":440:28 213 {*addqi_1}
     (nil))
(insn 51 50 52 8 (set (mem:QI (plus:SI (plus:SI (reg:SI 3 bx [82])
                    (reg:SI 0 ax [orig:90 _8 ] [90]))
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("mem_map") [flags 0x2]  <var_decl 0x7b517d52f5a0 mem_map>)
                        ] UNSPEC_GOTOFF))) [0 mem_map[_8]+0 S1 A8])
        (reg:QI 1 dx [orig:92 _11 ] [92])) "mm/memory.c":440:28 77 {*movqi_internal}
     (nil))
(code_label 52 51 53 9 105 (nil) [1 uses])
(note 53 52 54 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 54 53 55 9 (set (reg:SI 0 ax [102])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [1 new_page+0 S4 A32])) "mm/memory.c":441:26 75 {*movsi_internal}
     (nil))
(insn 55 54 75 9 (parallel [
            (set (reg:SI 0 ax [102])
                (ior:SI (reg:SI 0 ax [102])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":441:26 520 {*iorsi_1}
     (expr_list:REG_EQUAL (ior:SI (mem/c:SI (plus:SI (reg/f:SI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [1 new_page+0 S4 A32])
            (const_int 7 [0x7]))
        (nil)))
(insn 75 55 56 9 (set (reg:SI 1 dx [orig:93 _12 ] [93])
        (reg:SI 0 ax [102])) "mm/memory.c":441:26 75 {*movsi_internal}
     (nil))
(insn 56 75 57 9 (set (reg/f:SI 0 ax [103])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 32 [0x20])) [16 table_entry+0 S4 A32])) "mm/memory.c":441:15 75 {*movsi_internal}
     (nil))
(insn 57 56 58 9 (set (mem:SI (reg/f:SI 0 ax [103]) [1 *table_entry_17(D)+0 S4 A32])
        (reg:SI 1 dx [orig:93 _12 ] [93])) "mm/memory.c":441:15 75 {*movsi_internal}
     (nil))
(insn 58 57 59 9 (set (reg:SI 0 ax [104])
        (const_int 0 [0])) "mm/memory.c":442:2 75 {*movsi_internal}
     (nil))
(insn 59 58 60 9 (parallel [
            (asm_operands/v ("movl %%eax, %%cr3") ("") 0 [
                    (reg:SI 0 ax [104])
                ]
                 [
                    (asm_input:SI ("a") mm/memory.c:442)
                ]
                 [] mm/memory.c:442)
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":442:2 -1
     (nil))
(insn 60 59 61 9 (set (reg:SI 0 ax [105])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [1 old_page+0 S4 A32])) "mm/memory.c":443:2 75 {*movsi_internal}
     (nil))
(insn 61 60 62 9 (set (reg:SI 1 dx [106])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [1 new_page+0 S4 A32])) "mm/memory.c":443:2 75 {*movsi_internal}
     (nil))
(insn 62 61 76 9 (set (reg:SI 2 cx [107])
        (const_int 1024 [0x400])) "mm/memory.c":443:2 75 {*movsi_internal}
     (nil))
(insn 76 62 77 9 (set (reg:SI 4 si [105])
        (reg:SI 0 ax [105])) "mm/memory.c":443:2 75 {*movsi_internal}
     (nil))
(insn 77 76 63 9 (set (reg:SI 5 di [106])
        (reg:SI 1 dx [106])) "mm/memory.c":443:2 75 {*movsi_internal}
     (nil))
(insn 63 77 66 9 (parallel [
            (asm_operands/v ("cld ; rep ; movsl") ("") 0 [
                    (reg:SI 4 si [105])
                    (reg:SI 5 di [106])
                    (reg:SI 2 cx [107])
                ]
                 [
                    (asm_input:SI ("S") mm/memory.c:443)
                    (asm_input:SI ("D") mm/memory.c:443)
                    (asm_input:SI ("c") mm/memory.c:443)
                ]
                 [] mm/memory.c:443)
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":443:2 -1
     (nil))
(code_label 66 63 67 10 101 (nil) [1 uses])
(note 67 66 71 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(note 71 67 0 NOTE_INSN_DELETED)

;; Function do_wp_page (do_wp_page, funcdef_no=14, decl_uid=1444, cgraph_uid=15, symbol_order=16)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            alt=2: Bad operand -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 7:  (0) =rm  (1) %0  (2) re {*andsi_1}
      Creating newreg=95 from oldreg=83, assigning class GENERAL_REGS to r95
    7: {r95:SI=r95:SI&0xffc;clobber flags:CC;}
      REG_DEAD r83:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
   26: r95:SI=r83:SI
    Inserting insn reload after:
   27: r84:SI=r95:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 10:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 13:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 14
	 Choosing alt 0 in insn 14:  (0) =rm  (1) %0  (2) re {*iorsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 16:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 19:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2 3

********** Pseudo live ranges #1: **********

  BB 3
   Insn 23: point = 0, n_alt = -1
  BB 2
   Insn 19: point = 0, n_alt = 0
   Insn 18: point = 0, n_alt = 0
   Insn 17: point = 0, n_alt = 0
   Insn 16: point = 1, n_alt = 0
   Insn 15: point = 1, n_alt = -2
   Insn 14: point = 3, n_alt = 0
   Insn 13: point = 5, n_alt = 0
   Insn 12: point = 7, n_alt = 0
   Insn 11: point = 9, n_alt = -2
   Insn 10: point = 11, n_alt = 0
   Insn 9: point = 13, n_alt = 0
   Insn 8: point = 15, n_alt = 0
   Insn 27: point = 16, n_alt = -2
	Hard reg 1 is preferable by r95 with profit 1000
   Insn 7: point = 18, n_alt = 0
   Insn 26: point = 19, n_alt = -2
	Hard reg 1 is preferable by r95 with profit 1000
	Hard reg 0 is preferable by r95 with profit 1000
   Insn 6: point = 21, n_alt = 0
   Insn 5: point = 23, n_alt = 0
   Insn 24: point = 24, n_alt = 0
 r82: [24..24]
 r83: [20..21]
 r84: [4..16]
 r85: [12..13]
 r86: [10..11]
 r87: [8..9]
 r88: [6..7]
 r89: [4..5]
 r90: [2..3]
 r91: [0..1]
 r92: [22..23]
 r93: [14..15]
 r95: [17..19]
Compressing live ranges: from 25 to 23 - 92%
Ranges after the compression:
 r82: [22..22]
 r83: [18..19]
 r84: [4..15]
 r85: [12..13]
 r86: [10..11]
 r87: [8..9]
 r88: [6..7]
 r89: [4..5]
 r90: [2..3]
 r91: [0..1]
 r92: [20..21]
 r93: [14..15]
 r95: [16..17]

********** Assignment #1: **********

	 Assigning to 95 (cl=GENERAL_REGS, orig=83, freq=3000, tfirst=95, tfreq=3000)...
	   Assign 0 to reload r95 (freq=3000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=16)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
changing reg in insn 24
changing reg in insn 6
changing reg in insn 9
changing reg in insn 10
changing reg in insn 10
changing reg in insn 11
changing reg in insn 11
changing reg in insn 12
changing reg in insn 12
changing reg in insn 13
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 15
changing reg in insn 17
changing reg in insn 5
changing reg in insn 6
changing reg in insn 8
changing reg in insn 9
deleting insn with uid = 26.
deleting insn with uid = 11.
deleting insn with uid = 15.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 18.


do_wp_page

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 7 [sp] 17 [flags]
;;  ref usage 	r0={12d,9u} r1={3d,1u} r2={2d} r7={4d,11u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={2e} r17={10d} r18={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} 
;;    total ref usage 119{96d,21u,2e} in 16{15 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 24 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 24 3 2 2 (parallel [
            (set (reg:SI 0 ax [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 24 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:SI 0 ax [92])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [1 address+0 S4 A32])) "mm/memory.c":462:14 75 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (parallel [
            (set (reg:SI 0 ax [orig:83 _1 ] [83])
                (lshiftrt:SI (reg:SI 0 ax [92])
                    (const_int 10 [0xa])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":462:14 701 {*lshrsi3_1}
     (expr_list:REG_EQUAL (lshiftrt:SI (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                    (const_int 4 [0x4])) [1 address+0 S4 A32])
            (const_int 10 [0xa]))
        (nil)))
(insn 7 6 27 2 (parallel [
            (set (reg:SI 0 ax [orig:83 _1 ] [83])
                (and:SI (reg:SI 0 ax [orig:83 _1 ] [83])
                    (const_int 4092 [0xffc])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":462:21 490 {*andsi_1}
     (nil))
(insn 27 7 8 2 (set (reg:SI 1 dx [orig:84 _2 ] [84])
        (reg:SI 0 ax [orig:83 _1 ] [83])) "mm/memory.c":462:21 75 {*movsi_internal}
     (nil))
(insn 8 27 9 2 (set (reg:SI 0 ax [93])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [1 address+0 S4 A32])) "mm/memory.c":463:33 75 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (parallel [
            (set (reg:SI 0 ax [orig:85 _3 ] [85])
                (lshiftrt:SI (reg:SI 0 ax [93])
                    (const_int 20 [0x14])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":463:33 701 {*lshrsi3_1}
     (expr_list:REG_EQUAL (lshiftrt:SI (mem/c:SI (plus:SI (reg/f:SI 16 argp)
                    (const_int 4 [0x4])) [1 address+0 S4 A32])
            (const_int 20 [0x14]))
        (nil)))
(insn 10 9 12 2 (parallel [
            (set (reg:SI 0 ax [orig:86 _4 ] [86])
                (and:SI (reg:SI 0 ax [orig:85 _3 ] [85])
                    (const_int 4092 [0xffc])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":463:40 490 {*andsi_1}
     (nil))
(insn 12 10 13 2 (set (reg:SI 0 ax [orig:88 _6 ] [88])
        (mem:SI (reg/f:SI 0 ax [orig:87 _5 ] [87]) [1 *_5+0 S4 A32])) "mm/memory.c":463:3 75 {*movsi_internal}
     (nil))
(insn 13 12 14 2 (parallel [
            (set (reg:SI 0 ax [orig:89 _7 ] [89])
                (and:SI (reg:SI 0 ax [orig:88 _6 ] [88])
                    (const_int -4096 [0xfffffffffffff000])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":462:44 490 {*andsi_1}
     (nil))
(insn 14 13 16 2 (parallel [
            (set (reg:SI 0 ax [orig:90 _8 ] [90])
                (ior:SI (reg:SI 0 ax [orig:89 _7 ] [89])
                    (reg:SI 1 dx [orig:84 _2 ] [84])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":462:30 520 {*iorsi_1}
     (nil))
(insn 16 14 17 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":461:2 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 17 16 18 2 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [16  S4 A32])
        (reg/f:SI 0 ax [orig:91 _9 ] [91])) "mm/memory.c":461:2 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 18 17 19 2 (call (mem:QI (symbol_ref:SI ("un_wp_page") [flags 0x3]  <function_decl 0x7b517d54c400 un_wp_page>) [0 un_wp_page S1 A8])
        (const_int 16 [0x10])) "mm/memory.c":461:2 812 {*call}
     (nil)
    (nil))
(insn 19 18 22 2 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":461:2 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(note 22 19 23 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 25 3 (const_int 0 [0]) "mm/memory.c":464:1 843 {nop}
     (nil))
(note 25 23 0 NOTE_INSN_DELETED)

;; Function calc_mem (calc_mem, funcdef_no=15, decl_uid=1447, cgraph_uid=16, symbol_order=17)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=32, prev_offset=0)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) =r {*set_got}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 5:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) Ts {*leasi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 12
	 Choosing alt 0 in insn 12:  (0) =rm  (1) %0  (2) re {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 13:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 17:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 20:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 29:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-4)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =r  (1) Ts {*leasi} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 36:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 37:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 44:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 51:  (0) =rm  (1) %0  (2) re {*andsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 52:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 53:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 55:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 60:  (0) r  (1) l  (2) M {*ashlsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 62
	 Choosing alt 0 in insn 62:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 64:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 68:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 71:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 80:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-4)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) =r  (1) Ts {*leasi} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 87:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 90:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) rm  (1) re {*cmpsi_1}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2
EBB 3 4
EBB 5
EBB 6 7
EBB 8 9
EBB 10 11
EBB 12
EBB 13 14
EBB 15
EBB 16 18 17 19

********** Pseudo live ranges #1: **********

  BB 19
   Insn 110: point = 0, n_alt = -1
  BB 17
  BB 18
   Insn 108: point = 0, n_alt = -1
  BB 16
   Insn 97: point = 0, n_alt = -1
   Insn 96: point = 0, n_alt = 0
  BB 7
   Insn 103: point = 1, n_alt = -1
   Insn 37: point = 1, n_alt = 1
   Insn 36: point = 1, n_alt = 0
   Insn 35: point = 1, n_alt = 0
   Insn 34: point = 1, n_alt = -2
   Insn 33: point = 1, n_alt = 0
   Insn 32: point = 2, n_alt = 0
   Insn 31: point = 3, n_alt = 0
   Insn 30: point = 3, n_alt = 0
   Insn 29: point = 3, n_alt = 0
  BB 6
   Insn 27: point = 4, n_alt = -1
   Insn 26: point = 4, n_alt = 0
  BB 2
   Insn 101: point = 5, n_alt = -1
   Insn 6: point = 5, n_alt = 1
   Insn 5: point = 5, n_alt = 1
   Insn 111: point = 5, n_alt = 0
  BB 5
   Insn 20: point = 6, n_alt = 0
  BB 4
   Insn 17: point = 7, n_alt = 0
  BB 3
   Insn 15: point = 8, n_alt = -1
   Insn 14: point = 8, n_alt = 0
   Insn 13: point = 9, n_alt = 4
   Insn 12: point = 11, n_alt = 0
   Insn 11: point = 13, n_alt = 0
   Insn 10: point = 14, n_alt = 0
  BB 15
   Insn 90: point = 16, n_alt = 0
  BB 14
   Insn 87: point = 17, n_alt = 0
   Insn 86: point = 17, n_alt = 0
   Insn 85: point = 17, n_alt = -2
   Insn 84: point = 17, n_alt = 0
   Insn 83: point = 18, n_alt = 0
   Insn 82: point = 19, n_alt = 0
   Insn 81: point = 19, n_alt = 0
   Insn 80: point = 19, n_alt = 0
  BB 13
   Insn 78: point = 20, n_alt = -1
   Insn 77: point = 20, n_alt = 0
  BB 9
   Insn 105: point = 21, n_alt = -1
   Insn 55: point = 21, n_alt = 1
   Insn 54: point = 22, n_alt = 0
   Insn 53: point = 23, n_alt = 1
   Insn 52: point = 23, n_alt = 1
   Insn 51: point = 24, n_alt = 0
   Insn 50: point = 26, n_alt = 0
   Insn 49: point = 28, n_alt = 0
   Insn 48: point = 29, n_alt = 0
  BB 12
   Insn 71: point = 31, n_alt = 0
  BB 11
   Insn 68: point = 32, n_alt = 0
  BB 10
   Insn 66: point = 33, n_alt = -1
   Insn 65: point = 33, n_alt = 0
   Insn 64: point = 34, n_alt = 0
   Insn 63: point = 36, n_alt = 0
   Insn 62: point = 38, n_alt = 0
   Insn 61: point = 40, n_alt = 0
   Insn 60: point = 41, n_alt = 1
   Insn 59: point = 43, n_alt = 0
  BB 8
   Insn 46: point = 45, n_alt = -1
   Insn 45: point = 45, n_alt = 0
   Insn 44: point = 46, n_alt = 0
   Insn 43: point = 48, n_alt = 0
   Insn 42: point = 50, n_alt = 0
   Insn 41: point = 51, n_alt = 0
 r82: [0..52]
 r83: [8..9]
 r84: [47..48]
 r85: [45..46]
 r86: [25..26]
 r87: [23..24]
 r88: [42..43]
 r89: [39..41]
 r90: [37..38]
 r91: [35..36]
 r92: [33..34]
 r93: [12..14]
 r94: [12..13]
 r95: [10..11]
 r96: [1..2]
 r97: [49..51]
 r98: [49..50]
 r99: [27..29]
 r100: [27..28]
 r101: [21..22]
 r102: [39..40]
 r103: [17..18]
Compressing live ranges: from 53 to 34 - 64%
Ranges after the compression:
 r82: [0..33]
 r83: [2..3]
 r84: [30..31]
 r85: [28..29]
 r86: [14..15]
 r87: [12..13]
 r88: [26..27]
 r89: [24..25]
 r90: [22..23]
 r91: [20..21]
 r92: [18..19]
 r93: [6..7]
 r94: [6..7]
 r95: [4..5]
 r96: [0..1]
 r97: [32..33]
 r98: [32..33]
 r99: [16..17]
 r100: [16..17]
 r101: [10..11]
 r102: [24..25]
 r103: [8..9]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=48, prev_offset=48)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=32, prev_offset=32)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
changing reg in insn 111
changing reg in insn 85
changing reg in insn 83
changing reg in insn 48
changing reg in insn 41
changing reg in insn 34
changing reg in insn 32
changing reg in insn 10
changing reg in insn 13
changing reg in insn 14
changing reg in insn 43
changing reg in insn 44
changing reg in insn 44
changing reg in insn 45
changing reg in insn 50
changing reg in insn 51
changing reg in insn 51
changing reg in insn 52
changing reg in insn 59
changing reg in insn 60
changing reg in insn 60
changing reg in insn 62
changing reg in insn 62
changing reg in insn 63
changing reg in insn 63
changing reg in insn 64
changing reg in insn 64
changing reg in insn 65
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 32
changing reg in insn 33
changing reg in insn 41
changing reg in insn 43
changing reg in insn 42
changing reg in insn 43
changing reg in insn 48
changing reg in insn 50
changing reg in insn 49
changing reg in insn 50
changing reg in insn 54
changing reg in insn 55
changing reg in insn 61
changing reg in insn 83
changing reg in insn 84
deleting insn with uid = 34.
deleting insn with uid = 85.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 35.
verify found no changes in insn with uid = 86.


calc_mem

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 3 [bx] 7 [sp] 17 [flags]
;;  ref usage 	r0={20d,17u} r1={7d,4u,1e} r2={3d} r3={1d,7u} r7={11d,63u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={24d,6u} r18={2d} r19={1e} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} 
;;    total ref usage 295{196d,97u,2e} in 62{60 regular + 2 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 111 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 111 3 2 2 (parallel [
            (set (reg:SI 3 bx [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 111 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [2 free+0 S4 A32])
        (const_int 0 [0])) "mm/memory.c":468:15 75 {*movsi_internal}
     (nil))
(insn 6 5 101 2 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [2 i+0 S4 A32])
        (const_int 0 [0])) "mm/memory.c":471:9 75 {*movsi_internal}
     (nil))
(jump_insn 101 6 102 2 (set (pc)
        (label_ref 21)) "mm/memory.c":471:2 807 {jump}
     (nil)
 -> 21)
(barrier 102 101 23)
(code_label 23 102 9 3 110 (nil) [1 uses])
(note 9 23 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 3 (set (reg:SI 1 dx [93])
        (plus:SI (reg:SI 3 bx [82])
            (const:SI (unspec:SI [
                        (symbol_ref:SI ("mem_map") [flags 0x2]  <var_decl 0x7b517d52f5a0 mem_map>)
                    ] UNSPEC_GOTOFF)))) "mm/memory.c":472:15 205 {*leasi}
     (nil))
(insn 11 10 12 3 (set (reg:SI 0 ax [94])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [2 i+0 S4 A32])) "mm/memory.c":472:15 75 {*movsi_internal}
     (nil))
(insn 12 11 13 3 (parallel [
            (set (reg/f:SI 0 ax [95])
                (plus:SI (reg:SI 0 ax [94])
                    (reg:SI 1 dx [93])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":472:15 209 {*addsi_1}
     (nil))
(insn 13 12 14 3 (set (reg:QI 0 ax [orig:83 _1 ] [83])
        (mem:QI (reg/f:SI 0 ax [95]) [0 mem_map[i_11]+0 S1 A8])) "mm/memory.c":472:15 77 {*movqi_internal}
     (nil))
(insn 14 13 15 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:83 _1 ] [83])
            (const_int 0 [0]))) "mm/memory.c":472:6 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 15 14 16 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 18)
            (pc))) "mm/memory.c":472:6 806 {*jcc}
     (nil)
 -> 18)
(note 16 15 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 4 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 16 [0x10])) [2 free+0 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 16 [0x10])) [2 free+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":473:8 209 {*addsi_1}
     (nil))
(code_label 18 17 19 5 109 (nil) [1 uses])
(note 19 18 20 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 21 5 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 28 [0x1c])) [2 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 28 [0x1c])) [2 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":471:34 209 {*addsi_1}
     (nil))
(code_label 21 20 22 6 108 (nil) [1 uses])
(note 22 21 26 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 26 22 27 6 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 28 [0x1c])) [2 i+0 S4 A32])
            (const_int 3839 [0xeff]))) "mm/memory.c":471:16 11 {*cmpsi_1}
     (nil))
(jump_insn 27 26 28 6 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 23)
            (pc))) "mm/memory.c":471:16 806 {*jcc}
     (nil)
 -> 23)
(note 28 27 29 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 30 7 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":474:2 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 4 [0x4])
        (nil)))
(insn 30 29 31 7 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (const_int 3840 [0xf00])) "mm/memory.c":474:2 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 31 30 32 7 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [2 free+0 S4 A32])) "mm/memory.c":474:2 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 32 31 33 7 (set (reg/f:SI 0 ax [96])
        (plus:SI (reg:SI 3 bx [82])
            (const:SI (unspec:SI [
                        (symbol_ref/f:SI ("*.LC10") [flags 0x2]  <var_decl 0x7b517d59dab0 *.LC10>)
                    ] UNSPEC_GOTOFF)))) "mm/memory.c":474:2 205 {*leasi}
     (expr_list:REG_EQUAL (symbol_ref/f:SI ("*.LC10") [flags 0x2]  <var_decl 0x7b517d59dab0 *.LC10>)
        (nil)))
(insn 33 32 35 7 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [15  S4 A32])
        (reg/f:SI 0 ax [96])) "mm/memory.c":474:2 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 35 33 36 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("printk") [flags 0x41]  <function_decl 0x7b517d4d2700 printk>) [0 printk S1 A8])
            (const_int 16 [0x10]))) "mm/memory.c":474:2 823 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 36 35 37 7 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":474:2 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 37 36 103 7 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [2 i+0 S4 A32])
        (const_int 2 [0x2])) "mm/memory.c":475:9 75 {*movsi_internal}
     (nil))
(jump_insn 103 37 104 7 (set (pc)
        (label_ref 91)) "mm/memory.c":475:2 807 {jump}
     (nil)
 -> 91)
(barrier 104 103 93)
(code_label 93 104 40 8 116 (nil) [1 uses])
(note 40 93 41 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 41 40 42 8 (set (reg/f:SI 0 ax [97])
        (mem/u/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("pg_dir") [flags 0x40]  <var_decl 0x7b517e995b40 pg_dir>)
                        ] UNSPEC_GOT))) [17  S4 A8])) "mm/memory.c":476:17 75 {*movsi_internal}
     (nil))
(insn 42 41 43 8 (set (reg:SI 1 dx [98])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [2 i+0 S4 A32])) "mm/memory.c":476:17 75 {*movsi_internal}
     (nil))
(insn 43 42 44 8 (set (reg:SI 0 ax [orig:84 _2 ] [84])
        (mem:SI (plus:SI (mult:SI (reg:SI 1 dx [98])
                    (const_int 4 [0x4]))
                (reg/f:SI 0 ax [97])) [1 pg_dir[i_12]+0 S4 A32])) "mm/memory.c":476:17 75 {*movsi_internal}
     (nil))
(insn 44 43 45 8 (parallel [
            (set (reg:SI 0 ax [orig:85 _3 ] [85])
                (and:SI (reg:SI 0 ax [orig:84 _2 ] [84])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":476:9 490 {*andsi_1}
     (nil))
(insn 45 44 46 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:85 _3 ] [85])
            (const_int 0 [0]))) "mm/memory.c":476:6 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 46 45 47 8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 88)
            (pc))) "mm/memory.c":476:6 806 {*jcc}
     (nil)
 -> 88)
(note 47 46 48 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 48 47 49 9 (set (reg/f:SI 0 ax [99])
        (mem/u/c:SI (plus:SI (reg:SI 3 bx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("pg_dir") [flags 0x40]  <var_decl 0x7b517e995b40 pg_dir>)
                        ] UNSPEC_GOT))) [17  S4 A8])) "mm/memory.c":477:41 75 {*movsi_internal}
     (nil))
(insn 49 48 50 9 (set (reg:SI 1 dx [100])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [2 i+0 S4 A32])) "mm/memory.c":477:41 75 {*movsi_internal}
     (nil))
(insn 50 49 51 9 (set (reg:SI 0 ax [orig:86 _4 ] [86])
        (mem:SI (plus:SI (mult:SI (reg:SI 1 dx [100])
                    (const_int 4 [0x4]))
                (reg/f:SI 0 ax [99])) [1 pg_dir[i_12]+0 S4 A32])) "mm/memory.c":477:41 75 {*movsi_internal}
     (nil))
(insn 51 50 52 9 (parallel [
            (set (reg:SI 0 ax [orig:87 _5 ] [87])
                (and:SI (reg:SI 0 ax [orig:86 _4 ] [86])
                    (const_int -4096 [0xfffffffffffff000])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":477:33 490 {*andsi_1}
     (nil))
(insn 52 51 53 9 (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [20 pg_tbl+0 S4 A32])
        (reg:SI 0 ax [orig:87 _5 ] [87])) "mm/memory.c":477:11 75 {*movsi_internal}
     (nil))
(insn 53 52 54 9 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [2 k+0 S4 A32])
        (const_int 0 [0])) "mm/memory.c":478:15 75 {*movsi_internal}
     (nil))
(insn 54 53 55 9 (set (reg:SI 0 ax [101])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [2 k+0 S4 A32])) "mm/memory.c":478:11 75 {*movsi_internal}
     (nil))
(insn 55 54 105 9 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [2 j+0 S4 A32])
        (reg:SI 0 ax [101])) "mm/memory.c":478:11 75 {*movsi_internal}
     (nil))
(jump_insn 105 55 106 9 (set (pc)
        (label_ref 72)) "mm/memory.c":478:4 807 {jump}
     (nil)
 -> 72)
(barrier 106 105 74)
(code_label 74 106 58 10 115 (nil) [1 uses])
(note 58 74 59 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 59 58 60 10 (set (reg:SI 0 ax [orig:88 j.37_6 ] [88])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [2 j+0 S4 A32])) "mm/memory.c":479:15 75 {*movsi_internal}
     (nil))
(insn 60 59 61 10 (parallel [
            (set (reg:SI 1 dx [orig:89 _7 ] [89])
                (ashift:SI (reg:SI 0 ax [orig:88 j.37_6 ] [88])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":479:15 655 {*ashlsi3_1}
     (nil))
(insn 61 60 62 10 (set (reg/f:SI 0 ax [102])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [20 pg_tbl+0 S4 A32])) "mm/memory.c":479:15 75 {*movsi_internal}
     (nil))
(insn 62 61 63 10 (parallel [
            (set (reg/f:SI 0 ax [orig:90 _8 ] [90])
                (plus:SI (reg/f:SI 0 ax [102])
                    (reg:SI 1 dx [orig:89 _7 ] [89])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":479:15 209 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 19 frame)
                    (const_int -20 [0xffffffffffffffec])) [20 pg_tbl+0 S4 A32])
            (reg:SI 1 dx [orig:89 _7 ] [89]))
        (nil)))
(insn 63 62 64 10 (set (reg:SI 0 ax [orig:91 _9 ] [91])
        (mem:SI (reg/f:SI 0 ax [orig:90 _8 ] [90]) [1 *_8+0 S4 A32])) "mm/memory.c":479:15 75 {*movsi_internal}
     (nil))
(insn 64 63 65 10 (parallel [
            (set (reg:SI 0 ax [orig:92 _10 ] [92])
                (and:SI (reg:SI 0 ax [orig:91 _9 ] [91])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":479:19 490 {*andsi_1}
     (nil))
(insn 65 64 66 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:92 _10 ] [92])
            (const_int 0 [0]))) "mm/memory.c":479:8 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 66 65 67 10 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 69)
            (pc))) "mm/memory.c":479:8 806 {*jcc}
     (nil)
 -> 69)
(note 67 66 68 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 68 67 69 11 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 20 [0x14])) [2 k+0 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 20 [0x14])) [2 k+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":480:7 209 {*addsi_1}
     (nil))
(code_label 69 68 70 12 114 (nil) [1 uses])
(note 70 69 71 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 71 70 72 12 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 24 [0x18])) [2 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 24 [0x18])) [2 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":478:31 209 {*addsi_1}
     (nil))
(code_label 72 71 73 13 113 (nil) [1 uses])
(note 73 72 77 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 77 73 78 13 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 24 [0x18])) [2 j+0 S4 A32])
            (const_int 1023 [0x3ff]))) "mm/memory.c":478:22 11 {*cmpsi_1}
     (nil))
(jump_insn 78 77 79 13 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 74)
            (pc))) "mm/memory.c":478:22 806 {*jcc}
     (nil)
 -> 74)
(note 79 78 80 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 80 79 81 14 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":481:5 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 4 [0x4])
        (nil)))
(insn 81 80 82 14 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [2 k+0 S4 A32])) "mm/memory.c":481:5 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 82 81 83 14 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [2  S4 A32])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 36 [0x24])) [2 i+0 S4 A32])) "mm/memory.c":481:5 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 83 82 84 14 (set (reg/f:SI 0 ax [103])
        (plus:SI (reg:SI 3 bx [82])
            (const:SI (unspec:SI [
                        (symbol_ref/f:SI ("*.LC11") [flags 0x2]  <var_decl 0x7b517d20f000 *.LC11>)
                    ] UNSPEC_GOTOFF)))) "mm/memory.c":481:5 205 {*leasi}
     (expr_list:REG_EQUAL (symbol_ref/f:SI ("*.LC11") [flags 0x2]  <var_decl 0x7b517d20f000 *.LC11>)
        (nil)))
(insn 84 83 86 14 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [15  S4 A32])
        (reg/f:SI 0 ax [103])) "mm/memory.c":481:5 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 86 84 87 14 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("printk") [flags 0x41]  <function_decl 0x7b517d4d2700 printk>) [0 printk S1 A8])
            (const_int 16 [0x10]))) "mm/memory.c":481:5 823 {*call_value}
     (nil)
    (expr_list (use (reg:SI 3 bx))
        (nil)))
(insn 87 86 88 14 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":481:5 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(code_label 88 87 89 15 112 (nil) [1 uses])
(note 89 88 90 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 90 89 91 15 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 28 [0x1c])) [2 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 28 [0x1c])) [2 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":475:25 209 {*addsi_1}
     (nil))
(code_label 91 90 92 16 111 (nil) [1 uses])
(note 92 91 96 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 96 92 97 16 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 28 [0x1c])) [2 i+0 S4 A32])
            (const_int 1023 [0x3ff]))) "mm/memory.c":475:16 11 {*cmpsi_1}
     (nil))
(jump_insn 97 96 107 16 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 93)
            (pc))) "mm/memory.c":475:16 806 {*jcc}
     (nil)
 -> 93)
(note 107 97 108 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 108 107 98 18 (const_int 0 [0]) "mm/memory.c":484:1 843 {nop}
     (nil))
(note 98 108 109 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(note 109 98 110 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 110 109 112 19 (const_int 0 [0]) "mm/memory.c":484:1 843 {nop}
     (nil))
(note 112 110 0 NOTE_INSN_DELETED)

;; Function write_verify (write_verify, funcdef_no=16, decl_uid=1467, cgraph_uid=17, symbol_order=18)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 7:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 12:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 20:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 23:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=12,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 24:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 27:  (0) =rm  (1) %0  (2) re {*andsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 32:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 35:  (0) =rm  (1) %0  (2) re {*addsi_1} (sp_off=-16)
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2 3 4
EBB 6
EBB 7
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
  BB 6
   Insn 47: point = 0, n_alt = -1
   Insn 46: point = 0, n_alt = -1
  BB 7
   Insn 51: point = 0, n_alt = -1
  BB 4
   Insn 42: point = 0, n_alt = -1
   Insn 35: point = 0, n_alt = 0
   Insn 34: point = 0, n_alt = 0
   Insn 33: point = 0, n_alt = 0
   Insn 32: point = 1, n_alt = 0
   Insn 31: point = 1, n_alt = 0
  BB 3
   Insn 29: point = 2, n_alt = -1
   Insn 28: point = 2, n_alt = 0
   Insn 27: point = 3, n_alt = 0
   Insn 26: point = 5, n_alt = 0
   Insn 25: point = 7, n_alt = 0
   Insn 24: point = 8, n_alt = 0
   Insn 23: point = 9, n_alt = 0
   Insn 22: point = 11, n_alt = 0
   Insn 21: point = 13, n_alt = 0
   Insn 20: point = 14, n_alt = 0
  BB 2
   Insn 14: point = 14, n_alt = -1
   Insn 13: point = 14, n_alt = 0
   Insn 12: point = 15, n_alt = 0
   Insn 11: point = 17, n_alt = 0
   Insn 10: point = 18, n_alt = 1
   Insn 9: point = 19, n_alt = 0
   Insn 8: point = 21, n_alt = -2
   Insn 7: point = 23, n_alt = 0
   Insn 6: point = 25, n_alt = 0
   Insn 5: point = 27, n_alt = 0
   Insn 52: point = 28, n_alt = 0
 r82: [28..28]
 r83: [24..25]
 r84: [22..23]
 r85: [20..21]
 r86: [14..15]
 r87: [10..11]
 r88: [8..9]
 r89: [6..7]
 r90: [4..5]
 r91: [2..3]
 r92: [0..1]
 r93: [26..27]
 r94: [18..19]
 r95: [16..17]
 r96: [12..13]
Compressing live ranges: from 29 to 29 - 100%
Ranges after the compression:
 r82: [28..28]
 r83: [24..25]
 r84: [22..23]
 r85: [20..21]
 r86: [14..15]
 r87: [10..11]
 r88: [8..9]
 r89: [6..7]
 r90: [4..5]
 r91: [2..3]
 r92: [0..1]
 r93: [26..27]
 r94: [18..19]
 r95: [16..17]
 r96: [12..13]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=32)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=16)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
changing reg in insn 52
changing reg in insn 6
changing reg in insn 7
changing reg in insn 7
changing reg in insn 8
changing reg in insn 8
changing reg in insn 9
changing reg in insn 12
changing reg in insn 13
changing reg in insn 22
changing reg in insn 23
changing reg in insn 23
changing reg in insn 24
changing reg in insn 25
changing reg in insn 26
changing reg in insn 26
changing reg in insn 27
changing reg in insn 27
changing reg in insn 28
changing reg in insn 31
changing reg in insn 33
changing reg in insn 5
changing reg in insn 6
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 21
changing reg in insn 22
deleting insn with uid = 8.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 34.


write_verify

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0 [ax] 7 [sp] 17 [flags]
;;  ref usage 	r0={16d,13u} r1={2d} r2={2d} r7={4d,23u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={2e} r17={14d,2u} r18={1d} r19={1e} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} 
;;    total ref usage 144{103d,38u,3e} in 29{28 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 52 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 52 3 2 2 (parallel [
            (set (reg:SI 0 ax [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 52 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:SI 0 ax [93])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 32 [0x20])) [1 address+0 S4 A32])) "mm/memory.c":490:48 75 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (parallel [
            (set (reg:SI 0 ax [orig:83 _1 ] [83])
                (lshiftrt:SI (reg:SI 0 ax [93])
                    (const_int 20 [0x14])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":490:48 701 {*lshrsi3_1}
     (expr_list:REG_EQUAL (lshiftrt:SI (mem/c:SI (reg/f:SI 16 argp) [1 address+0 S4 A32])
            (const_int 20 [0x14]))
        (nil)))
(insn 7 6 9 2 (parallel [
            (set (reg:SI 0 ax [orig:84 _2 ] [84])
                (and:SI (reg:SI 0 ax [orig:83 _1 ] [83])
                    (const_int 4092 [0xffc])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":490:55 490 {*andsi_1}
     (nil))
(insn 9 7 10 2 (set (reg:SI 0 ax [94])
        (mem:SI (reg/f:SI 0 ax [orig:85 _3 ] [85]) [1 *_3+0 S4 A32])) "mm/memory.c":490:17 75 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [1 page+0 S4 A32])
        (reg:SI 0 ax [94])) "mm/memory.c":490:17 75 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:SI 0 ax [95])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [1 page+0 S4 A32])) "mm/memory.c":490:66 75 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (parallel [
            (set (reg:SI 0 ax [orig:86 _4 ] [86])
                (and:SI (reg:SI 0 ax [95])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":490:66 490 {*andsi_1}
     (expr_list:REG_EQUAL (and:SI (mem/c:SI (plus:SI (reg/f:SI 19 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 page+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 13 12 14 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:86 _4 ] [86])
            (const_int 0 [0]))) "mm/memory.c":490:8 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 14 13 19 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 45)
            (pc))) "mm/memory.c":490:8 806 {*jcc}
     (nil)
 -> 45)
(note 19 14 20 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 21 3 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 12 [0xc])) [1 page+0 S4 A32])
                (and:SI (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 12 [0xc])) [1 page+0 S4 A32])
                    (const_int -4096 [0xfffffffffffff000])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":492:10 490 {*andsi_1}
     (nil))
(insn 21 20 22 3 (set (reg:SI 0 ax [96])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 32 [0x20])) [1 address+0 S4 A32])) "mm/memory.c":493:23 75 {*movsi_internal}
     (nil))
(insn 22 21 23 3 (parallel [
            (set (reg:SI 0 ax [orig:87 _5 ] [87])
                (lshiftrt:SI (reg:SI 0 ax [96])
                    (const_int 10 [0xa])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":493:23 701 {*lshrsi3_1}
     (expr_list:REG_EQUAL (lshiftrt:SI (mem/c:SI (reg/f:SI 16 argp) [1 address+0 S4 A32])
            (const_int 10 [0xa]))
        (nil)))
(insn 23 22 24 3 (parallel [
            (set (reg:SI 0 ax [orig:88 _6 ] [88])
                (and:SI (reg:SI 0 ax [orig:87 _5 ] [87])
                    (const_int 4092 [0xffc])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":493:30 490 {*andsi_1}
     (nil))
(insn 24 23 25 3 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 12 [0xc])) [1 page+0 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 12 [0xc])) [1 page+0 S4 A32])
                    (reg:SI 0 ax [orig:88 _6 ] [88])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":493:10 209 {*addsi_1}
     (nil))
(insn 25 24 26 3 (set (reg/f:SI 0 ax [orig:89 page.38_7 ] [89])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [1 page+0 S4 A32])) "mm/memory.c":494:15 75 {*movsi_internal}
     (nil))
(insn 26 25 27 3 (set (reg:SI 0 ax [orig:90 _8 ] [90])
        (mem:SI (reg/f:SI 0 ax [orig:89 page.38_7 ] [89]) [1 *page.38_7+0 S4 A32])) "mm/memory.c":494:14 75 {*movsi_internal}
     (nil))
(insn 27 26 28 3 (parallel [
            (set (reg:SI 0 ax [orig:91 _9 ] [91])
                (and:SI (reg:SI 0 ax [orig:90 _8 ] [90])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":494:12 490 {*andsi_1}
     (nil))
(insn 28 27 29 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:91 _9 ] [91])
            (const_int 1 [0x1]))) "mm/memory.c":494:8 11 {*cmpsi_1}
     (nil))
(jump_insn 29 28 30 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 50)
            (pc))) "mm/memory.c":494:8 806 {*jcc}
     (nil)
 -> 50)
(note 30 29 31 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 31 30 32 4 (set (reg/f:SI 0 ax [orig:92 page.39_10 ] [92])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [1 page+0 S4 A32])) "mm/memory.c":495:9 75 {*movsi_internal}
     (nil))
(insn 32 31 33 4 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":495:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 33 32 34 4 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [16  S4 A32])
        (reg/f:SI 0 ax [orig:92 page.39_10 ] [92])) "mm/memory.c":495:9 54 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 34 33 35 4 (call (mem:QI (symbol_ref:SI ("un_wp_page") [flags 0x3]  <function_decl 0x7b517d54c400 un_wp_page>) [0 un_wp_page S1 A8])
        (const_int 16 [0x10])) "mm/memory.c":495:9 812 {*call}
     (nil)
    (nil))
(insn 35 34 42 4 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "mm/memory.c":495:9 209 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(jump_insn 42 35 43 4 (set (pc)
        (label_ref:SI 50)) "mm/memory.c":496:5 807 {jump}
     (nil)
 -> 50)
(barrier 43 42 45)
(code_label 45 43 44 6 121 (nil) [1 uses])
(note 44 45 46 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 46 44 47 6 (const_int 0 [0]) "mm/memory.c":491:9 843 {nop}
     (nil))
(jump_insn 47 46 48 6 (set (pc)
        (label_ref 40)) 807 {jump}
     (nil)
 -> 40)
(barrier 48 47 50)
(code_label 50 48 49 7 122 (nil) [2 uses])
(note 49 50 51 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 51 49 40 7 (const_int 0 [0]) "mm/memory.c":496:5 843 {nop}
     (nil))
(code_label 40 51 41 5 117 (nil) [1 uses])
(note 41 40 53 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(note 53 41 0 NOTE_INSN_DELETED)
