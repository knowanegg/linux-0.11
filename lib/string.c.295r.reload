
;; Function strcpy (strcpy, funcdef_no=0, decl_uid=998, cgraph_uid=1, symbol_order=1)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=4, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
            0 Small class reload: reject+=3
            1 Small class reload: reject+=3
          alt=0,overall=18,losers=2,rld_nregs=2
	 Choosing alt 0 in insn 7:  (0) S  (1) D
      Creating newreg=89 from oldreg=85, assigning class SIREG to r89
      Creating newreg=90 from oldreg=86, assigning class DIREG to r90
    7: {asm_operands;clobber flags:CC;}
      REG_DEAD r86:SI
      REG_DEAD r85:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
   20: r89:SI=r85:SI
   21: r90:SI=r86:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 16: point = 0, n_alt = -1
   Insn 15: point = 0, n_alt = -2
   Insn 11: point = 1, n_alt = -2
   Insn 8: point = 3, n_alt = 0
   Insn 7: point = 4, n_alt = 0
   Insn 21: point = 5, n_alt = -2
	Hard reg 1 is preferable by r90 with profit 1000
   Insn 20: point = 7, n_alt = -2
	Hard reg 0 is preferable by r89 with profit 1000
   Insn 6: point = 9, n_alt = 0
   Insn 5: point = 10, n_alt = 0
   Insn 18: point = 11, n_alt = 0
 r82: [11..11]
 r83: [2..3]
 r84: [0..1]
 r85: [8..10]
 r86: [6..9]
 r89: [4..7]
 r90: [4..5]
Compressing live ranges: from 12 to 11 - 91%
Ranges after the compression:
 r82: [10..10]
 r83: [2..3]
 r84: [0..1]
 r85: [8..9]
 r86: [6..9]
 r89: [4..7]
 r90: [4..5]

********** Assignment #1: **********

	 Assigning to 89 (cl=SIREG, orig=85, freq=2000, tfirst=89, tfreq=2000)...
	   Assign 4 to reload r89 (freq=2000)
	 Assigning to 90 (cl=DIREG, orig=86, freq=2000, tfirst=90, tfreq=2000)...
	   Assign 5 to reload r90 (freq=2000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=12, prev_offset=4)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-8, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=12, prev_offset=12)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-8, prev_offset=0)
changing reg in insn 18
changing reg in insn 8
changing reg in insn 11
changing reg in insn 11
changing reg in insn 15
changing reg in insn 5
changing reg in insn 6
deleting insn with uid = 11.
deleting insn with uid = 15.
starting the processing of deferred insns
ending the processing of deferred insns


strcpy

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 17 [flags]
;;  ref usage 	r0={4d,3u} r1={2d,1u} r2={1d} r4={1d,1u} r5={1d,1u} r7={1d,5u} r17={2d} 
;;    total ref usage 23{12d,11u,0e} in 8{8 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 18 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 18 3 2 2 (parallel [
            (set (reg:SI 0 ax [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 18 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 0 ax [85])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [1 src+0 S4 A32])) "lib/string.c":19:2 75 {*movsi_internal}
     (nil))
(insn 6 5 20 2 (set (reg/f:SI 1 dx [86])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [1 dest+0 S4 A32])) "lib/string.c":19:2 75 {*movsi_internal}
     (nil))
(insn 20 6 21 2 (set (reg/f:SI 4 si [85])
        (reg/f:SI 0 ax [85])) "lib/string.c":19:2 75 {*movsi_internal}
     (nil))
(insn 21 20 7 2 (set (reg/f:SI 5 di [86])
        (reg/f:SI 1 dx [86])) "lib/string.c":19:2 75 {*movsi_internal}
     (nil))
(insn 7 21 8 2 (parallel [
            (asm_operands/v ("cld
1:	lodsb
	stosb
	testb %%al, %%al
	jne 1b") ("") 0 [
                    (reg/f:SI 4 si [85])
                    (reg/f:SI 5 di [86])
                ]
                 [
                    (asm_input:SI ("S") lib/string.c:19)
                    (asm_input:SI ("D") lib/string.c:19)
                ]
                 [] lib/string.c:19)
            (clobber (reg:CC 17 flags))
        ]) "lib/string.c":19:2 -1
     (nil))
(insn 8 7 16 2 (set (reg/f:SI 0 ax [orig:83 _3 ] [83])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [1 dest+0 S4 A32])) "lib/string.c":25:9 75 {*movsi_internal}
     (nil))
(insn 16 8 19 2 (use (reg/i:SI 0 ax)) "lib/string.c":26:1 -1
     (nil))
(note 19 16 0 NOTE_INSN_DELETED)

;; Function strncpy (strncpy, funcdef_no=1, decl_uid=1002, cgraph_uid=2, symbol_order=2)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=4, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
            0 Small class reload: reject+=3
            1 Small class reload: reject+=3
          alt=0,overall=18,losers=2,rld_nregs=2
	 Choosing alt 0 in insn 8:  (0) S  (1) D  (2) c
      Creating newreg=90 from oldreg=85, assigning class SIREG to r90
      Creating newreg=91 from oldreg=86, assigning class DIREG to r91
    8: {asm_operands;clobber flags:CC;}
      REG_DEAD r87:SI
      REG_DEAD r86:SI
      REG_DEAD r85:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
   21: r90:SI=r85:SI
   22: r91:SI=r86:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 17: point = 0, n_alt = -1
   Insn 16: point = 0, n_alt = -2
   Insn 12: point = 1, n_alt = -2
   Insn 9: point = 3, n_alt = 0
   Insn 8: point = 4, n_alt = 0
   Insn 22: point = 5, n_alt = -2
	Hard reg 1 is preferable by r91 with profit 1000
   Insn 21: point = 7, n_alt = -2
	Hard reg 0 is preferable by r90 with profit 1000
   Insn 7: point = 9, n_alt = 0
   Insn 6: point = 10, n_alt = 0
   Insn 5: point = 11, n_alt = 0
   Insn 19: point = 12, n_alt = 0
 r82: [12..12]
 r83: [2..3]
 r84: [0..1]
 r85: [8..11]
 r86: [6..10]
 r87: [4..9]
 r90: [4..7]
 r91: [4..5]
Compressing live ranges: from 13 to 11 - 84%
Ranges after the compression:
 r82: [10..10]
 r83: [2..3]
 r84: [0..1]
 r85: [8..9]
 r86: [6..9]
 r87: [4..9]
 r90: [4..7]
 r91: [4..5]

********** Assignment #1: **********

	 Assigning to 90 (cl=SIREG, orig=85, freq=2000, tfirst=90, tfreq=2000)...
	   Assign 4 to reload r90 (freq=2000)
	 Assigning to 91 (cl=DIREG, orig=86, freq=2000, tfirst=91, tfreq=2000)...
	   Assign 5 to reload r91 (freq=2000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=12, prev_offset=4)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-8, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=12, prev_offset=12)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-8, prev_offset=0)
changing reg in insn 19
changing reg in insn 9
changing reg in insn 12
changing reg in insn 12
changing reg in insn 16
changing reg in insn 5
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
deleting insn with uid = 12.
deleting insn with uid = 16.
starting the processing of deferred insns
ending the processing of deferred insns


strncpy

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 17 [flags]
;;  ref usage 	r0={4d,3u} r1={2d,1u} r2={2d,1u} r4={1d,1u} r5={1d,1u} r7={1d,6u} r17={2d} 
;;    total ref usage 26{13d,13u,0e} in 9{9 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 19 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 19 3 2 2 (parallel [
            (set (reg:SI 0 ax [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 19 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 0 ax [85])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [1 src+0 S4 A32])) "lib/string.c":30:2 75 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (reg/f:SI 1 dx [86])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [1 dest+0 S4 A32])) "lib/string.c":30:2 75 {*movsi_internal}
     (nil))
(insn 7 6 21 2 (set (reg:SI 2 cx [87])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [2 count+0 S4 A32])) "lib/string.c":30:2 75 {*movsi_internal}
     (nil))
(insn 21 7 22 2 (set (reg/f:SI 4 si [85])
        (reg/f:SI 0 ax [85])) "lib/string.c":30:2 75 {*movsi_internal}
     (nil))
(insn 22 21 8 2 (set (reg/f:SI 5 di [86])
        (reg/f:SI 1 dx [86])) "lib/string.c":30:2 75 {*movsi_internal}
     (nil))
(insn 8 22 9 2 (parallel [
            (asm_operands/v ("cld
1:	decl %2
	js 2f
	lodsb
	stosb
	testb %%al, %%al
	jne 1b
	rep
	stosb
2:") ("") 0 [
                    (reg/f:SI 4 si [85])
                    (reg/f:SI 5 di [86])
                    (reg:SI 2 cx [87])
                ]
                 [
                    (asm_input:SI ("S") lib/string.c:30)
                    (asm_input:SI ("D") lib/string.c:30)
                    (asm_input:SI ("c") lib/string.c:30)
                ]
                 [] lib/string.c:30)
            (clobber (reg:CC 17 flags))
        ]) "lib/string.c":30:2 -1
     (nil))
(insn 9 8 17 2 (set (reg/f:SI 0 ax [orig:83 _4 ] [83])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [1 dest+0 S4 A32])) "lib/string.c":41:9 75 {*movsi_internal}
     (nil))
(insn 17 9 20 2 (use (reg/i:SI 0 ax)) "lib/string.c":42:1 -1
     (nil))
(note 20 17 0 NOTE_INSN_DELETED)

;; Function strcat (strcat, funcdef_no=2, decl_uid=1005, cgraph_uid=3, symbol_order=3)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-4, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
            0 Small class reload: reject+=3
            1 Small class reload: reject+=3
          alt=0,overall=18,losers=2,rld_nregs=2
	 Choosing alt 0 in insn 9:  (0) S  (1) D  (2) a  (3) c
      Creating newreg=91 from oldreg=85, assigning class SIREG to r91
      Creating newreg=92 from oldreg=86, assigning class DIREG to r92
    9: {asm_operands;clobber flags:CC;}
      REG_DEAD r88:SI
      REG_DEAD r87:SI
      REG_DEAD r86:SI
      REG_DEAD r85:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
   22: r91:SI=r85:SI
   23: r92:SI=r86:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 18: point = 0, n_alt = -1
   Insn 17: point = 0, n_alt = -2
   Insn 13: point = 1, n_alt = -2
   Insn 10: point = 3, n_alt = 0
   Insn 9: point = 4, n_alt = 0
   Insn 23: point = 5, n_alt = -2
	Hard reg 3 is preferable by r92 with profit 1000
   Insn 22: point = 7, n_alt = -2
	Hard reg 1 is preferable by r91 with profit 1000
   Insn 8: point = 9, n_alt = 0
   Insn 7: point = 10, n_alt = 0
   Insn 6: point = 11, n_alt = 0
   Insn 5: point = 12, n_alt = 0
   Insn 20: point = 13, n_alt = 0
 r82: [13..13]
 r83: [2..3]
 r84: [0..1]
 r85: [8..12]
 r86: [6..11]
 r87: [4..10]
 r88: [4..9]
 r91: [4..7]
 r92: [4..5]
Compressing live ranges: from 14 to 11 - 78%
Ranges after the compression:
 r82: [10..10]
 r83: [2..3]
 r84: [0..1]
 r85: [8..9]
 r86: [6..9]
 r87: [4..9]
 r88: [4..9]
 r91: [4..7]
 r92: [4..5]

********** Assignment #1: **********

	 Assigning to 91 (cl=SIREG, orig=85, freq=2000, tfirst=91, tfreq=2000)...
	   Assign 4 to reload r91 (freq=2000)
	 Assigning to 92 (cl=DIREG, orig=86, freq=2000, tfirst=92, tfreq=2000)...
	   Assign 5 to reload r92 (freq=2000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=8)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=16)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
changing reg in insn 20
changing reg in insn 10
changing reg in insn 13
changing reg in insn 13
changing reg in insn 17
changing reg in insn 5
changing reg in insn 6
changing reg in insn 7
changing reg in insn 9
changing reg in insn 8
changing reg in insn 9
deleting insn with uid = 13.
deleting insn with uid = 17.
starting the processing of deferred insns
ending the processing of deferred insns


strcat

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 17 [flags]
;;  ref usage 	r0={4d,3u} r1={2d,1u} r2={2d,1u} r3={1d,1u} r4={1d,1u} r5={1d,1u} r7={1d,5u} r17={2d} 
;;    total ref usage 27{14d,13u,0e} in 10{10 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 20 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 20 3 2 2 (parallel [
            (set (reg:SI 0 ax [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 20 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 1 dx [85])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [1 src+0 S4 A32])) "lib/string.c":46:2 75 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (reg/f:SI 3 bx [86])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [1 dest+0 S4 A32])) "lib/string.c":46:2 75 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:SI 0 ax [87])
        (const_int 0 [0])) "lib/string.c":46:2 75 {*movsi_internal}
     (nil))
(insn 8 7 22 2 (set (reg:SI 2 cx [88])
        (const_int -1 [0xffffffffffffffff])) "lib/string.c":46:2 75 {*movsi_internal}
     (nil))
(insn 22 8 23 2 (set (reg/f:SI 4 si [85])
        (reg/f:SI 1 dx [85])) "lib/string.c":46:2 75 {*movsi_internal}
     (nil))
(insn 23 22 9 2 (set (reg/f:SI 5 di [86])
        (reg/f:SI 3 bx [86])) "lib/string.c":46:2 75 {*movsi_internal}
     (nil))
(insn 9 23 10 2 (parallel [
            (asm_operands/v ("cld
	repne
	scasb
	decl %1
1:	lodsb
	stosb
	testb %%al, %%al
	jne 1b") ("") 0 [
                    (reg/f:SI 4 si [85])
                    (reg/f:SI 5 di [86])
                    (reg:SI 0 ax [87])
                    (reg:SI 2 cx [88])
                ]
                 [
                    (asm_input:SI ("S") lib/string.c:46)
                    (asm_input:SI ("D") lib/string.c:46)
                    (asm_input:SI ("a") lib/string.c:46)
                    (asm_input:SI ("c") lib/string.c:46)
                ]
                 [] lib/string.c:46)
            (clobber (reg:CC 17 flags))
        ]) "lib/string.c":46:2 -1
     (nil))
(insn 10 9 18 2 (set (reg/f:SI 0 ax [orig:83 _3 ] [83])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [1 dest+0 S4 A32])) "lib/string.c":55:9 75 {*movsi_internal}
     (nil))
(insn 18 10 21 2 (use (reg/i:SI 0 ax)) "lib/string.c":56:1 -1
     (nil))
(note 21 18 0 NOTE_INSN_DELETED)

;; Function strncat (strncat, funcdef_no=3, decl_uid=1009, cgraph_uid=4, symbol_order=4)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-4, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
            0 Small class reload: reject+=3
            1 Small class reload: reject+=3
          alt=0,overall=18,losers=2,rld_nregs=2
	 Choosing alt 0 in insn 9:  (0) S  (1) D  (2) a  (3) c  (4) g
      Creating newreg=91 from oldreg=85, assigning class SIREG to r91
      Creating newreg=92 from oldreg=86, assigning class DIREG to r92
    9: {asm_operands;clobber flags:CC;}
      REG_DEAD r88:SI
      REG_DEAD r87:SI
      REG_DEAD r86:SI
      REG_DEAD r85:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
   22: r91:SI=r85:SI
   23: r92:SI=r86:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 18: point = 0, n_alt = -1
   Insn 17: point = 0, n_alt = -2
   Insn 13: point = 1, n_alt = -2
   Insn 10: point = 3, n_alt = 0
   Insn 9: point = 4, n_alt = 0
   Insn 23: point = 5, n_alt = -2
	Hard reg 3 is preferable by r92 with profit 1000
   Insn 22: point = 7, n_alt = -2
	Hard reg 1 is preferable by r91 with profit 1000
   Insn 8: point = 9, n_alt = 0
   Insn 7: point = 10, n_alt = 0
   Insn 6: point = 11, n_alt = 0
   Insn 5: point = 12, n_alt = 0
   Insn 20: point = 13, n_alt = 0
 r82: [13..13]
 r83: [2..3]
 r84: [0..1]
 r85: [8..12]
 r86: [6..11]
 r87: [4..10]
 r88: [4..9]
 r91: [4..7]
 r92: [4..5]
Compressing live ranges: from 14 to 11 - 78%
Ranges after the compression:
 r82: [10..10]
 r83: [2..3]
 r84: [0..1]
 r85: [8..9]
 r86: [6..9]
 r87: [4..9]
 r88: [4..9]
 r91: [4..7]
 r92: [4..5]

********** Assignment #1: **********

	 Assigning to 91 (cl=SIREG, orig=85, freq=2000, tfirst=91, tfreq=2000)...
	   Assign 4 to reload r91 (freq=2000)
	 Assigning to 92 (cl=DIREG, orig=86, freq=2000, tfirst=92, tfreq=2000)...
	   Assign 5 to reload r92 (freq=2000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=8)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) S  (1) D  (2) a  (3) c  (4) g
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=16)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
changing reg in insn 20
changing reg in insn 10
changing reg in insn 13
changing reg in insn 13
changing reg in insn 17
changing reg in insn 5
changing reg in insn 6
changing reg in insn 7
changing reg in insn 9
changing reg in insn 8
changing reg in insn 9
deleting insn with uid = 13.
deleting insn with uid = 17.
starting the processing of deferred insns
ending the processing of deferred insns


strncat

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 17 [flags]
;;  ref usage 	r0={4d,3u} r1={2d,1u} r2={2d,1u} r3={1d,1u} r4={1d,1u} r5={1d,1u} r7={1d,6u} r17={2d} 
;;    total ref usage 28{14d,14u,0e} in 10{10 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 20 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 20 3 2 2 (parallel [
            (set (reg:SI 0 ax [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 20 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 1 dx [85])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [1 src+0 S4 A32])) "lib/string.c":60:2 75 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (reg/f:SI 3 bx [86])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [1 dest+0 S4 A32])) "lib/string.c":60:2 75 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:SI 0 ax [87])
        (const_int 0 [0])) "lib/string.c":60:2 75 {*movsi_internal}
     (nil))
(insn 8 7 22 2 (set (reg:SI 2 cx [88])
        (const_int -1 [0xffffffffffffffff])) "lib/string.c":60:2 75 {*movsi_internal}
     (nil))
(insn 22 8 23 2 (set (reg/f:SI 4 si [85])
        (reg/f:SI 1 dx [85])) "lib/string.c":60:2 75 {*movsi_internal}
     (nil))
(insn 23 22 9 2 (set (reg/f:SI 5 di [86])
        (reg/f:SI 3 bx [86])) "lib/string.c":60:2 75 {*movsi_internal}
     (nil))
(insn 9 23 10 2 (parallel [
            (asm_operands/v ("cld
	repne
	scasb
	decl %1
	movl %4, %3
1:	decl %3
	js 2f
	lodsb
	stosb
	testb %%al, %%al
	jne 1b
2: 	xorl %2, %2
	stosb") ("") 0 [
                    (reg/f:SI 4 si [85])
                    (reg/f:SI 5 di [86])
                    (reg:SI 0 ax [87])
                    (reg:SI 2 cx [88])
                    (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 24 [0x18])) [2 count+0 S4 A32])
                ]
                 [
                    (asm_input:SI ("S") lib/string.c:60)
                    (asm_input:SI ("D") lib/string.c:60)
                    (asm_input:SI ("a") lib/string.c:60)
                    (asm_input:SI ("c") lib/string.c:60)
                    (asm_input:SI ("g") lib/string.c:60)
                ]
                 [] lib/string.c:60)
            (clobber (reg:CC 17 flags))
        ]) "lib/string.c":60:2 -1
     (nil))
(insn 10 9 18 2 (set (reg/f:SI 0 ax [orig:83 _4 ] [83])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [1 dest+0 S4 A32])) "lib/string.c":75:9 75 {*movsi_internal}
     (nil))
(insn 18 10 21 2 (use (reg/i:SI 0 ax)) "lib/string.c":76:1 -1
     (nil))
(note 21 18 0 NOTE_INSN_DELETED)

;; Function strcmp (strcmp, funcdef_no=4, decl_uid=1019, cgraph_uid=5, symbol_order=5)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-4, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
            1 Small class reload: reject+=3
            2 Small class reload: reject+=3
          alt=0,overall=18,losers=2,rld_nregs=2
	 Choosing alt 0 in insn 8:  (0) =a  (1) D  (2) S
      Creating newreg=91 from oldreg=87, assigning class DIREG to r91
      Creating newreg=92 from oldreg=88, assigning class SIREG to r92
    8: {r86:SI=asm_operands;clobber flags:CC;}
      REG_DEAD r88:SI
      REG_DEAD r87:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
   21: r91:SI=r87:SI
   22: r92:SI=r88:SI

	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 17: point = 0, n_alt = -1
   Insn 16: point = 0, n_alt = -2
   Insn 12: point = 1, n_alt = -2
   Insn 9: point = 3, n_alt = -2
   Insn 5: point = 5, n_alt = -2
   Insn 8: point = 7, n_alt = 0
   Insn 22: point = 9, n_alt = -2
	Hard reg 1 is preferable by r92 with profit 1000
   Insn 21: point = 11, n_alt = -2
	Hard reg 0 is preferable by r91 with profit 1000
   Insn 7: point = 13, n_alt = 0
   Insn 6: point = 14, n_alt = 0
   Insn 19: point = 15, n_alt = 0
 r82: [15..15]
 r83: [4..5]
 r84: [2..3]
 r85: [0..1]
 r86: [6..7]
 r87: [12..14]
 r88: [10..13]
 r91: [8..11]
 r92: [8..9]
Compressing live ranges: from 16 to 15 - 93%
Ranges after the compression:
 r82: [14..14]
 r83: [4..5]
 r84: [2..3]
 r85: [0..1]
 r86: [6..7]
 r87: [12..13]
 r88: [10..13]
 r91: [8..11]
 r92: [8..9]

********** Assignment #1: **********

	 Assigning to 91 (cl=DIREG, orig=87, freq=2000, tfirst=91, tfreq=2000)...
	   Assign 5 to reload r91 (freq=2000)
	 Assigning to 92 (cl=SIREG, orig=88, freq=2000, tfirst=92, tfreq=2000)...
	   Assign 4 to reload r92 (freq=2000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=8)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=16)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
changing reg in insn 19
changing reg in insn 5
changing reg in insn 9
changing reg in insn 9
changing reg in insn 12
changing reg in insn 12
changing reg in insn 16
changing reg in insn 8
changing reg in insn 5
changing reg in insn 6
changing reg in insn 7
deleting insn with uid = 12.
deleting insn with uid = 16.
starting the processing of deferred insns
ending the processing of deferred insns


strcmp

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 17 [flags]
;;  ref usage 	r0={5d,4u} r1={2d,1u} r2={1d} r3={1d,1u} r4={1d,1u} r5={1d,1u} r7={1d,4u} r17={2d} 
;;    total ref usage 26{14d,12u,0e} in 9{9 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 19 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 19 3 2 2 (parallel [
            (set (reg:SI 0 ax [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 19 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 2 7 2 (set (reg/f:SI 0 ax [87])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [1 cs+0 S4 A32])) "lib/string.c":81:2 75 {*movsi_internal}
     (nil))
(insn 7 6 21 2 (set (reg/f:SI 1 dx [88])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [1 ct+0 S4 A32])) "lib/string.c":81:2 75 {*movsi_internal}
     (nil))
(insn 21 7 22 2 (set (reg/f:SI 5 di [87])
        (reg/f:SI 0 ax [87])) "lib/string.c":81:2 75 {*movsi_internal}
     (nil))
(insn 22 21 8 2 (set (reg/f:SI 4 si [88])
        (reg/f:SI 1 dx [88])) "lib/string.c":81:2 75 {*movsi_internal}
     (nil))
(insn 8 22 5 2 (parallel [
            (set (reg:SI 0 ax [orig:86 __res ] [86])
                (asm_operands:SI ("cld
1:	lodsb
	scasb
	jne 2f
	testb %%al, %%al
	jne 1b
	xorl %%eax, %%eax
	jmp 3f
2:	movl $1, %%eax
	jl 3f
	negl %%eax
3:") ("=a") 0 [
                        (reg/f:SI 5 di [87])
                        (reg/f:SI 4 si [88])
                    ]
                     [
                        (asm_input:SI ("D") lib/string.c:81)
                        (asm_input:SI ("S") lib/string.c:81)
                    ]
                     [] lib/string.c:81))
            (clobber (reg:CC 17 flags))
        ]) "lib/string.c":81:2 -1
     (nil))
(insn 5 8 9 2 (set (reg/v:SI 3 bx [orig:83 __res ] [83])
        (reg:SI 0 ax [orig:86 __res ] [86])) "lib/string.c":81:2 75 {*movsi_internal}
     (nil))
(insn 9 5 17 2 (set (reg:SI 0 ax [orig:84 _4 ] [84])
        (reg/v:SI 3 bx [orig:83 __res ] [83])) "lib/string.c":94:9 75 {*movsi_internal}
     (nil))
(insn 17 9 20 2 (use (reg/i:SI 0 ax)) "lib/string.c":95:1 -1
     (nil))
(note 20 17 0 NOTE_INSN_DELETED)

;; Function strncmp (strncmp, funcdef_no=5, decl_uid=1013, cgraph_uid=6, symbol_order=6)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-4, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
            1 Small class reload: reject+=3
            2 Small class reload: reject+=3
          alt=0,overall=18,losers=2,rld_nregs=2
	 Choosing alt 0 in insn 9:  (0) =a  (1) D  (2) S  (3) c
      Creating newreg=92 from oldreg=87, assigning class DIREG to r92
      Creating newreg=93 from oldreg=88, assigning class SIREG to r93
    9: {r86:SI=asm_operands;clobber flags:CC;}
      REG_DEAD r89:SI
      REG_DEAD r88:SI
      REG_DEAD r87:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
   22: r92:SI=r87:SI
   23: r93:SI=r88:SI

	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 18: point = 0, n_alt = -1
   Insn 17: point = 0, n_alt = -2
   Insn 13: point = 1, n_alt = -2
   Insn 10: point = 3, n_alt = -2
   Insn 5: point = 5, n_alt = -2
   Insn 9: point = 7, n_alt = 0
   Insn 23: point = 9, n_alt = -2
	Hard reg 1 is preferable by r93 with profit 1000
   Insn 22: point = 11, n_alt = -2
	Hard reg 0 is preferable by r92 with profit 1000
   Insn 8: point = 13, n_alt = 0
   Insn 7: point = 14, n_alt = 0
   Insn 6: point = 15, n_alt = 0
   Insn 20: point = 16, n_alt = 0
 r82: [16..16]
 r83: [4..5]
 r84: [2..3]
 r85: [0..1]
 r86: [6..7]
 r87: [12..15]
 r88: [10..14]
 r89: [8..13]
 r92: [8..11]
 r93: [8..9]
Compressing live ranges: from 17 to 15 - 88%
Ranges after the compression:
 r82: [14..14]
 r83: [4..5]
 r84: [2..3]
 r85: [0..1]
 r86: [6..7]
 r87: [12..13]
 r88: [10..13]
 r89: [8..13]
 r92: [8..11]
 r93: [8..9]

********** Assignment #1: **********

	 Assigning to 92 (cl=DIREG, orig=87, freq=2000, tfirst=92, tfreq=2000)...
	   Assign 5 to reload r92 (freq=2000)
	 Assigning to 93 (cl=SIREG, orig=88, freq=2000, tfirst=93, tfreq=2000)...
	   Assign 4 to reload r93 (freq=2000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=8)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=16)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
changing reg in insn 20
changing reg in insn 5
changing reg in insn 10
changing reg in insn 10
changing reg in insn 13
changing reg in insn 13
changing reg in insn 17
changing reg in insn 9
changing reg in insn 5
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
deleting insn with uid = 13.
deleting insn with uid = 17.
starting the processing of deferred insns
ending the processing of deferred insns


strncmp

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 17 [flags]
;;  ref usage 	r0={5d,4u} r1={2d,1u} r2={2d,1u} r3={1d,1u} r4={1d,1u} r5={1d,1u} r7={1d,5u} r17={2d} 
;;    total ref usage 29{15d,14u,0e} in 10{10 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 20 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 20 3 2 2 (parallel [
            (set (reg:SI 0 ax [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 20 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 2 7 2 (set (reg/f:SI 0 ax [87])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [1 cs+0 S4 A32])) "lib/string.c":100:2 75 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (reg/f:SI 1 dx [88])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [1 ct+0 S4 A32])) "lib/string.c":100:2 75 {*movsi_internal}
     (nil))
(insn 8 7 22 2 (set (reg:SI 2 cx [89])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [2 count+0 S4 A32])) "lib/string.c":100:2 75 {*movsi_internal}
     (nil))
(insn 22 8 23 2 (set (reg/f:SI 5 di [87])
        (reg/f:SI 0 ax [87])) "lib/string.c":100:2 75 {*movsi_internal}
     (nil))
(insn 23 22 9 2 (set (reg/f:SI 4 si [88])
        (reg/f:SI 1 dx [88])) "lib/string.c":100:2 75 {*movsi_internal}
     (nil))
(insn 9 23 5 2 (parallel [
            (set (reg:SI 0 ax [orig:86 __res ] [86])
                (asm_operands:SI ("cld
1:	decl %3
	js 2f
	lodsb
	scasb
	jne 3f
	testb %%al, %%al
	jne 1b
2:	xorl %%eax, %%eax
	jmp 4f
3:	movl $1, %%eax
	jl 4f
	negl %%eax
4:") ("=a") 0 [
                        (reg/f:SI 5 di [87])
                        (reg/f:SI 4 si [88])
                        (reg:SI 2 cx [89])
                    ]
                     [
                        (asm_input:SI ("D") lib/string.c:100)
                        (asm_input:SI ("S") lib/string.c:100)
                        (asm_input:SI ("c") lib/string.c:100)
                    ]
                     [] lib/string.c:100))
            (clobber (reg:CC 17 flags))
        ]) "lib/string.c":100:2 -1
     (nil))
(insn 5 9 10 2 (set (reg/v:SI 3 bx [orig:83 __res ] [83])
        (reg:SI 0 ax [orig:86 __res ] [86])) "lib/string.c":100:2 75 {*movsi_internal}
     (nil))
(insn 10 5 18 2 (set (reg:SI 0 ax [orig:84 _5 ] [84])
        (reg/v:SI 3 bx [orig:83 __res ] [83])) "lib/string.c":115:9 75 {*movsi_internal}
     (nil))
(insn 18 10 21 2 (use (reg/i:SI 0 ax)) "lib/string.c":116:1 -1
     (nil))
(note 21 18 0 NOTE_INSN_DELETED)

;; Function strchr (strchr, funcdef_no=6, decl_uid=1016, cgraph_uid=7, symbol_order=7)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=12, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=4, prev_offset=0)
Can eliminate 19 to 6 (offset=-4, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 2:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 3:  (0) =Q  (1) Q {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=7,overall=27,losers=2 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 4:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 10:  (0) q  (1) m {*movqi_internal}
            1 Small class reload: reject+=3
          alt=0,overall=9,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 11:  (0) =a  (1) S  (2) 0
      Creating newreg=93 from oldreg=89, assigning class SIREG to r93
   11: {r88:SI=asm_operands;clobber flags:CC;}
      REG_DEAD r90:QI
      REG_DEAD r89:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
   24: r93:SI=r89:SI

	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 20: point = 0, n_alt = -1
   Insn 19: point = 0, n_alt = -2
   Insn 15: point = 1, n_alt = -2
   Insn 12: point = 3, n_alt = -2
   Insn 8: point = 5, n_alt = -2
   Insn 11: point = 7, n_alt = 0
   Insn 24: point = 9, n_alt = -2
	Hard reg 1 is preferable by r93 with profit 1000
   Insn 10: point = 11, n_alt = 4
   Insn 9: point = 12, n_alt = 0
   Insn 4: point = 13, n_alt = 8
   Insn 3: point = 14, n_alt = 0
   Insn 2: point = 16, n_alt = 0
   Insn 22: point = 17, n_alt = 0
 r82: [17..17]
 r83: [4..5]
 r84: [2..3]
 r85: [0..1]
 r86: [15..16]
 r87: [13..14]
 r88: [6..7]
 r89: [10..12]
 r90: [8..11]
 r93: [8..9]
Compressing live ranges: from 18 to 17 - 94%
Ranges after the compression:
 r82: [16..16]
 r83: [4..5]
 r84: [2..3]
 r85: [0..1]
 r86: [14..15]
 r87: [12..13]
 r88: [6..7]
 r89: [10..11]
 r90: [8..11]
 r93: [8..9]

********** Assignment #1: **********

	 Assigning to 93 (cl=SIREG, orig=89, freq=2000, tfirst=93, tfreq=2000)...
	   Assign 4 to reload r93 (freq=2000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=12)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=4, prev_offset=4)
Can eliminate 19 to 6 (offset=-8, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 2:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=16)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=4, prev_offset=4)
Can eliminate 19 to 6 (offset=-8, prev_offset=0)
changing reg in insn 22
changing reg in insn 8
changing reg in insn 12
changing reg in insn 12
changing reg in insn 15
changing reg in insn 15
changing reg in insn 19
changing reg in insn 2
changing reg in insn 3
changing reg in insn 4
changing reg in insn 11
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
deleting insn with uid = 3.
deleting insn with uid = 15.
deleting insn with uid = 19.
starting the processing of deferred insns
ending the processing of deferred insns


strchr

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 17 [flags]
;;  ref usage 	r0={6d,5u} r1={2d,1u} r2={1d} r3={1d,1u} r4={1d,1u} r7={1d,6u} r17={2d} 
;;    total ref usage 28{14d,14u,0e} in 10{10 regular + 0 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
(note 6 1 22 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 22 6 2 2 (parallel [
            (set (reg:SI 0 ax [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(insn 2 22 4 2 (set (reg:SI 0 ax [86])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [0 c+0 S4 A32])) "lib/string.c":119:1 75 {*movsi_internal}
     (nil))
(insn 4 2 5 2 (set (mem/c:QI (reg/f:SI 7 sp) [0 c+0 S1 A32])
        (reg:QI 0 ax [87])) "lib/string.c":119:1 77 {*movqi_internal}
     (nil))
(note 5 4 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 5 10 2 (set (reg/f:SI 1 dx [89])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [1 s+0 S4 A32])) "lib/string.c":121:2 75 {*movsi_internal}
     (nil))
(insn 10 9 24 2 (set (reg:QI 0 ax [90])
        (mem/c:QI (reg/f:SI 7 sp) [0 c+0 S1 A32])) "lib/string.c":121:2 77 {*movqi_internal}
     (nil))
(insn 24 10 11 2 (set (reg/f:SI 4 si [89])
        (reg/f:SI 1 dx [89])) "lib/string.c":121:2 75 {*movsi_internal}
     (nil))
(insn 11 24 8 2 (parallel [
            (set (reg:SI 0 ax [orig:88 __res ] [88])
                (asm_operands:SI ("cld
	movb %%al, %%ah
1:	lodsb
	cmpb %%ah, %%al
	je 2f
	testb %%al, %%al
	jne 1b
	movl $1, %1
2:	movl %1, %0
	decl %0") ("=a") 0 [
                        (reg/f:SI 4 si [89])
                        (reg:QI 0 ax [90])
                    ]
                     [
                        (asm_input:SI ("S") lib/string.c:121)
                        (asm_input:QI ("0") lib/string.c:121)
                    ]
                     [] lib/string.c:121))
            (clobber (reg:CC 17 flags))
        ]) "lib/string.c":121:2 -1
     (nil))
(insn 8 11 12 2 (set (reg/v/f:SI 3 bx [orig:83 __res ] [83])
        (reg:SI 0 ax [orig:88 __res ] [88])) "lib/string.c":121:2 75 {*movsi_internal}
     (nil))
(insn 12 8 20 2 (set (reg/f:SI 0 ax [orig:84 _4 ] [84])
        (reg/v/f:SI 3 bx [orig:83 __res ] [83])) "lib/string.c":132:9 75 {*movsi_internal}
     (nil))
(insn 20 12 23 2 (use (reg/i:SI 0 ax)) "lib/string.c":133:1 -1
     (nil))
(note 23 20 0 NOTE_INSN_DELETED)

;; Function strlen (strlen, funcdef_no=7, decl_uid=1021, cgraph_uid=8, symbol_order=8)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-4, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
            3 Small class reload: reject+=3
          alt=0,overall=28,losers=3,rld_nregs=3
	 Choosing alt 0 in insn 9:  (0) =c  (1) D  (2) a  (3) 0
      Creating newreg=92 from oldreg=86, assigning class CREG to r92
      Creating newreg=93 from oldreg=87, assigning class DIREG to r93
    9: {r92:SI=asm_operands;clobber flags:CC;}
      REG_DEAD r88:SI
      REG_DEAD r87:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
   23: r92:SI=r86:SI
   25: r93:SI=r87:SI
    Inserting insn reload after:
   24: r86:SI=r92:SI

	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 18: point = 0, n_alt = -1
   Insn 17: point = 0, n_alt = -2
   Insn 13: point = 1, n_alt = -2
   Insn 10: point = 3, n_alt = -2
   Insn 5: point = 5, n_alt = -2
   Insn 24: point = 7, n_alt = -2
	Hard reg 1 is preferable by r92 with profit 1000
   Insn 9: point = 9, n_alt = 0
   Insn 25: point = 11, n_alt = -2
	Hard reg 3 is preferable by r93 with profit 1000
   Insn 23: point = 13, n_alt = -2
	Hard reg 1 is preferable by r92 with profit 2000
   Insn 20: point = 15, n_alt = -2
   Insn 8: point = 17, n_alt = 0
   Insn 7: point = 18, n_alt = 0
   Insn 6: point = 19, n_alt = 0
   Insn 21: point = 20, n_alt = 0
 r82: [20..20]
 r83: [4..5]
 r84: [2..3]
 r85: [0..1]
 r86: [14..15] [6..7]
 r87: [12..19]
 r88: [10..18]
 r89: [16..17]
 r92: [8..13]
 r93: [10..11]
Compressing live ranges: from 21 to 17 - 80%
Ranges after the compression:
 r82: [16..16]
 r83: [4..5]
 r84: [2..3]
 r85: [0..1]
 r86: [12..13] [6..7]
 r87: [10..15]
 r88: [8..15]
 r89: [14..15]
 r92: [8..11]
 r93: [8..9]

********** Assignment #1: **********

	 Assigning to 92 (cl=CREG, orig=86, freq=3000, tfirst=92, tfreq=3000)...
	   Assign 2 to reload r92 (freq=3000)
	 Assigning to 93 (cl=DIREG, orig=87, freq=2000, tfirst=93, tfreq=2000)...
	   Assign 5 to reload r93 (freq=2000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=12, prev_offset=8)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-8, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=12, prev_offset=12)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-8, prev_offset=0)
changing reg in insn 21
changing reg in insn 5
changing reg in insn 10
changing reg in insn 10
changing reg in insn 13
changing reg in insn 13
changing reg in insn 17
changing reg in insn 20
changing reg in insn 5
changing reg in insn 6
changing reg in insn 7
changing reg in insn 9
changing reg in insn 8
changing reg in insn 20
deleting insn with uid = 20.
deleting insn with uid = 13.
deleting insn with uid = 17.
starting the processing of deferred insns
ending the processing of deferred insns


strlen

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 17 [flags]
;;  ref usage 	r0={4d,3u} r1={3d,2u} r2={3d,2u} r3={2d,2u} r5={1d,1u} r7={1d,3u} r17={2d} 
;;    total ref usage 29{16d,13u,0e} in 11{11 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 21 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 21 3 2 2 (parallel [
            (set (reg:SI 0 ax [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 21 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 2 7 2 (set (reg/f:SI 3 bx [87])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [1 s+0 S4 A32])) "lib/string.c":139:2 75 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:SI 0 ax [88])
        (const_int 0 [0])) "lib/string.c":139:2 75 {*movsi_internal}
     (nil))
(insn 8 7 23 2 (set (reg:SI 1 dx [89])
        (const_int -1 [0xffffffffffffffff])) "lib/string.c":139:2 75 {*movsi_internal}
     (nil))
(insn 23 8 25 2 (set (reg:SI 2 cx [orig:86 __res ] [86])
        (reg:SI 1 dx [orig:86 __res ] [86])) "lib/string.c":139:2 75 {*movsi_internal}
     (nil))
(insn 25 23 9 2 (set (reg/f:SI 5 di [87])
        (reg/f:SI 3 bx [87])) "lib/string.c":139:2 75 {*movsi_internal}
     (nil))
(insn 9 25 24 2 (parallel [
            (set (reg:SI 2 cx [orig:86 __res ] [86])
                (asm_operands:SI ("cld
	repne
	scasb
	notl %0
	decl %0") ("=c") 0 [
                        (reg/f:SI 5 di [87])
                        (reg:SI 0 ax [88])
                        (reg:SI 2 cx [orig:86 __res ] [86])
                    ]
                     [
                        (asm_input:SI ("D") lib/string.c:139)
                        (asm_input:SI ("a") lib/string.c:139)
                        (asm_input:SI ("0") lib/string.c:139)
                    ]
                     [] lib/string.c:139))
            (clobber (reg:CC 17 flags))
        ]) "lib/string.c":139:2 -1
     (nil))
(insn 24 9 5 2 (set (reg:SI 1 dx [orig:86 __res ] [86])
        (reg:SI 2 cx [orig:86 __res ] [86])) "lib/string.c":139:2 75 {*movsi_internal}
     (nil))
(insn 5 24 10 2 (set (reg/v:SI 3 bx [orig:83 __res ] [83])
        (reg:SI 1 dx [orig:86 __res ] [86])) "lib/string.c":139:2 75 {*movsi_internal}
     (nil))
(insn 10 5 18 2 (set (reg:SI 0 ax [orig:84 _3 ] [84])
        (reg/v:SI 3 bx [orig:83 __res ] [83])) "lib/string.c":146:9 75 {*movsi_internal}
     (nil))
(insn 18 10 22 2 (use (reg/i:SI 0 ax)) "lib/string.c":147:1 -1
     (nil))
(note 22 18 0 NOTE_INSN_DELETED)

;; Function memset (memset, funcdef_no=8, decl_uid=1025, cgraph_uid=9, symbol_order=9)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=4, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 2:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 3:  (0) =Q  (1) Q {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=7,overall=27,losers=2 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 4:  (0) m  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 8:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) g {*movsi_internal}
            1 Small class reload: reject+=3
          alt=0,overall=9,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 11:  (0) a  (1) D  (2) c
      Creating newreg=92 from oldreg=88, assigning class DIREG to r92
   11: {asm_operands;clobber flags:CC;}
      REG_DEAD r89:SI
      REG_DEAD r88:SI
      REG_DEAD r87:QI
      REG_UNUSED flags:CC
    Inserting insn reload before:
   24: r92:SI=r88:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 20: point = 0, n_alt = -1
   Insn 19: point = 0, n_alt = -2
   Insn 15: point = 1, n_alt = -2
   Insn 12: point = 3, n_alt = 0
   Insn 11: point = 4, n_alt = 0
   Insn 24: point = 5, n_alt = -2
	Hard reg 1 is preferable by r92 with profit 1000
   Insn 10: point = 7, n_alt = 0
   Insn 9: point = 8, n_alt = 0
   Insn 8: point = 9, n_alt = 4
   Insn 4: point = 10, n_alt = 8
   Insn 3: point = 11, n_alt = 0
   Insn 2: point = 13, n_alt = 0
   Insn 22: point = 14, n_alt = 0
 r82: [14..14]
 r83: [2..3]
 r84: [0..1]
 r85: [12..13]
 r86: [10..11]
 r87: [4..9]
 r88: [6..8]
 r89: [4..7]
 r92: [4..5]
Compressing live ranges: from 15 to 13 - 86%
Ranges after the compression:
 r82: [12..12]
 r83: [2..3]
 r84: [0..1]
 r85: [10..11]
 r86: [8..9]
 r87: [4..7]
 r88: [6..7]
 r89: [4..7]
 r92: [4..5]

********** Assignment #1: **********

	 Assigning to 92 (cl=DIREG, orig=88, freq=2000, tfirst=92, tfreq=2000)...
	   Assign 5 to reload r92 (freq=2000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=12, prev_offset=8)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=4, prev_offset=4)
Can eliminate 19 to 6 (offset=-4, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 2:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=12, prev_offset=12)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=4, prev_offset=4)
Can eliminate 19 to 6 (offset=-4, prev_offset=0)
changing reg in insn 22
changing reg in insn 12
changing reg in insn 15
changing reg in insn 15
changing reg in insn 19
changing reg in insn 2
changing reg in insn 3
changing reg in insn 4
changing reg in insn 8
changing reg in insn 11
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
deleting insn with uid = 3.
deleting insn with uid = 15.
deleting insn with uid = 19.
starting the processing of deferred insns
ending the processing of deferred insns


memset

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 5 [di] 17 [flags]
;;  ref usage 	r0={5d,4u} r1={2d,1u} r2={2d,1u} r5={1d,1u} r7={1d,8u} r17={2d} 
;;    total ref usage 28{13d,15u,0e} in 10{10 regular + 0 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
(note 6 1 22 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 22 6 2 2 (parallel [
            (set (reg:SI 0 ax [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(insn 2 22 4 2 (set (reg:SI 0 ax [85])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [0 c+0 S4 A32])) "lib/string.c":150:1 75 {*movsi_internal}
     (nil))
(insn 4 2 5 2 (set (mem/c:QI (reg/f:SI 7 sp) [0 c+0 S1 A32])
        (reg:QI 0 ax [86])) "lib/string.c":150:1 77 {*movqi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:QI 0 ax [87])
        (mem/c:QI (reg/f:SI 7 sp) [0 c+0 S1 A32])) "lib/string.c":151:2 77 {*movqi_internal}
     (nil))
(insn 9 8 10 2 (set (reg/f:SI 1 dx [88])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [3 s+0 S4 A32])) "lib/string.c":151:2 75 {*movsi_internal}
     (nil))
(insn 10 9 24 2 (set (reg:SI 2 cx [89])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [2 count+0 S4 A32])) "lib/string.c":151:2 75 {*movsi_internal}
     (nil))
(insn 24 10 11 2 (set (reg/f:SI 5 di [88])
        (reg/f:SI 1 dx [88])) "lib/string.c":151:2 75 {*movsi_internal}
     (nil))
(insn 11 24 12 2 (parallel [
            (asm_operands/v ("cld
	rep
	stosb") ("") 0 [
                    (reg:QI 0 ax [87])
                    (reg/f:SI 5 di [88])
                    (reg:SI 2 cx [89])
                ]
                 [
                    (asm_input:QI ("a") lib/string.c:151)
                    (asm_input:SI ("D") lib/string.c:151)
                    (asm_input:SI ("c") lib/string.c:151)
                ]
                 [] lib/string.c:151)
            (clobber (reg:CC 17 flags))
        ]) "lib/string.c":151:2 -1
     (nil))
(insn 12 11 20 2 (set (reg/f:SI 0 ax [orig:83 _4 ] [83])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [3 s+0 S4 A32])) "lib/string.c":156:9 75 {*movsi_internal}
     (nil))
(insn 20 12 23 2 (use (reg/i:SI 0 ax)) "lib/string.c":157:1 -1
     (nil))
(note 23 20 0 NOTE_INSN_DELETED)

;; Function memcpy (memcpy, funcdef_no=9, decl_uid=1029, cgraph_uid=10, symbol_order=10)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-4, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
            0 Small class reload: reject+=3
            1 Small class reload: reject+=3
            2 Small class reload: reject+=3
          alt=0,overall=27,losers=3,rld_nregs=3
	 Choosing alt 0 in insn 8:  (0) c  (1) S  (2) D
      Creating newreg=90 from oldreg=85, assigning class CREG to r90
      Creating newreg=91 from oldreg=86, assigning class SIREG to r91
      Creating newreg=92 from oldreg=87, assigning class DIREG to r92
    8: {asm_operands;clobber flags:CC;}
      REG_DEAD r87:SI
      REG_DEAD r86:SI
      REG_DEAD r85:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
   21: r90:SI=r85:SI
   22: r91:SI=r86:SI
   23: r92:SI=r87:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 17: point = 0, n_alt = -1
   Insn 16: point = 0, n_alt = -2
   Insn 12: point = 1, n_alt = -2
   Insn 9: point = 3, n_alt = 0
   Insn 8: point = 4, n_alt = 0
   Insn 23: point = 5, n_alt = -2
	Hard reg 3 is preferable by r92 with profit 1000
   Insn 22: point = 7, n_alt = -2
	Hard reg 1 is preferable by r91 with profit 1000
   Insn 21: point = 9, n_alt = -2
	Hard reg 0 is preferable by r90 with profit 1000
   Insn 7: point = 11, n_alt = 0
   Insn 6: point = 12, n_alt = 0
   Insn 5: point = 13, n_alt = 0
   Insn 19: point = 14, n_alt = 0
 r82: [14..14]
 r83: [2..3]
 r84: [0..1]
 r85: [10..13]
 r86: [8..12]
 r87: [6..11]
 r90: [4..9]
 r91: [4..7]
 r92: [4..5]
Compressing live ranges: from 15 to 13 - 86%
Ranges after the compression:
 r82: [12..12]
 r83: [2..3]
 r84: [0..1]
 r85: [10..11]
 r86: [8..11]
 r87: [6..11]
 r90: [4..9]
 r91: [4..7]
 r92: [4..5]

********** Assignment #1: **********

	 Assigning to 90 (cl=CREG, orig=85, freq=2000, tfirst=90, tfreq=2000)...
	   Assign 2 to reload r90 (freq=2000)
	 Assigning to 91 (cl=SIREG, orig=86, freq=2000, tfirst=91, tfreq=2000)...
	   Assign 4 to reload r91 (freq=2000)
	 Assigning to 92 (cl=DIREG, orig=87, freq=2000, tfirst=92, tfreq=2000)...
	   Assign 5 to reload r92 (freq=2000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=8)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=16)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
changing reg in insn 19
changing reg in insn 9
changing reg in insn 12
changing reg in insn 12
changing reg in insn 16
changing reg in insn 5
changing reg in insn 6
changing reg in insn 7
deleting insn with uid = 12.
deleting insn with uid = 16.
starting the processing of deferred insns
ending the processing of deferred insns


memcpy

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 17 [flags]
;;  ref usage 	r0={4d,3u} r1={2d,1u} r2={2d,1u} r3={1d,1u} r4={1d,1u} r5={1d,1u} r7={1d,6u} r17={2d} 
;;    total ref usage 28{14d,14u,0e} in 10{10 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 19 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 19 3 2 2 (parallel [
            (set (reg:SI 0 ax [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 19 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:SI 0 ax [85])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [2 n+0 S4 A32])) "lib/string.c":161:5 75 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (reg/f:SI 1 dx [86])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [3 src+0 S4 A32])) "lib/string.c":161:5 75 {*movsi_internal}
     (nil))
(insn 7 6 21 2 (set (reg/f:SI 3 bx [87])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [3 dest+0 S4 A32])) "lib/string.c":161:5 75 {*movsi_internal}
     (nil))
(insn 21 7 22 2 (set (reg:SI 2 cx [85])
        (reg:SI 0 ax [85])) "lib/string.c":161:5 75 {*movsi_internal}
     (nil))
(insn 22 21 23 2 (set (reg/f:SI 4 si [86])
        (reg/f:SI 1 dx [86])) "lib/string.c":161:5 75 {*movsi_internal}
     (nil))
(insn 23 22 8 2 (set (reg/f:SI 5 di [87])
        (reg/f:SI 3 bx [87])) "lib/string.c":161:5 75 {*movsi_internal}
     (nil))
(insn 8 23 9 2 (parallel [
            (asm_operands/v ("cld
	rep
	movsb") ("") 0 [
                    (reg:SI 2 cx [85])
                    (reg/f:SI 4 si [86])
                    (reg/f:SI 5 di [87])
                ]
                 [
                    (asm_input:SI ("c") lib/string.c:161)
                    (asm_input:SI ("S") lib/string.c:161)
                    (asm_input:SI ("D") lib/string.c:161)
                ]
                 [] lib/string.c:161)
            (clobber (reg:CC 17 flags))
        ]) "lib/string.c":161:5 -1
     (nil))
(insn 9 8 17 2 (set (reg/f:SI 0 ax [orig:83 _4 ] [83])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [3 dest+0 S4 A32])) "lib/string.c":165:12 75 {*movsi_internal}
     (nil))
(insn 17 9 20 2 (use (reg/i:SI 0 ax)) "lib/string.c":166:1 -1
     (nil))
(note 20 17 0 NOTE_INSN_DELETED)

;; Function strrchr (strrchr, funcdef_no=10, decl_uid=1080, cgraph_uid=11, symbol_order=11)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=12, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=4, prev_offset=0)
Can eliminate 19 to 6 (offset=-4, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 2:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 3:  (0) =Q  (1) Q {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=7,overall=27,losers=2 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 4:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 11:  (0) q  (1) m {*movqi_internal}
            2 Small class reload: reject+=3
          alt=0,overall=9,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 12:  (0) =d  (1) 0  (2) S  (3) a
      Creating newreg=94 from oldreg=90, assigning class SIREG to r94
   12: {r88:SI=asm_operands;clobber flags:CC;}
      REG_DEAD r91:QI
      REG_DEAD r90:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
   26: r94:SI=r90:SI

	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 21: point = 0, n_alt = -1
   Insn 20: point = 0, n_alt = -2
   Insn 16: point = 1, n_alt = -2
   Insn 13: point = 3, n_alt = -2
   Insn 8: point = 5, n_alt = -2
   Insn 12: point = 7, n_alt = 0
   Insn 26: point = 9, n_alt = -2
	Hard reg 2 is preferable by r94 with profit 1000
   Insn 23: point = 11, n_alt = -2
   Insn 11: point = 13, n_alt = 4
   Insn 10: point = 14, n_alt = 0
   Insn 9: point = 15, n_alt = 0
   Insn 4: point = 16, n_alt = 8
   Insn 3: point = 17, n_alt = 0
   Insn 2: point = 19, n_alt = 0
   Insn 24: point = 20, n_alt = 0
 r82: [20..20]
 r83: [4..5]
 r84: [2..3]
 r85: [0..1]
 r86: [18..19]
 r87: [16..17]
 r88: [6..11]
 r89: [12..15]
 r90: [10..14]
 r91: [8..13]
 r94: [8..9]
Compressing live ranges: from 21 to 17 - 80%
Ranges after the compression:
 r82: [16..16]
 r83: [4..5]
 r84: [2..3]
 r85: [0..1]
 r86: [14..15]
 r87: [12..13]
 r88: [6..9]
 r89: [10..11]
 r90: [8..11]
 r91: [6..11]
 r94: [6..7]

********** Assignment #1: **********

	 Assigning to 94 (cl=SIREG, orig=90, freq=2000, tfirst=94, tfreq=2000)...
	   Assign 4 to reload r94 (freq=2000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=12)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=4, prev_offset=4)
Can eliminate 19 to 6 (offset=-8, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 2:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=16)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=4, prev_offset=4)
Can eliminate 19 to 6 (offset=-8, prev_offset=0)
changing reg in insn 24
changing reg in insn 8
changing reg in insn 13
changing reg in insn 13
changing reg in insn 16
changing reg in insn 16
changing reg in insn 20
changing reg in insn 2
changing reg in insn 3
changing reg in insn 4
changing reg in insn 23
changing reg in insn 12
changing reg in insn 12
changing reg in insn 8
changing reg in insn 9
changing reg in insn 23
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
deleting insn with uid = 3.
deleting insn with uid = 23.
deleting insn with uid = 16.
deleting insn with uid = 20.
starting the processing of deferred insns
ending the processing of deferred insns


strrchr

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 17 [flags]
;;  ref usage 	r0={5d,4u} r1={3d,2u} r2={2d,1u} r3={1d,1u} r4={1d,1u} r7={1d,6u} r17={2d} 
;;    total ref usage 30{15d,15u,0e} in 11{11 regular + 0 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
(note 6 1 24 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 24 6 2 2 (parallel [
            (set (reg:SI 0 ax [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(insn 2 24 4 2 (set (reg:SI 0 ax [86])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [0 c+0 S4 A32])) "lib/string.c":170:1 75 {*movsi_internal}
     (nil))
(insn 4 2 5 2 (set (mem/c:QI (reg/f:SI 7 sp) [0 c+0 S1 A32])
        (reg:QI 0 ax [87])) "lib/string.c":170:1 77 {*movqi_internal}
     (nil))
(note 5 4 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 5 10 2 (set (reg:SI 1 dx [89])
        (const_int 0 [0])) "lib/string.c":172:9 75 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (set (reg/f:SI 2 cx [90])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [1 s+0 S4 A32])) "lib/string.c":172:9 75 {*movsi_internal}
     (nil))
(insn 11 10 26 2 (set (reg:QI 0 ax [91])
        (mem/c:QI (reg/f:SI 7 sp) [0 c+0 S1 A32])) "lib/string.c":172:9 77 {*movqi_internal}
     (nil))
(insn 26 11 12 2 (set (reg/f:SI 4 si [90])
        (reg/f:SI 2 cx [90])) "lib/string.c":172:9 75 {*movsi_internal}
     (nil))
(insn 12 26 8 2 (parallel [
            (set (reg:SI 1 dx [orig:88 __res ] [88])
                (asm_operands:SI ("cld
	movb %%al,%%ah
1:	lodsb
	cmpb %%ah,%%al
	jne 2f
	movl %%esi,%0
	decl %0
2:	testb %%al,%%al
	jne 1b") ("=d") 0 [
                        (reg:SI 1 dx [orig:88 __res ] [88])
                        (reg/f:SI 4 si [90])
                        (reg:QI 0 ax [91])
                    ]
                     [
                        (asm_input:SI ("0") lib/string.c:172)
                        (asm_input:SI ("S") lib/string.c:172)
                        (asm_input:QI ("a") lib/string.c:172)
                    ]
                     [] lib/string.c:172))
            (clobber (reg:CC 17 flags))
        ]) "lib/string.c":172:9 -1
     (nil))
(insn 8 12 13 2 (set (reg/v/f:SI 3 bx [orig:83 __res ] [83])
        (reg:SI 1 dx [orig:88 __res ] [88])) "lib/string.c":172:9 75 {*movsi_internal}
     (nil))
(insn 13 8 21 2 (set (reg/f:SI 0 ax [orig:84 _4 ] [84])
        (reg/v/f:SI 3 bx [orig:83 __res ] [83])) "lib/string.c":182:16 75 {*movsi_internal}
     (nil))
(insn 21 13 25 2 (use (reg/i:SI 0 ax)) "lib/string.c":183:1 -1
     (nil))
(note 25 21 0 NOTE_INSN_DELETED)

;; Function strspn (strspn, funcdef_no=11, decl_uid=1085, cgraph_uid=12, symbol_order=12)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-4, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
            3 Small class reload: reject+=3
          alt=0,overall=28,losers=3,rld_nregs=3
	 Choosing alt 0 in insn 9:  (0) =S  (1) a  (2) c  (3) 0  (4) g
      Creating newreg=92 from oldreg=86, assigning class SIREG to r92
      Creating newreg=93 from oldreg=87, assigning class AREG to r93
    9: {r92:SI=asm_operands;clobber flags:CC;}
      REG_DEAD r88:SI
      REG_DEAD r87:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
   23: r92:SI=r86:SI
   25: r93:SI=r87:SI
    Inserting insn reload after:
   24: r86:SI=r92:SI

            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=15,losers=2,rld_nregs=2
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 1 in insn 10:  (0) r  (1) 0  (2) m {*subsi_1}
      Creating newreg=94 from oldreg=83, assigning class GENERAL_REGS to r94
   10: {r94:SI=r94:SI-[argp:SI+0x8];clobber flags:CC;}
      REG_DEAD r83:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
   26: r94:SI=r83:SI
    Inserting insn reload after:
   27: r84:SI=r94:SI

	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 18: point = 0, n_alt = -1
   Insn 17: point = 0, n_alt = -2
   Insn 13: point = 1, n_alt = -2
   Insn 27: point = 3, n_alt = -2
	Hard reg 0 is preferable by r94 with profit 1000
   Insn 10: point = 5, n_alt = 1
   Insn 26: point = 6, n_alt = -2
	Hard reg 0 is preferable by r94 with profit 1000
	Hard reg 3 is preferable by r94 with profit 1000
   Insn 5: point = 8, n_alt = -2
   Insn 24: point = 10, n_alt = -2
	Hard reg 1 is preferable by r92 with profit 1000
   Insn 9: point = 12, n_alt = 0
   Insn 25: point = 14, n_alt = -2
	Hard reg 3 is preferable by r93 with profit 1000
   Insn 23: point = 16, n_alt = -2
	Hard reg 1 is preferable by r92 with profit 2000
   Insn 20: point = 18, n_alt = -2
   Insn 8: point = 20, n_alt = 0
   Insn 7: point = 21, n_alt = 0
   Insn 6: point = 22, n_alt = 0
   Insn 21: point = 23, n_alt = 0
 r82: [23..23]
 r83: [7..8]
 r84: [2..3]
 r85: [0..1]
 r86: [17..18] [9..10]
 r87: [15..22]
 r88: [13..21]
 r89: [19..20]
 r92: [11..16]
 r93: [13..14]
 r94: [4..6]
Compressing live ranges: from 24 to 19 - 79%
Ranges after the compression:
 r82: [18..18]
 r83: [6..7]
 r84: [2..3]
 r85: [0..1]
 r86: [14..15] [8..9]
 r87: [12..17]
 r88: [10..17]
 r89: [16..17]
 r92: [10..13]
 r93: [10..11]
 r94: [4..5]

********** Assignment #1: **********

	 Assigning to 92 (cl=SIREG, orig=86, freq=3000, tfirst=92, tfreq=3000)...
	   Assign 4 to reload r92 (freq=3000)
	 Assigning to 93 (cl=AREG, orig=87, freq=2000, tfirst=93, tfreq=2000)...
	   Assign 0 to reload r93 (freq=2000)
	 Assigning to 94 (cl=GENERAL_REGS, orig=83, freq=3000, tfirst=94, tfreq=3000)...
	   Assign 0 to reload r94 (freq=3000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=12, prev_offset=8)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-8, prev_offset=0)
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) r  (1) 0  (2) m {*subsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =S  (1) a  (2) c  (3) 0  (4) g
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=12, prev_offset=12)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-8, prev_offset=0)
changing reg in insn 21
changing reg in insn 5
changing reg in insn 13
changing reg in insn 13
changing reg in insn 17
changing reg in insn 20
changing reg in insn 5
changing reg in insn 6
changing reg in insn 7
changing reg in insn 9
changing reg in insn 8
changing reg in insn 20
deleting insn with uid = 27.
deleting insn with uid = 13.
deleting insn with uid = 17.
starting the processing of deferred insns
ending the processing of deferred insns


strspn

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 17 [flags]
;;  ref usage 	r0={6d,5u} r1={3d,2u} r2={2d,1u} r3={2d,2u} r4={2d,2u} r7={1d,5u} r17={3d} 
;;    total ref usage 36{19d,17u,0e} in 13{13 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 21 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 21 3 2 2 (parallel [
            (set (reg:SI 0 ax [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 21 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 2 7 2 (set (reg:SI 3 bx [87])
        (const_int 0 [0])) "lib/string.c":188:9 75 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:SI 2 cx [88])
        (const_int -1 [0xffffffffffffffff])) "lib/string.c":188:9 75 {*movsi_internal}
     (nil))
(insn 8 7 20 2 (set (reg/f:SI 0 ax [89])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [1 cs+0 S4 A32])) "lib/string.c":188:9 75 {*movsi_internal}
     (nil))
(insn 20 8 23 2 (set (reg:SI 1 dx [orig:86 __res ] [86])
        (reg/f:SI 0 ax [89])) "lib/string.c":188:9 75 {*movsi_internal}
     (nil))
(insn 23 20 25 2 (set (reg:SI 4 si [orig:86 __res ] [86])
        (reg:SI 1 dx [orig:86 __res ] [86])) "lib/string.c":188:9 75 {*movsi_internal}
     (nil))
(insn 25 23 9 2 (set (reg:SI 0 ax [87])
        (reg:SI 3 bx [87])) "lib/string.c":188:9 75 {*movsi_internal}
     (nil))
(insn 9 25 24 2 (parallel [
            (set (reg:SI 4 si [orig:86 __res ] [86])
                (asm_operands:SI ("cld
	movl %4,%%edi
	repne
	scasb
	notl %%ecx
	decl %%ecx
	movl %%ecx,%%edx
1:	lodsb
	testb %%al,%%al
	je 2f
	movl %4,%%edi
	movl %%edx,%%ecx
	repne
	scasb
	je 1b
2:	decl %0") ("=S") 0 [
                        (reg:SI 0 ax [87])
                        (reg:SI 2 cx [88])
                        (reg:SI 4 si [orig:86 __res ] [86])
                        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                                (const_int 16 [0x10])) [1 ct+0 S4 A32])
                    ]
                     [
                        (asm_input:SI ("a") lib/string.c:188)
                        (asm_input:SI ("c") lib/string.c:188)
                        (asm_input:SI ("0") lib/string.c:188)
                        (asm_input:SI ("g") lib/string.c:188)
                    ]
                     [] lib/string.c:188))
            (clobber (reg:CC 17 flags))
        ]) "lib/string.c":188:9 -1
     (nil))
(insn 24 9 5 2 (set (reg:SI 1 dx [orig:86 __res ] [86])
        (reg:SI 4 si [orig:86 __res ] [86])) "lib/string.c":188:9 75 {*movsi_internal}
     (nil))
(insn 5 24 26 2 (set (reg/v/f:SI 3 bx [orig:83 __res ] [83])
        (reg:SI 1 dx [orig:86 __res ] [86])) "lib/string.c":188:9 75 {*movsi_internal}
     (nil))
(insn 26 5 10 2 (set (reg/v/f:SI 0 ax [orig:83 __res ] [83])
        (reg/v/f:SI 3 bx [orig:83 __res ] [83])) "lib/string.c":206:21 75 {*movsi_internal}
     (nil))
(insn 10 26 18 2 (parallel [
            (set (reg/v/f:SI 0 ax [orig:83 __res ] [83])
                (minus:SI (reg/v/f:SI 0 ax [orig:83 __res ] [83])
                    (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 12 [0xc])) [1 cs+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) "lib/string.c":206:21 282 {*subsi_1}
     (nil))
(insn 18 10 22 2 (use (reg/i:SI 0 ax)) "lib/string.c":207:1 -1
     (nil))
(note 22 18 0 NOTE_INSN_DELETED)

;; Function strcspn (strcspn, funcdef_no=12, decl_uid=1090, cgraph_uid=13, symbol_order=13)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-4, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
            3 Small class reload: reject+=3
          alt=0,overall=28,losers=3,rld_nregs=3
	 Choosing alt 0 in insn 9:  (0) =S  (1) a  (2) c  (3) 0  (4) g
      Creating newreg=92 from oldreg=86, assigning class SIREG to r92
      Creating newreg=93 from oldreg=87, assigning class AREG to r93
    9: {r92:SI=asm_operands;clobber flags:CC;}
      REG_DEAD r88:SI
      REG_DEAD r87:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
   23: r92:SI=r86:SI
   25: r93:SI=r87:SI
    Inserting insn reload after:
   24: r86:SI=r92:SI

            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=15,losers=2,rld_nregs=2
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 1 in insn 10:  (0) r  (1) 0  (2) m {*subsi_1}
      Creating newreg=94 from oldreg=83, assigning class GENERAL_REGS to r94
   10: {r94:SI=r94:SI-[argp:SI+0x8];clobber flags:CC;}
      REG_DEAD r83:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
   26: r94:SI=r83:SI
    Inserting insn reload after:
   27: r84:SI=r94:SI

	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 18: point = 0, n_alt = -1
   Insn 17: point = 0, n_alt = -2
   Insn 13: point = 1, n_alt = -2
   Insn 27: point = 3, n_alt = -2
	Hard reg 0 is preferable by r94 with profit 1000
   Insn 10: point = 5, n_alt = 1
   Insn 26: point = 6, n_alt = -2
	Hard reg 0 is preferable by r94 with profit 1000
	Hard reg 3 is preferable by r94 with profit 1000
   Insn 5: point = 8, n_alt = -2
   Insn 24: point = 10, n_alt = -2
	Hard reg 1 is preferable by r92 with profit 1000
   Insn 9: point = 12, n_alt = 0
   Insn 25: point = 14, n_alt = -2
	Hard reg 3 is preferable by r93 with profit 1000
   Insn 23: point = 16, n_alt = -2
	Hard reg 1 is preferable by r92 with profit 2000
   Insn 20: point = 18, n_alt = -2
   Insn 8: point = 20, n_alt = 0
   Insn 7: point = 21, n_alt = 0
   Insn 6: point = 22, n_alt = 0
   Insn 21: point = 23, n_alt = 0
 r82: [23..23]
 r83: [7..8]
 r84: [2..3]
 r85: [0..1]
 r86: [17..18] [9..10]
 r87: [15..22]
 r88: [13..21]
 r89: [19..20]
 r92: [11..16]
 r93: [13..14]
 r94: [4..6]
Compressing live ranges: from 24 to 19 - 79%
Ranges after the compression:
 r82: [18..18]
 r83: [6..7]
 r84: [2..3]
 r85: [0..1]
 r86: [14..15] [8..9]
 r87: [12..17]
 r88: [10..17]
 r89: [16..17]
 r92: [10..13]
 r93: [10..11]
 r94: [4..5]

********** Assignment #1: **********

	 Assigning to 92 (cl=SIREG, orig=86, freq=3000, tfirst=92, tfreq=3000)...
	   Assign 4 to reload r92 (freq=3000)
	 Assigning to 93 (cl=AREG, orig=87, freq=2000, tfirst=93, tfreq=2000)...
	   Assign 0 to reload r93 (freq=2000)
	 Assigning to 94 (cl=GENERAL_REGS, orig=83, freq=3000, tfirst=94, tfreq=3000)...
	   Assign 0 to reload r94 (freq=3000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=12, prev_offset=8)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-8, prev_offset=0)
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) r  (1) 0  (2) m {*subsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =S  (1) a  (2) c  (3) 0  (4) g
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=12, prev_offset=12)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-8, prev_offset=0)
changing reg in insn 21
changing reg in insn 5
changing reg in insn 13
changing reg in insn 13
changing reg in insn 17
changing reg in insn 20
changing reg in insn 5
changing reg in insn 6
changing reg in insn 7
changing reg in insn 9
changing reg in insn 8
changing reg in insn 20
deleting insn with uid = 27.
deleting insn with uid = 13.
deleting insn with uid = 17.
starting the processing of deferred insns
ending the processing of deferred insns


strcspn

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 17 [flags]
;;  ref usage 	r0={6d,5u} r1={3d,2u} r2={2d,1u} r3={2d,2u} r4={2d,2u} r7={1d,5u} r17={3d} 
;;    total ref usage 36{19d,17u,0e} in 13{13 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 21 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 21 3 2 2 (parallel [
            (set (reg:SI 0 ax [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 21 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 2 7 2 (set (reg:SI 3 bx [87])
        (const_int 0 [0])) "lib/string.c":212:9 75 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:SI 2 cx [88])
        (const_int -1 [0xffffffffffffffff])) "lib/string.c":212:9 75 {*movsi_internal}
     (nil))
(insn 8 7 20 2 (set (reg/f:SI 0 ax [89])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [1 cs+0 S4 A32])) "lib/string.c":212:9 75 {*movsi_internal}
     (nil))
(insn 20 8 23 2 (set (reg:SI 1 dx [orig:86 __res ] [86])
        (reg/f:SI 0 ax [89])) "lib/string.c":212:9 75 {*movsi_internal}
     (nil))
(insn 23 20 25 2 (set (reg:SI 4 si [orig:86 __res ] [86])
        (reg:SI 1 dx [orig:86 __res ] [86])) "lib/string.c":212:9 75 {*movsi_internal}
     (nil))
(insn 25 23 9 2 (set (reg:SI 0 ax [87])
        (reg:SI 3 bx [87])) "lib/string.c":212:9 75 {*movsi_internal}
     (nil))
(insn 9 25 24 2 (parallel [
            (set (reg:SI 4 si [orig:86 __res ] [86])
                (asm_operands:SI ("cld
	movl %4,%%edi
	repne
	scasb
	notl %%ecx
	decl %%ecx
	movl %%ecx,%%edx
1:	lodsb
	testb %%al,%%al
	je 2f
	movl %4,%%edi
	movl %%edx,%%ecx
	repne
	scasb
	jne 1b
2:	decl %0") ("=S") 0 [
                        (reg:SI 0 ax [87])
                        (reg:SI 2 cx [88])
                        (reg:SI 4 si [orig:86 __res ] [86])
                        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                                (const_int 16 [0x10])) [1 ct+0 S4 A32])
                    ]
                     [
                        (asm_input:SI ("a") lib/string.c:212)
                        (asm_input:SI ("c") lib/string.c:212)
                        (asm_input:SI ("0") lib/string.c:212)
                        (asm_input:SI ("g") lib/string.c:212)
                    ]
                     [] lib/string.c:212))
            (clobber (reg:CC 17 flags))
        ]) "lib/string.c":212:9 -1
     (nil))
(insn 24 9 5 2 (set (reg:SI 1 dx [orig:86 __res ] [86])
        (reg:SI 4 si [orig:86 __res ] [86])) "lib/string.c":212:9 75 {*movsi_internal}
     (nil))
(insn 5 24 26 2 (set (reg/v/f:SI 3 bx [orig:83 __res ] [83])
        (reg:SI 1 dx [orig:86 __res ] [86])) "lib/string.c":212:9 75 {*movsi_internal}
     (nil))
(insn 26 5 10 2 (set (reg/v/f:SI 0 ax [orig:83 __res ] [83])
        (reg/v/f:SI 3 bx [orig:83 __res ] [83])) "lib/string.c":230:21 75 {*movsi_internal}
     (nil))
(insn 10 26 18 2 (parallel [
            (set (reg/v/f:SI 0 ax [orig:83 __res ] [83])
                (minus:SI (reg/v/f:SI 0 ax [orig:83 __res ] [83])
                    (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 12 [0xc])) [1 cs+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) "lib/string.c":230:21 282 {*subsi_1}
     (nil))
(insn 18 10 22 2 (use (reg/i:SI 0 ax)) "lib/string.c":231:1 -1
     (nil))
(note 22 18 0 NOTE_INSN_DELETED)

;; Function strpbrk (strpbrk, funcdef_no=13, decl_uid=1095, cgraph_uid=14, symbol_order=14)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-4, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
            3 Small class reload: reject+=3
          alt=0,overall=28,losers=3,rld_nregs=3
	 Choosing alt 0 in insn 9:  (0) =S  (1) a  (2) c  (3) 0  (4) g
      Creating newreg=92 from oldreg=86, assigning class SIREG to r92
      Creating newreg=93 from oldreg=87, assigning class AREG to r93
    9: {r92:SI=asm_operands;clobber flags:CC;}
      REG_DEAD r88:SI
      REG_DEAD r87:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
   23: r92:SI=r86:SI
   25: r93:SI=r87:SI
    Inserting insn reload after:
   24: r86:SI=r92:SI

	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 18: point = 0, n_alt = -1
   Insn 17: point = 0, n_alt = -2
   Insn 13: point = 1, n_alt = -2
   Insn 10: point = 3, n_alt = -2
   Insn 5: point = 5, n_alt = -2
   Insn 24: point = 7, n_alt = -2
	Hard reg 1 is preferable by r92 with profit 1000
   Insn 9: point = 9, n_alt = 0
   Insn 25: point = 11, n_alt = -2
	Hard reg 3 is preferable by r93 with profit 1000
   Insn 23: point = 13, n_alt = -2
	Hard reg 1 is preferable by r92 with profit 2000
   Insn 20: point = 15, n_alt = -2
   Insn 8: point = 17, n_alt = 0
   Insn 7: point = 18, n_alt = 0
   Insn 6: point = 19, n_alt = 0
   Insn 21: point = 20, n_alt = 0
 r82: [20..20]
 r83: [4..5]
 r84: [2..3]
 r85: [0..1]
 r86: [14..15] [6..7]
 r87: [12..19]
 r88: [10..18]
 r89: [16..17]
 r92: [8..13]
 r93: [10..11]
Compressing live ranges: from 21 to 17 - 80%
Ranges after the compression:
 r82: [16..16]
 r83: [4..5]
 r84: [2..3]
 r85: [0..1]
 r86: [12..13] [6..7]
 r87: [10..15]
 r88: [8..15]
 r89: [14..15]
 r92: [8..11]
 r93: [8..9]

********** Assignment #1: **********

	 Assigning to 92 (cl=SIREG, orig=86, freq=3000, tfirst=92, tfreq=3000)...
	   Assign 4 to reload r92 (freq=3000)
	 Assigning to 93 (cl=AREG, orig=87, freq=2000, tfirst=93, tfreq=2000)...
	   Assign 0 to reload r93 (freq=2000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=12, prev_offset=8)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-8, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =S  (1) a  (2) c  (3) 0  (4) g
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=12, prev_offset=12)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-8, prev_offset=0)
changing reg in insn 21
changing reg in insn 5
changing reg in insn 10
changing reg in insn 10
changing reg in insn 13
changing reg in insn 13
changing reg in insn 17
changing reg in insn 20
changing reg in insn 5
changing reg in insn 6
changing reg in insn 7
changing reg in insn 9
changing reg in insn 8
changing reg in insn 20
deleting insn with uid = 13.
deleting insn with uid = 17.
starting the processing of deferred insns
ending the processing of deferred insns


strpbrk

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 17 [flags]
;;  ref usage 	r0={5d,4u} r1={3d,2u} r2={2d,1u} r3={2d,2u} r4={2d,2u} r7={1d,4u} r17={2d} 
;;    total ref usage 32{17d,15u,0e} in 12{12 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 21 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 21 3 2 2 (parallel [
            (set (reg:SI 0 ax [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 21 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 2 7 2 (set (reg:SI 3 bx [87])
        (const_int 0 [0])) "lib/string.c":236:9 75 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:SI 2 cx [88])
        (const_int -1 [0xffffffffffffffff])) "lib/string.c":236:9 75 {*movsi_internal}
     (nil))
(insn 8 7 20 2 (set (reg/f:SI 0 ax [89])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [1 cs+0 S4 A32])) "lib/string.c":236:9 75 {*movsi_internal}
     (nil))
(insn 20 8 23 2 (set (reg:SI 1 dx [orig:86 __res ] [86])
        (reg/f:SI 0 ax [89])) "lib/string.c":236:9 75 {*movsi_internal}
     (nil))
(insn 23 20 25 2 (set (reg:SI 4 si [orig:86 __res ] [86])
        (reg:SI 1 dx [orig:86 __res ] [86])) "lib/string.c":236:9 75 {*movsi_internal}
     (nil))
(insn 25 23 9 2 (set (reg:SI 0 ax [87])
        (reg:SI 3 bx [87])) "lib/string.c":236:9 75 {*movsi_internal}
     (nil))
(insn 9 25 24 2 (parallel [
            (set (reg:SI 4 si [orig:86 __res ] [86])
                (asm_operands:SI ("cld
	movl %4,%%edi
	repne
	scasb
	notl %%ecx
	decl %%ecx
	movl %%ecx,%%edx
1:	lodsb
	testb %%al,%%al
	je 2f
	movl %4,%%edi
	movl %%edx,%%ecx
	repne
	scasb
	jne 1b
	decl %0
	jmp 3f
2:	xorl %0,%0
3:") ("=S") 0 [
                        (reg:SI 0 ax [87])
                        (reg:SI 2 cx [88])
                        (reg:SI 4 si [orig:86 __res ] [86])
                        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                                (const_int 16 [0x10])) [1 ct+0 S4 A32])
                    ]
                     [
                        (asm_input:SI ("a") lib/string.c:236)
                        (asm_input:SI ("c") lib/string.c:236)
                        (asm_input:SI ("0") lib/string.c:236)
                        (asm_input:SI ("g") lib/string.c:236)
                    ]
                     [] lib/string.c:236))
            (clobber (reg:CC 17 flags))
        ]) "lib/string.c":236:9 -1
     (nil))
(insn 24 9 5 2 (set (reg:SI 1 dx [orig:86 __res ] [86])
        (reg:SI 4 si [orig:86 __res ] [86])) "lib/string.c":236:9 75 {*movsi_internal}
     (nil))
(insn 5 24 10 2 (set (reg/v/f:SI 3 bx [orig:83 __res ] [83])
        (reg:SI 1 dx [orig:86 __res ] [86])) "lib/string.c":236:9 75 {*movsi_internal}
     (nil))
(insn 10 5 18 2 (set (reg/f:SI 0 ax [orig:84 _4 ] [84])
        (reg/v/f:SI 3 bx [orig:83 __res ] [83])) "lib/string.c":257:16 75 {*movsi_internal}
     (nil))
(insn 18 10 22 2 (use (reg/i:SI 0 ax)) "lib/string.c":258:1 -1
     (nil))
(note 22 18 0 NOTE_INSN_DELETED)

;; Function strstr (strstr, funcdef_no=14, decl_uid=1100, cgraph_uid=15, symbol_order=15)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-4, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
            3 Small class reload: reject+=3
          alt=0,overall=9,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 9:  (0) =a  (1) 0  (2) c  (3) S  (4) g
      Creating newreg=92 from oldreg=89, assigning class SIREG to r92
    9: {r86:SI=asm_operands;clobber flags:CC;}
      REG_DEAD r89:SI
      REG_DEAD r88:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
   23: r92:SI=r89:SI

	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 18: point = 0, n_alt = -1
   Insn 17: point = 0, n_alt = -2
   Insn 13: point = 1, n_alt = -2
   Insn 10: point = 3, n_alt = -2
   Insn 5: point = 5, n_alt = -2
   Insn 9: point = 7, n_alt = 0
   Insn 23: point = 9, n_alt = -2
	Hard reg 1 is preferable by r92 with profit 1000
   Insn 20: point = 11, n_alt = -2
   Insn 8: point = 13, n_alt = 0
   Insn 7: point = 14, n_alt = 0
   Insn 6: point = 15, n_alt = 0
   Insn 21: point = 16, n_alt = 0
 r82: [16..16]
 r83: [4..5]
 r84: [2..3]
 r85: [0..1]
 r86: [6..11]
 r87: [12..15]
 r88: [8..14]
 r89: [10..13]
 r92: [8..9]
Compressing live ranges: from 17 to 13 - 76%
Ranges after the compression:
 r82: [12..12]
 r83: [4..5]
 r84: [2..3]
 r85: [0..1]
 r86: [6..9]
 r87: [10..11]
 r88: [6..11]
 r89: [8..11]
 r92: [6..7]

********** Assignment #1: **********

	 Assigning to 92 (cl=SIREG, orig=89, freq=2000, tfirst=92, tfreq=2000)...
	   Assign 4 to reload r92 (freq=2000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=12, prev_offset=8)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-8, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =a  (1) 0  (2) c  (3) S  (4) g
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=12, prev_offset=12)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-8, prev_offset=0)
changing reg in insn 21
changing reg in insn 5
changing reg in insn 10
changing reg in insn 10
changing reg in insn 13
changing reg in insn 13
changing reg in insn 17
changing reg in insn 20
changing reg in insn 9
changing reg in insn 9
changing reg in insn 5
changing reg in insn 6
changing reg in insn 20
changing reg in insn 7
changing reg in insn 9
changing reg in insn 8
deleting insn with uid = 20.
deleting insn with uid = 13.
deleting insn with uid = 17.
starting the processing of deferred insns
ending the processing of deferred insns


strstr

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 17 [flags]
;;  ref usage 	r0={5d,4u} r1={2d,1u} r2={2d,1u} r3={1d,1u} r4={1d,1u} r7={1d,4u} r17={2d} 
;;    total ref usage 26{14d,12u,0e} in 9{9 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 21 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 21 3 2 2 (parallel [
            (set (reg:SI 0 ax [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 21 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 2 7 2 (set (reg:SI 0 ax [87])
        (const_int 0 [0])) "lib/string.c":263:9 75 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:SI 2 cx [88])
        (const_int -1 [0xffffffffffffffff])) "lib/string.c":263:9 75 {*movsi_internal}
     (nil))
(insn 8 7 23 2 (set (reg/f:SI 1 dx [89])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [1 cs+0 S4 A32])) "lib/string.c":263:9 75 {*movsi_internal}
     (nil))
(insn 23 8 9 2 (set (reg/f:SI 4 si [89])
        (reg/f:SI 1 dx [89])) "lib/string.c":263:9 75 {*movsi_internal}
     (nil))
(insn 9 23 5 2 (parallel [
            (set (reg:SI 0 ax [orig:86 __res ] [86])
                (asm_operands:SI ("cld
	movl %4,%%edi
	repne
	scasb
	notl %%ecx
	decl %%ecx
	movl %%ecx,%%edx
1:	movl %4,%%edi
	movl %%esi,%%eax
	movl %%edx,%%ecx
	repe
	cmpsb
	je 2f
	xchgl %%eax,%%esi
	incl %%esi
	cmpb $0,-1(%%eax)
	jne 1b
	xorl %%eax,%%eax
	2:") ("=a") 0 [
                        (reg:SI 0 ax [orig:86 __res ] [86])
                        (reg:SI 2 cx [88])
                        (reg/f:SI 4 si [89])
                        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                                (const_int 16 [0x10])) [1 ct+0 S4 A32])
                    ]
                     [
                        (asm_input:SI ("0") lib/string.c:263)
                        (asm_input:SI ("c") lib/string.c:263)
                        (asm_input:SI ("S") lib/string.c:263)
                        (asm_input:SI ("g") lib/string.c:263)
                    ]
                     [] lib/string.c:263))
            (clobber (reg:CC 17 flags))
        ]) "lib/string.c":263:9 -1
     (nil))
(insn 5 9 10 2 (set (reg/v/f:SI 3 bx [orig:83 __res ] [83])
        (reg:SI 0 ax [orig:86 __res ] [86])) "lib/string.c":263:9 75 {*movsi_internal}
     (nil))
(insn 10 5 18 2 (set (reg/f:SI 0 ax [orig:84 _4 ] [84])
        (reg/v/f:SI 3 bx [orig:83 __res ] [83])) "lib/string.c":284:16 75 {*movsi_internal}
     (nil))
(insn 18 10 22 2 (use (reg/i:SI 0 ax)) "lib/string.c":285:1 -1
     (nil))
(note 22 18 0 NOTE_INSN_DELETED)

;; Function strtok (strtok, funcdef_no=15, decl_uid=1105, cgraph_uid=16, symbol_order=16)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-4, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
            1 Non input pseudo reload: reject++
            2 Small class reload: reject+=3
            3 Small class reload: reject+=3
          alt=0,overall=38,losers=4,rld_nregs=4
	 Choosing alt 0 in insn 9:  (0) =b  (1) =S  (2) 0  (3) 1  (4) g
      Creating newreg=92 from oldreg=87, assigning class BREG to r92
      Creating newreg=93 from oldreg=88, assigning class SIREG to r93
    9: {r92:SI=asm_operands;r93:SI=asm_operands;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
   24: r92:SI=r87:SI
   26: r93:SI=r88:SI
    Inserting insn reload after:
   27: r88:SI=r93:SI
   25: r87:SI=r92:SI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) m  (1) re {*movsi_internal}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 18: point = 0, n_alt = -1
   Insn 17: point = 0, n_alt = -2
   Insn 13: point = 1, n_alt = -2
   Insn 10: point = 3, n_alt = -2
   Insn 7: point = 5, n_alt = 1
   Insn 6: point = 6, n_alt = -2
   Insn 25: point = 8, n_alt = -2
	Hard reg 1 is preferable by r92 with profit 1000
   Insn 27: point = 10, n_alt = -2
	Hard reg 0 is preferable by r93 with profit 1000
   Insn 9: point = 12, n_alt = 0
   Insn 26: point = 13, n_alt = -2
	Hard reg 0 is preferable by r93 with profit 2000
   Insn 24: point = 15, n_alt = -2
	Hard reg 1 is preferable by r92 with profit 2000
   Insn 21: point = 17, n_alt = -2
   Insn 20: point = 19, n_alt = -2
   Insn 8: point = 21, n_alt = 0
   Insn 5: point = 22, n_alt = 0
   Insn 22: point = 23, n_alt = 0
 r82: [5..23]
 r83: [20..22]
 r84: [4..6]
 r85: [2..3]
 r86: [0..1]
 r87: [16..19] [7..8]
 r88: [14..17] [5..10]
 r89: [18..21]
 r92: [9..15]
 r93: [11..13]
Compressing live ranges: from 24 to 20 - 83%
Ranges after the compression:
 r82: [4..19]
 r83: [18..19]
 r84: [4..5]
 r85: [2..3]
 r86: [0..1]
 r87: [14..17] [6..7]
 r88: [12..15] [4..9]
 r89: [16..19]
 r92: [8..13]
 r93: [10..11]

********** Assignment #1: **********

	 Assigning to 92 (cl=BREG, orig=87, freq=3000, tfirst=92, tfreq=3000)...
	   Assign 3 to reload r92 (freq=3000)
	 Assigning to 93 (cl=SIREG, orig=88, freq=3000, tfirst=93, tfreq=3000)...
	   Assign 4 to reload r93 (freq=3000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=12, prev_offset=8)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-8, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =b  (1) =S  (2) 0  (3) 1  (4) g
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=12, prev_offset=12)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-8, prev_offset=0)
changing reg in insn 22
changing reg in insn 7
changing reg in insn 5
changing reg in insn 5
changing reg in insn 20
changing reg in insn 6
changing reg in insn 10
changing reg in insn 10
changing reg in insn 13
changing reg in insn 13
changing reg in insn 17
changing reg in insn 20
changing reg in insn 6
changing reg in insn 21
changing reg in insn 7
changing reg in insn 8
changing reg in insn 21
deleting insn with uid = 20.
deleting insn with uid = 21.
deleting insn with uid = 13.
deleting insn with uid = 17.
starting the processing of deferred insns
ending the processing of deferred insns


strtok

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 17 [flags]
;;  ref usage 	r0={4d,4u} r1={3d,2u} r2={2d,2u} r3={3d,3u} r4={2d,2u} r7={1d,4u} r17={2d} 
;;    total ref usage 34{17d,17u,0e} in 12{12 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 22 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 22 3 2 2 (parallel [
            (set (reg:SI 2 cx [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 22 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 8 2 (set (reg/f:SI 1 dx [orig:83 ___strtok.0_1 ] [83])
        (mem/f/c:SI (plus:SI (reg:SI 2 cx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("___strtok") [flags 0x2]  <var_decl 0x7ced3acb6b40 ___strtok>)
                        ] UNSPEC_GOTOFF))) [1 ___strtok+0 S4 A32])) "lib/string.c":291:9 75 {*movsi_internal}
     (nil))
(insn 8 5 24 2 (set (reg/f:SI 0 ax [89])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [1 s+0 S4 A32])) "lib/string.c":291:9 75 {*movsi_internal}
     (nil))
(insn 24 8 26 2 (set (reg:SI 3 bx [orig:87 __res ] [87])
        (reg:SI 1 dx [orig:87 __res ] [87])) "lib/string.c":291:9 75 {*movsi_internal}
     (nil))
(insn 26 24 9 2 (set (reg:SI 4 si [88])
        (reg:SI 0 ax [88])) "lib/string.c":291:9 75 {*movsi_internal}
     (nil))
(insn 9 26 27 2 (parallel [
            (set (reg:SI 3 bx [orig:87 __res ] [87])
                (asm_operands:SI ("testl %1,%1
	jne 1f
	testl %0,%0
	je 8f
	movl %0,%1
1:	xorl %0,%0
	movl $-1,%%ecx
	xorl %%eax,%%eax
	cld
	movl %4,%%edi
	repne
	scasb
	notl %%ecx
	decl %%ecx
	je 7f
	movl %%ecx,%%edx
2:	lodsb
	testb %%al,%%al
	je 7f
	movl %4,%%edi
	movl %%edx,%%ecx
	repne
	scasb
	je 2b
	decl %1
	cmpb $0,(%1)
	je 7f
	movl %1,%0
3:	lodsb
	testb %%al,%%al
	je 5f
	movl %4,%%edi
	movl %%edx,%%ecx
	repne
	scasb
	jne 3b
	decl %1
	cmpb $0,(%1)
	je 5f
	movb $0,(%1)
	incl %1
	jmp 6f
5:	xorl %1,%1
6:	cmpb $0,(%0)
	jne 7f
	xorl %0,%0
7:	testl %0,%0
	jne 8f
	movl %0,%1
8:") ("=b") 0 [
                        (reg:SI 3 bx [orig:87 __res ] [87])
                        (reg:SI 4 si [88])
                        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                                (const_int 16 [0x10])) [1 ct+0 S4 A32])
                    ]
                     [
                        (asm_input:SI ("0") lib/string.c:291)
                        (asm_input:SI ("1") lib/string.c:291)
                        (asm_input:SI ("g") lib/string.c:291)
                    ]
                     [] lib/string.c:291))
            (set (reg:SI 4 si [88])
                (asm_operands:SI ("testl %1,%1
	jne 1f
	testl %0,%0
	je 8f
	movl %0,%1
1:	xorl %0,%0
	movl $-1,%%ecx
	xorl %%eax,%%eax
	cld
	movl %4,%%edi
	repne
	scasb
	notl %%ecx
	decl %%ecx
	je 7f
	movl %%ecx,%%edx
2:	lodsb
	testb %%al,%%al
	je 7f
	movl %4,%%edi
	movl %%edx,%%ecx
	repne
	scasb
	je 2b
	decl %1
	cmpb $0,(%1)
	je 7f
	movl %1,%0
3:	lodsb
	testb %%al,%%al
	je 5f
	movl %4,%%edi
	movl %%edx,%%ecx
	repne
	scasb
	jne 3b
	decl %1
	cmpb $0,(%1)
	je 5f
	movb $0,(%1)
	incl %1
	jmp 6f
5:	xorl %1,%1
6:	cmpb $0,(%0)
	jne 7f
	xorl %0,%0
7:	testl %0,%0
	jne 8f
	movl %0,%1
8:") ("=S") 1 [
                        (reg:SI 3 bx [orig:87 __res ] [87])
                        (reg:SI 4 si [88])
                        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                                (const_int 16 [0x10])) [1 ct+0 S4 A32])
                    ]
                     [
                        (asm_input:SI ("0") lib/string.c:291)
                        (asm_input:SI ("1") lib/string.c:291)
                        (asm_input:SI ("g") lib/string.c:291)
                    ]
                     [] lib/string.c:291))
            (clobber (reg:CC 17 flags))
        ]) "lib/string.c":291:9 -1
     (nil))
(insn 27 9 25 2 (set (reg:SI 0 ax [88])
        (reg:SI 4 si [88])) "lib/string.c":291:9 75 {*movsi_internal}
     (nil))
(insn 25 27 6 2 (set (reg:SI 1 dx [orig:87 __res ] [87])
        (reg:SI 3 bx [orig:87 __res ] [87])) "lib/string.c":291:9 75 {*movsi_internal}
     (nil))
(insn 6 25 7 2 (set (reg/v/f:SI 3 bx [orig:84 __res ] [84])
        (reg:SI 1 dx [orig:87 __res ] [87])) "lib/string.c":291:9 75 {*movsi_internal}
     (nil))
(insn 7 6 10 2 (set (mem/f/c:SI (plus:SI (reg:SI 2 cx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("___strtok") [flags 0x2]  <var_decl 0x7ced3acb6b40 ___strtok>)
                        ] UNSPEC_GOTOFF))) [1 ___strtok+0 S4 A32])
        (reg:SI 0 ax [88])) "lib/string.c":291:9 75 {*movsi_internal}
     (nil))
(insn 10 7 18 2 (set (reg/f:SI 0 ax [orig:85 _7 ] [85])
        (reg/v/f:SI 3 bx [orig:84 __res ] [84])) "lib/string.c":344:16 75 {*movsi_internal}
     (nil))
(insn 18 10 23 2 (use (reg/i:SI 0 ax)) "lib/string.c":345:1 -1
     (nil))
(note 23 18 0 NOTE_INSN_DELETED)

;; Function memmove (memmove, funcdef_no=16, decl_uid=1111, cgraph_uid=17, symbol_order=17)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-4, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
            0 Small class reload: reject+=3
            1 Small class reload: reject+=3
            2 Small class reload: reject+=3
          alt=0,overall=27,losers=3,rld_nregs=3
	 Choosing alt 0 in insn 12:  (0) c  (1) S  (2) D
      Creating newreg=100 from oldreg=92, assigning class CREG to r100
      Creating newreg=101 from oldreg=93, assigning class SIREG to r101
      Creating newreg=102 from oldreg=94, assigning class DIREG to r102
   12: {asm_operands;clobber flags:CC;}
      REG_DEAD r94:SI
      REG_DEAD r93:SI
      REG_DEAD r92:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
   43: r100:SI=r92:SI
   44: r101:SI=r93:SI
   45: r102:SI=r94:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 18:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 22:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 24:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) g {*movsi_internal}
            0 Small class reload: reject+=3
            1 Small class reload: reject+=3
            2 Small class reload: reject+=3
          alt=0,overall=27,losers=3,rld_nregs=3
	 Choosing alt 0 in insn 26:  (0) c  (1) S  (2) D
      Creating newreg=103 from oldreg=97, assigning class CREG to r103
      Creating newreg=104 from oldreg=85, assigning class SIREG to r104
      Creating newreg=105 from oldreg=88, assigning class DIREG to r105
   26: {asm_operands;clobber flags:CC;}
      REG_DEAD r97:SI
      REG_DEAD r88:SI
      REG_DEAD r85:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
   46: r103:SI=r97:SI
   47: r104:SI=r85:SI
   48: r105:SI=r88:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2 3
EBB 4
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 37: point = 0, n_alt = -1
   Insn 36: point = 0, n_alt = -2
   Insn 32: point = 1, n_alt = -2
   Insn 29: point = 3, n_alt = 0
  BB 3
   Insn 39: point = 4, n_alt = -1
   Insn 12: point = 4, n_alt = 0
   Insn 45: point = 5, n_alt = -2
	Hard reg 3 is preferable by r102 with profit 1000
   Insn 44: point = 7, n_alt = -2
	Hard reg 1 is preferable by r101 with profit 1000
   Insn 43: point = 9, n_alt = -2
	Hard reg 0 is preferable by r100 with profit 1000
   Insn 11: point = 11, n_alt = 0
   Insn 10: point = 12, n_alt = 0
   Insn 9: point = 13, n_alt = 0
  BB 4
   Insn 26: point = 14, n_alt = 0
   Insn 48: point = 15, n_alt = -2
	Hard reg 3 is preferable by r105 with profit 1000
   Insn 47: point = 17, n_alt = -2
	Hard reg 1 is preferable by r104 with profit 1000
   Insn 46: point = 19, n_alt = -2
	Hard reg 0 is preferable by r103 with profit 1000
   Insn 25: point = 21, n_alt = 0
   Insn 24: point = 22, n_alt = 3
   Insn 23: point = 24, n_alt = 0
   Insn 22: point = 25, n_alt = 3
   Insn 21: point = 27, n_alt = 0
   Insn 20: point = 28, n_alt = 0
   Insn 19: point = 30, n_alt = 0
   Insn 18: point = 31, n_alt = 3
   Insn 17: point = 33, n_alt = 0
  BB 2
   Insn 7: point = 34, n_alt = -1
   Insn 6: point = 34, n_alt = 1
   Insn 5: point = 35, n_alt = 0
   Insn 41: point = 36, n_alt = 0
 r82: [36..36]
 r83: [32..33]
 r84: [29..31]
 r85: [18..28]
 r86: [26..27]
 r87: [23..25]
 r88: [16..22]
 r89: [2..3]
 r90: [0..1]
 r91: [34..35]
 r92: [10..13]
 r93: [8..12]
 r94: [6..11]
 r95: [29..30]
 r96: [23..24]
 r97: [20..21]
 r100: [4..9]
 r101: [4..7]
 r102: [4..5]
 r103: [14..19]
 r104: [14..17]
 r105: [14..15]
Compressing live ranges: from 37 to 31 - 83%
Ranges after the compression:
 r82: [30..30]
 r83: [26..27]
 r84: [24..25]
 r85: [16..23]
 r86: [22..23]
 r87: [20..21]
 r88: [14..19]
 r89: [2..3]
 r90: [0..1]
 r91: [28..29]
 r92: [10..11]
 r93: [8..11]
 r94: [6..11]
 r95: [24..25]
 r96: [20..21]
 r97: [18..19]
 r100: [4..9]
 r101: [4..7]
 r102: [4..5]
 r103: [12..17]
 r104: [12..15]
 r105: [12..13]

********** Assignment #1: **********

	 Assigning to 100 (cl=CREG, orig=92, freq=2000, tfirst=100, tfreq=2000)...
	   Assign 2 to reload r100 (freq=2000)
	 Assigning to 101 (cl=SIREG, orig=93, freq=2000, tfirst=101, tfreq=2000)...
	   Assign 4 to reload r101 (freq=2000)
	 Assigning to 102 (cl=DIREG, orig=94, freq=2000, tfirst=102, tfreq=2000)...
	   Assign 5 to reload r102 (freq=2000)
	 Assigning to 103 (cl=CREG, orig=97, freq=2000, tfirst=103, tfreq=2000)...
	   Assign 2 to reload r103 (freq=2000)
	 Assigning to 104 (cl=SIREG, orig=85, freq=2000, tfirst=104, tfreq=2000)...
	   Assign 4 to reload r104 (freq=2000)
	 Assigning to 105 (cl=DIREG, orig=88, freq=2000, tfirst=105, tfreq=2000)...
	   Assign 5 to reload r105 (freq=2000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=8)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=16)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
changing reg in insn 41
changing reg in insn 17
changing reg in insn 18
changing reg in insn 18
changing reg in insn 20
changing reg in insn 20
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 22
changing reg in insn 24
changing reg in insn 24
changing reg in insn 24
changing reg in insn 29
changing reg in insn 32
changing reg in insn 32
changing reg in insn 36
changing reg in insn 5
changing reg in insn 6
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 19
changing reg in insn 20
changing reg in insn 23
changing reg in insn 24
changing reg in insn 25
deleting insn with uid = 32.
deleting insn with uid = 36.
starting the processing of deferred insns
ending the processing of deferred insns


memmove

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 17 [flags]
;;  ref usage 	r0={10d,9u} r1={4d,3u,1e} r2={4d,3u,1e} r3={2d,2u} r4={2d,2u} r5={2d,2u} r7={1d,16u} r16={2e} r17={8d,1u} 
;;    total ref usage 75{33d,38u,4e} in 27{27 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 41 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 41 3 2 2 (parallel [
            (set (reg:SI 0 ax [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 41 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 0 ax [91])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [3 dest+0 S4 A32])) "lib/string.c":350:12 75 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (reg:CC 17 flags)
        (compare:CC (reg/f:SI 0 ax [91])
            (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 20 [0x14])) [3 src+0 S4 A32]))) "lib/string.c":350:12 11 {*cmpsi_1}
     (nil))
(jump_insn 7 6 8 2 (set (pc)
        (if_then_else (geu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 15)
            (pc))) "lib/string.c":350:12 806 {*jcc}
     (nil)
 -> 15)
(note 8 7 9 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 9 8 10 3 (set (reg:SI 0 ax [92])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [2 n+0 S4 A32])) "lib/string.c":351:17 75 {*movsi_internal}
     (nil))
(insn 10 9 11 3 (set (reg/f:SI 1 dx [93])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [3 src+0 S4 A32])) "lib/string.c":351:17 75 {*movsi_internal}
     (nil))
(insn 11 10 43 3 (set (reg/f:SI 3 bx [94])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [3 dest+0 S4 A32])) "lib/string.c":351:17 75 {*movsi_internal}
     (nil))
(insn 43 11 44 3 (set (reg:SI 2 cx [92])
        (reg:SI 0 ax [92])) "lib/string.c":351:17 75 {*movsi_internal}
     (nil))
(insn 44 43 45 3 (set (reg/f:SI 4 si [93])
        (reg/f:SI 1 dx [93])) "lib/string.c":351:17 75 {*movsi_internal}
     (nil))
(insn 45 44 12 3 (set (reg/f:SI 5 di [94])
        (reg/f:SI 3 bx [94])) "lib/string.c":351:17 75 {*movsi_internal}
     (nil))
(insn 12 45 39 3 (parallel [
            (asm_operands/v ("cld
	rep
	movsb") ("") 0 [
                    (reg:SI 2 cx [92])
                    (reg/f:SI 4 si [93])
                    (reg/f:SI 5 di [94])
                ]
                 [
                    (asm_input:SI ("c") lib/string.c:351)
                    (asm_input:SI ("S") lib/string.c:351)
                    (asm_input:SI ("D") lib/string.c:351)
                ]
                 [] lib/string.c:351)
            (clobber (reg:CC 17 flags))
        ]) "lib/string.c":351:17 -1
     (nil))
(jump_insn 39 12 40 3 (set (pc)
        (label_ref 27)) 807 {jump}
     (nil)
 -> 27)
(barrier 40 39 15)
(code_label 15 40 16 4 34 (nil) [1 uses])
(note 16 15 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 4 (set (reg:SI 0 ax [orig:83 n.1_1 ] [83])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [2 n+0 S4 A32])) "lib/string.c":360:45 75 {*movsi_internal}
     (nil))
(insn 18 17 19 4 (parallel [
            (set (reg:SI 1 dx [orig:84 _2 ] [84])
                (plus:SI (reg:SI 0 ax [orig:83 n.1_1 ] [83])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "lib/string.c":360:45 209 {*addsi_1}
     (nil))
(insn 19 18 20 4 (set (reg/f:SI 0 ax [95])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [3 src+0 S4 A32])) "lib/string.c":360:45 75 {*movsi_internal}
     (nil))
(insn 20 19 21 4 (parallel [
            (set (reg/f:SI 1 dx [orig:85 _3 ] [85])
                (plus:SI (reg:SI 1 dx [orig:84 _2 ] [84])
                    (reg/f:SI 0 ax [95])))
            (clobber (reg:CC 17 flags))
        ]) "lib/string.c":360:45 209 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 16 argp)
                    (const_int 4 [0x4])) [3 src+0 S4 A32])
            (reg:SI 1 dx [orig:84 _2 ] [84]))
        (nil)))
(insn 21 20 22 4 (set (reg:SI 0 ax [orig:86 n.2_4 ] [86])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [2 n+0 S4 A32])) "lib/string.c":360:60 75 {*movsi_internal}
     (nil))
(insn 22 21 23 4 (parallel [
            (set (reg:SI 2 cx [orig:87 _5 ] [87])
                (plus:SI (reg:SI 0 ax [orig:86 n.2_4 ] [86])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "lib/string.c":360:60 209 {*addsi_1}
     (nil))
(insn 23 22 24 4 (set (reg/f:SI 0 ax [96])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [3 dest+0 S4 A32])) "lib/string.c":360:60 75 {*movsi_internal}
     (nil))
(insn 24 23 25 4 (parallel [
            (set (reg/f:SI 3 bx [orig:88 _6 ] [88])
                (plus:SI (reg:SI 2 cx [orig:87 _5 ] [87])
                    (reg/f:SI 0 ax [96])))
            (clobber (reg:CC 17 flags))
        ]) "lib/string.c":360:60 209 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (reg/f:SI 16 argp) [3 dest+0 S4 A32])
            (reg:SI 2 cx [orig:87 _5 ] [87]))
        (nil)))
(insn 25 24 46 4 (set (reg:SI 0 ax [97])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [2 n+0 S4 A32])) "lib/string.c":357:17 75 {*movsi_internal}
     (nil))
(insn 46 25 47 4 (set (reg:SI 2 cx [97])
        (reg:SI 0 ax [97])) "lib/string.c":357:17 75 {*movsi_internal}
     (nil))
(insn 47 46 48 4 (set (reg/f:SI 4 si [orig:85 _3 ] [85])
        (reg/f:SI 1 dx [orig:85 _3 ] [85])) "lib/string.c":357:17 75 {*movsi_internal}
     (nil))
(insn 48 47 26 4 (set (reg/f:SI 5 di [orig:88 _6 ] [88])
        (reg/f:SI 3 bx [orig:88 _6 ] [88])) "lib/string.c":357:17 75 {*movsi_internal}
     (nil))
(insn 26 48 27 4 (parallel [
            (asm_operands/v ("std
	rep
	movsb") ("") 0 [
                    (reg:SI 2 cx [97])
                    (reg/f:SI 4 si [orig:85 _3 ] [85])
                    (reg/f:SI 5 di [orig:88 _6 ] [88])
                ]
                 [
                    (asm_input:SI ("c") lib/string.c:357)
                    (asm_input:SI ("S") lib/string.c:357)
                    (asm_input:SI ("D") lib/string.c:357)
                ]
                 [] lib/string.c:357)
            (clobber (reg:CC 17 flags))
        ]) "lib/string.c":357:17 -1
     (nil))
(code_label 27 26 28 5 35 (nil) [1 uses])
(note 28 27 29 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 37 5 (set (reg/f:SI 0 ax [orig:89 _10 ] [89])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [3 dest+0 S4 A32])) "lib/string.c":362:16 75 {*movsi_internal}
     (nil))
(insn 37 29 42 5 (use (reg/i:SI 0 ax)) "lib/string.c":363:1 -1
     (nil))
(note 42 37 0 NOTE_INSN_DELETED)

;; Function memcmp (memcmp, funcdef_no=17, decl_uid=1116, cgraph_uid=18, symbol_order=18)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-4, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
            2 Small class reload: reject+=3
            3 Small class reload: reject+=3
          alt=0,overall=18,losers=2,rld_nregs=2
	 Choosing alt 0 in insn 10:  (0) =a  (1) 0  (2) D  (3) S  (4) c
      Creating newreg=93 from oldreg=88, assigning class DIREG to r93
      Creating newreg=94 from oldreg=89, assigning class SIREG to r94
   10: {r86:SI=asm_operands;clobber flags:CC;}
      REG_DEAD r90:SI
      REG_DEAD r89:SI
      REG_DEAD r88:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
   24: r93:SI=r88:SI
   25: r94:SI=r89:SI

	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 19: point = 0, n_alt = -1
   Insn 18: point = 0, n_alt = -2
   Insn 14: point = 1, n_alt = -2
   Insn 11: point = 3, n_alt = -2
   Insn 5: point = 5, n_alt = -2
   Insn 10: point = 7, n_alt = 0
   Insn 25: point = 9, n_alt = -2
	Hard reg 3 is preferable by r94 with profit 1000
   Insn 24: point = 11, n_alt = -2
	Hard reg 1 is preferable by r93 with profit 1000
   Insn 21: point = 13, n_alt = -2
   Insn 9: point = 15, n_alt = 0
   Insn 8: point = 16, n_alt = 0
   Insn 7: point = 17, n_alt = 0
   Insn 6: point = 18, n_alt = 0
   Insn 22: point = 19, n_alt = 0
 r82: [19..19]
 r83: [4..5]
 r84: [2..3]
 r85: [0..1]
 r86: [6..13]
 r87: [14..18]
 r88: [12..17]
 r89: [10..16]
 r90: [8..15]
 r93: [8..11]
 r94: [8..9]
Compressing live ranges: from 20 to 15 - 75%
Ranges after the compression:
 r82: [14..14]
 r83: [4..5]
 r84: [2..3]
 r85: [0..1]
 r86: [6..11]
 r87: [12..13]
 r88: [10..13]
 r89: [8..13]
 r90: [6..13]
 r93: [6..9]
 r94: [6..7]

********** Assignment #1: **********

	 Assigning to 93 (cl=DIREG, orig=88, freq=2000, tfirst=93, tfreq=2000)...
	   Assign 5 to reload r93 (freq=2000)
	 Assigning to 94 (cl=SIREG, orig=89, freq=2000, tfirst=94, tfreq=2000)...
	   Assign 4 to reload r94 (freq=2000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=8)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=16)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-12, prev_offset=0)
changing reg in insn 22
changing reg in insn 5
changing reg in insn 11
changing reg in insn 11
changing reg in insn 14
changing reg in insn 14
changing reg in insn 18
changing reg in insn 21
changing reg in insn 10
changing reg in insn 10
changing reg in insn 5
changing reg in insn 6
changing reg in insn 21
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
deleting insn with uid = 21.
deleting insn with uid = 14.
deleting insn with uid = 18.
starting the processing of deferred insns
ending the processing of deferred insns


memcmp

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 17 [flags]
;;  ref usage 	r0={5d,4u} r1={2d,1u} r2={2d,1u} r3={2d,2u} r4={1d,1u} r5={1d,1u} r7={1d,5u} r17={2d} 
;;    total ref usage 31{16d,15u,0e} in 11{11 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 22 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 22 3 2 2 (parallel [
            (set (reg:SI 0 ax [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 22 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 2 7 2 (set (reg:SI 0 ax [87])
        (const_int 0 [0])) "lib/string.c":368:9 75 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (reg/f:SI 1 dx [88])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [3 cs+0 S4 A32])) "lib/string.c":368:9 75 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (reg/f:SI 3 bx [89])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [3 ct+0 S4 A32])) "lib/string.c":368:9 75 {*movsi_internal}
     (nil))
(insn 9 8 24 2 (set (reg:SI 2 cx [90])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [2 count+0 S4 A32])) "lib/string.c":368:9 75 {*movsi_internal}
     (nil))
(insn 24 9 25 2 (set (reg/f:SI 5 di [88])
        (reg/f:SI 1 dx [88])) "lib/string.c":368:9 75 {*movsi_internal}
     (nil))
(insn 25 24 10 2 (set (reg/f:SI 4 si [89])
        (reg/f:SI 3 bx [89])) "lib/string.c":368:9 75 {*movsi_internal}
     (nil))
(insn 10 25 5 2 (parallel [
            (set (reg:SI 0 ax [orig:86 __res ] [86])
                (asm_operands:SI ("cld
	repe
	cmpsb
	je 1f
	movl $1,%%eax
	jl 1f
	negl %%eax
1:") ("=a") 0 [
                        (reg:SI 0 ax [orig:86 __res ] [86])
                        (reg/f:SI 5 di [88])
                        (reg/f:SI 4 si [89])
                        (reg:SI 2 cx [90])
                    ]
                     [
                        (asm_input:SI ("0") lib/string.c:368)
                        (asm_input:SI ("D") lib/string.c:368)
                        (asm_input:SI ("S") lib/string.c:368)
                        (asm_input:SI ("c") lib/string.c:368)
                    ]
                     [] lib/string.c:368))
            (clobber (reg:CC 17 flags))
        ]) "lib/string.c":368:9 -1
     (nil))
(insn 5 10 11 2 (set (reg/v:SI 3 bx [orig:83 __res ] [83])
        (reg:SI 0 ax [orig:86 __res ] [86])) "lib/string.c":368:9 75 {*movsi_internal}
     (nil))
(insn 11 5 19 2 (set (reg:SI 0 ax [orig:84 _5 ] [84])
        (reg/v:SI 3 bx [orig:83 __res ] [83])) "lib/string.c":378:16 75 {*movsi_internal}
     (nil))
(insn 19 11 23 2 (use (reg/i:SI 0 ax)) "lib/string.c":379:1 -1
     (nil))
(note 23 19 0 NOTE_INSN_DELETED)

;; Function memchr (memchr, funcdef_no=18, decl_uid=1122, cgraph_uid=19, symbol_order=19)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=12, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=4, prev_offset=0)
Can eliminate 19 to 6 (offset=-4, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 2:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 3:  (0) =Q  (1) Q {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=7,overall=27,losers=2 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 4:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 17:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) g {*movsi_internal}
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            2 Small class reload: reject+=3
          alt=0,overall=19,losers=2,rld_nregs=2
	 Choosing alt 0 in insn 20:  (0) =D  (1) a  (2) D  (3) c
      Creating newreg=94 from oldreg=88, assigning class DIREG to r94
      Creating newreg=95 from oldreg=90, assigning class DIREG to r95
   20: {r94:SI=asm_operands;clobber flags:CC;}
      REG_DEAD r91:SI
      REG_DEAD r90:SI
      REG_DEAD r89:QI
      REG_UNUSED flags:CC
    Inserting insn reload before:
   36: r95:SI=r90:SI
    Inserting insn reload after:
   35: r88:SI=r94:SI

	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2 3
EBB 4
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 29: point = 0, n_alt = -1
   Insn 28: point = 0, n_alt = -2
   Insn 24: point = 1, n_alt = -2
  BB 3
   Insn 31: point = 4, n_alt = -1
   Insn 11: point = 4, n_alt = 0
  BB 4
   Insn 21: point = 5, n_alt = -2
   Insn 16: point = 7, n_alt = -2
   Insn 35: point = 9, n_alt = -2
	Hard reg 0 is preferable by r94 with profit 1000
   Insn 20: point = 11, n_alt = 0
   Insn 36: point = 13, n_alt = -2
	Hard reg 1 is preferable by r95 with profit 1000
   Insn 19: point = 15, n_alt = 0
   Insn 18: point = 16, n_alt = 0
   Insn 17: point = 17, n_alt = 4
  BB 2
   Insn 9: point = 18, n_alt = -1
   Insn 8: point = 18, n_alt = 1
   Insn 4: point = 18, n_alt = 8
   Insn 3: point = 19, n_alt = 0
   Insn 2: point = 21, n_alt = 0
   Insn 33: point = 22, n_alt = 0
 r82: [22..22]
 r83: [2..5]
 r84: [6..7]
 r85: [0..1]
 r86: [20..21]
 r87: [18..19]
 r88: [8..9]
 r89: [12..17]
 r90: [14..16]
 r91: [12..15]
 r94: [10..11]
 r95: [12..13]
Compressing live ranges: from 23 to 19 - 82%
Ranges after the compression:
 r82: [18..18]
 r83: [2..3]
 r84: [4..5]
 r85: [0..1]
 r86: [16..17]
 r87: [14..15]
 r88: [6..7]
 r89: [10..13]
 r90: [12..13]
 r91: [10..13]
 r94: [8..9]
 r95: [10..11]

********** Assignment #1: **********

	 Assigning to 94 (cl=DIREG, orig=88, freq=2000, tfirst=94, tfreq=2000)...
	   Assign 5 to reload r94 (freq=2000)
	 Assigning to 95 (cl=DIREG, orig=90, freq=2000, tfirst=95, tfreq=2000)...
	   Assign 5 to reload r95 (freq=2000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=12)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=4, prev_offset=4)
Can eliminate 19 to 6 (offset=-8, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 2:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=16)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=4, prev_offset=4)
Can eliminate 19 to 6 (offset=-8, prev_offset=0)
changing reg in insn 33
changing reg in insn 21
changing reg in insn 11
changing reg in insn 24
changing reg in insn 16
changing reg in insn 21
changing reg in insn 24
changing reg in insn 28
changing reg in insn 2
changing reg in insn 3
changing reg in insn 4
changing reg in insn 16
changing reg in insn 17
changing reg in insn 20
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
deleting insn with uid = 3.
deleting insn with uid = 24.
deleting insn with uid = 28.
starting the processing of deferred insns
ending the processing of deferred insns


memchr

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 5 [di] 17 [flags]
;;  ref usage 	r0={7d,5u} r1={2d,1u} r2={2d,1u} r3={1d,1u} r5={2d,2u} r7={1d,11u} r17={3d,1u} 
;;    total ref usage 40{18d,22u,0e} in 16{16 regular + 0 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
(note 6 1 33 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 33 6 2 2 (parallel [
            (set (reg:SI 0 ax [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(insn 2 33 4 2 (set (reg:SI 0 ax [86])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [0 c+0 S4 A32])) "lib/string.c":382:1 75 {*movsi_internal}
     (nil))
(insn 4 2 5 2 (set (mem/c:QI (reg/f:SI 7 sp) [0 c+0 S1 A32])
        (reg:QI 0 ax [87])) "lib/string.c":382:1 77 {*movqi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 24 [0x18])) [2 count+0 S4 A32])
            (const_int 0 [0]))) "lib/string.c":384:12 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 9 8 10 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 14)
            (pc))) "lib/string.c":384:12 806 {*jcc}
     (nil)
 -> 14)
(note 10 9 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 31 3 (set (reg/f:SI 0 ax [orig:83 _1 ] [83])
        (const_int 0 [0])) "lib/string.c":385:24 75 {*movsi_internal}
     (nil))
(jump_insn 31 11 32 3 (set (pc)
        (label_ref 22)) "lib/string.c":385:24 807 {jump}
     (nil)
 -> 22)
(barrier 32 31 14)
(code_label 14 32 15 4 40 (nil) [1 uses])
(note 15 14 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 17 15 18 4 (set (reg:QI 0 ax [89])
        (mem/c:QI (reg/f:SI 7 sp) [0 c+0 S1 A32])) "lib/string.c":386:9 77 {*movqi_internal}
     (nil))
(insn 18 17 19 4 (set (reg/f:SI 1 dx [90])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [3 cs+0 S4 A32])) "lib/string.c":386:9 75 {*movsi_internal}
     (nil))
(insn 19 18 36 4 (set (reg:SI 2 cx [91])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [2 count+0 S4 A32])) "lib/string.c":386:9 75 {*movsi_internal}
     (nil))
(insn 36 19 20 4 (set (reg/f:SI 5 di [90])
        (reg/f:SI 1 dx [90])) "lib/string.c":386:9 75 {*movsi_internal}
     (nil))
(insn 20 36 35 4 (parallel [
            (set (reg:SI 5 di [orig:88 __res ] [88])
                (asm_operands:SI ("cld
	repne
	scasb
	je 1f
	movl $1,%0
1:	decl %0") ("=D") 0 [
                        (reg:QI 0 ax [89])
                        (reg/f:SI 5 di [90])
                        (reg:SI 2 cx [91])
                    ]
                     [
                        (asm_input:QI ("a") lib/string.c:386)
                        (asm_input:SI ("D") lib/string.c:386)
                        (asm_input:SI ("c") lib/string.c:386)
                    ]
                     [] lib/string.c:386))
            (clobber (reg:CC 17 flags))
        ]) "lib/string.c":386:9 -1
     (nil))
(insn 35 20 16 4 (set (reg:SI 0 ax [orig:88 __res ] [88])
        (reg:SI 5 di [orig:88 __res ] [88])) "lib/string.c":386:9 75 {*movsi_internal}
     (nil))
(insn 16 35 21 4 (set (reg/v/f:SI 3 bx [orig:84 __res ] [84])
        (reg:SI 0 ax [orig:88 __res ] [88])) "lib/string.c":386:9 75 {*movsi_internal}
     (nil))
(insn 21 16 22 4 (set (reg/f:SI 0 ax [orig:83 _1 ] [83])
        (reg/v/f:SI 3 bx [orig:84 __res ] [84])) "lib/string.c":394:16 75 {*movsi_internal}
     (nil))
(code_label 22 21 23 5 41 (nil) [1 uses])
(note 23 22 29 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 29 23 34 5 (use (reg/i:SI 0 ax)) "lib/string.c":395:1 -1
     (nil))
(note 34 29 0 NOTE_INSN_DELETED)
