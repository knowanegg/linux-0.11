
;; Function open (open, funcdef_no=0, decl_uid=1130, cgraph_uid=1, symbol_order=0)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=28, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=-8, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =r {*set_got}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=23,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 5:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 6:  (0) =rm  (1) %0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 9:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 11:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =a  (1) 0  (2) b  (3) c  (4) d
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 27:  (0) =rm  (1) 0 {*negsi_1}
      Creating newreg=99 from oldreg=88, assigning class GENERAL_REGS to r99
   27: {r99:SI=-r99:SI;clobber flags:CC;}
      REG_DEAD r88:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
   45: r99:SI=r88:SI
    Inserting insn reload after:
   46: r86:SI=r99:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 29:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2 3
EBB 4
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 38: point = 0, n_alt = -1
   Insn 37: point = 0, n_alt = -2
   Insn 33: point = 1, n_alt = -2
  BB 3
   Insn 40: point = 4, n_alt = -1
   Insn 22: point = 4, n_alt = -2
  BB 4
   Insn 30: point = 7, n_alt = 0
   Insn 29: point = 8, n_alt = 1
   Insn 28: point = 9, n_alt = 0
   Insn 46: point = 11, n_alt = -2
	Hard reg 1 is preferable by r99 with profit 1000
   Insn 27: point = 13, n_alt = 0
   Insn 45: point = 14, n_alt = -2
	Hard reg 1 is preferable by r99 with profit 1000
	Hard reg 3 is preferable by r99 with profit 1000
  BB 2
   Insn 20: point = 17, n_alt = -1
   Insn 19: point = 17, n_alt = 0
   Insn 13: point = 17, n_alt = -2
   Insn 16: point = 19, n_alt = 0
   Insn 42: point = 21, n_alt = -2
   Insn 15: point = 23, n_alt = 0
   Insn 14: point = 24, n_alt = 0
   Insn 12: point = 25, n_alt = 0
   Insn 11: point = 27, n_alt = 0
   Insn 10: point = 29, n_alt = 0
   Insn 9: point = 30, n_alt = 0
   Insn 8: point = 30, n_alt = 0
   Insn 7: point = 31, n_alt = 1
   Insn 6: point = 32, n_alt = 0
   Insn 5: point = 34, n_alt = 3
   Insn 43: point = 35, n_alt = 0
 r82: [10..35]
 r83: [20..30]
 r84: [26..27]
 r85: [20..25]
 r86: [8..11]
 r87: [7..7] [2..4]
 r88: [15..17] [5..6]
 r89: [0..1]
 r90: [33..34]
 r91: [31..32]
 r92: [28..29]
 r93: [18..21]
 r94: [22..24]
 r95: [20..23]
 r96: [8..9]
 r99: [12..14]
Compressing live ranges: from 36 to 27 - 75%
Ranges after the compression:
 r82: [9..26]
 r83: [15..22]
 r84: [19..20]
 r85: [15..18]
 r86: [7..10]
 r87: [6..6] [2..3]
 r88: [13..14] [4..5]
 r89: [0..1]
 r90: [25..26]
 r91: [23..24]
 r92: [21..22]
 r93: [15..16]
 r94: [17..18]
 r95: [15..18]
 r96: [7..8]
 r99: [11..12]

********** Assignment #1: **********

	 Assigning to 99 (cl=GENERAL_REGS, orig=88, freq=3000, tfirst=99, tfreq=3000)...
	   Assign 1 to reload r99 (freq=3000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=28, prev_offset=28)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=16)
Can eliminate 19 to 6 (offset=-8, prev_offset=0)
changing reg in insn 43
changing reg in insn 28
changing reg in insn 8
changing reg in insn 16
changing reg in insn 11
changing reg in insn 12
changing reg in insn 12
changing reg in insn 16
changing reg in insn 29
changing reg in insn 30
changing reg in insn 22
changing reg in insn 33
changing reg in insn 13
changing reg in insn 22
changing reg in insn 19
changing reg in insn 33
changing reg in insn 37
changing reg in insn 5
changing reg in insn 6
changing reg in insn 6
changing reg in insn 7
changing reg in insn 10
changing reg in insn 11
changing reg in insn 42
changing reg in insn 16
changing reg in insn 16
changing reg in insn 13
changing reg in insn 14
changing reg in insn 42
changing reg in insn 15
changing reg in insn 16
changing reg in insn 28
changing reg in insn 29
deleting insn with uid = 42.
deleting insn with uid = 46.
deleting insn with uid = 33.
deleting insn with uid = 37.
starting the processing of deferred insns
ending the processing of deferred insns


open

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 17 [flags]
;;  ref usage 	r0={10d,9u} r1={4d,3u} r2={2d,1u} r3={2d,4u} r4={1d,1u} r7={1d,12u} r17={8d,1u} r19={1e} 
;;    total ref usage 60{28d,31u,1e} in 23{23 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 43 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 43 3 2 2 (parallel [
            (set (reg:SI 4 si [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 43 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (parallel [
            (set (reg:SI 0 ax [90])
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) "lib/open.c":16:5 209 {*addsi_1}
     (nil))
(insn 6 5 7 2 (parallel [
            (set (reg:SI 0 ax [91])
                (plus:SI (reg:SI 0 ax [90])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "lib/open.c":16:5 209 {*addsi_1}
     (nil))
(insn 7 6 8 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [1 arg+0 S4 A32])
        (reg:SI 0 ax [91])) "lib/open.c":16:5 75 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:SI 2 cx [orig:83 flag.0_1 ] [83])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 32 [0x20])) [2 flag+0 S4 A32])) "lib/open.c":17:5 75 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (parallel [
            (set (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                        (const_int 12 [0xc])) [1 arg+0 S4 A32])
                (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                            (const_int 12 [0xc])) [1 arg+0 S4 A32])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) "lib/open.c":20:20 209 {*addsi_1}
     (nil))
(insn 10 9 11 2 (set (reg/f:SI 0 ax [92])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [1 arg+0 S4 A32])) "lib/open.c":20:20 75 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (parallel [
            (set (reg/f:SI 0 ax [orig:84 _2 ] [84])
                (plus:SI (reg/f:SI 0 ax [92])
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) "lib/open.c":20:20 209 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 19 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 arg+0 S4 A32])
            (const_int -4 [0xfffffffffffffffc]))
        (nil)))
(insn 12 11 14 2 (set (reg:SI 1 dx [orig:85 _3 ] [85])
        (mem:SI (reg/f:SI 0 ax [orig:84 _2 ] [84]) [2 MEM[(int *)_2]+0 S4 A32])) "lib/open.c":20:20 75 {*movsi_internal}
     (nil))
(insn 14 12 15 2 (set (reg:SI 0 ax [94])
        (const_int 5 [0x5])) "lib/open.c":17:5 75 {*movsi_internal}
     (nil))
(insn 15 14 16 2 (set (reg/f:SI 3 bx [95])
        (mem/f/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 28 [0x1c])) [1 filename+0 S4 A32])) "lib/open.c":17:5 75 {*movsi_internal}
     (nil))
(insn 16 15 13 2 (parallel [
            (set (reg:SI 0 ax [orig:93 res ] [93])
                (asm_operands:SI ("int $0x80") ("=a") 0 [
                        (reg:SI 0 ax [orig:93 res ] [93])
                        (reg/f:SI 3 bx [95])
                        (reg:SI 2 cx [orig:83 flag.0_1 ] [83])
                        (reg:SI 1 dx [orig:85 _3 ] [85])
                    ]
                     [
                        (asm_input:SI ("0") lib/open.c:17)
                        (asm_input:SI ("b") lib/open.c:17)
                        (asm_input:SI ("c") lib/open.c:17)
                        (asm_input:SI ("d") lib/open.c:17)
                    ]
                     [] lib/open.c:17))
            (clobber (reg:CC 17 flags))
        ]) "lib/open.c":17:5 -1
     (nil))
(insn 13 16 19 2 (set (reg/v:SI 3 bx [orig:88 res ] [88])
        (reg:SI 0 ax [orig:93 res ] [93])) "lib/open.c":17:5 75 {*movsi_internal}
     (nil))
(insn 19 13 20 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg/v:SI 3 bx [orig:88 res ] [88])
            (const_int 0 [0]))) "lib/open.c":21:8 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 20 19 21 2 (set (pc)
        (if_then_else (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref 25)
            (pc))) "lib/open.c":21:8 806 {*jcc}
     (nil)
 -> 25)
(note 21 20 22 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 40 3 (set (reg:SI 0 ax [orig:87 _5 ] [87])
        (reg/v:SI 3 bx [orig:88 res ] [88])) "lib/open.c":22:16 75 {*movsi_internal}
     (nil))
(jump_insn 40 22 41 3 (set (pc)
        (label_ref 31)) "lib/open.c":22:16 807 {jump}
     (nil)
 -> 31)
(barrier 41 40 25)
(code_label 25 41 26 4 2 (nil) [1 uses])
(note 26 25 45 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 45 26 27 4 (set (reg/v:SI 1 dx [orig:88 res ] [88])
        (reg/v:SI 3 bx [orig:88 res ] [88])) "lib/open.c":23:13 75 {*movsi_internal}
     (nil))
(insn 27 45 28 4 (parallel [
            (set (reg/v:SI 1 dx [orig:88 res ] [88])
                (neg:SI (reg/v:SI 1 dx [orig:88 res ] [88])))
            (clobber (reg:CC 17 flags))
        ]) "lib/open.c":23:13 575 {*negsi_1}
     (nil))
(insn 28 27 29 4 (set (reg/f:SI 0 ax [96])
        (mem/u/c:SI (plus:SI (reg:SI 4 si [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("errno") [flags 0x40]  <var_decl 0x7ac044290b40 errno>)
                        ] UNSPEC_GOT))) [3  S4 A8])) "lib/open.c":23:11 75 {*movsi_internal}
     (nil))
(insn 29 28 30 4 (set (mem/c:SI (reg/f:SI 0 ax [96]) [2 errno+0 S4 A32])
        (reg:SI 1 dx [orig:86 _4 ] [86])) "lib/open.c":23:11 75 {*movsi_internal}
     (nil))
(insn 30 29 31 4 (set (reg:SI 0 ax [orig:87 _5 ] [87])
        (const_int -1 [0xffffffffffffffff])) "lib/open.c":24:12 75 {*movsi_internal}
     (nil))
(code_label 31 30 32 5 3 (nil) [1 uses])
(note 32 31 38 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 38 32 44 5 (use (reg/i:SI 0 ax)) "lib/open.c":25:1 -1
     (nil))
(note 44 38 0 NOTE_INSN_DELETED)
