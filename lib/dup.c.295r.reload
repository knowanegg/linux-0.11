
;; Function dup (dup, funcdef_no=0, decl_uid=1068, cgraph_uid=1, symbol_order=0)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=20, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
            2 Small class reload: reject+=3
          alt=0,overall=9,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 8:  (0) =a  (1) 0  (2) b
      Creating newreg=93 from oldreg=88, assigning class BREG to r93
    8: {r86:SI=asm_operands;clobber flags:CC;}
      REG_DEAD r88:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
   38: r93:SI=r88:SI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 5:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 20:  (0) =rm  (1) 0 {*negsi_1}
      Creating newreg=94 from oldreg=89, assigning class GENERAL_REGS to r94
   20: {r94:SI=-r94:SI;clobber flags:CC;}
      REG_DEAD r89:SI
      REG_UNUSED flags:CC
      REG_EQUAL -[frame:SI-0x4]
    Inserting insn reload before:
   39: r94:SI=r89:SI
    Inserting insn reload after:
   40: r83:SI=r94:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2 3
EBB 4
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 31: point = 0, n_alt = -1
   Insn 30: point = 0, n_alt = -2
   Insn 26: point = 1, n_alt = -2
  BB 3
   Insn 33: point = 4, n_alt = -1
   Insn 14: point = 4, n_alt = 0
  BB 4
   Insn 23: point = 5, n_alt = 0
   Insn 22: point = 6, n_alt = 1
   Insn 21: point = 7, n_alt = 0
   Insn 40: point = 9, n_alt = -2
	Hard reg 2 is preferable by r94 with profit 1000
   Insn 20: point = 11, n_alt = 0
   Insn 39: point = 12, n_alt = -2
	Hard reg 2 is preferable by r94 with profit 1000
	Hard reg 0 is preferable by r94 with profit 1000
   Insn 19: point = 14, n_alt = 0
  BB 2
   Insn 12: point = 16, n_alt = -1
   Insn 11: point = 16, n_alt = 1
   Insn 5: point = 16, n_alt = 1
   Insn 8: point = 17, n_alt = 0
   Insn 38: point = 19, n_alt = -2
	Hard reg 2 is preferable by r93 with profit 1000
   Insn 35: point = 21, n_alt = -2
   Insn 7: point = 23, n_alt = 0
   Insn 6: point = 24, n_alt = 0
   Insn 36: point = 25, n_alt = 0
 r82: [8..25]
 r83: [6..9]
 r84: [2..5]
 r85: [0..1]
 r86: [16..21]
 r87: [22..24]
 r88: [20..23]
 r89: [13..14]
 r90: [6..7]
 r93: [18..19]
 r94: [10..12]
Compressing live ranges: from 26 to 18 - 69%
Ranges after the compression:
 r82: [6..17]
 r83: [4..7]
 r84: [2..3]
 r85: [0..1]
 r86: [12..15]
 r87: [16..17]
 r88: [14..17]
 r89: [10..11]
 r90: [4..5]
 r93: [12..13]
 r94: [8..9]

********** Assignment #1: **********

	 Assigning to 93 (cl=BREG, orig=88, freq=2000, tfirst=93, tfreq=2000)...
	   Assign 3 to reload r93 (freq=2000)
	 Assigning to 94 (cl=GENERAL_REGS, orig=89, freq=3000, tfirst=94, tfreq=3000)...
	   Assign 0 to reload r94 (freq=3000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=24, prev_offset=20)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=16)
Can eliminate 19 to 6 (offset=-4, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=24, prev_offset=24)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=16, prev_offset=16)
Can eliminate 19 to 6 (offset=-4, prev_offset=0)
changing reg in insn 36
changing reg in insn 21
changing reg in insn 22
changing reg in insn 23
changing reg in insn 14
changing reg in insn 26
changing reg in insn 26
changing reg in insn 30
changing reg in insn 35
changing reg in insn 8
changing reg in insn 8
changing reg in insn 5
changing reg in insn 6
changing reg in insn 35
changing reg in insn 7
changing reg in insn 19
changing reg in insn 21
changing reg in insn 22
deleting insn with uid = 35.
deleting insn with uid = 39.
deleting insn with uid = 26.
deleting insn with uid = 30.
starting the processing of deferred insns
ending the processing of deferred insns


dup

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 17 [flags]
;;  ref usage 	r0={8d,7u} r1={2d,1u} r2={3d,2u} r3={1d,1u} r7={1d,10u} r17={4d,1u} r19={1e} 
;;    total ref usage 42{19d,22u,1e} in 17{17 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 36 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 36 3 2 2 (parallel [
            (set (reg:SI 1 dx [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 36 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 2 7 2 (set (reg:SI 0 ax [87])
        (const_int 41 [0x29])) "lib/dup.c":10:1 75 {*movsi_internal}
     (nil))
(insn 7 6 38 2 (set (reg:SI 2 cx [88])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 24 [0x18])) [2 fd+0 S4 A32])) "lib/dup.c":10:1 75 {*movsi_internal}
     (nil))
(insn 38 7 8 2 (set (reg:SI 3 bx [88])
        (reg:SI 2 cx [88])) "lib/dup.c":10:1 75 {*movsi_internal}
     (nil))
(insn 8 38 5 2 (parallel [
            (set (reg:SI 0 ax [orig:86 __res ] [86])
                (asm_operands/v:SI ("int $0x80") ("=a") 0 [
                        (reg:SI 0 ax [orig:86 __res ] [86])
                        (reg:SI 3 bx [88])
                    ]
                     [
                        (asm_input:SI ("0") lib/dup.c:10)
                        (asm_input:SI ("b") lib/dup.c:10)
                    ]
                     [] lib/dup.c:10))
            (clobber (reg:CC 17 flags))
        ]) "lib/dup.c":10:1 -1
     (nil))
(insn 5 8 11 2 (set (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [1 __res+0 S4 A32])
        (reg:SI 0 ax [orig:86 __res ] [86])) "lib/dup.c":10:1 75 {*movsi_internal}
     (nil))
(insn 11 5 12 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                    (const_int 12 [0xc])) [1 __res+0 S4 A32])
            (const_int 0 [0]))) "lib/dup.c":10:1 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 12 11 13 2 (set (pc)
        (if_then_else (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref 17)
            (pc))) "lib/dup.c":10:1 806 {*jcc}
     (nil)
 -> 17)
(note 13 12 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 33 3 (set (reg:SI 0 ax [orig:84 _2 ] [84])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [1 __res+0 S4 A32])) "lib/dup.c":10:1 75 {*movsi_internal}
     (nil))
(jump_insn 33 14 34 3 (set (pc)
        (label_ref 24)) "lib/dup.c":10:1 807 {jump}
     (nil)
 -> 24)
(barrier 34 33 17)
(code_label 17 34 18 4 2 (nil) [1 uses])
(note 18 17 19 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 19 18 20 4 (set (reg:SI 0 ax [89])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [1 __res+0 S4 A32])) "lib/dup.c":10:1 75 {*movsi_internal}
     (nil))
(insn 20 19 40 4 (parallel [
            (set (reg:SI 0 ax [89])
                (neg:SI (reg:SI 0 ax [89])))
            (clobber (reg:CC 17 flags))
        ]) "lib/dup.c":10:1 575 {*negsi_1}
     (expr_list:REG_EQUAL (neg:SI (mem/c:SI (plus:SI (reg/f:SI 19 frame)
                    (const_int -4 [0xfffffffffffffffc])) [1 __res+0 S4 A32]))
        (nil)))
(insn 40 20 21 4 (set (reg:SI 2 cx [orig:83 _1 ] [83])
        (reg:SI 0 ax [89])) "lib/dup.c":10:1 75 {*movsi_internal}
     (nil))
(insn 21 40 22 4 (set (reg/f:SI 0 ax [90])
        (mem/u/c:SI (plus:SI (reg:SI 1 dx [82])
                (const:SI (unspec:SI [
                            (symbol_ref:SI ("errno") [flags 0x40]  <var_decl 0x768d334c3b40 errno>)
                        ] UNSPEC_GOT))) [3  S4 A8])) "lib/dup.c":10:1 75 {*movsi_internal}
     (nil))
(insn 22 21 23 4 (set (mem/c:SI (reg/f:SI 0 ax [90]) [2 errno+0 S4 A32])
        (reg:SI 2 cx [orig:83 _1 ] [83])) "lib/dup.c":10:1 75 {*movsi_internal}
     (nil))
(insn 23 22 24 4 (set (reg:SI 0 ax [orig:84 _2 ] [84])
        (const_int -1 [0xffffffffffffffff])) "lib/dup.c":10:1 75 {*movsi_internal}
     (nil))
(code_label 24 23 25 5 3 (nil) [1 uses])
(note 25 24 31 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 31 25 37 5 (use (reg/i:SI 0 ax)) "lib/dup.c":10:1 -1
     (nil))
(note 37 31 0 NOTE_INSN_DELETED)
