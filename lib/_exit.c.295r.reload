
;; Function _exit (_exit, funcdef_no=0, decl_uid=1089, cgraph_uid=1, symbol_order=0)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=4, prev_offset=0)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r {*set_got}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
            1 Small class reload: reject+=3
          alt=0,overall=9,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 7:  (0) a  (1) b
      Creating newreg=86 from oldreg=84, assigning class BREG to r86
    7: {asm_operands;clobber flags:CC;}
      REG_DEAD r84:SI
      REG_DEAD r83:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
   14: r86:SI=r84:SI

	   Spilling non-eliminable hard regs: 7

********** Inheritance #1: **********

EBB 2 3

********** Pseudo live ranges #1: **********

  BB 3
   Insn 11: point = 0, n_alt = -1
  BB 2
   Insn 7: point = 0, n_alt = 0
   Insn 14: point = 1, n_alt = -2
	Hard reg 1 is preferable by r86 with profit 1000
   Insn 6: point = 3, n_alt = 0
   Insn 5: point = 4, n_alt = 0
   Insn 12: point = 5, n_alt = 0
 r82: [5..5]
 r83: [0..4]
 r84: [2..3]
 r86: [0..1]
Compressing live ranges: from 6 to 5 - 83%
Ranges after the compression:
 r82: [4..4]
 r83: [0..3]
 r84: [2..3]
 r86: [0..1]

********** Assignment #1: **********

	 Assigning to 86 (cl=BREG, orig=84, freq=2000, tfirst=86, tfreq=2000)...
	   Assign 3 to reload r86 (freq=2000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=4)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-4, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=8)
Can eliminate 16 to 6 (offset=4, prev_offset=0)
Can eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=-4, prev_offset=0)
changing reg in insn 12
changing reg in insn 5
changing reg in insn 7
changing reg in insn 6
starting the processing of deferred insns
ending the processing of deferred insns


_exit

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 43 [r15] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 7 [sp]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0 [ax] 1 [dx] 3 [bx] 17 [flags]
;;  ref usage 	r0={3d,1u} r1={2d,1u} r2={1d} r3={1d,1u} r7={1d,4u} r17={2d} 
;;    total ref usage 17{10d,7u,0e} in 6{6 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 12 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 12 3 2 2 (parallel [
            (set (reg:SI 0 ax [82])
                (unspec:SI [
                        (const_int 0 [0])
                    ] UNSPEC_SET_GOT))
            (clobber (reg:CC 17 flags))
        ]) 846 {*set_got}
     (expr_list:REG_CFA_FLUSH_QUEUE (nil)
        (nil)))
(note 2 12 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:SI 0 ax [83])
        (const_int 1 [0x1])) "lib/_exit.c":12:5 75 {*movsi_internal}
     (nil))
(insn 6 5 14 2 (set (reg:SI 1 dx [84])
        (mem/c:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [1 exit_code+0 S4 A32])) "lib/_exit.c":12:5 75 {*movsi_internal}
     (nil))
(insn 14 6 7 2 (set (reg:SI 3 bx [84])
        (reg:SI 1 dx [84])) "lib/_exit.c":12:5 75 {*movsi_internal}
     (nil))
(insn 7 14 10 2 (parallel [
            (asm_operands/v ("int $0x80") ("") 0 [
                    (reg:SI 0 ax [83])
                    (reg:SI 3 bx [84])
                ]
                 [
                    (asm_input:SI ("a") lib/_exit.c:12)
                    (asm_input:SI ("b") lib/_exit.c:12)
                ]
                 [] lib/_exit.c:12)
            (clobber (reg:CC 17 flags))
        ]) "lib/_exit.c":12:5 -1
     (nil))
(note 10 7 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 13 3 (const_int 0 [0]) "lib/_exit.c":13:1 843 {nop}
     (nil))
(note 13 11 0 NOTE_INSN_DELETED)
